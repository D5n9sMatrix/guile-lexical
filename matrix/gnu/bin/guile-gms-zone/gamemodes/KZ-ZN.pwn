#include <a_samp>
#undef	 MAX_PLAYERS
#define	 MAX_PLAYERS (200)
#define	YSI_YES_HEAP_MALLOC
#include <YSI_Coding\y_timers>
#include <a_mysql>
#include <a_zones>
#include <profiler>
#include <crashdetect>
#include <g_cars>
#include <sscanf2>
#include <streamer>
#include <yom_buttons>
#include <vfunc>
#include <progress2>
#include <mSelection>
#include <pause>
#include <SpeedVehicle>
#include <Pawn.CMD>
#include <Pawn.Regex>
#include <td-string-width>
//#include <nex-ac>

//	======================================	Limites		===============================//
#define   	MAX_OBJETOS 	 	10
#define   	MAX_OBJETOS_USERS   7
#define     MAX_PCASAS          3
#define     MAX_WEPTINTS     	11
#define  	MAX_NPC_ROBOS       200
#define  	MAX_T				100
#define 	MAX_TEXTDRAWS       250
#define		MAX_REPORTS         250
#define		MAX_BANDAS          200
#define		SCM					SendClientMessage
#define  	Mensaje 			SendClientMessage
#define  	MAX_MARIHUANA       200
#define		MAX_PROPIEDADES     1500
#define 	MAX_PLAYER_TOYS  	4
#define		MAX_GARAGES         7
#define 	MAX_ENCARGOS 		8
#define 	MAX_FABRICAS        13
#define     MAX_CASAS_ROBO      15
#define     MAX_LISTITEMS       300
#define 	MAX_PEDIDOS 		300
#define     TUNINGSHOP    		510
#define		DEBUG_GM   			0
#define     MAX_OBJETOS_T 		(150)
#define     OBJ_ARMA  	 		(1)
#define 	NMusica             360
#define     MAX_DROPS_BP         100

//	====================================  Defines   ===================================== //

#define  	SPEED_CONTROLS      000.1
#define 	INVALID_REPORT_ID 	-1
#define 	DH_TIPO_HOSPITAL    (1)
#define 	DH_TIPO_COMISARIA   (2)
#define 	DH_TIPO_PIZZERIA    (3)
#define 	DH_TIPO_TIENDA      (4)
#define 	DH_TIPO_BANCO       (5)
#define 	DH_TIPO_24/7        (6)
#define 	DH_TIPO_NORMAL      (7)
#define 	DH_TIPO_MINA        (8)
#define 	DH_TIPO_ESTADIO     (9)
#define     DH_TIPO_LOVE        (10)
#define     DH_TIPO_SPRAY	    (11)
#define     INVALID_TOY_ID      19382
#define		MAX_SELECTORS       (6)
#define     Button_Close        "X"
#define     RangoBarrerasTren   150.0
#define     RangoSonidoPlayer   55.0
#define 	TD_NOTIFICATION_LETTER_X 0.291666
#define 	TD_NOTIFICATION_LETTER_Y 1.250000

//==================================   CONEXIÓN MYSQL   ==================================//

#define HOST_DB "89.40.6.195" //HOST
#define USER_DB "u5_sRGowiHTiU" //USER DEL HOST
#define SELE_DB "s5_prueba"//Y LA SELECCION
#define PASS_DB "q+oj^0CJEZOU+Av7pcXcn!67"//CONTRASEÑA
//======================================================================================//
#define SERVER_COIN "RZ"
#define SERVER_COIN2 "RootCoins"
#define SERVER_NAME ""SERVER_NAME2" Roleplay"
#define SERVER_NAME2 "RootZone"
#define RCON_PSSWRD "cambiame"
#define EMISORA_URL ""
#define SERVER_VERSION "v1.1"
#define DIALOG_CAPTION	"{FFFF04}"SERVER_NAME2""

//===================================    SONIDOS     ====================================//

#define AUDIO_BALDE "sonidos.imgtemporal.club/AguaBalde.mp3"
#define AUDIO_REGAR "sonidos.imgtemporal.club/Agua.mp3"
#define AUDIO_CORTAR "sonidos.imgtemporal.club/Cortar.mp3"
#define AUDIO_LOGRO "sonidos.imgtemporal.club/Logro.mp3"
#define AUDIO_DESTORNILLADOR "sonidos.imgtemporal.club/Destornillador.mp3"
#define AUDIO_CAMPANAS "sonidos.imgtemporal.club/Campanas.mp3"
#define AUDIO_BARRETA "sonidos.imgtemporal.club/Barreta.mp3"
#define AUDIO_ALARMA "sonidos.imgtemporal.club/Alarma.mp3"
#define AUDIO_GOLPES "sonidos.imgtemporal.club/Golpes.mp3"

//============================   FIN DE LA CONFIGURACIÓN   ==============================//

#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif

//===================================    COLORES     ====================================//

#define     DEFAULT_COLOR       0xFFFFFF00
#define 	COLOR_NARANJA		0xff9c00FF
#define 	COLOR_SEIS 			0x000000FF
#define 	COLOR_NPCNORMAL     0xFFFFFF00
#define 	COLORCARGO0         0xFFFFFF00
#define 	COLORCARGO1         0xFFFFFFFF
#define 	COLORCARGO2         0xFFC600FF
#define 	COLOR_MILICIA 		0x68CE4900
#define 	COLORCARGO3         0xFFA200FF
#define 	COLORCARGO4         0xFF8400FF
#define 	COLORCARGO5         0xFF5A00FF
#define 	COLORCARGO6         0xFF1E00FF
#define 	COLORCARGO7         0x00FF00FF
#define 	COLORABATIDO        0x00FF3BFF
#define     COLOR_SAMP          0xafc0d3FF
#define 	COLOR_VERDECLARO    0x7636B2FF
#define 	COLOR_WHITE         0xFFFFFF00
#define 	COLOR_BLANCO        0xFFFFFF00
#define 	COLOR_MEGAPHONE 	0x3399FF00
#define 	COLOR_POLICIA       0x3399FF00
#define 	COLOR_POLICIAREF    0x3399FFFF
#define 	COLOR_MILITAREF		0x68CE4900
#define		COLOR_GRAD1 		0xB4B5B7FF
#define 	COLOR_GRAD2         0xBFC0C2FF
#define 	COLOR_GRAD3 		0xCBCCCEFF
#define 	COLOR_GRAD4 		0xD8D8D8FF
#define 	COLOR_GRAD5 		0xE3E3E3FF
#define 	COLOR_GRAD6 		0xF0F0F0FF
#define     COLOR_COMBATE       0xAFAFAFAA
#define 	COLOR_ORANGE 		0xFF7F00FF
#define 	COLOR_GREEN3        0x9EC73D00
#define 	TEAM_BLUE_COLOR 	0x3399FF00
#define 	COLOR_FADE1 		0xE6E6E6E6
#define 	COLOR_FADE2 		0xC8C8C8C8
#define 	COLOR_PENE			0xFFFFFFFF
#define		c0_color			0xFFFFFF00
#define		c1_color			0xFFFDBAFF
#define		c2_color			0xFFC600FF
#define		c3_color			0xFFA200FF
#define		c4_color			0xFF8400FF
#define		c5_color			0xFF5A00FF
#define		c6_color			0xFF1E00FF
#define		c7_color			0x00FF00FF    
#define 	COLOR_FADE3 		0xAAAAAAAA
#define 	COLOR_FADE4 		0x8C8C8C8C
#define 	COLOR_FADE5 		0x6E6E6E6E
#define 	COLOR_GREY          0xAFAFAFAA
#define 	COLOR_DORADO		0xdabb3eFF
#define 	COLOR_YELLOW        0xDBED15FF
#define		COLOR_AMARILLO      0xFFFF00FF
#define 	COLOR_ROJO 			0xEB0000FF
#define 	Hablar              0xE6E6E6E6
#define 	Hablar2             0xC8C8C8C8
#define 	Hablar3             0xAAAAAAAA
#define 	Hablar4             0x8C8C8C8C
#define 	Hablar5             0x6E6E6E6E
#define 	CHAT                0xE6E6E6E6
#define 	CHAT2               0xC8C8C8C8
#define 	CHAT3               0xAAAAAAAA
#define 	CHAT4               0x8C8C8C8C
#define 	CHAT5               0x6E6E6E6E
#define		COLOR_AZUL          0x00FAFFFF
#define 	COLOR_MUTE	        0xAA3333AA
#define 	COLOR_ADMIN 		0x6806C5FF
#define 	COLOR_DEFAULT       0xFFFFFF00
#define 	COLOR_DORADOV		0xdabb3e00
#define		COLOR_VERDE2		0x00FF00FF
#define		COLOR_RED           0xEE0000FF
#define 	COLOR_AMARILLO2     0xF4FA58FF
#define     COLOR_CHEAT         0xF0525FFF
//
#define     CO_LOG 				"{FF9E00}"
//
#define     CO_ROJO             "{f21111}"

//===================================    MACROS     =====================================//

#define 	GetVehicleName(%0) 	NombreAuto[GetVehicleModel(%0)-400]
#define		segundos(%0) 		(1000 * %0)
#define  	minutos(%0) 		(1000 * %0 * 60)
#define 	A_Format(%1,   		format(%1,sizeof(%1),
#define     Loop(%0,%1,%2)  	for(new %0 = %2; %0 < %1; %0++)
#define		horas(%0) 			(1000 * %0 * 60 * 60)
#define		PlayerToPoint(%1,%2,%3,%4,%5)  	IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define		funcion%0(%1)					forward %0(%1); public %0(%1)
#define 	GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)
#define 	PlayerBucle(%1) for(new %1; %1<MAX_PLAYERS; %1++)

//=====================================    NEWS     =====================================//
new Mensajes[][] =
{
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}¿Te interesa donar algo para el servidor? Contacta a {f21111}Dark"},
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}Como creo una banda? {f21111}/gps >> {FFFFFF}Tienda "SERVER_COIN"."},
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}Para estar seguro puedes guardar tu cuenta? {f21111}/gcuenta."},
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}¿Quieres hacer alguna compra? {f21111}entra al discord."},
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}El discord de el servidor es {f21111}https://discord.gg/DcZmpwU45q."},
    {"{f21111}["SERVER_COIN":RP]: {FFFFFF}Como compro VIP2? >> {f21111}/GPS {FFFFFF} Tienda RZ"}

};
new JetPack[MAX_PLAYERS];
new BloquearAnuncio[MAX_PLAYERS] = 0;
new CanalAnuncios[MAX_PLAYERS];
new BloquearDC[MAX_PLAYERS];
new GLOBAL_ADMIN[300];
new CargosRobar[MAX_PLAYERS];
new PayDayRZ;
new Text:LoginTD[10];
new Text:LogoBZ[10];
//
new
	// Fabricas

	AreaQuimicos,
	FabricaMedicaID[MAX_PLAYERS],
	FabricaMedica[MAX_PLAYERS], 
	FabricaToxica[MAX_PLAYERS], 
	FABRICA_ID_DB[MAX_FABRICAS],
	Float:POS_FABRICA[MAX_FABRICAS][4],
	Float:POS_GARAJE_FABRICA[MAX_FABRICAS][4],

	// Emisoras

	Text3D:CabinasTextos[5],

	CabinasOcupadasEmisoras[5][3], 
	TieneMicrofono[MAX_PLAYERS], 
	AreaCabinas[6],
	YaEstaAbierta[40], 
	PuertaEmisora[5],
	PuertaAbiertaEmisora[5],

	// Casas de robo

	Text3D:LabelRobo[MAX_PLAYERS], 
	Text3D:EscaparLabel[12], 
	Text3D:ForzarTD[MAX_CASAS_ROBO],
	Text:BoxRobar, 
	Text:SeleccionaPuerta,
	PlayerText:RoboCasas[MAX_PLAYERS][4],

	ObjetoRobo[86], 
	PuertasRobo[13],
	ForzarCerraduraID[MAX_PLAYERS], 
	TiempoForzarCerradura[MAX_PLAYERS], 
	CasaForzada[MAX_PLAYERS],
	Forzada1,
	Forzada2,
	Forzada3,
	Forzada4,
	Forzada5,
	Forzada6,
	Forzada7,
	Forzada8,
	Forzada9,
	Forzada10,
	Forzada11,
	Forzada12,
	CasaAbierta, 
	CasaAbierta2, 
	CasaAbierta3, 
	CasaAbierta4, 
	CasaAbierta5,
	CasaAbierta6, 
	CasaAbierta7, 
	CasaAbierta8,
	CasaAbierta9,
	CasaAbierta10, 
	CasaAbierta11, 
	CasaAbierta12,

	// Actores

	IslaSeguridad,
	IslaSeguridad2,
	Hombreemisora,
	Chicataxista,
	Guardia3,
	Guardia4,
	Guardia6,
	Guardia7,
	Guardia8,
	Guardia12,
	actors[20],
	Avionista,
	Entrenador,
	Entrenador2,

	//

	TEX_CV[11], 
	VEHICLE_GRUA[MAX_PLAYERS],
	DropBackPack[MAX_DROPS_BP],
	TimeDrop[MAX_DROPS_BP],
	ALM_List[MAX_PLAYERS][15],
	ALM_Slot[MAX_PLAYERS],
	ALM_Sel[MAX_PLAYERS],
	ReporteEstado,IDReporte[MAX_PLAYERS], 
	IDReporteMensaje[MAX_PLAYERS][150],
	ListItemReportId[MAX_PLAYERS][40],
	CancelReport[MAX_PLAYERS],
	JustReported[MAX_PLAYERS],
	Slapeo[MAX_PLAYERS], 
	TimerSlap[MAX_PLAYERS],
	TimerForcep,
	DIALOG_CREATE_CREW_COLOR_String[4200],
	OBJ_T[MAX_OBJETOS_T],
	MedicoReanimo[MAX_PLAYERS],
	CeldaJugador[MAX_PLAYERS],
	
	ContadorLlenarGaso[MAX_VEHICLES] = 0,
	TimerMedico[MAX_PLAYERS],
	TimerMeca[MAX_PLAYERS],
	TimerTaxista[MAX_PLAYERS],
	AUTOS = 0,
	VirtualWorldAutos[MAX_PLAYERS],
	AlquiladoTimer,
	DineroTirado[MAX_PLAYERS][7],
	ProgresoSexoOral[MAX_PLAYERS],
	Dildo[MAX_PLAYERS],
	TimerMaria = 0,
	ValueTimerBugH[MAX_PLAYERS],
	ContadorBaile[MAX_PLAYERS],
	ProgresoProstituta[6],
	Paciente2[MAX_PLAYERS],
	BotonesAcademia[7],
	CamillaLS[MAX_PLAYERS],
	Boton_discoteca[2],
	puerta_discoteca[2],
	AREA_DISCOTEC[2],
	CamillaGA[MAX_PLAYERS],
	CamillaSF[MAX_PLAYERS],
	CamillaLV[MAX_PLAYERS],
	mapIconMedico[MAX_PLAYERS][MAX_PLAYERS],
	ContadorCBug[MAX_PLAYERS],
	RoboTienda[MAX_PLAYERS],
	valortotal[MAX_PLAYERS],
	roboTiendasObjeto[MAX_PLAYERS],
	PuedeTomarDinero[MAX_PLAYERS],
	UltimoRobado[MAX_PLAYERS],
	RoboActual[MAX_PLAYERS],

	AREA_SANCION, 
	CV_ACTIVATE, 
	AUTORIZED_POLICE_OBJECT_ID = 0, 
	EVENTO_DM,
	nuevoszonesmap[12],
	
	_Select_Status[ MAX_PLAYERS ] = false,
	_Model_Status[ MAX_PLAYERS ] = 0, 
	TiempoVida[MAX_PLAYERS],
	
	DineroCamello,
	CrackCamello,
	MedicamentosCamello,
	MarihuanaCamello,
	HeroinaCamello,
	CocainaCamello,
	Camello,
	
	Cargas[MAX_PLAYERS], 
	AceptoRepara[MAX_PLAYERS],
	combustible60,
	CheckpointTrailer[MAX_PLAYERS][8],
	CheckpointGaso[MAX_PLAYERS][7],
	EventoBolo[MAX_PLAYERS], 
	Piso[MAX_PLAYERS], 
	ResetearYaMostro[MAX_PLAYERS],
	Forzando[MAX_PLAYERS] = 0,
	TieneGPSActivo[MAX_PLAYERS],
	MensajeSinGasoEnviado[MAX_PLAYERS] = 0,
	TipoPrision[MAX_PLAYERS] = 1,
	
	LlamadaTipo[MAX_PLAYERS] = 0,
	SexoOral[MAX_PLAYERS] = -1,
	precioofertax[MAX_PLAYERS],
	MinutoLlamada[MAX_PLAYERS],
	YoLlame[MAX_PLAYERS] = 0,
	CriminalAceptado[MAX_PLAYERS],
	CLlamada[MAX_PLAYERS],
	
	TipoOferta[MAX_PLAYERS],
	LoggedYet[MAX_PLAYERS] = 0,
	SprunkOfrecido[MAX_PLAYERS], 
	Ofertante[MAX_PLAYERS],
	trailervehicle[MAX_PLAYERS],
	suicidio[MAX_PLAYERS],
	TowedCar[MAX_PLAYERS][4], 
	TimerReparar[MAX_PLAYERS],
	TimerRevisar[MAX_PLAYERS], 
	TimerRecoleccion[MAX_PLAYERS], 
	TimerDescargarCamion[MAX_PLAYERS], 
	TimerDescargarTrailer[MAX_PLAYERS],
	TimerCamionero[MAX_PLAYERS], 
	avion[3], 
	ViajeAvion[MAX_PLAYERS], 
	contadoravion = 0,
	TimerBasurero[MAX_PLAYERS], 
	PortonAbiertoCasa,
	TimerMalherido[MAX_PLAYERS], 
	TimerCombustible[MAX_PLAYERS], 
	TimerCargarCamion[MAX_PLAYERS],
	VerAdmin[MAX_PLAYERS],
	LogeoCorrecto[MAX_PLAYERS],
	TimerLuces[MAX_VEHICLES], 
	TimerLuces2[MAX_VEHICLES],
	alarmaon[MAX_VEHICLES],
	Criminal[MAX_PLAYERS],
	TieneEncargo[MAX_PLAYERS],
	TomoEncargo[MAX_PLAYERS],
	Colega[MAX_PLAYERS],
	Invito[MAX_PLAYERS],
	Invitador[MAX_PLAYERS],
	TimerDineroP[MAX_PLAYERS],
	RecienDuda[MAX_PLAYERS],
	Reportado[MAX_PLAYERS][5],
	vehaveriado[MAX_VEHICLES] = 0,
	DineroColegiala[33], 
	TiempoAvion,

	Strips[12], 
	Stripx[10], 
	EnClub[MAX_PLAYERS] = 0, 
	Bailarina1 = 0,
	Bailarina2 = 0,
	Bailarina3 = 0,
	Bailarina4 = 0,
	Bailarina5 = 0,
	Bailarina6 = 0, 
	EstaDomiciliaria[MAX_PLAYERS],
	SpecJugador[MAX_PLAYERS] = INVALID_PLAYER_ID,
	BaldeAgua[MAX_PLAYERS],
	Frecuencia[MAX_PLAYERS],
	FraseLoro[MAX_PLAYERS][70],
	asdtren[MAX_PLAYERS],
	asd[MAX_PLAYERS],
	frecuencias[9],
	EnLlamada911[MAX_PLAYERS],
	LCHAT[MAX_PLAYERS],
	AutoBuscado[MAX_PLAYERS], 
	JugadorBuscado[MAX_PLAYERS], 
	PatenteBuscada[MAX_PLAYERS][10],
	PaydayDado,Balde[MAX_VEHICLES],
	ObjExp[19], 
	ObjBox[34], 
	ObjCon[5], 
	ObjHumo1[3], 
	ObjHumo2[3],
	VerBaul[MAX_PLAYERS],
	Objeto[MAX_PLAYERS],
	Avisos[MAX_PLAYERS],
	reportar[MAX_PLAYERS],
	
	EnPatrulla[MAX_PLAYERS],
	Logeando[MAX_PLAYERS],
    TimerTxtMarcelo,
	RecorridoBasu[MAX_PLAYERS],
	CargandoC[MAX_PLAYERS],
	ExpObj, 
	BoxObj, 
	ConObj, 
	Humo1Ojb, 
	Humo2Ojb,
	BotonesACA[7],
	iVehicleObjective[MAX_VEHICLES][2],
	PuertasLVPD[3],
	PuertasACA[7],
	Localizando[MAX_PLAYERS],
	Monto[MAX_PLAYERS],
	Ficha[MAX_PLAYERS],
    npctoggle = 0,
	AvisosAuto[MAX_PLAYERS],
	Mecanico[MAX_PLAYERS],
	MConductor[MAX_PLAYERS],
	EnAuto[MAX_PLAYERS],
	RopaMeca[MAX_PLAYERS],
	Bidon[MAX_PLAYERS],
	Baul[MAX_VEHICLES],
	llenado[MAX_VEHICLES],
	Muriendo[MAX_PLAYERS],
	LlamadaTaxi[MAX_PLAYERS],
	EnTaxi[MAX_PLAYERS],
	CanalDudas[MAX_PLAYERS],
	Oficial[MAX_PLAYERS],
	RopaMedi[MAX_PLAYERS],
	RopaBasu[MAX_PLAYERS],
	Capo[MAX_VEHICLES],
	BajandoV[MAX_PLAYERS],
	Bajando[MAX_PLAYERS],
	MRepuestos[MAX_PLAYERS],
	PBasura[MAX_PLAYERS],
	Companero[MAX_PLAYERS],
	recogiendo[MAX_PLAYERS],
	TM[MAX_PLAYERS],
	Taxista[MAX_PLAYERS],
	Pasajero[MAX_PLAYERS],

	TrailerJob[MAX_PLAYERS],
	timerjob[MAX_PLAYERS],
	timerjob2[MAX_PLAYERS],
	RutaTrailerZone[69],
	MySQL:handle_db,

	LlamadaMeca[MAX_PLAYERS],
	ResponderMeca[MAX_PLAYERS],
	ResponderTaxi[MAX_PLAYERS],
	ResponderMedi[MAX_PLAYERS],
	TelefonoEstado[MAX_PLAYERS],
	tviaje[MAX_PLAYERS],
	tcarga[MAX_PLAYERS],
	Hora, 
	Minuto, 
	Segundo,
	Luces[MAX_VEHICLES],
	TimerCombate[MAX_PLAYERS],
	EnCombate[MAX_PLAYERS],
	CColocado[MAX_PLAYERS],
	CagoSeguro[MAX_PLAYERS], 
	BaulPB[MAX_PLAYERS],
	HCalculo[MAX_PLAYERS],
	HCurando[MAX_PLAYERS],
	DudaTexto[MAX_PLAYERS][128], 
	EnLlamada[MAX_PLAYERS],
	NoQuitar[MAX_PLAYERS],
	Agresor[MAX_PLAYERS],
	TCV[MAX_PLAYERS],
	TCV2[MAX_PLAYERS],
	GuardaEspalda[MAX_PLAYERS],
	SpecInt[MAX_PLAYERS],
	Deposito[MAX_PLAYERS],
	YaOfrecio[MAX_PLAYERS],
	Chofer[MAX_VEHICLES] = INVALID_PLAYER_ID,
	Carga[MAX_PLAYERS],
	NombresOcultos[MAX_PLAYERS], 
	TipoCargo[MAX_PLAYERS],
	CamionCargado[MAX_VEHICLES] = 0,
	CamionID[MAX_PLAYERS],
	Paciente[MAX_PLAYERS],
	armaofertada[MAX_PLAYERS],
	CrackOfrecidos[MAX_PLAYERS],
	PiezasOfrecidas[MAX_PLAYERS],
	EVOfrecidos[MAX_PLAYERS],
	MedicamentosOfrecidos[MAX_PLAYERS],
	MarihuanaOfrecida[MAX_PLAYERS],
	dineropedido[MAX_PLAYERS],
	ofertador[MAX_PLAYERS],
	LeOfreci[MAX_PLAYERS],
	Mats1[MAX_PLAYERS],
	Mats2[MAX_PLAYERS],
	Mats3[MAX_PLAYERS],
	MedicoCP2[MAX_PLAYERS],
	PuntoMats[MAX_PLAYERS],
	EstadoRadio[MAX_PLAYERS],
	Curando[MAX_PLAYERS],
	MedicoCP[MAX_PLAYERS],
	Mobile2[MAX_PLAYERS],
	PacienteAmbu[MAX_PLAYERS],
	Reanimado[MAX_PLAYERS],
	MarcadoMedicos[MAX_PLAYERS],
	LlamadaMedicos[MAX_PLAYERS],
	bloqueado[MAX_VEHICLES],
	alarma[MAX_VEHICLES],
	PrimerSpawn[MAX_PLAYERS] = 0,
	averiado[MAX_VEHICLES],
	Jail[MAX_PLAYERS],
	San[MAX_PLAYERS],
	barrera, 
	porton, 
	porton1,
	porton2,
	porton3,
	puerta_1, 
	puerta_2, 
	puerta_3, 
	reja1, 
	reja2, 
	reja3, 
	reja4, 
	reja5, 
	reja6,
	Manejando[MAX_PLAYERS],
	iVehicle[MAX_PLAYERS],
	pistas[9], 
	suelo[4], 
	isla[9],
	EspacioBaul[MAX_VEHICLES][11],
	VehicleFuel[MAX_VEHICLES],
	Botones[40],
	PuertasDeBotones[40],
	Alquilador[MAX_PLAYER_NAME],
	Personas,
	PrecioSalon,
	NivelSalon,
	NombreEvento[100],
	DescriEvento[150],
	TipoEvento,
	PuertaAbierta[5],
	Puerta[5],
	Esposando[MAX_PLAYERS], 
	TimerEsposar[MAX_PLAYERS],
	Cargando2[MAX_PLAYERS] = 0,
	autos[MAX_PLAYERS],
	autos2[MAX_PLAYERS],
	autos3[MAX_PLAYERS],
	autos4[MAX_PLAYERS],
	JugadorLogeado[MAX_PLAYERS],
	YaEncendiendo[MAX_PLAYERS],
	MotorAuto[MAX_VEHICLES],
	DudaOff[MAX_PLAYERS], 
	ModoCombate,
	TieneSprunk[MAX_PLAYERS], 
	TienePorro[MAX_PLAYERS],
	TieneCerveza[MAX_PLAYERS],
	TieneVino[MAX_PLAYERS], 
	TienePizza[MAX_PLAYERS], 
	TieneAquariu[MAX_PLAYERS], 
	Contador[MAX_PLAYERS],
	Boletos[MAX_PLAYERS], 
	VWTemporal[MAX_PLAYERS], 
	llamadasonido1[MAX_PLAYERS], 
	llamadasonido2[MAX_PLAYERS],
	Specteado[MAX_PLAYERS],
	EstaEnBus[MAX_PLAYERS], 
	tipogrua[MAX_PLAYERS],
	muelles[5],
	idTimerOfertaPerdida[MAX_PLAYERS],
	idTimerTiempoVenta[MAX_PLAYERS],
	SpecVW[MAX_PLAYERS],
	LocalizarID[MAX_PLAYERS][10],
	HorasSalon,
	AdminDuty[MAX_PLAYERS],
	Verificado[MAX_PLAYERS],
	PasswordADMIN[16] = "Root2021",
    
	/*BAR`S*/

	PlayerBar:BarrasJugador[MAX_PLAYERS][3],

	/*FLOATS*/

	Float:TEST_TP = 100.0, 
	Float:TEST_SPEED_PLAYER = 60.0,
	Float:LocalizandoAuto[MAX_PLAYERS][2],
	Float:PosPDX[MAX_PLAYERS],
	Float:PosPDY[MAX_PLAYERS],
	Float:PosPDZ[MAX_PLAYERS],
	Float:CaidaTaxi[3][MAX_PLAYERS],
	Float:VidaVehiculo[MAX_VEHICLES] = 1000.0,
	Float:PosTP[MAX_PLAYERS][3],
	Float:fVehSpeed[MAX_PLAYERS],
	Float:SpecX[MAX_PLAYERS],
	Float:OldPosx[MAX_VEHICLES],
	Float:OldPosy[MAX_VEHICLES],
	Float:OldPosz[MAX_VEHICLES],
	Float:SpecY[MAX_PLAYERS],
	Float:DeathXH[MAX_PLAYERS],
	Float:DeathYH[MAX_PLAYERS],
	Float:DeathZH[MAX_PLAYERS],
	Float:DeathX[MAX_PLAYERS],
	Float:DeathY[MAX_PLAYERS],
	Float:DeathZ[MAX_PLAYERS], 
	Float:PuntoBaX[MAX_PLAYERS], 
	Float:PuntoBaY[MAX_PLAYERS], 
	Float:PuntoBaZ[MAX_PLAYERS],
	Float:PuntoBaA[MAX_PLAYERS],
	Float:PuntoCX[MAX_PLAYERS], 
	Float:PuntoCY[MAX_PLAYERS], 
	Float:PuntoCZ[MAX_PLAYERS], 
	Float:PuntoTraX[MAX_PLAYERS], 
	Float:PuntoTraY[MAX_PLAYERS], 
	Float:PuntoTraZ[MAX_PLAYERS],
	Float:PuntoTraileroX[MAX_PLAYERS],
	Float:PuntoTraileroY[MAX_PLAYERS],
	Float:PuntoTraileroZ[MAX_PLAYERS],
	Float:SpecZ[MAX_PLAYERS],

	/*TEXT`S*/

	Text:Territorio_TD[2],
	Text:EquisCerrar,
	Text:MapaLateral[4],
	Text:FranjaCriminal,
	Text:Sangre2,
	Text:MisionCriminal[MAX_ENCARGOS],
	Text:MisionColega[MAX_ENCARGOS],
	Text:TiempoMision[MAX_ENCARGOS],
	Text:Sangre,
	Text:Cuadroputi, 
	Text:Cuadroputi1, 
	Text:PuticlubMedia,
	Text:PuticlubAlta,
	Text:FlechasArribaPuti, 
	Text:FlechasArribaPuti2, 
	Text:Completonegro, 
	Text:LuegoDe,
	Text:NewPlayer[3],
	Text:TAXIMET,
	Text:TAXIMET3,
	Text:TAXIMET4,
	Text:AlertaRefuerzos[5],
	Text3D:Label_OBJ_T[MAX_OBJETOS_T],
	Text3D:TextoSalon,
	Text3D:TextoSalon2,
	Text3D:TextBot[10],
	PlayerText:Radly[MAX_PLAYERS],
	PlayerText:ContadorVelocimetro[MAX_PLAYERS][2],
	PlayerText:F_0[MAX_PLAYERS],
	PlayerText:F_1[MAX_PLAYERS],
	PlayerText:F_2[MAX_PLAYERS],
	PlayerText:FUELICON[MAX_PLAYERS],
	PlayerText:H_0[MAX_PLAYERS],
	PlayerText:S_1[MAX_PLAYERS],
	PlayerText:S_2[MAX_PLAYERS],
	PlayerText:SPEEDICON[MAX_PLAYERS],
	PlayerText:VehTD[MAX_PLAYERS][4],
	PlayerText:AfinidadconX[MAX_PLAYERS],
	PlayerText:LineasPutiNivel[MAX_PLAYERS],
	PlayerText:TAXIMET2[MAX_PLAYERS],
	PlayerText:TEXTO_VEHICULOS[MAX_PLAYERS],

	/*MODELS*/

	Helrp = mS_INVALID_LISTID,
	barp = mS_INVALID_LISTID,
	Motosrp = mS_INVALID_LISTID,
	vehrp = mS_INVALID_LISTID,
	RopaHombre = mS_INVALID_LISTID,
	RopaMujer = mS_INVALID_LISTID,
	RopaHombreEZ = mS_INVALID_LISTID,
	RopaMujerEZ = mS_INVALID_LISTID,
	Prendas = mS_INVALID_LISTID,
	PrendasVIP = mS_INVALID_LISTID,
	

	/*BOOLS*/

	bool:autosSpawned[MAX_PLAYERS][4],
	bool:PayDayActive = false,
	bool:EnPrueba[MAX_PLAYERS],
	bool:PruebaOnline[MAX_PLAYERS],
	bool:Alquilado,
	bool:PermisoSalon[MAX_PLAYERS],
	bool:Boleto[MAX_PLAYERS],
	bool:Escuchando[MAX_PLAYERS];

static door1, door2, door3, door4, engine, lights, alarm, doors, bonnet, boot, objective,controls[12];




new Float:EstacionamientoMSpawn[][4] =
{
    {1629.7603, -1085.0627, 23.7020, -90.0000},
	{1629.8726, -1089.5847, 23.7020, -90.0000},
	{1629.9933, -1093.9872, 23.7020, -90.0000},
	{1630.2021, -1098.5361, 23.7020, -90.0000},
	{1630.0377, -1102.8728, 23.7020, -90.0000},
	{1630.1676, -1107.3983, 23.7020, -90.0000},
	{1621.5059, -1107.2893, 23.7020, 90.0000},
	{1621.3334, -1102.8417, 23.7020, 90.0000},
	{1621.3013, -1098.3984, 23.7020, 90.0000},
	{1621.4552, -1093.9615, 23.7020, 90.0000},
	{1621.4932, -1089.4003, 23.7020, 90.0000},
	{1621.2521, -1085.1614, 23.7020, 90.0000},
	{1649.1069, -1080.0909, 23.7020, 90.0000},
	{1649.2039, -1084.5542, 23.7020, 90.0000},
	{1648.9971, -1089.2758, 23.7020, 90.0000},
	{1648.8999, -1093.5101, 23.7020, 90.0000},
	{1648.9272, -1097.9766, 23.7020, 90.0000},
	{1648.9701, -1102.5442, 23.7020, 90.0000},
	{1648.7178, -1106.9977, 23.7020, 90.0000},
	{1648.7660, -1111.5258, 23.7020, 90.0000},
	{1657.8805, -1111.4753, 23.7020, -90.0000},
	{1657.7009, -1107.1802, 23.7020, -90.0000},
	{1657.6588, -1102.5519, 23.7020, -90.0000},
	{1657.6422, -1098.2057, 23.7020, -90.0000},
	{1657.5983, -1093.6257, 23.7020, -90.0000},
	{1657.5360, -1089.1660, 23.7020, -90.0000},
	{1657.5928, -1084.6439, 23.7020, -90.0000},
	{1657.6501, -1080.1622, 23.7020, -90.0000},
	{1675.8192, -1097.6628, 23.7020, -90.0000},
	{1675.6360, -1102.5070, 23.7020, -90.0000},
	{1675.5873, -1107.0029, 23.7020, -90.0000},
	{1675.5577, -1111.2994, 23.7020, -90.0000},
	{1675.4698, -1116.0515, 23.7020, -90.0000},
	{1675.4243, -1120.4714, 23.7020, -90.0000},
	{1675.4198, -1124.8524, 23.7020, -90.0000},
	{1675.4126, -1129.3324, 23.7020, -90.0000}
};

new Float:PointVehicleTunnin[][] =
{
    {2529.9705,-2130.6646, 14.0718, 180.3844},
	{2433.4023,-2075.8101, 14.0330, 0.5013},
	{2442.5261,-2075.9231, 14.0251, 0.9757},
	{2451.4990,-2076.1326, 14.0130, 1.7896},
	{2460.1289,-2075.8459, 14.0162, 1.7301},
	{2470.3279,-2076.4805, 13.9746, 358.7488},
	{2478.4604,-2076.2974, 13.9947, 1.6517},
	{2488.1826,-2076.3633, 13.9711, 359.0942},
	{2497.0283,-2076.0813, 14.0369, 359.7426},
	{2507.3669,-2077.2346, 13.9696, 0.6985},
	{2516.0591,-2075.9822, 13.9573, 0.3625},
	{2525.0000,-2075.8359, 14.0311, 1.7985},
	{2534.1138,-2076.0564, 13.9595, 359.4238},
	{2518.8757,-2106.3787, 13.9925, 232.9586},
	{2514.0742,-2113.9644, 14.0135, 233.6914},
	{2508.0378,-2120.7344, 14.0033, 234.1706},
	{2503.3491,-2128.1262, 14.0154, 236.9558},
	{2490.9316,-2134.3743, 13.9978, 179.3502},
	{2482.2273,-2134.1653, 13.9768, 180.5831},
	{2472.7983,-2134.8665, 14.0185, 180.0716},
	{2464.2034,-2134.7051, 14.0168, 180.5751},
	{2451.6047,-2128.0063, 14.0131, 123.7748},
	{2446.7388,-2120.6560, 14.0138, 123.6324},
	{2441.7705,-2112.9905, 14.0162, 123.5111},
	{2436.5396,-2105.4717, 14.0174, 124.5598},
	{2535.8062,-2111.5310,13.7494,178.9868}

};
/*new Float:PointVehicleTunnin2[][] =
{
	{1219.0669,772.9719, 11.4345, 90.2636},
	{1219.3602,762.5387, 11.4601, 92.5064},
	{1262.7455,747.7952, 11.3823, 182.3481},
	{1273.3013,748.2339, 11.3828, 181.2801},
	{1318.7883,764.7527, 11.4127, 271.4837},
	{1318.2219,775.1685, 11.4138, 271.3616}
};*/	
enum GRUA_P
{
	Tipo,
	ID_VEH,

}
new INFO_GRUA[MAX_PLAYERS][GRUA_P];

new Float:Concesionaria_Spawn_Positions[][] =
{
	{1656.1246,-1883.6947,13.1237,359.9166}, // Verdant blufs
	{557.6544,-1260.8588,16.8133,17.7973},   // Rodeo
	{2127.5342,-1123.4701,24.9874,3.9086},   // Las colinas
	{-1989.7445,288.3349,33.9223,90.0000},   // Downtown
	{1494.1937,-1746.6610,13.5469,0.0800}    // Pershing Square
};

static Float:compraMochila[][3] =
{
	{1208.3823,-1552.8634,13.5764}
};

static const s_TopSpeed[212] =
{
    157, 147, 186, 110, 133, 164, 110, 148, 100, 158, 129, 221, 168, 110, 105, 192, 154, 270,
    115, 149, 145, 154, 140, 99, 135, 270, 173, 165, 157, 201, 190, 130, 94, 110, 167, 0, 149,
    158, 142, 168, 136, 145, 139, 126, 110, 164, 270, 270, 111, 0, 0, 193, 270, 60, 135, 157,
    106, 95, 157, 136, 270, 160, 111, 142, 145, 145, 147, 140, 144, 270, 157, 110, 190, 190,
    149, 173, 270, 186, 117, 140, 184, 73, 156, 122, 190, 99, 64, 270, 270, 139, 157, 149, 140,
    270, 214, 176, 162, 270, 108, 123, 140, 145, 216, 216, 173, 140, 179, 166, 108, 79, 101, 270,
    270, 270, 120, 142, 157, 157, 164, 270, 270, 160, 176, 151, 130, 160, 158, 149, 176, 149, 60,
    70, 110, 167, 168, 158, 173, 0, 0, 270, 149, 203, 164, 151, 150, 147, 149, 142, 270, 153, 145,
    157, 121, 270, 144, 158, 113, 113, 156, 178, 169, 154, 178, 270, 145, 165, 160, 173, 146, 0, 0,
    93, 60, 110, 60, 158, 158, 270, 130, 158, 153, 151, 136, 85, 0, 153, 142, 165, 108, 162, 0, 0,
    270, 270, 130, 190, 175, 175, 175, 158, 151, 110, 169, 171, 148, 152, 0, 0, 0, 108, 0, 0
};

static const GunObjectIDs[200] =
{
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

static const Float:ForzarCerradurasPositions[][3]=
{
	{-2277.1763,-9.9763,38.2523},
	{1344.5836,2610.3254,11.5494},
	{932.2239,1973.6547,11.6083},
	{-2394.4846,-14.2417,35.9529},
	{2373.8467,-1139.5442,30.0510},
	{-2727.5435,-50.9449,7.0301},
	{-2727.5054,-155.6168,7.2009},
	{2485.8654,-1998.0233,14.0340},
	{2067.4014,695.7449,11.4562},
	{-1448.9193,2647.9514,56.4912},
	{1844.8607,770.7580,11.4637},
	{1762.8298,-2101.1572,13.9916}
};
static const Float:RobarObjetoPositions[][3]=
{
	{-2279.4539,-15.9261,38.2993},
 	{1356.3865,2612.5457,11.6759},
	{940.9933,1975.9020,11.6227},
	{-2395.0447,-17.9672,36.0232},
	{2369.2874,-1129.8945,30.0510},
	{-2730.4619,-58.3389,7.0453},
	{-2731.8608,-163.3383,7.2174},
	{-2628.6865,-178.5047,7.1544},
	{2480.9312,-1990.4189,14.0341},
	{2063.2168,696.6254,11.5381},
	{-1449.5641,2644.4102,56.5616},
	{1843.1997,766.9429,11.5545},
	{1757.4739,-2092.9973,13.9916},
	{1676.9354,2612.3923,11.5559}
};
new Float:Saltos[][3] =
{
	{135.1563,2349.8230,1949.2449,},
	{131.8110,2350.3130,1949.1318},
	{131.7475,2344.1021,1950.5651},
	{135.2510,2344.7883,1950.4067},
	{133.2603,2347.3042,1949.8262},
	{133.5275,2342.2461,1950.9934}
};
static const Float:LlenarBaldePos[][3]=
{
	{-1113.1726,-1624.8458,76.3739},{-1085.6027,-1233.0909,129.2188},{2182.2854,-1204.4094,1049.0234},{2500.0156,-1709.0613,1014.7422},{2373.8501,-1132.3589,1050.8750},{2312.9299,-1009.5996,1050.2109},{2336.7605,-1139.1429,1050.7031},{2236.4453,-1068.4406,1049.0234},{2278.4763,-1135.3755,1050.8984},{2268.3149,-1138.6337,1050.6328},{2337.7563,-1067.6060,1049.0310},{244.8778,1190.7170,1080.2578},{19.1101,1349.6440,1084.3812},{233.5327,1246.1370,1082.1406},{218.8409,1292.0800,1082.1406},{267.2342,1292.5289,1080.2578},{228.0432,1159.1633,1082.6094},{264.3879,1246.8861,1084.2578},{378.4278,1455.1125,1080.1875},{320.3961,1480.1434,1084.4397},{31.5584,1405.5405,1084.4297},{-265.2631,1448.9730,1084.3672},{-284.1034,1477.7433,1084.3812},{-48.2810,1397.8523,1084.4297},{78.1618,1337.4204,1083.8672},{2320.4250,-1209.8008,1049.0234},{237.7081,1119.7861,1080.9922},{239.1131,1018.1585,1084.0267},{302.3803,1480.1520,1080.2578},{1280.3440,-808.9535,1085.6328},{414.3080,2535.4280,10.0000}, {333.6844,1122.8926,1083.8903}
};
new Float:ServicioMedicoPos[3][6] =
{
	{1148.0066,-1322.5038,-10.7922},{-2713.3152,636.8893,1385.6547},{1242.1221,-809.4786,1164.2759}
};

#define MAX_CURRICULUMS 80
enum cv_info
{
	bool:cv_VALID,
	cv_NAME[24],
	cv_DBPLAYER,
	cv_ESTADO,          //0 = Enviado, 1 = Aprovado , 2 = Rechazado
	cv_RESPUESTA_1[145],
	cv_RESPUESTA_2[145],
	cv_RESPUESTA_3[145],
	cv_RESPUESTA_4[145],
	cv_RESPUESTA_5[145],
	cv_RESPUESTA_6[145],
	cv_RESPUESTA_7[145],
	cv_RESPUESTA_8[145],
	cv_RESPUESTA_9[145]
}
new CURRICULUM_INFO[MAX_CURRICULUMS][cv_info];

enum EmiInfo
{
	TieneEmisora,
	EmisoraID,
	NombreEmisora[90],
	URLEmisora[128],
	TransEmisora,
	CabinaOcupada,
}
new Emisoras[MAX_PLAYERS][EmiInfo];

enum disc_info
{
	bool:d_USED,
	d_DJ,
	d_URL[128]
};
new DISCOTEC_INFO[disc_info];

#define MAX_PHONE_CONTACTS	20
enum Phone_Book_Enum
{
	phone_book_contact_VALID,
	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER
};
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum IRB
{
	iID,
	iPosX,
	iPosY,
	iPosZ,
	iPosX1,
	iPosY1,
	iPosZ1,
	iModelo,
	iStatus,
	iCasaRobo
}

enum dialogs
{
	DIALOG_INFO,
	LOGIN,
	TUNING_MENU_RUEDAS,
	INFOMEDICO,
	REGISTRO,
	BUSCARCOCHE,
	DIALOG_MILI,
	MERCADO_NEGRO,
	ARMAS_PD,
    Twiiter,
	INVENTARIO,
	CHALECOS_MENU,
	DIALOG_COMANDOS,
	SEXO,
	DIALOG_UNIFORMES2,
	SEXO_1,
	EDAD,
	GPS,
	GPS1,
	GPS2,
	GPS3,
	GPS4,
	GPS5,
	GPS6,
	PRODUCTOS,
	TRABAJOS,
	INDOMEDICO,
	CAMIOND,
	BANCO,
	BANCO1,
	BANCO2,
	BANCO3,
	BANCO4,
	VENDERAUTO,
	VENDERAUTO2,
	BUSCARCOCHE2,
	BUSCARCOCHE3,
	BUSCARCOCHE4,
	VENDERCASA,
	VENDERCASA1,
	ESTANTE,
	REGLAS,
	REGLAS2,
	REGLAS3,
 	REGLAS4,
	GRUA,
	GRUA2,
	GRUA3,
	GRUA5,
	GRUA6,
	REGISTROOFF,
	CREPUESTOS,
	INMIGRACION,
	INFOLADRON,
	DHOSPITAL,
	BOTIQUIN,
	DEMAIL,
	DAYUDA,
	DRECARGA,
	DCONFIG,
	HERRAMIENTAS,
	INFOBASU,
	JUGUETES,
	PRODUCTOS2,
	HABILIDAD,
	DIALOG_SALON,
	SERVICIOGRUA1,
	SERVICIOGRUA2,
	SERVICIOGRUA3,
	DIALOG_PIZZA,
	DIALOG_COMPRABLANCA,
	INVITAR,
	AlquilarSalon1,
	AlquilarSalon2,
	AlquilarSalon3,
	AlquilarSalon4,
	AlquilarSalon5,
	AlquilarSalon6,
    AlquilarSalon7,
    LocalizarP,
	DIALOG_VOBJECT_MENU,
	DIALOG_VOBJECT_OBJECTS,
	DIALOG_VOBJECT_OBJECT,
	DIALOG_VOBJECT_OBJECT_CNAME,
	DIALOG_VOBJECT_OBJECT_COLORS,
	DIALOG_VOBJECT_OBJECT_COLOR,
	DIALOG_VOBJECT_OBJECT_COLOR_HEX,
	DIALOG_VOBJECT_OBJECT_CDELETE,
	DIALOG_VOBJECT_DELETE_ALL,
	DIALOG_VOBJECT_TEXT_MENU,
	DIALOG_VOBJECT_TEXT_TEXT,
	DIALOG_VOBJECT_TEXT_FONT,
	DIALOG_VOBJECT_TEXT_FONT_SIZE,
	DIALOG_VOBJECT_TEXT_FONT_COLOR,
	DIALOG_VOBJECT_COUNTRY,
	TUNING_TYPE,
	DIALOG_VOBJECT_NEON,
	REPORTSMENU,
	DSEXOO,
	CONTROLES,
	TRABAV,
	ALARMAV,
	ENTREGARSE1,
	ENTREGARSE2,
	ENTREGARSE3,
	ENTREGARSE4,
	ENTREGARSE5,
	ENTREGARSE6,
	DIALOGO_FRECUENCIAS,
	DIALOGO_GRUA,
	DIALOGO_INFO,
	DIALOGO_GRUA3,
	DIALOGO_GRUA4,
	DIALOGO_LORO,
	DIALOGO_LORO2,
	DIALOG_HELP,
	DIALOG_GENERAL,
	DIALOG_CREARARMA,
	DIALOG_ESTADISTICAS,
	DIALOG_UNIFORMES,
	DIALOG_TALLER,
	DIALOG_TALLER2,
	DIALOG_ROPA,
	D_COLOR1,
	D_COLOR2,
	CAMBIOS,
	VENDERRZ,
 	COMPRAR_PRENDA,
	ELEVADORSAPD,
	ELEVADORGARAGE,
	ELEVADORTEJADO,
	TRABAJO_MEDICO,
	DOMICILIARIA,
	DASCENSOR,
	DCLUB,
	GeoLocalization,
	INVITARCRI,
	CCCOBJETOS,
	MMEDICO,
	CVEHICULO,
	CREW_NAME,
	CONFIG_BANDA,
	CHANGE_NAME_CREW,
	VIEW_RANK_NAME,
	CHANGE_RANK_NAME,
	CHANGE_PROP_RANK,
	CREW_RANK_EDI,
	CREW_RANK_EXP,
	CREW_RANK_INV,
	CREW_MODIFY_COLOR,
	CREW_VIEW_MEMBERS,
	CREW_DELETE,
 	MENU_INVITACIONES,
	DIALOG_PLAYER_INV_DELETE_ALL,
	DIALOG_PLAYER_INV_ACEPT,
	DIALOG_FIANZA,
	DIALOG_ADMINS,
	DIALOG_ADMINS_ADD,
	DIALOG_ADMINS_ADD_2,
	DIALOG_ADMINS_2,
	DIALOG_ADMINS_3,
	D_REGALOS,
	D_REGALOS2,
	D_REGALOS3,
	D_REGALOS4,
	COMPRARRADIO,
	MENU_TIENDA,
	MENU_TIENDA_1,
	DIALOG_PHONE,
	DIALOG_PHONE_BOOK,
	DIALOG_PHONE_BOOK_ADD_NUMBER,
	DIALOG_PHONE_BOOK_ADD_NAME,
	DIALOG_PHONE_BOOK_OPTIONS,
	DIALOG_PHONE_BOOK_CHANGE_NAME,
	DIALOG_PHONE_BOOK_CONFIRM_DELET,
	DIALOG_PHONE_BOOK_DELETE_ALL,
	DIALOG_PHONE_CALL_NUMBER,
	DIALOG_PHONE_SMS_NUMBER,
	DIALOG_PHONE_SMS_MESSAGE,
	DIALOG_PHONE_BOOK_SEND_MESSAGE,
	DIALOG_TOYS,
	DIALOG_TOYS_MENU,
	DIALOG_TOYS_EDIT,
	DIALOG_TOYS_EDIT_2,
	DIALOG_CHANGE_PASS,
	DIALOG_POSTULACION,
	DIALOG_POSTULACION_1,
	DIALOG_POSTULACION_2,
	DIALOG_POSTULACION_3,
	DIALOG_POSTULACION_4,
	DIALOG_POSTULACION_5,
	DIALOG_POSTULACION_6,
	DIALOG_POSTULACION_7,
	DIALOG_POSTULACION_8,
	DIALOG_POSTULACION_9,
	DIALOG_CURRICULUMS,
	DIALOG_CURRICULUMS_1,
	DIALOG_CURRICULUMS_2,
	DIALOG_PEDIDO,
	DIALOG_PEDIDO_2,
	DIALOG_PEDIDO_PROPIEDAD,
	DIALOG_PEDIDO_NOMBRE,
	MENU_PEDIDOS,
	DIALOG_INACTIVOS,
	DIALOG_DESOCUPAR_CASAS,
	DIALOG_DESOCUPAR_FABRICAS,
	DIALOG_DESOCUPAR_FABRICAS_2,
	TIENDA_DROGAS,
	MENU_BORRAR_AUTO,
	DIALOG_ACTIVIDAD,
	DIALOG_ADMINISTRACION,
	DIALOG_EMPLEADOS,
	DIALOG_EMPLEADOS2,
	DIALOG_ARMAS_FABRICA,
	DIALOG_SACAR_ARMAS_FABRICA,
	DIALOG_CHALE_FABRICA,
	DIALOG_FABRICA_VEH,
	DIALOG_FABRICA_DESBUG,
	DIALOG_MENU_DESBAN,
	DIALOG_ACENTO,
	DIALOG_PLAYER_TOY_COLOR_1,
	DIALOG_PLAYER_TOY_COLOR_2,
	TIENDADP2,
	VCPLAYER,
 	VCPLAYER2,
	VCPLAYER3,
	VCPLAYER4,
	DIALOG_PLAYER_VEHICLES,
	DIALOG_LOC,
	DIALOG_BACKPACK,
	DIALOG_BACKPACK_ALM,
	DIALOG_BP_ALM_CANT,
	DIALOG_BP_SAC_CANT,
	DIALOG_PAINTW,
	DIALOG_CONB,
	DIALOG_REPORTAR,
	VERIFICAR_ADMIN,
	COMPRARCAMELLO,
	COMPRARCAMELLO2,
	COMPRARCRACK,
	COMPRARMARIHUANA,
	COMPRARHEROINA,
	COMPRARMEDICAMENTOS,
	COMPRARCOCAINA,
	VENDERCRACK,
	VENDERMARIHUANA,
	VENDERCOCAINA,
	VENDERMEDICAMENTOS,
	VENDERHEROINA,
	VENDERCAMELLO
}

enum INFO_VBEN
{
	IDU,//id a vender
	IDVEN,//Id usuario que vende
	PRECIO,//PRECIO A VENDER
	PMAX,//PRECIO MAXIMO
	TIPO,//Tipo de auto
	SLOT,//SLOT DEL PJ QUE VENDE
	IDV,//ID REAL VEHÍCULO
	//DATOS VEHÍCULOS
	GASOLINA,//Gasolina actual
	MODELO,//Modelo
	TRABA,//
	ALARMA,
	INTERIOR,
	SEGURO,
	MUNDO,
	PLACA[24],
	COLOR1,
	COLOR2,
	Float:XAV,
	Float:YAV,
	Float:ZAV,
	MONEDA,
	SQL
	//
};
new VEHPLAYER[MAX_PLAYERS][INFO_VBEN];

enum InformationTDN
{
    Use,
    Line,
    Text[800],
    PlayerText:TextDraw,
    Float:MinPosY,
    Float:MaxPosY,
    Hide,
    Timer
}
new TextDrawsNotification[MAX_PLAYERS][4][InformationTDN],
    counter_@[MAX_PLAYERS];

//==sistema mochila
#define BP_MAX_SLOTS (9)
#define NO_ITEM      (0)
enum backpack
{
	bDBID,
	bObjeto[BP_MAX_SLOTS],
	bCantidad[BP_MAX_SLOTS]
}
new BackPack[MAX_PLAYERS][backpack];

new COLOR_ARMA[MAX_PLAYERS];
new iWeaponTints[6] = {
    0xFF4B5320, // Army
    0xFF9EAF43, // Green
    0xFFFFAE1A, // Orange
    0xFF0073E6, // LSPD
    0xFFFF1493, // Pink
    0xFFFFD700 // Gold
};
new pCurrentWeapon[MAX_PLAYERS];

enum GPSInfo
{
	Float:GPSIconPos_X,	Float:GPSIconPos_Y,	GPSIconTipo
}
enum Maria
{
	mID,
	Owner[MAX_PLAYER_NAME],
	Status,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Time,
	Object,
	Text3D:Etiqueta,
	Created,
}
new Marihuana[MAX_MARIHUANA][Maria];

enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE
};

enum Robos
{
	rPolicia,
	rID,
	Actor,
	TiendaRobada,
	TiendaLadron,
	Float:RoboX,
	Float:RoboY,
	Float:RoboZ,
	Float:RoboA,
	RoboVW,
	RoboInt,
	RoboSkin,
	LocalidadRobo[32],
	Float:EntradaX,
	Float:EntradaY,
	Float:EntradaZ,
 	RoboProceso,
	rEnUso
}
new RoboTiendas[MAX_NPC_ROBOS][Robos];

enum O_TEXTDRAW
{
	PlayerText:_selector_objet1,
	PlayerText:_selector_objet2,
	PlayerText:_selector_objet3,
	PlayerText:_selector_objet4
};

new PlayerObjetTextDraw[ MAX_PLAYERS ][ O_TEXTDRAW ];

enum B_TEXTDRAW
{
	Text:_button_close,
 	Text:_string,
	Text:_background[ 2 ]
};

new PlayerBackGround[ B_TEXTDRAW ];

enum eInformacion
{
	eID,
	eEnUso,
	Pickup,
	Text3D:Etiqueta,
	Text3D:EtiquetaInterior,
	Dueno,
	DuenoName[MAX_PLAYER_NAME],
 	ePrecio,
	Nivel,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosA,
	Float:SalidX,
	Float:SalidY,
	Float:SalidZ,
	Float:SalidA,
	eMundoVirtual,
	eInterior
};
new Estacionamientos[MAX_GARAGES][eInformacion];

enum rankingEnum
{
    player_Score,
    player_ID
}

enum _:Trabajos
{
	T_Ninguno,
	T_Medico,
	T_Taxista,
	T_Guardaespaldas,
	T_Camionero,
	T_Armero,
	T_Mecanico,
	T_Basurero,
	T_Transportista,
	T_Ladron,
	T_Criminal,
	T_Prostituta,
	T_Trailero
}
enum IntFijoInfo
{
	Float:int_Pickup_X,	Float:int_Pickup_Y,	Float:int_Pickup_Z,	int_Tipo,	int_InteriorID,	int_Nombre[128]
}

enum IntMedicoInfo
{
	Float:int_Pickup_X,	Float:int_Pickup_Y,	Float:int_Pickup_Z,	int_Tipo, vw_Tipo, int_Nombre[128]
}
static const Float:CosecharPositions[][3] =
{
	{-31.3545,54.7022,3.1172},
	{-392.1681,-1481.9919,25.6680}
};
static const Float:VerMapasPositions[][6] =
{
	{-1589.232422, 860.018372, 7.674500, 0.000000, 0.000000, 90.000000}, //Banco San Fierro
	{2420.764404, 2280.395508, 10.619200, 0.000000, 0.000000, 0.000000}, //Banco Las Venturas
	{1451.268677, -1022.182373, 23.632813, 0.000000, 0.000000, 0.000000}, // Banco Central
	{1454.430664, -1151.711914, 23.778942, 0.000000, 0.000000, 90.000000}, // ZIP
	{-180.199707, -1621.776855, 3.327500, 0.000000, 0.000000, 90.000000}, //Basurero
	{1181.169556, -1318.203613, 13.385829, 0.000000, 0.000000, 90.000000}, //Hospital Central - ALL SAINTS GENERAL HOSPITAL
	{1714.988525, -1880.433838, 13.371250, 0.000000, 0.000000, 0.000000}, //Unity Spawn
	{1546.280151, -1670.824219, 13.366695, 0.000000, 0.000000, 90.000000}, //Comisaría Los Santos
	{1996.563110, -1454.584229, 13.359375, 0.000000, 0.000000, 90.000000}, //No recuerdo :v
	{504.550995, -1357.840698, 15.929846, 0.000000, 0.000000, 20.000000}, //pro laps
	{453.804840, -1488.212891, 30.904728, 0.000000, 0.000000, 20.000000}, //Victim
	{2222.999023, -1718.630493, 13.332771, 0.000000, 0.000000, 0.000000}, //Trabajo guardaespaldas
	{1827.712769, -1838.025513, 13.382813, 0.000000, 0.000000, 0.000000}, //24/7 Unity
	{2230.809082, -2206.128662, 13.351563, 0.000000, 0.000000, 45.000000}, //Armero
	{1635.828125, -1878.220459, 13.349934, 0.000000, 0.000000, 90.000000} //Unity
};
new VEHICLE_COLORS[256] =
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};
new RandomColors[] =
{
	0x99CC00FF, 0xFF9900FF, 0x6699CCFF, 0x0099FFFF, 0xCCCC99FF,
	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,	0xF4A460FF,
	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,	0x10DC29FF,
	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,	0x65ADEBFF,
	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,	0x3D0A4FFF,
	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,	0x057F94FF,
	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,	0x18F71FFF,
	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,	0x12D6D4FF,
	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,	0x2FD9DEFF,
	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,	0x3214AAFF,
	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,	0xDCDE3DFF,
	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,	0xD8C762FF,
	0xD8C762FF,	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,
	0xF4A460FF,	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,
	0x10DC29FF,	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,
	0x65ADEBFF,	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,
	0x3D0A4FFF,	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,
	0x057F94FF,	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,
	0x18F71FFF,	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,
	0x12D6D4FF,	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,
	0x2FD9DEFF,	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,
	0x3214AAFF,	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,
	0xDCDE3DFF,	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,
	0xD8C762FF,	0xD8C762FF
};
new Float:CamillasLS[][5] =
{
	{1161.3247,-1334.8248,-10.7922,271.2708,2.0},
	{1161.6248,-1327.0193,-10.7922,270.4997,1.0},
	{1146.0052,-1341.2516,-10.7922,93.1505,4.0},
	{1164.0238,-1334.7267,-10.7922,270.2720,2.0},
	{1167.5248,-1334.5248,-10.7922,270.6050,2.0},
	{1167.6248,-1326.8646,-10.7922,270.4997,1.0},
	{1163.6246,-1345.8657,-10.7849,268.9404,3.0},
	{1166.3246,-1345.5560,-10.7922,268.9404,3.0},
	{1168.0043,-1341.1843,-10.7922,93.0450,3.0},
	{1151.2059,-1341.3474,-10.7922,88.6033,4.0},
	{1148.9045,-1349.2318,-10.7922,89.1554,5.0},
	{1146.1086,-1349.1567,-10.7922,87.1579,5.0},
	{1148.5044,-1341.1702,-10.7922,88.9362,4.0},
	{1151.8046,-1349.2213,-10.7922,89.1554,5.0},
	{1147.1246,-1345.9316,-10.7922,276.0371,4.0},
	{1149.7246,-1345.8223,-10.7922,271.7092,4.0},
	{1162.7048,-1329.9869,-10.7922,92.4929,2.0},
	{1164.6245,-1326.8224,-10.7922,270.4997,1.0},
	{1169.0248,-1345.6031,-10.7922,272.4887,3.0}
};
new Float:CamillasSF[10][5] =
{
    {-2721.8760,605.4824,1385.6470,89.2424,2.0},
	{-2709.1360,614.9445,1385.6547,89.7947,4.0},
	{-2734.1257,616.8509,1385.6547,90.5742,3.0},
	{-2701.9238,614.8807,1385.6547,89.7947,3.0},
	{-2736.6060,605.3529,1385.6547,89.4617,1.0},
	{-2719.0046,605.4175,1385.6470,91.2399,2.0},
	{-2705.5659,614.8506,1385.6547,89.7947,4.0},
	{-2716.3760,605.4506,1385.6470,91.2399,2.0},
	{-2738.2854,616.7706,1385.6547,89.9083,3.0},
	{-2733.7061,605.1204,1385.6466,88.4629,1.0}
};
new Float:CamillasLV[][5] =
{
	{1235.7244,-808.0383,1164.2759,89.5639,1.0},
	{1250.4841,-824.1636,1167.9960,273.8879,4.0},
	{1247.0929,-827.2189,1167.9960,90.2216,5.0},
	{1249.4652,-827.2841,1167.9960,90.8875,5.0},
	{1251.7042,-827.3507,1167.9960,90.8875,5.0},
	{1248.0647,-824.2131,1167.9960,273.2220,4.0},
	{1231.5941,-813.3441,1164.2759,89.8969,1.0},
	{1245.6648,-824.1623,1164.2759,268.6747,2.0},
	{1245.6635,-824.1140,1167.9960,268.5611,4.0},
	{1250.5448,-824.2269,1164.2759,272.0038,2.0},
	{1231.6140,-808.1431,1164.2759,88.8981,1.0},
	{1244.9840,-827.2869,1164.2759,90.3352,3.0},
	{1249.4642,-827.1910,1164.2759,88.6706,3.0},
    {1251.7042,-827.1281,1164.2759,88.6706,3.0},
	{1248.0647,-824.1572,1164.2759,269.3405,2.0},
	{1233.7240,-808.1099,1164.2759,88.5652,1.0},
	{1243.5237,-824.3701,1164.2759,273.3355,2.0},
	{1247.0841,-827.2117,1164.2759,92.6656,3.0},
	{1243.4446,-824.2711,1167.9960,272.2232,4.0},
	{1244.9845,-827.3311,1167.9960,90.5546,5.0}
};
static const Float:HPCPos[][4]=
{
	{1177.9380,-1319.6550,14.0954,270.0000},
	{1177.0137,-1320.7273,14.0497,270.0000},
	{1178.2452,-1321.6278,14.1105,270.0000},
	{1176.6415,-1323.2949,14.0314,270.0000},
	{1175.0815,-1326.7074,14.5938,270.0000},
	{1177.5160,-1327.5901,14.0745,270.0000},
	{1177.3823,-1325.9209,14.0679,270.0000},
	{1178.8015,-1325.1271,14.1380,270.0000},
	{1179.4799,-1322.5624,14.1715,270.0000},
	{1177.7886,-1328.0889,14.0880,270.0000},
	{1178.7125,-1326.8868,14.1336,270.0000},
	{1176.3210,-1326.2289,14.0155,270.0000},
	{1174.6530,-1324.7268,14.7891,270.0000},
    {1174.9304,-1321.0016,14.5938,270.0000},
    {1173.0728,-1327.5487,15.3968,270.0000}
};
static const Float:HPGPos[][4]=
{
	{2033.8634,-1404.9954,17.2452,180.0000},
	{2031.3839,-1405.2439,17.2389,180.0000},
	{2028.2241,-1405.2552,17.2386,180.0000},
	{2025.6044,-1405.2645,17.2132,180.0000},
	{2023.5852,-1405.2715,17.1940,180.0000},
	{2021.4044,-1405.2791,17.1732,180.0000},
	{2035.4185,-1402.1874,17.3067,180.0000},
	{2037.1831,-1407.1774,17.1897,180.0000},
	{2031.7944,-1402.5620,17.2722,180.0000},
	{2028.8978,-1403.6459,17.2446,180.0000},
	{2023.2278,-1402.9595,17.1906,180.0000}
};
static const Float:HPLVPos[][4]=
{
	{1614.8058,1817.5908,10.8203,0.0000},
	{1613.0419,1817.8004,10.8203,0.0000},
	{1611.0299,1816.3567,10.8203,0.0000},
	{1608.6085,1817.3228,10.8203,0.0000},
	{1605.3682,1816.1503,10.8203,0.0000},
	{1603.1455,1817.4187,10.8203,0.0000},
	{1601.2949,1816.1897,10.8203,0.0000},
	{1599.5619,1817.2391,10.8203,0.0000},
	{1598.8051,1819.0078,10.8203,0.0000},
	{1601.6807,1820.1045,10.8280,0.0000},
	{1603.5867,1818.8036,10.8203,0.0000},
	{1605.7253,1820.2758,10.8280,0.0000},
	{1607.5717,1818.6564,10.8203,0.0000},
	{1609.6084,1820.3187,10.8280,0.0000},
	{1611.2225,1818.5868,10.8203,0.0000},
	{1614.3680,1819.1401,10.8280,0.0000},
	{1617.1754,1820.0564,10.8280,0.0000}
};
static const Float:HPSFPos[][4]=
{
	{-2662.3035,638.3649,14.4531,175.0000},
	{-2658.9199,638.4907,14.4531,175.0000},
	{-2656.1143,638.5948,14.4531,175.0000},
	{-2653.2971,638.6994,14.4531,175.0000},
	{-2650.1743,638.8153,14.4531,175.0000},
	{-2647.8831,639.3567,14.4531,175.0000},
	{-2645.5295,638.2349,14.4531,175.0000},
	{-2642.3918,639.0449,14.4531,175.0000},
	{-2642.0688,637.0115,14.4531,175.0000},
	{-2640.3364,635.5806,14.4531,175.0000},
	{-2641.4216,633.7475,14.4545,175.0000},
	{-2643.1511,635.5380,14.4531,175.0000},
	{-2646.5178,635.7631,14.4531,175.0000},
    {-2648.3799,636.5843,14.4531,175.0000},
    {-2650.4348,635.8369,14.4531,175.0000},
	{-2652.0046,637.6121,14.4531,175.0000},
    {-2654.1812,636.6133,14.4531,175.0000},
    {-2662.0847,636.1230,14.4531,175.0000},
	{-2658.1287,636.0930,14.4531,175.0000},
    {-2660.0605,637.0927,14.4531,175.0000},
    {-2655.7766,637.2667,14.4531,175.0000}
};
static const Float:OperacionesPositions[][3]=
{
	{833.6001,3.1724,1004.1797},
	{830.6400,-0.2800,1004.1797},
	{822.0131,4.0536,1004.1797},
	{822.0101,1.9244,1004.1797},
	{2316.6121,-15.1184,26.7422},
	{2316.6074,-9.9517,26.7422},
	{1086.9856,-148.6115,1001.1160},
	{1084.9305,-148.6101,1001.1160},
	{1091.8477,-135.6460,1001.1160},
	{1204.7990,-1555.6210,13.5469}
};
static const Float:ActoresTunning[][3]=
{
	{2437.7014,-2073.7307, 13.6045},
	{2445.9851,-2073.8723, 13.6045},
	{2455.6577,-2073.7788, 13.6045},
	{2463.6279,-2074.0227, 13.6045},
	{2474.0122,-2073.7769, 13.6124},
	{2482.4316,-2074.5574, 13.6124},
	{2491.7036,-2074.2969, 13.6124},
	{2500.1697,-2073.9268, 13.6124},
	{2511.4055,-2073.5059, 13.5923},
	{2520.2380,-2073.5156, 13.5923},
	{2528.7019,-2073.5522, 13.5923},
	{2537.3877,-2074.1941, 13.5923},
	{2518.5200,-2110.7686, 13.5983},
	{2513.2986,-2117.5681, 13.5983},
	{2508.0659,-2125.0798, 13.5983},
	{2503.2495,-2132.1907, 13.5983},
	{2487.1462,-2137.0603, 13.6124},
	{2478.0247,-2136.4961, 13.6124},
	{2468.8545,-2136.6252, 13.6124},
	{2460.7732,-2136.5596, 13.6124},
	{2448.1790,-2125.4045, 13.6522},
	{2443.5256,-2118.2383, 13.6522},
	{2438.7405,-2110.4429, 13.6522},
	{2433.7673,-2102.9631, 13.6522},
	{2532.1465,-2116.3079,13.5469},
	{2525.7058,-2138.2351,13.5469}

};
static const Float:RadiosPos[][3]=
{
	{1254.7644,-804.6345,1084.0151},
	{1434.3252,589.3580,1000.9779},
	{225.3002,1187.7854,1080.2578},
	{2327.0132,-1018.0557,1050.2178},
	{2331.0811,-1068.4113,1049.0234},
	{2194.8037,-1201.2301,1049.0234},
	{2311.1023,-1207.4109,1049.0234},
	{2360.8394,-1130.8195,1050.8750},
	{2282.0415,-1135.8741,1050.8984},
	{2491.3289,-1697.8755,1014.7490},
	{224.4195,1241.0884,1082.1406},
	{232.9977,1289.9427,1082.1406},
	{236.3799,1048.3400,1084.0067},
	{292.4060,1472.9526,1080.2642},
	{320.25391, 1490.39087, 1083.43884},
	{379.02029, 1469.72083, 1079.17688},
	{366.4335,1425.3593,1081.3359},
	{482.1933,1399.6086,1080.2578},
	{450.5942,1414.1479,1084.3080},
	{263.4377,1288.6233,1080.2578},
	{229.50169, 1151.12305, 1081.60596},
	{23.2901,1347.0875,1088.8750},
	{-270.6304,1447.6964,1088.8672},
	{17.9222,1407.9509,1084.4297},
	{147.5579,1373.5997,1083.8594},
	{236.7255,1082.3959,1084.2415},
	{-70.99350, 1359.27661, 1079.21289},
	{-287.9925,1478.1453,1088.8823},
	{-47.8563,1411.1011,1084.4297},
	{265.88324, 1242.81116, 1083.25623},
	{2451.8186,-1705.9608,1013.5078},
	{2806.3760,-1165.6929,1025.5703},
	{321.8526,1117.1307,1083.8828},
	{2319.1746,-1142.2817,1050.4922},
	{2267.0566,-1136.5151,1050.6403},
	{-2166.1284,641.7698,1057.5875},
	{417.8647,2535.4861,10.0000},
	{1273.2833,-785.8144,1089.9303},
	{2549.2622,-1280.6965,1060.9844},
	{1475.0764,548.1407,1000.9959},
	{-786.8574,488.8219,1376.1953},
	{2261.9563,-1208.6964,1049.0308},
	{1099.4520,-817.2785,107.4822},
	{78.6785,1341.4865,1083.4033}
};
static const Float:GasolineraPositions[][3]=
{
	{1925.1581,-1779.2399,13.0875},
	{1002.5995,-938.9977,41.7164},
	{-90.9733,-1169.9698,1.9307},
	{654.7282,-565.5597,15.7458},
	{-1677.1003,414.2072,7.0904},
	{-2410.9700,974.6269,45.4609},
	{-1327.8411,2677.0786,49.8695},
	{615.9312,1689.9292,6.7035},
	{1595.3818,2198.0535,10.5985},
	{2202.4304,2476.8889,10.6556},
	{1944.0356,-1772.2762,13.1342},
	{2148.8745,2748.3677,10.8203},
	{2751.7844,-2595.2117,2.2000},
	{1382.7792,461.4145,20.1010},
	{-1472.1361,1863.7946,32.6328},
	{2114.6504,920.4183,10.8203},
	{2639.3811,1106.8284,10.8203},
	{-1606.5299,-2713.9026,48.5335},
	{2751.7844,-2595.2117,2.2000},
	{1968.6451,-2638.5715,13.5469},
	{-1116.7944,-174.9563,14.1440},
	{1332.6748,1540.4779,10.8203},
	{2320.3205,580.9168,10.8554}
};
new NombreHerramienta[5][] = { "",	"{f21111}Martillo{FFFFFF} | ",	"{f21111}Destornillador{FFFFFF} | ",	"{f21111}Barreta{FFFFFF} | ",	"{f21111}Balde{FFFFFF} | "};

new Float:DineroSpawn1[7][3] = {
	{1219.4506, -6.7681, 1000.3845},
	{1219.7976, -6.8836, 1000.3845},
	{1219.9985, -7.0584, 1000.3845},
	{1219.6404, -7.0946, 1000.3845},
	{1219.4285, -6.9823, 1000.3845},
	{1219.3450, -7.1265, 1000.3845},
	{1219.5104, -7.2973, 1000.3845}
};
new Float:DineroSpawn2[12][3] =
{
	{1214.65063, -4.69790, 1000.38452},
	{1214.14819, -4.23293, 1000.38452},
	{1214.53308, -4.04349, 1000.38452},
	{1214.60669, -4.41849, 1000.38452},
	{1214.12769, -4.46524, 1000.38452},
	{1214.36548, -4.61390, 1000.38452},
	{1214.47095, -4.19637, 1000.38452},
	{1214.20825, -3.98005, 1000.38452},
	{1213.84241, -4.38125, 1000.38452},
	{1213.93042, -4.66804, 1000.38452},
	{1214.29126, -4.78296, 1000.38452},
	{1214.34155, -4.37421, 1000.38452}
};
new Float:DineroSpawn3[17][3] = {
	{1202.96399, 8.28210, 999.92468},
	{1202.75500, 8.12750, 999.92468},
	{1202.69250, 8.37438, 999.92468},
	{1202.84998, 8.55979, 999.92468},
	{1203.11084, 8.45035, 999.92468},
	{1203.26245, 8.19671, 999.92468},
	{1203.00867, 8.04549, 999.92468},
	{1202.72449, 7.95939, 999.92468},
	{1203.16357, 7.83645, 999.92468},
	{1202.79993, 7.77427, 999.92468},
	{1202.38135, 7.93154, 999.92468},
	{1203.31152, 8.00469, 999.92468},
	{1203.44116, 8.41645, 999.92468},
	{1203.38232, 8.70793, 999.92468},
	{1203.12512, 8.74535, 999.92468},
	{1202.73047, 8.74830, 999.92468},
	{1202.73047, 8.74830, 999.92468}
};
new Float:DineroSpawn4[17][3] =
{
	{1221.45471, 8.70950, 1000.38733},
	{1221.18079, 8.95026, 1000.38733},
	{1221.64392, 9.20410, 1000.38733},
	{1221.03357, 8.71232, 1000.38733},
	{1220.81445, 8.96599, 1000.38733},
	{1220.77930, 8.68179, 1000.38733},
	{1220.98523, 9.16584, 1000.38733},
	{1221.35608, 9.19465, 1000.38733},
	{1221.58569, 8.95798, 1000.38733},
	{1221.34583, 8.49501, 1000.38733},
	{1221.00684, 8.51719, 1000.38733},
	{1221.30237, 8.80439, 1000.38733},
	{1221.68201, 8.54490, 1000.38733},
	{1221.73621, 8.74649, 1000.38733},
	{1221.88123, 9.05650, 1000.38733},
	{1221.11169, 8.30978, 1000.38733},
	{1221.55042, 8.29642, 1000.38733}
};
new Float:DineroSpawn5[14][3] =
{
	{1207.96570, -6.90310,1000.38733},
	{1208.19617, -6.73263,1000.38733},
	{1207.97278, -6.56259,1000.38733},
	{1208.36243, -6.45283,1000.38733},
	{1208.52686, -6.81083,1000.38733},
	{1208.20422, -7.08637,1000.38733},
	{1208.58374, -6.59465,1000.38733},
	{1208.57703, -6.26913,1000.38733},
	{1208.25940, -6.17592,1000.38733},
	{1207.94446, -6.35177,1000.38733},
	{1207.91321, -6.08451,1000.38733},
	{1208.63062, -5.99649,1000.38733},
	{1208.85559, -6.40737,1000.38733},
	{1208.88074, -6.13652, 1000.38733}
};
new Float:DineroSpawn6[11][3] =
{
	{1203.41333, -8.66540, 1001.10388},
	{1203.19043, -8.34746, 1001.10388},
	{1203.29358, -8.47133, 1001.10388},
	{1203.10022, -8.61934, 1001.10388},
	{1202.93945, -8.46910, 1001.10388},
	{1202.90540, -8.30045, 1001.10388},
	{1203.38538, -8.25599, 1001.10388},
	{1203.04211, -8.15435, 1001.10388},
	{1202.86487, -8.78291, 1001.10388},
	{1202.84534, -8.62792, 1001.10388},
	{1203.17700, -8.80070, 1001.10388}
};

new Float:EstacionamientoCamionero[59][4] =
{
	{2069.7180,2422.4978,10.7178,269.8497}, {2069.0488,2416.7107,10.7178,270.8350},	{2069.0100,2413.7415,10.7178,269.9562},
	{2069.3208,2410.7585,10.7178,267.8664},	{2069.1484,2407.7351,10.7178,268.9985},	{2069.2466,2404.8096,10.7197,269.5660},
	{2068.8679,2401.7734,10.7250,270.4845},	{2069.5366,2398.9690,10.7217,270.0494},	{2069.1985,2396.0447,10.7256,270.9738},
	{2068.7021,2393.2031,10.7255,271.3805},	{2069.0479,2390.0613,10.7255,268.8426},	{2078.3579,2422.3350,10.7178,90.1878},
	{2078.6353,2419.4163,10.7178,88.7606},	{2078.9937,2416.5027,10.7223,88.7923},	{2078.8472,2413.6343,10.7178,91.6046},
	{2078.6589,2410.7097,10.7178,90.9780},	{2069.4436,2419.5530,10.7178,269.2118},	{2078.0088,2407.6951,10.7177,91.5206},
	{2079.1050,2404.7798,10.7178,88.3970},	{2077.7427,2401.6953,10.7177,90.9732},	{2079.0037,2398.7427,10.7178,89.1851},
	{2079.1719,2395.9822,10.7177,89.6311},	{2078.4805,2392.9758,10.7178,88.8372},	{2078.3494,2389.9963,10.7179,91.4931},
	{2086.6340,2422.5757,10.7178,269.6368},	{2087.0779,2419.5530,10.7178,269.6935},	{2086.2122,2416.6030,10.7178,271.3036},
	{2086.3079,2413.6252,10.7176,270.9491},	{2087.0103,2410.7585,10.7178,270.8611},	{2086.5947,2407.7368,10.7178,271.1256},
	{2086.2122,2404.7976,10.7178,267.3324},	{2086.9910,2401.9883,10.7178,269.0317},	{2086.4133,2398.8130,10.7178,267.5578},
	{2086.2700,2395.9319,10.6875,269.5852},	{2086.2354,2392.9148,10.7178,269.0103},	{2086.1912,2390.1309,10.7178,270.2054},
	{2096.6958,2390.0129,10.7178,270.2597}, {2095.8147,2392.9041,10.7178,90.5982},	{2095.6445,2395.8586,10.7178,86.6870},
	{2096.2080,2398.9033,10.7178,89.0238},	{2096.4546,2401.8137,10.7178,87.6966},	{2096.3569,2404.7004,10.7178,88.0389},
	{2096.6760,2407.6082,10.7178,87.7897},	{2095.8726,2410.5107,10.7139,86.8762},	{2096.2737,2413.5745,10.7178,90.0802},
	{2096.4568,2416.6282,10.6877,89.0720},	{2096.4822,2419.4331,10.7178,89.4069},	{2096.3069,2422.3921,10.7178,91.2038},
	{2104.2380,2422.4290,10.7178,268.7301},	{2104.0344,2419.5662,10.7178,269.6224},	{2104.2651,2416.6438,10.7178,269.8183},
	{2103.8311,2413.6514,10.7178,271.1700},	{2104.4236,2410.7073,10.7178,270.8135},	{2104.9734,2407.8037,10.7177,268.0424},
	{2103.7742,2401.7839,10.6845,271.5938},	{2104.1587,2398.9211,10.7178,272.2759},	{2104.6467,2396.0334,10.7177,271.8693},
	{2103.9285,2392.9788,10.7178,269.3462},	{2104.2876,2390.0640,10.7178,269.4435}
};
new Float:EstacionamientoNormal[87][4] =
{
	{1700.9434,-1893.0575,-49.5459,359.1727},
	{1692.1959,-1892.3928,-49.5500,358.5018},
	{1687.4604,-1892.0718,-49.5457,359.5341},
	{1683.2198,-1891.9866,-49.5437,359.3870},
	{1678.6841,-1891.8391,-49.5452,359.3071},
	{1674.3474,-1891.7332,-49.5457,358.7783},
	{1670.0671,-1891.9661,-49.5439,358.9673},
	{1661.3129,-1891.8578,-49.5450,357.9927},
	{1652.4753,-1892.2537,-49.5214,359.0848},
	{1648.3402,-1892.2540,-49.5463,359.1805},
	{1643.7401,-1892.3600,-49.5437,358.9878},
	{1635.0544,-1892.2921,-49.5446,359.0557},
	{1630.7037,-1891.9773,-49.5178,359.3072},
	{1624.9020,-1885.8916,-49.5503,269.3125},
	{1624.9250,-1881.2821,-49.5458,270.2203},
	{1624.6895,-1876.6132,-49.5436,269.3907},
	{1624.7087,-1871.7465,-49.5199,270.7915},
	{1624.8037,-1866.7968,-49.5450,268.8862},
	{1624.8608,-1862.1732,-49.5446,269.6339},
	{1625.0593,-1857.2717,-49.5470,267.8584},
	{1624.9291,-1852.4271,-49.5458,269.1884},
	{1624.5190,-1847.6683,-49.5460,269.2230},
	{1643.8900,-1848.1674,-49.5444,356.9514},
	{1661.1975,-1848.7606,-49.5454,359.7119},
	{1682.9938,-1859.1254,-49.5460,270.7711},
	{1683.1062,-1863.2749,-49.5530,268.7698},
	{1682.7625,-1867.3658,-49.5182,269.2705},
	{1682.2968,-1872.0295,-49.5421,268.7775},
	{1692.0452,-1892.4513,-60.2719,359.0346},
	{1687.5537,-1891.8564,-60.2702,359.4271},
	{1678.9497,-1892.2196,-60.2717,358.1399},
	{1648.4669,-1891.5432,-60.2703,359.9407},
	{1643.8351,-1892.3015,-60.2711,359.1833},
	{1634.9308,-1892.0286,-60.2469,359.3054},
	{1624.5059,-1886.2368,-60.2436,270.3784},
	{1624.8840,-1881.0900,-60.2731,269.9742},
	{1625.0099,-1876.4462,-60.2453,272.3181},
	{1624.8190,-1852.7928,-60.2807,268.3029},
	{1624.3732,-1847.9072,-60.2442,271.4542},
	{1648.2174,-1849.0896,-60.2706,358.6554},
	{1661.0142,-1849.0599,-60.2452,359.5746},
	{1669.9652,-1848.4615,-60.2729,359.4380},
	{1682.5824,-1858.9597,-60.2738,269.5594},
	{1682.1111,-1863.0200,-60.2724,271.0364},
	{1682.3948,-1867.2174,-60.2725,269.7123},
	{1682.8677,-1871.9066,-60.2774,270.5558},
	{1698.5054,-1868.1997,-49.5449,90.5219},
	{1698.6495,-1863.1975,-49.5454,89.9168},
	{1698.7686,-1858.2522,-49.5480,91.1162},
	{1699.0171,-1853.0203,-49.5453,91.0152},
	{1698.3234,-1848.2490,-49.5494,91.2853},
	{1698.7477,-1843.3202,-49.5452,90.9259},
	{1698.1277,-1838.2383,-49.5191,89.5903},
	{1699.2198,-1833.3199,-49.5450,89.8076},
	{1699.1166,-1828.4044,-49.5181,92.6670},
	{1698.2000,-1823.2429,-49.5463,90.9048},
	{1698.7080,-1823.0408,-60.2779,89.5352},
	{1699.1685,-1828.2711,-60.2722,89.1948},
	{1698.3683,-1833.1237,-60.2443,88.8886},
	{1698.5221,-1838.2834,-60.2743,90.4589},
	{1699.1111,-1843.2233,-60.2729,90.1863},
	{1698.2303,-1848.1890,-60.2713,89.2910},
	{1698.6639,-1853.1273,-60.2731,89.2623},
	{1698.7783,-1858.1204,-60.2726,89.9146},
	{1698.5807,-1863.0490,-60.2723,90.2713},
	{1698.5999,-1867.9010,-60.2711,89.7022},
	{1696.6182,-1893.3223,-49.5174,2.0531},
	{1656.8086,-1892.0720,-49.5456,0.2596},
	{1639.4436,-1891.7799,-49.5199,0.0611},
	{1647.8235,-1848.3661,-49.5179,0.5933},
	{1652.1539,-1848.6429,-49.5468,0.6608},
	{1656.4976,-1848.3142,-49.5185,1.1586},
	{1665.6100,-1848.9293,-49.5456,0.2534},
	{1670.0616,-1848.5620,-49.5184,1.0163},
	{1700.9070,-1891.7345,-60.2478,0.7216},
	{1696.3022,-1891.9620,-60.2723,0.0890},
	{1683.2422,-1891.8271,-60.2709,0.1301},
	{1674.4420,-1891.9174,-60.2717,1.0014},
	{1670.2343,-1892.0488,-60.2461,0.0316},
	{1661.3765,-1891.9287,-60.2478,0.8051},
	{1656.9729,-1892.1548,-60.2722,0.3159},
	{1652.5803,-1891.8945,-60.2742,1.0098},
	{1639.4609,-1892.2233,-60.2710,0.4207},
	{1630.4873,-1892.0220,-60.2705,1.2220},
	{1652.2684,-1848.9530,-60.2729,0.5955},
	{1656.7208,-1849.1294,-60.2712,0.2793},
	{1665.4950,-1848.5863,-60.2708,0.8123}
};
new ArmaNombre2[47][] =
{
	"","Manopla","Palo de golf","Porra","Cuchillo","Bate de Beisbol","Pala","Palo de Pool","Katana","Motosierra","Dildo púrpura","Dildo blanco","Dildo blanco grande","Dildo",	"Ramo de flores","Baston","Granada","Granada lagrimogena","Molotov",""," "," ","9mm","9mm silenciada","Desert eagle","Escopeta","Escopeta recortada","Escopeta de combate",	"Uzi","MP5","AK-47","M4","TEC-9","Rifle","Sniper Rifle","Bazooca","heatseeker","Lanzallamas","Minigun","satchel charge","Bomba",
	"Aerosol","Matafuego",	"Camara","Lentes de vision", "Lentes térmico","Paracaidas"
};

new NombreAuto[212][] =
{
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},	{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},	{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},	{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
	{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},	{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},	{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},	{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkleys RC Van"},
	{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},	{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},	{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},	{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},	{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},	{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},	{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
	{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},	{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},	{"Blade"},	{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},	{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},	{"Utility"},
	{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},	{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},	{"Bandito"},	{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},	{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},	{"Tug"},{"Trailer 3"},
	{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},	{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},	{"Police Car (LVPD)"},	{"Police Ranger"},{"Picador"},{"S.W.A.T Van"},{"Alpha"},{"Phoenix"},{"Glendale Chocado"},	{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},	{"Utility Trailer"}
};
new Float:ComprarRopa[5][3] =
{
	{207.6111,-100.3305,1005.2578},
	{161.5224,-83.2529,1001.8047},
	{204.3374,-159.3523,1000.5234},
	{206.3758,-8.0859,1001.2109},
	{207.0922,-129.1800,1003.5078}
};

static stock const Float:ac_wMinRange[] =
{
	25.0, 25.0, 25.0, 30.0, 25.0, 35.0,
	25.0, 35.0, 40.0, 40.0, 25.0, 55.0,
	50.0, 50.0, 50.0, 4.0, 65.0
};
stock ReproducirCancionParaTodos(link[]){
        for(new i, l = GetMaxPlayers();i<l;i++) if(IsPlayerConnected(i))
        PlayAudioStreamForPlayer(i, link);
}
enum RutaCosechas
{
	RutaCosecha,
	ProgresoCosecha,
	CosechaLugar,
}
new Cosechas[MAX_PLAYERS][RutaCosechas];

enum TransportistasO
{
	Objeto1,
	Objeto2,
	Objeto3,
	Ruta
}
new Transportistas[MAX_PLAYERS][TransportistasO];

enum Barras
{
    PlayerBar:Cosecha,
	PlayerBar:Camionero,
	PlayerBar:ReparandoBar,
	PlayerBar:Revisar,
	PlayerBar:BarraConquista
};
new Progressbar[MAX_PLAYERS][Barras];

enum BI
{
	bID,
	BIntegrantes,
	BNombre[32],
	BLider[32],
	bRango1[32],
	bRango2[32],
	bRango3[32],
	bRango4[32],
	bRango5[32],
	bRango6[32],
	bRango7[32],
	bRango8[32],
	territorio[15],
	RANK_EXP[7],
	RANK_EDIT[7],
	RANK_INV[7],
	UltimoAtaque,
	B_Atacando,
	BColor,
	EnUso
};
new BandasInfo[MAX_BANDAS][BI];

enum TerriInfo
{
	bool:Territorio_Valido,
	Territorio_ID,
	Territorio_Banda,
	Territorio_Lugar[32],
	bool:Territorio_Usado,
	Territorio_BandaID,
	Territorio_BandaID2,
	Territorio_Color,
	Float:Territorio_MinX,
	Float:Territorio_MinY,
	Float:Territorio_MinZ,
	Float:Territorio_MaxX,
	Float:Territorio_MaxY,
	Float:Territorio_MaxZ,
	Territorio_Area,
	Territorio_GZ,
	bool:Territorio_EnGuerra,
	Territorio_AtacanteID,
	Territorio_Tiempo,
	Territorio_TimerEx,
	Territorio_UltimoA
};
new TERRITORIOS_INFO[MAX_T][TerriInfo];

enum jInfo
{
    pID,
	suspendido,
	enHospital,
	pLogroNivel,
	TiempoPD,
	pLogroPutiClub,
	pAfinidad1,
	pAfinidad2,
	pAfinidad3,
	pAfinidad4,
	pAfinidad5,
	pAfinidad6,
	Float:jPosE_x,
	Float:jPosE_y,
	Float:jPosE_z,
	Float:hx,
	Float:hy,
	Float:hz,
	Float:j_HEALTH,
	Float:j_ARMOUR,
	Float:@X,
	Float:@Y,
	Float:@Z,
	Float:@A,
	pStriptease,
	pAutomedicado,
	pRemedios,
	pMedicamentos,
	pCocaina,
	pGino,
	pPerico,
	pPreper,
	pHeroina,
	pRootCoins,
	pAdicto,
	pCracks,
	pMedico,
	pReanimados,
	pTortuga,
	pCasa,
	pRestaurante,
	pOficina,
	pCerrajero,
	pForzadas,
	pPilotoExperto,
	pGanadas,
	pNegocioRedondo,
	pCosecha,
	pMarihuanero,
	pPorros,
	pNivelMecanico,
	pExpMecanico,
	pNivelLadron,
	pExpLadron,
	pNivelBasurero,
	pExpBasurero,
	pNivelCamionero,
	pExpCamionero,
	pNivelTransportista,
	pExpTransportista,
	pNivelTrailero,
	pExpTrailero,
	pNivelArmero,
	pSemillas,
	pExpArmero,
	pNivelMedico,
	pExpMedico,
	pPassword[128],
	tempPassword[129],
	pExpulsando[32],
	pLNumero,
	pPasajeros,
	pDineroRobado,
	pEMS,
	pCama,
	pVwCama,
	pAtendido,
	pMedicina,
	pEnfermedad,
	pBanco,
	pRango,
	pMarihuana,
	pCrack,
	pMateriales,
	pAgenda,
	pNumero,
	pGuia,
	pSonidos,
	pMuteos,
	pBarras,
	pAlerta,
	pVelocimetro,
	pOnline,
	pPatines,
	pGPS,
	pEmisora,
	vID1,
	vID2,
	vID3,
	vID4,
	pRadio,
	pDuty,
	mDuty,
	pModelo,
	pSocioHP,
	pTipoCarcel,
	pTiempoCarcel,
	pTiempoJail,
	pCargos,
	p_Ban,
	pRazon[32],
	pInterior,
	pMundoVirtual,
	QuienC[150],
	IP[16],
	EnCasa,
	EnRopero,
	EnGarage,
	PrecioNivel,
	ExperienciaTotal,
	hprecio,
	hmoneda,
	h2precio,
	h2moneda,
	Repuestos,
	Mobile,
	MobileSub,
	CasaID[4],
	EstacionamientoID,
	vEstacionado1,
	vEstacionado2,
	vEstacionado3,
	vEstacionado4,
	pEnEstacionamiento,
	Moneda,
	arrestado,
	horasjugadas,
	pVIP,
	pTrabajo2,
	finmes,
	findia,
	finano,
	piezas,
	Agonizando,
	pAdmin,
	pSexo,
	pTrabajo,
	pEdad,
	pRopa,
	pFaccion,
	pNivel,
	j_ARMAS[13],
	pDinero,
	pExperiencia,
	pEnFC,
	ContraTemporal[128],
	jRegistrado,
	Nickname[MAX_PLAYER_NAME],
	jConexion[90],
	pSed,
	pHambre,
	pMartillo,
	pDestornillador,
	pBarreta,
	pBalde,
	Float:pOX,
	Float:pOY,
	Float:pOZ,
	Float:pOA,
	VE1,
	VE2,
	VE3,
	VE4,
	vMonedaa,
	vModelo,
	vGas,
	vinterior,
	vvw,
	vColor1,
	vColor2,
	Float:pVidaV,
	vBaul,
	vBaul2,
	vBaul3,
	vBaul4,
	vBaul5,
	vBaul6,
	vBaul7,
	vBaul8,
	vBaul9,
	vBaul10,
	vPJ,
	vpatente[10],
	vComponentes0,
	vComponentes1,
	vComponentes2,
	vComponentes3,
	vComponentes4,
	vComponentes5,
	vComponentes6,
	vComponentes7,
	vComponentes8,
	vComponentes9,
	vComponentes10,
	vComponentes11,
	vComponentes12,
	vComponentes13,
	vPrecio,
	vTraba,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vOvw,
	vSeguro,
	vOinterior,
	Float:pOX2,
	Float:pOY2,
	Float:pOZ2,
	Float:pOA2,
	V2E1,
	V2E2,
	V2E3,
	V2E4,
	v2Monedaa,
	vModelo2,
	v2Gas,
	v2interior,
	v2vw,
	v2Color1,
	v2Color2,
	Float:pVidaV2,
	v2Baul,
	v2Baul2,
	v2Baul3,
	v2Baul4,
	v2Baul5,
	v2Baul6,
	v2Baul7,
	v2Baul8,
	vPJ2,
	v2patente[10],
	v2Componentes0,
	v2Componentes1,
	v2Componentes2,
	v2Componentes3,
	v2Componentes4,
	v2Componentes5,
	v2Componentes6,
	v2Componentes7,
	v2Componentes8,
	v2Componentes9,
	v2Componentes10,
	v2Componentes11,
	v2Componentes12,
	v2Componentes13,
	v2Precio,
	v2Traba,
	Float:v2X,
	Float:v2Y,
	Float:v2Z,
	Float:v2A,
	v2Ovw,
	vSeguro2,
	v2Ointerior,
	Float:pOX3,
	Float:pOY3,
	Float:pOZ3,
	Float:pOA3,
	V3E1,
	V3E2,
	V3E3,
	V3E4,
	v3Monedaa,
	vModelo3,
	v3Gas,
	v3interior,
	v3vw,
	v3Color1,
	v3Color2,
	Float:pVidaV3,
	v3Baul,
	v3Baul2,
	v3Baul3,
	v3Baul4,
	v3Baul5,
	v3Baul6,
	v3Baul7,
	v3Baul8,
	vPJ3,
	v3patente[10],
	v3Componentes0,
	v3Componentes1,
	v3Componentes2,
	v3Componentes3,
	v3Componentes4,
	v3Componentes5,
	v3Componentes6,
	v3Componentes7,
	v3Componentes8,
	v3Componentes9,
	v3Componentes10,
	v3Componentes11,
	v3Componentes12,
	v3Componentes13,
	v3Precio,
	v3Traba,
	Float:v3X,
	Float:v3Y,
	Float:v3Z,
	Float:v3A,
	v3Ovw,
	vSeguro3,
	v3Ointerior,
	Float:pOX4,
	Float:pOY4,
	Float:pOZ4,
	Float:pOA4,
	V4E1,
	V4E2,
	V4E3,
	V4E4,
	v4Monedaa,
	vModelo4,
	v4Gas,
	v4interior,
	v4vw,
	v4Color1,
	v4Color2,
	Float:pVidaV4,
	v4Baul,
	v4Baul2,
	v4Baul3,
	v4Baul4,
	v4Baul5,
	v4Baul6,
	v4Baul7,
	v4Baul8,
	vPJ4,
	v4patente[10],
	v4Componentes0,
	v4Componentes1,
	v4Componentes2,
	v4Componentes3,
	v4Componentes4,
	v4Componentes5,
	v4Componentes6,
	v4Componentes7,
	v4Componentes8,
	v4Componentes9,
	v4Componentes10,
	v4Componentes11,
	v4Componentes12,
	v4Componentes13,
	v4Precio,
	v4Traba,
	Float:v4X,
	Float:v4Y,
	Float:v4Z,
	Float:v4A,
	v4Ovw,
	vSeguro4,
	pt_LAST_TERRITORY,
	pt_LAST_SHOT_TIME,
	v4Ointerior,
	pEmail[52],
	vAlarma,
	v2Alarma,
	v3Alarma,
	v4Alarma,
	vAAlarma,
	vAAlarma2,
	vAAlarma3,
	vAAlarma4,
	BaneosD,
	BaneosD2,
	v2Baul9,
	v2Baul10,
	v3Baul9,
	v3Baul10,
	v4Baul9,
	v4Baul10,
	pBloqueado,
	pRazonSan[50],
	sancionado,
	pSobreRuedas,
	pLicenciaVuelo,
	pAcento,
};
new PLAYER_INFO[MAX_PLAYERS][jInfo];

enum ptInfo
{
	pt_ID,
    pt_MODEL_ID,
	pt_BONE,
	bool:pt_ATTACHED,
	Float:pt_POS[3],
	Float:pt_ROT[3],
	Float:pt_SCALE[3],
	player_toy_COLOR_1,
	player_toy_COLOR_2
};
new PLAYER_TOYS[MAX_PLAYERS][MAX_PLAYER_TOYS][ptInfo];

enum oi_info
{
	obj_ID,
	obj_BONE,
	obj_NAME[32],
	obj_MAX

};



new OBJETOS_INFO[][oi_info] =
{
    {0, 1,	"Vacío"},
	{1, 1,	"Manopla", 1},
	{2, 1,	"Palo de golf", 1},
	{3, 1,	"Porra", 1},
	{4, 1,	"Cuchillo", 1},
	{5, 1,	"Bate de beisbol", 1},
	{6, 1,	"Pala", 1},
	{7, 1,	"Palo de billar", 1},
	{8, 1,	"Katana", 1},
	{9, 1,	"Motosierra", 1},
	{10, 1,	"Consolador rosa", 1},
	{11, 1,	"Vibrador blanco", 1},
	{12, 1,	"Gran vibrador blanco", 1},
	{13, 1,	"Vibrador plateado", 1},
	{14, 1,	"Ramo de flores", 1},
	{15, 1,	"Baston", 1},
	{16, 1,	"Granada", 1},
	{17, 1,	"Gas Lacrimógeno", 1},
	{18, 1,	"Molotov", 1},
	{0, 1,	"Vacío", 1},
	{0, 1,	"Vacío", 1},
	{0, 1,	"Vacío", 1},
	{22, 1,	"9mm", 1},
	{23, 1,	"9mm con silenciador", 1},
	{24, 1,	"Desert Eagle", 1},
	{25, 1,	"Escopeta", 1},
	{26, 1,	"Sawn Off", 1},
	{27, 1,	"Escopeta de combate", 1},
	{28, 1,	"UZI", 1},
	{29, 1,	"MP5", 1},
	{30, 1,	"AK-47", 1},
	{31, 1,	"M4", 1},
	{32, 1,	"TEC-9", 1},
	{33, 1,	"Rifle", 1},
	{34, 1,	"Sniper", 1},
	{35, 1,	"Lanzacohetes", 1},
	{36, 1,	"Bazooka", 1},
	{37, 1,	"Lanzallamas", 1},
	{38, 1,	"Minigun", 1},
	{39, 1,	"Bomba", 1},
	{40, 1,	"Detonador", 1},
	{41, 1,	"Spray", 1},
	{42, 1,	"Extintor De Incendios", 1},
	{43, 1,	"Camara", 1},
	{44, 1,	"Lentes de visión nocturna", 1},
	{45, 1,	"Gafas termicas", 1},
	{46, 1,	"Paracaídas", 1},
	{47, 1, "Medicamentos", 2000},
	{48, 1, "Crack", 2000},
	{19472, 2, "Mascara Anti-Gas"},
	{18637, 4,	"Escudo Policía"},
	{18640, 2,	"Peluca"},
	{18642, 6,	"Taser"},
	{18645, 2,	"Casco con Llamas"},
	{18913, 2,	"Bandana Verde"},
	{18917, 2,	"Bandana Azul"},
	{18918, 2,	"Bandana Negro"},
	{18939, 2,	"Jockey Azul"},
	{18942, 2,	"Jockey Ploma"},
	{18943, 2,	"Jockey Verde"},
	{18947, 2,	"Sombrero Negro"},
	{18961, 2,	"Jockey de Camionero"},
	{18962, 2,	"Sombrero negro"},
	{18964, 2,	"Gorro Negro"},
	{18974, 2,	"Antifaz"},
	{18976, 2,	"Casco Azul"},
	{18978, 2,	"Casco Blanco"},
	{18979, 2,	"Casco Morado"},
	{19033, 2,	"Gafas Negras"},
	{19036, 2,	"Mascara Blanca"},
	{19064, 2,	"Gorra de Navidad"},
	{19078, 15,	"Loro"},
	{19079, 16, "Loro"},
	{19086, 6,	"Vibrador Gigante"},
	{19093, 2,	"Gorro"},
	{19136, 2,	"Sombrero con Pelo"},
	{19137, 2,	"Mascara de Pollo"},
	{19138, 2,	"Lentes Negros"},
	{19139, 2,	"Lentes Rojos"},
	{19140, 2,	"Lentes Azules"},
	{19142, 1,	"Chaleco"},
	{19352, 2,	"Sombrero Elegante"},
	{19421, 2,	"Audifonos"},
	{19472, 2,	"Mascara de Gas"},
	{19488, 2,	"Sombrero Gris"},
	{19559, 1,	"Mochila"},
	{19801, 2,	"Mascara"},
	{18897, 2, "Bandana azul"},
	{18898, 2, "Bandana verde"},
	{18899, 2, "Bandana Rosa"},
 	{18971, 2, "Sombrero blanco y negro"},
 	{18972, 2, "Sombrero negro y naranja"},
 	{18893, 2, "Gorra pirata blanca"},
 	{18895, 2, "Gorra pirata negra"},
 	{18915, 2, "Cubre boca morado"},
 	{18920, 2, "Cubre boca amarillo"},
 	{18949, 2, "Sombrero verde"},
 	{19022, 2, "Lentes negros"},
 	{19023, 2, "Lentes azules"},
 	{19025, 2, "Lentes morado"},
 	{19029, 2, "Lentes verdes"},
 	{19069, 2, "Gorra negra"},
 	{18963, 2, "CJ"},
 	{19317, 1, "Guitarra"},
	{2404, 5, "Tabla de Suft T1"},
 	{2405, 5, "Tabla de Suft T2"},
 	{2406, 5, "Tabla de Suft T3"},
 	{1210, 5, "Maletín"},
 	{19318, 5, "Bajo"},
 	{19351, 2, "Bigote"},
	{18638, 2, "Casco de seguridad"},
	{19160, 2, "Casco de seguridad"},
	{18639, 2, "Sombrero negro"},
	{18975, 2, "Peluca"},
	{19274, 2, "Peluca de payaso roja"},
	{18891, 2, "Bandana"},
	{18892, 2, "Bandana"},
	{18894, 2, "Bandana"},
	{18896, 2, "Bandana"},
	{18900, 2, "Bandana"},
	{18901, 2, "Bandana"},
	{18902, 2, "Bandana"},
	{18903, 2, "Bandana"},
	{18904, 2, "Bandana"},
	{18905, 2, "Bandana"},
	{18906, 2, "Bandana"},
	{18907, 2, "Bandana"},
	{18908, 2, "Bandana"},
	{18909, 2, "Bandana"},
	{18910, 2, "Bandana"},
	{18911, 2, "Cubre Bocas"},
	{18912, 2, "Cubre Bocas"},
	{18914, 2, "Cubre Bocas"},
	{18916, 2, "Cubre Bocas"},
	{18919, 2, "Cubre Bocas"},
	{18921, 2, "Boina"},
	{18922, 2, "Boina"},
	{18923, 2, "Boina"},
	{18924, 2, "Boina"},
	{18925, 2, "Boina"},
	{18926, 2, "Jockey"},
	{18927, 2, "Jockey"},
	{18928, 2, "Jockey"},
	{18929, 2, "Jockey"},
	{18930, 2, "Jockey"},
	{18931, 2, "Jockey"},
	{18932, 2, "Jockey"},
	{18933, 2, "Jockey"},
	{18934, 2, "Jockey"},
	{18935, 2, "Jockey"},
	{19487, 2, "sombrero de copa"},
	{18940, 2, "Jockey"},
	{18941, 2, "Jockey"},
	{18955, 2, "Jockey"},
	{18956, 2, "Jockey"},
	{18957, 2, "Jockey"},
	{18958, 2, "Jockey"},
	{18959, 2, "Jockey"},
	{18960, 2, "Jockey"},
	{18936, 2, "Yelmo"},
	{18937, 2, "Yelmo"},
	{18938, 2, "Yelmo"},
	{18944, 2, "Sombrero rojo"},
	{18945, 2, "Sombrero gris"},
	{18946, 2, "Sombrero"},
	{18948, 2, "Sombrero"},
	{18950, 2, "Sombrero"},
	{18951, 2, "Sombrero"},
	{18952, 2, "Casco De Boxeo"},
	{18953, 2, "Gorro"},
	{18954, 2, "Gorro"},
	{18965, 2, "Gorro"},
	{18966, 2, "Gorro"},
	{18967, 2, "Gorro"},
	{18968, 2, "Gorro"},
	{18969, 2, "Gorro"},
	{18970, 2, "Sombrero de tigre"},
	{18973, 2, "Sombreo cool"},
	{19095, 2, "Sombrero de vaquero"},
	{19096, 2, "Sombrero negro"},
	{19097, 2, "Sombrero de vaquero"},
	{19098, 2, "Sombrero oscuro"},
	{18977, 2, "Casco rojo"},
	{19006, 2, "Gafas"},
	{19007, 2, "Gafas"},
	{19008, 2, "Gafas"},
	{19009, 2, "Gafas"},
	{19010, 2, "Gafas"},
	{19011, 2, "Gafas"},
	{19012, 2, "Gafas"},
	{19013, 2, "Gafas"},
	{19014, 2, "Gafas"},
	{19015, 2, "Gafas"},
	{19016, 2, "Gafas"},
	{19017, 2, "Gafas"},
	{19018, 2, "Gafas"},
	{19019, 2, "Gafas"},
	{19020, 2, "Gafas"},
	{19021, 2, "Gafas"},
	{19024, 2, "Gafas"},
	{19026, 2, "Gafas"},
	{19027, 2, "Gafas"},
	{19028, 2, "Gafas"},
	{19030, 2, "Gafas"},
	{19031, 2, "Gafas"},
	{19032, 2, "Gafas"},
	{19034, 2, "Gafas"},
	{19035, 2, "Gafas"},
	{19037, 2, "Mascara roja"},
	{19038, 2, "Mascara verde"},
	{19528, 2, "Sombrero de bruja"},
	{19553, 2, "Sombrero de paja"},
	{19554, 2, "Gorro"},
	{19558, 2, "Jockey de Pizza"},
	{19065, 2, "Gorro navideño"},
	{19085, 2, "Parche en el ojo"},
	{19094, 2, "Sombrero de amburguesa"},
	{19039, 5, "Reloj de oro"},
	{19040, 5, "Reloj"},
	{19041, 5, "Reloj"},
	{19042, 5, "Reloj"},
	{19043, 5, "Reloj"},
	{19044, 5, "Reloj"},
	{19045, 5, "Reloj"},
	{19046, 5, "Reloj"},
	{19047, 5, "Reloj"},
	{19048, 5, "Reloj"},
	{19049, 5, "Reloj"},
	{19050, 5, "Reloj"},
	{19051, 5, "Reloj"},
	{19052, 5, "Reloj"},
	{19053, 5, "Reloj"},
	{19319, 1, "Guitarra electrica"},
	{19556, 5, "Guante de boxeo"},
	{19557, 2, "Antifaz"},
	{19590, 5, "Espada japonesa"},
	{19591, 6, "Abanico"},
	{19878, 2, "Patineta"},
	{18632, 6, "Caña de pescar"},
	{1607, 2, "Delfin"},
	{18646, 2, "Lampara roja"},
	{19314, 2, "Cuernos"},
	{1550, 1, "Bolso con dinero"},
	{19777, 1, "FBI logo"},
	{19141, 2, "Casco SWAT"},
	{19106, 2, "Casco militar 1"},
	{19108, 2, "Casco militar 2"},
	{19109, 2, "Casco militar 3"},
	{19110, 2, "Casco militar 4"},
	{19111, 2, "Casco militar 5"},
	{19112, 2, "Casco militar 6"},
	{19113, 2, "Casco militar 7"},
	{19515, 1, "Chaleco antibalas"},
	{11704, 2, "Mascara del diablo"},
	{19330, 2, "Casco de bombero 1"},
	{19331, 2, "Casco de bombero 2"},
	{19099, 2, "Sombrero de policía"},
	{19200, 2, "Casco de policía"},
	{18693, 2, "Fuego"}
};
enum eInfo
{
	IdMision,
	IdCriminal,
	IdColega,
	NumeroMision,
	Actor1,
	Objetivo,
	Actor2,
	SegundosMision,
	ObjetivoTake,
	Bajas,
	Tiene9mm,
	MisionActiva
}
new Encargo[MAX_ENCARGOS][eInfo];

enum E_TEMP_INFO
{
	PuedeRobar,
	@TemporalWeapon,
	@pHospital,
 	@Specteando,
	@ContraVacia,
	pCuentasIP,
	NAMES[2500],
	pt_RolBasurero,
	bool:pt_Transportista,
	bool:pt_Camionero,
	bool:pt_Trailero,
	pOwnerCMD_Use,
	bool:pt_TempName,
	voIP[32],
	pSeleccion_Regalos,
	pSeleccion_Regalos_Staff,
	pSeleccion_Regalos_Jugador,
	TimerRobar,
	TiendaRobando,
	p_INVITACIONES[15],
	p_INVITACIONES_ID[15],
	BandaOfertada[2],
	jSelectRango,
	pTiempoFianza,
	pFianzaTotal,
	pVEHICLES[4],
	pVEHICLES_SLOT[4],
	p_ADD_ADMIN_ID,
	p_SELECT_ADMIN,
	p_SELECT_ADMIN_LEVEL,
	p_SELECT_ADMIN_ONLINE,
	p_SELECT_ADMIN_ID[30],
	p_SELECT_ADMIN_ID_LEVEL[MAX_LISTITEMS],
	p_SELECT_ADMIN_ID_ONLINE[MAX_LISTITEMS],
	p_ESCUCHANDO_EMISORA,
	bool:p_IN_DISCOTEC,
	p_PLAYER_LISTITEM[MAX_LISTITEMS],
	pt_PLAYER_PHONE_BOOK_SELECTED,
	pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
	pt_PLAYER_PHONE_NUMBER_SELECTED,
	p_SELECTED_TOY_SLOT,
	bool:p_TUNING,
	p_TUNNING_VEHICLE_ID,
	Float:pt_OLD_EDIT_VOBJECT_POS[6],
	pt_COUNTRY_TYPE,
	pt_TUNING_EDIT_SLOT,
	pt_PIVOT_OBJECT,
	bool:pt_ENPOSTULACION,
	bool:pt_EXIPOSTULACION,
	pt_RESPUES_POSTULACION_0[145],
	pt_RESPUES_POSTULACION_1[145],
	pt_RESPUES_POSTULACION_2[145],
	pt_RESPUES_POSTULACION_3[145],
	pt_RESPUES_POSTULACION_4[145],
	pt_RESPUES_POSTULACION_5[145],
	pt_RESPUES_POSTULACION_6[145],
	pt_RESPUES_POSTULACION_7[145],
	pt_RESPUES_POSTULACION_8[145],
	pt_RESPONSED_CV,
	pt_FABRICA_ID,
	pt_TIENE_BARRIL,
	pt_TIENE_CRISTAL,
	pt_TIENE_CAJA,
	pt_PARTICIPO,
	pt_LLEVA_DINERO,
	pt_TIEMPO_BOLSO,
	pDELETE_CAR_PLAYERID,
	pt_SELECTED_POLICE_OBJECT_ID,
	VariableCaido,
	pt_PLAYER_EVENTODM,
 	pt_EVENTO_INT,
    pt_EVENTO_VW,
    Float:pt_EVENTO_POS[3],
    Float:pt_EVENTO_HEALTH,
	Float:pt_EVENTO_ARMOUR,
	pt_EVENTO_ARMAS[13],
    pt_COUNT_DEATHS,
    LoroHabla,
    pt_INT_ANTITELEPORT_VEH,
    pt_VW_ANTITELEPORT_VEH,
    Float:pt_POS_ANTITELEPORT[3],
    pt_INT_ANTITELEPORT,
    pt_VW_ANTITELEPORT
}
new PLAYER_TEMP[MAX_PLAYERS][E_TEMP_INFO];

#define MAX_LABELS_FABRICA 34
#define MAX_ACTORS_FABRICA 12

enum f_info
{
	bool:f_VALID,
	f_ID,
	f_DBID,
	Float:f_POS[4],
	Float:f_POS_GARAJE[4],
	f_INTERIOR,
	f_VW,
	f_FACCION_ID,
	f_LOCALITATION[64],
	f_DINERO,
	f_VEHICLES[2],
	f_ACTIVIDAD,
	f_VEHICLE_BARRIL,
	f_ALMACE_BARRIL,
	f_VEHICLE_CAJAS,
	f_VENTA_ID,
	Text3D:f_LABELS[MAX_LABELS_FABRICA],
	f_ACTORES[MAX_ACTORS_FABRICA],
	f_TIPO_ACTOR[MAX_ACTORS_FABRICA],
	f_TANQUE[9],
	f_CESTADO[3],
	f_CRISTAL[3],
	f_ESTADO_COCINERO[5],
	f_PORCIENTO_COCINERO[5],
	f_PORCIENTO_HORNO[3],
	f_CAJA_COCINERO[5],
	f_CAJAS_SLOT[10],
	f_CAJAS[20],
	f_PUERTA,
	f_PUERTA_ESTADO,
	f_DINERO_PARED,
	f_BOLSOS_DINERO[32],
	f_CANTIDAD_BOLSOS,
	f_SOBORNO_TIME,
 	f_SOBORNO_ACTIVE,
 	f_SOBORNO_COUNT,
 	f_MAPICON,
 	f_VENTA,
 	f_CHALECOS,
	f_OBJETO_CHALECOS[23],
	f_SNIPER,
	f_OBJETO_SNIPER[10],
	f_TEC9,
	f_OBJETO_TEC9[10],
	f_RECORTADA,
	f_OBJETOS_RECORTADA[10],
	f_UZI,
	f_OBJETO_UZI[10],
	f_PORTON_ESTADO,
	f_PORTON[2]
};
new FABRICAS_INFO[MAX_FABRICAS][f_info];

enum
{
    ACTIVIDAD_NONE,
	ACTIVIDAD_QUIMICOS,
	ACTIVIDAD_VENDER,
	ACTIVIDAD_SOBORNO
};

new Float:CP_Fabricas_Barril[][] =
{
    {0.0,0.0,0.0},
    {-27.3778, 2337.5212, 24.1406},   	//FAB 1
	{-1853.9966, 123.2759, 15.1172},   	//FAB 2
	{-1043.5349, 1546.3799, 33.0007},   //FAB 3
	{259.63461, 2882.35962, 12.52660},	//FAB 4
	{-1102.5535, -1667.3662, 75.8600},	//FAB 5
	{-1505.0505, -626.2808, 13.7065},	//FAB 6
	{-1656.9155,2555.5271,84.4662},   	//FAB 7
	{-377.4531,-1049.9742,58.6779},   	//FAB 8
	{1949.1938,150.8239,36.3711}, 	  	//FAB 9
	{21.6984,897.0439,24.1439},	  		//FAB 10
	{-772.8023,2432.9861,157.0723},  	//FAB 11
	{1060.3553,-296.5565,73.9851} 		//FAB 12
};

new Float:Pos_Recoger_Barril_Fab[][] =
{
    {0.0,0.0,0.0},
    {-28.1522,2349.0771,24.1406},   //FAB 1
	{-1862.2274,112.1568,15.1172},  //FAB 2
	{-1051.8615,1548.0118,33.4376}, //FAB 3
	{260.2088,2890.1047,11.0993},   //FAB 4
	{-1106.3296,-1675.2111,76.3739},//FAB 5
	{-1506.4595,-633.1711,14.1484}, //FAB 6
	{-1661.9880,2555.5720,85.2760}, //FAB 7
	{-377.2772,-1045.2987,59.0874}, //FAB 8
	{1946.3438,151.7602,37.0120},   //FAB 9
	{21.0083,901.5230,24.1700},     //FAB 10
	{-772.6041,2428.4346,157.0908}, //FAB 11
	{1055.1442,-295.8933,73.9851}   //FAB 12
};
new Float:Tanque_Pos_Fabrica[][] =
{
    {-2025.3972, 209.3350, 1041.0414},
	{-2025.3972, 212.2440, 1041.0414},
	{-2025.3972, 215.3320, 1041.0414},
	{-2025.3972, 194.5190, 1041.0414},
	{-2025.3972, 197.5950, 1041.0414},
	{-2025.3972, 200.4760, 1041.0414},
	{-1976.9731, 200.2980, 1041.0414},
	{-1976.9731, 197.4360, 1041.0414},
	{-1976.9731, 194.3620, 1041.0414}
};

new Float:CP_Fabricas_Ventas[][] =
{
	{2431.9109,-1672.5043,13.6113},
	{1520.5901,-1473.3662,9.5000},
	{1091.5337,-1245.3550,15.8272},
	{2206.5029,-2296.2642,14.7647},
	{2548.5298,-1329.7080,34.6677},
	{2477.8740,-1335.9674,27.7025}
};

enum cf_info
{
	c_ID,
	c_SLOT,
	Float:c_POS_X,
	Float:c_POS_Y,
	Float:c_POS_Z
};

new CAJAS_INFO[][cf_info] =
{
	{0, 2, -1995.44226, 220.87140, 1036.28809},
	{0, 1, -1995.43774, 220.88451, 1035.22485},
	{1, 2, -1999.65063, 220.83051, 1036.28809},
	{1, 1, -1999.66272, 220.86720, 1035.21875},
 	{2, 2, -2003.90698, 220.84540, 1036.28809},
	{2, 1, -2003.91345, 220.83290, 1035.21521},
 	{3, 2, -2008.23206, 220.82809, 1036.28809},
	{3, 1, -2008.19434, 220.78900, 1035.22705},
 	{4, 2, -2012.24988, 220.80341, 1036.28809},
	{4, 1, -2012.22876, 220.87730, 1035.21497},
 	{5, 2, -2016.73218, 220.91370, 1036.28809},
	{5, 1, -2016.68604, 220.89410, 1035.21497},
 	{6, 2, -2020.99927, 220.85710, 1036.28809},
	{6, 1, -2020.97791, 220.85620, 1035.21497},
 	{7, 2, -2025.99988, 223.90810, 1036.35596},
	{7, 1, -2026.01501, 223.92320, 1035.28625},
 	{8, 2, -2026.00830, 227.28999, 1036.35596},
	{8, 1, -2025.99390, 227.31190, 1035.28625},
 	{9, 2, -2018.13245, 233.20580, 1036.29602},
	{9, 1, -2018.12109, 233.21930, 1035.21436}
};

new GuardarCajas[][cf_info] =
{
    {0, 0,-1995.4396,222.0775,1035.8162},
	{1, 0,-1999.7394,222.0569,1035.8162},
	{2, 0,-2003.7048,222.0569,1035.8162},
	{3, 0,-2008.2246,222.0594,1035.8162},
	{4, 0,-2012.2891,222.0584,1035.8225},
	{5, 0,-2016.6409,222.0570,1035.8225},
	{6, 0,-2020.9897,222.0580,1035.8225},
	{7, 0,-2024.7925,223.9127,1035.8225},
	{8, 0,-2024.7935,227.3083,1035.8162},
	{9, 0,-2018.1141,231.9926,1035.8162}
};

new Float:BolsoSpawn[][6] =
{
	{-2026.49500, 252.92755, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2026.31030, 253.44168, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2026.50281, 253.90945, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2026.33667, 254.40216, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.83167, 254.63782, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.89404, 254.09216, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.75586, 253.54041, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.83398, 252.93347, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.34473, 253.10786, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.92517, 252.83632, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.17676, 253.58061, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.35071, 254.06973, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2025.22717, 254.59962, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.71033, 254.65564, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.87915, 254.20277, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.42456, 254.29457, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.66357, 253.69652, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.66895, 253.19490, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.32520, 252.85796, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.26550, 253.44356, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.13940, 253.93353, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2024.13062, 254.67595, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.80359, 254.29774, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.79785, 253.63652, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.91846, 253.06677, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.59717, 252.76834, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.22083, 252.83463, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.38904, 253.24394, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.40515, 253.76410, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.36169, 254.28839, 1035.20044,   0.00000, 0.00000, 0.00000},
	{-2023.60840, 254.67216, 1035.20044,   0.00000, 0.00000, 0.00000}
};

new Float:ChalecoSpawn[][6] =
{
    {-2018.02710, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2018.02710, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2018.54712, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2020.52710, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2018.02710, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2019.56714, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2021.50708, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2020.52710, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2019.06714, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2018.54712, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2019.56714, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2020.52710, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2018.54712, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2021.50708, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2021.00708, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2021.50708, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2021.00708, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2019.06714, 238.33360, 1035.69897,   -26.67480, -56.53550, 96.00000},
    {-2020.04712, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000},
    {-2020.04712, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2019.06714, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2021.00708, 238.33360, 1037.05896,   -26.67480, -56.53550, 96.00000},
    {-2019.56714, 238.33360, 1036.35901,   -26.67480, -56.53550, 96.00000}
};
new Float:EscopetasRecortadas[10][6] =
{
	{-2021.98181, 244.37700, 1035.66382,   0.00000, 0.00000, 0.00000},
	{-2021.86084, 244.04727, 1035.22876,   90.00000, 7.00000, 0.00000},
	{-2021.35913, 244.18207, 1035.22888,   90.00000, 7.00000, 180.00000},
	{-2021.08179, 244.37700, 1035.30383,   0.00000, 0.00000, 0.00000},
	{-2021.98181, 244.37700, 1035.30383,   0.00000, 0.00000, 0.00000},
	{-2021.04321, 244.38640, 1035.50781,   0.00000, 0.00000, 180.00000},
	{-2021.09961, 244.04617, 1035.22876,   90.00000, 7.00000, 0.00000},
	{-2020.49866, 244.19951, 1035.22888,   90.00000, 7.00000, 180.00000},
	{-2021.07385, 244.37820, 1035.66382,   0.00000, 0.00000, 0.00000},
	{-2020.22290, 244.40649, 1035.50781,   0.00000, 0.00000, 180.00000}
};
new Float:PTec[10][6] =
{
	{-2019.88318, 244.41052, 1037.08557,   0.00000, 0.00000, 180.00000},
	{-2021.94531, 244.36340, 1036.84961,   0.00000, 0.00000, 0.00000},
	{-2019.89148, 244.23950, 1036.58472,   90.00000, 0.00000, 180.00000},
	{-2021.05835, 244.38280, 1037.08557,   0.00000, 0.00000, 180.00000},
	{-2021.07922, 244.22166, 1036.58472,   90.00000, 0.00000, 180.00000},
	{-2020.84509, 244.35448, 1036.84961,   0.00000, 0.00000, 0.00000},
	{-2018.65576, 244.27119, 1036.58472,   90.00000, 0.00000, 180.00000},
	{-2018.41455, 244.34410, 1036.84961,   0.00000, 0.00000, 0.00000},
	{-2019.59436, 244.36140, 1036.84961,   0.00000, 0.00000, 0.00000},
	{-2018.63733, 244.43520, 1037.08557,   0.00000, 0.00000, 180.00000}
};
new Float:PUzis[10][6] =
{
	{-2018.87012, 244.21410, 1035.22949,   90.00000, 7.00000, 222.00000},
	{-2019.57410, 244.23192, 1035.22949,   90.00000, 7.00000, 160.00000},
	{-2018.89648, 244.43968, 1035.64746,   0.00000, 0.00000, 185.00000},
	{-2018.54041, 244.43912, 1035.64746,   0.00000, 25.00000, 185.00000},
	{-2019.23901, 244.14301, 1035.22949,   90.00000, 7.00000, 127.00000},
	{-2019.25305, 244.44669, 1035.64746,   0.00000, 25.00000, 185.00000},
	{-2018.13232, 244.43910, 1035.64746,   0.00000, 0.00000, 185.00000},
	{-2018.18652, 244.01750, 1035.22949,   90.00000, 7.00000, 77.00000},
	{-2019.61877, 244.43066, 1035.64746,   0.00000, 0.00000, 185.00000},
	{-2018.60645, 244.13139, 1035.22949,   90.00000, 7.00000, -18.00000}
};
new Float:PSnipers[10][6] =
{
	{-2019.85730, 244.38020, 1035.99414,   0.00000, 0.00000, 5.00000},
	{-2021.63086, 244.38510, 1036.28320,   0.00000, 0.00000, 5.00000},
	{-2019.33923, 244.45490, 1036.28320,   0.00000, 0.00000, 187.00000},
	{-2021.60779, 244.37869, 1036.01819,   0.00000, 0.00000, 5.00000},
	{-2019.56970, 244.15793, 1035.87146,   60.00000, 0.00000, 180.00000},
	{-2018.33521, 244.45239, 1036.02905,   0.00000, 0.00000, 187.00000},
	{-2021.14893, 244.14674, 1035.87146,   60.00000, 0.00000, 180.00000},
	{-2018.38452, 244.44810, 1036.29419,   0.00000, 0.00000, 187.00000},
 	{-2020.17102, 244.44839, 1036.24646,   0.00000, 0.00000, 187.00000},
	{-2018.12842, 244.14818, 1035.87146,   60.00000, 0.00000, 180.00000}
};

enum rf_info
{
	rf_ID,          	//fabrica ID
	rf_SLOT,
	rf_OBJETO_ID,   	//ID OBJETO
	//
	Float:rf_POS_X,     //POS REJA NORMAL
	Float:rf_POS_Y,     //POS REJA NORMAL
	Float:rf_POS_Z,     //POS REJA NORMAL
	Float:rf_POS_RX,     //POS REJA NORMAL
	Float:rf_POS_RY,     //POS REJA NORMAL
	Float:rf_POS_RZ,     //POS REJA NORMAL
	//
	Float:rf_NEW_POS_X, //POS REJA ABIERTA
	Float:rf_NEW_POS_Y, //POS REJA ABIERTA
	Float:rf_NEW_POS_Z //POS REJA ABIERTA
};

new REJAS_INFO[][rf_info] =
{
    {6, 0, 985, 	-493.44370, -562.68237, 25.58250,   0.00000, 0.00000, 180.12000,  	-500.00000, -562.68237, 25.58250},
	{6, 1, 986, 	-485.58951, -562.66730, 25.58250,   0.00000, 0.00000, 180.12000,   	-479.00000, -562.66730, 25.58250},
	{7, 0, 19912, 	-2120.61108, -80.85220, 37.11180,   0.00000, 0.00000, 0.00000,      -2111.6400, -80.852200, 37.11180}
};


enum pi_info
{
	pi_ID,
	pi_DB,
	pi_ESTADO,
	pt_NAME[25],
	pt_TIPO[30],
	pi_TEXT[256],
	Float:pt_POS[3],
	pt_TIME
};
new PEDIDO_INFO[MAX_PEDIDOS][pi_info];

enum TXE
{
    PlayerText:NotiConnect[4]
};
new PlayerTextdrawInfo[MAX_PLAYERS][TXE];


enum ObjetoTInfo
{
	TipoOBJ,
	IntOBJ,
	VWOBJ,
	ArmaOBJ,
	BalasOBJ,
	Float:Posx,
	Float:Posy,
	Float:Posz,
	Float:ArmaduraOBJ,
	TickOBJ
}
new InfoObjeto_T[MAX_OBJETOS_T][ObjetoTInfo];


enum Times
{
    TiempoGuardarC,
	TimerChupar,
    RemoveReportTimer[5],
    TimerRevisando,
    RevisadoTime,
	TiempoSacarClub,
    TiempoFumarPorro,
    TiempoCargo,
	TiempoMensajeRobar,
	TiempoBebida,
	TiempoTW,
    TiempoSexoOfrecido,
    TiempoDarDinero,
    TiempoDuda,
    TiempoAnuncio,
    TiempoCombate,
    TiempoComputadora,
    TiempoCLUB,
    TiempoAgresor,
    TiempoCrack,
    TiempoLlenar,
    TiempoMedicamentos,
    TiempoHeroina,
    TiempoCocaina,
    TiempoGino,
    TiempoPreper,
    TiempoMarihuana,
    TiempoBolso,
    TiempoIntentar,
    TiempoGPS,
    TiempoExpulsar,
    TiempoAcademia,
    Tiempo_V3,
    TiempoVenta,
    TiempoMotor,
	TiempoAntiC,
	TiempoCubrir,
	RobadoReciente,
	Advertido,
	Consumible,
	ErrorMensaje,
	Entrando,
	GolpesAdv,
	TiempoAntiTP,
	p_TIME_REF,
	bool:p_REF,
	p_TIME_REPORT,
	t_TIME_POSTULACION,
	t_TIME_TUNING,
	TIMER_SURFING,
	TIMER_CHALECO,
	TIMER_VIDA,
	TIMER_SPEED_HACK,
	TIMER_WEAPONS,
	TIMER_AVISO_FLY_HACK,
	TIMER_AVISO_TP_HACK,
	pTIME_PEDIDO,
	pTIME_LORO,
	TiempoVenderv,
	TiempoVehiculo,
	TiempoAD,
	TiempoFb
}
new PLAYER_TIMES[MAX_PLAYERS][Times];

enum
{
	CMD_USER, 		//0
    CMD_AYUDANTE,   //1
    CMD_MOD_DUDAS,  //2
    CMD_MOD_JUEGO,  //3
    CMD_MOD_GLOBAL, //4
    CMD_ADM,        //5
    CMD_SUBDUENO,   //4
    CMD_DUENO       //6
};

enum dInfo
{
	dID,
	dName[128],
	dOwner[MAX_PLAYER_NAME],
	dPickup,
	Float:dExitX,
	Float:dExitY,
	Float:dExitZ,
	Text3D:dLabel,
}
new DoorInfo[512][dInfo];

#define MAX_VEHICLE_OBJECTS_INDEXS	5
enum
{
	VOBJECT_TYPE_OBJECT,
	VOBJECT_TYPE_TEXT,
	VOBJECT_TYPE_COUNTRY_FLAG,
	VOBJECT_TYPE_COUNTRY_PANEL
};
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS],

	vobject_text_TEXT[32],
	vobject_text_FONT[24],
	vobject_text_FONT_SIZE,
	vobject_text_BOLD,
	vobject_text_FONT_COLOR
};
new VEHICLE_OBJECTS[MAX_VEHICLES][10][e_VEHICLE_OBJECTS];

/*enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[34],
	tuning_object_PRICE
};
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
    {1000, "Alerón Ford", 15000},
    {1001, "Alerón McLaren", 17000},
    {1002, "Alerón Pagani", 13000},
    {1003, "Alerón GTR", 10000},
    {1004, "Alerón P21", 9000},
    {1005, "bnt_b_sc_l", 3000},
    {1007, "wg_l_b_ssk", 2000},
    {1018, "exh_b_ts", 3500},
    {1019, "exh_b_t", 3500},
    {1021, "exh_b_m", 3500},
    {1024, "lgt_b_sspt", 2000},
    {1029, "exh_c_s", 3000},
    {1043, "exh_lr_br2", 3500},
    {1044, "exh_lr_br1", 3000},
    {1047, "wg_l_a_f", 2500},
    {1048, "wg_l_c_f", 2500},
    {1056, "wg_l_a_st", 2500},
    {1090, "wg_l_a_u", 2500},
    {2768, "CJ_CB_BURG", 1000},
    {19078, "TheParrot1", 8000},
    {19893, "LaptopSAMP1", 6000},
    {19838, "CoffeeCup1", 1000},
    {11736, "MedicCase1", 3000},
    {1247, "bribe", 8000},
    {19147, "PinSpotLight5", 5000},
    {19148, "PinSpotLight6", 5000},
    {19149, "PinSpotLight7", 5000},
    {19151, "PinSpotLight9", 5000},
    {19580, "Pizza1", 1000},
    {2690, "CJ_FIRE_EXT", 5000},
    {19308, "taxi01", 3000},
    {1550, "CJ_MONEY_BAG", 4000},
    {19306, "kmb_goflag2", 5000},
    {19307, "kmb_goflag3", 5000},
    {18749, "SAMPLogoSmall", 5000},
    {19054, "XmasBox1", 3000},
    {19133, "ArrowType4", 5000},
    {19471, "forsale02", 3000},
    {19878, "Skateboard1", 2000},
    {19314, "bullhorns01", 5000},
    {2404, "CJ_SURF_BOARD", 3000},
    {2405, "CJ_SURF_BOARD2", 3000},
    {2406, "CJ_SURF_BOARD3", 3000},
    {19317, "bassguitar01", 2000},
    {19318, "flyingv01", 2000},
    {2232, "MED_SPEAKER_4", 3000},
    {1840, "speaker_2", 2000},
    {2229, "SWANK_SPEAKER", 4000},
	{1025, "wheel_or1", 2500},
	{1073, "wheel_sr6", 2500},
	{1074, "wheel_sr3", 2500},
	{1075, "wheel_sr2", 2500},
	{1076, "wheel_lr4", 2500},
	{1077, "wheel_lr1", 2500},
	{1078, "wheel_lr3", 2500},
	{1079, "wheel_sr1", 2500},
	{1080, "wheel_sr5", 2500},
	{1081, "wheel_sr4", 2500},
	{1082, "wheel_gn1", 2500},
	{1083, "wheel_lr2", 2500},
	{1084, "wheel_lr5", 2500},
	{1085, "wheel_gn2", 2500},
	{1096, "wheel_gn3", 2500},
	{1097, "wheel_gn4", 2500},
	{19894, "laptop", 4500},
	{19873, "toiletpaperroll1", 200},
	{19874, "soapbar1", 200},
	{19624, "case1", 600},
	{19621, "obj1", 1500},
	{19620, "police", 10500},
	{1049, "Alerón TSR-S", 6000},
    {1050, "Alerón Speedtail", 7000},
    {1098, "Rueda", 7000},
    {1128, "Rejilla1", 5000},
    {1130, "Rejilla2", 5500},
    {1131, "Rejilla3", 3000},
	{1157, "Parachoque",5000},
	{1174, "Parachoque",5000},
	{1175, "Parachoque",5000},
	{1189, "Parachoque", 5000},
	{1254, "Calabera", 20000},
	{1274, "Dinero", 25000},
	{2103, "Radio", 13000},
	{2231, "Parlante", 15000},
    {2798, "Manilla", 8000},
    {3092, "Cadaver", 60000},
	{11702, "luces intermitentes", 10000},
	{18647, "Neon Rojo", 14000},
	{18648, "Neon Azul", 14000},
	{18649, "Neon Verde", 14000},
    {18650, "Neon Amarillo", 14000},
    {18651, "Neon Rosa", 14000},
    {18652, "Neon Blanco", 14000},
    {19150, "Luz Amarilla", 8000},
    {19153, "Luz", 8000},
    {19156, "Luz Verde", 8000},
    {19917, "Motor Sport", 30000}
};*/
enum Global_Vehicles_Info
{
	bool:gb_vehicle_VALID,
	bool:gb_vehicle_OCCUPIED,
	gb_vehicle_TYPE,
	gb_vehicle_MODELID,
	gb_vehicle_NUMBER_PLATE[32],
	Float:gb_vehicle_POS[3],
	Float:gb_vehicle_SPAWN_X,
	Float:gb_vehicle_SPAWN_Y,
	Float:gb_vehicle_SPAWN_Z,
	Float:gb_vehicle_SPAWN_ANGLE,
	pt_INMUTE_VEH_TP,
	Float:gb_vehicle_HEALTH,
	gb_vehicle_DAMAGE_PANELS,
	gb_vehicle_DAMAGE_DOORS,
	gb_vehicle_DAMAGE_LIGHTS,
	gb_vehicle_DAMAGE_TIRES,
	gb_vehicle_COLOR_1,
	gb_vehicle_COLOR_2,
	gb_vehicle_PAINTJOB,
	Float:gb_vehicle_GAS,
	Float:gb_vehicle_MAX_GAS,
	gb_vehicle_COMPONENTS[14],
	gb_vehicle_STATE,
	gb_vehicle_INTERIOR,
	gb_vehicle_WORLD,
	gb_vehicle_PARAMS_ENGINE,
	gb_vehicle_PARAMS_LIGHTS,
	gb_vehicle_PARAMS_ALARM,
	gb_vehicle_PARAMS_DOORS,
	gb_vehicle_PARAMS_BONNET,
	gb_vehicle_PARAMS_BOOT,
	gb_vehicle_PARAMS_OBJECTIVE,
	gb_vehicle_DRIVER,
	gb_vehicle_LAST_DRIVER,
	gb_vehicle_LAST_CLOSED_TIME,
	gb_vehicle_LAST_REPAIR_TIME,
	bool:gb_vehicle_SPAWNED,
	gb_vehicle_TP_IMMUNITY,
	gp_vehicle_vip,
	gb_vehicle_ATTACHED_TO,
	gb_vehicle_EMISORA_ID,
	Text3D:gb_vehicle_LABEL
};
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum Propiedades
{
    pMapIcon,
	pIDPropietario,
	pGanancias,
	pVW,
	pEnVenta,
	pEnVentaPor,
	pPrecio,
	pNivel,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosXS,
	Float:pPosYS,
	Float:pPosZS,
	Float:pPosA,
	Float:pPosAS,
	pEnUso,
	pTipo,
	pID,
	Float:pRoperoX,
	Float:pRoperoY,
	Float:pRoperoZ,
	pRoperoAbierto,
	pAK47,
	pM4,
	pEscopetaNormal,
	pEscopetaDeCombate,
	pMP5,
	p9mm,
	p9mmSilenciada,
	pDesertEagle,
	pRifle,
	pGranada,
	CasaID2,
	pManopla,
    pPaloDeBillar,
	pCuchillo,
	pKatana,
	pPaloDeGolf,
	pBateDeBeisbol,
	pConsoladorRosa,
	pVibradorBlanco,
	pGranVibradorBlanco,
	pVibradorPlateado,
	pBaston,
	pPala,
	pFlores,
	pCamara,
	pMedicamentos,
	pMarihuana,
	pCrack,
	pLugarRopero,
	Float:pGX,
	Float:pGY,
	Float:pGZ,
	Float:pGA,
	Text3D:pLabel,
	Text3D:pLabel2,
	Text3D:pLabel3,
	Text3D:pLabel4,
	Text3D:pLabel5,
	Text3D:pLabel6,
	pPickup,
	pPropietario[40],
	pInterior,
	pInteriorID,
	pAbierta,
	pLugarHeladera,
	pSprunk,
	pCerveza,
	pAquarius,
	pPizzas,
	pVino,
	Float:pHeladeraX,
	Float:pHeladeraY,
	Float:pHeladeraZ,
	pLocalizacion[80],
	Amater,
	pEmisora,
	PuertaIT
};
new PropInfo[MAX_PROPIEDADES][Propiedades];

enum ri_info
{
	r_ID,
	r_ESTADO,
	r_PLAYERID,
	r_REPORT_PLAYERID,
	r_TEXT[256],
	r_TIME,
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
	BeingUsed,
	ReportadoID,
	TiempoReport
};
//
new REPORT_INFO[MAX_REPORTS][ri_info];

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}
new SpikeStrips[20][Spikes];
enum VI
{
    vID,
	vpropietario,
	vprecio,
	vmodelo,
	Float:vx,
	Float:vy,
	Float:vz,
	Float:va,
	vmoneda,
	vcolor1,
	vcolor2,
	vcomprable,
	vfaccion,
	vtrabajo,
	vpatente
};
new VehiculosInfo[MAX_VEHICLES][VI];

new const ComponentPrice[][] =
{
	{1000, 400}, 	{1001, 550},	{1002, 200},	{1003, 250},	{1004, 100},	{1005, 150},	{1006, 80},		{1007, 500},
	{1008, 500},	{1009, 200},	{1010, 1000},	{1011, 220},	{1012, 250},	{1013, 100},	{1014, 400},	{1015, 500},
	{1016, 200},	{1017, 500},	{1018, 350},	{1019, 300},	{1020, 250},	{1021, 200},	{1022, 150},	{1023, 350},
	{1024, 50},		{1025, 1000},	{1026, 480},	{1027, 480},	{1028, 770},	{1029, 680},	{1030, 370},	{1031, 370},
	{1032, 170},	{1033, 120},	{1034, 790},	{1035, 150},	{1036, 500},	{1037, 690},	{1038, 190},	{1039, 390},
	{1040, 500},	{1041, 390},	{1042, 1000},	{1043, 500},	{1044, 500},	{1045, 510},	{1046, 710},	{1047, 670},
	{1048, 530},	{1049, 810},	{1050, 620},	{1051, 670},	{1052, 530},	{1053, 130},	{1054, 210},	{1055, 230},
	{1056, 520},	{1057, 430},	{1058, 620},	{1059, 720},	{1060, 530},	{1061, 180},	{1062, 550},	{1063, 430},
	{1064, 830},	{1065, 850},	{1066, 750},	{1067, 250},	{1068, 200},	{1069, 550},	{1070, 450},	{1071, 550},
	{1072, 450},	{1073, 1100},	{1074, 1030},	{1075, 980},	{1076, 1560},	{1077, 1620},	{1078, 1200},	{1079, 1030},
	{1080, 900},	{1081, 1230},	{1082, 820},	{1083, 1560},	{1084, 1350},	{1085, 770},	{1086, 100},	{1087, 1500},
	{1088, 150},	{1089, 650},	{1090, 450},	{1091, 100},	{1092, 750},	{1093, 350},	{1094, 450},	{1095, 350},
	{1096, 1000},	{1097, 620},	{1098, 1140},	{1099, 1000},	{1100, 940},	{1101, 780},	{1102, 830},	{1103, 3250},
	{1104, 1610},	{1105, 1540},	{1106, 780},	{1107, 780},	{1108, 780},	{1109, 1610},	{1110, 1540},	{1111, 0},
	{1112, 0},		{1113, 3340},	{1114, 3250},	{1115, 2130},	{1116, 2050},	{1117, 2040},	{1118, 780},	{1119 , 940},
	{1120, 780},	{1121 , 940},	{1122, 780},	{1123, 860},	{1124, 780},	{1125, 1120},	{1126, 3340},	{1127, 3250},
	{1128, 3340},	{1129, 1650},	{1130, 3380},	{1131, 3290},	{1132, 1590},	{1133, 830},	{1134, 800},	{1135, 1500},
	{1136, 1000},	{1137, 800},	{1138, 580},	{1139, 470},	{1140, 870},	{1141, 980},	{1142, 150},	{1143, 150},
	{1144, 100},	{1145, 100},	{1146, 490},	{1147, 600},	{1148, 890},	{1149, 1000},	{1150, 1090},	{1151, 840},
	{1152, 910},	{1153, 1200},	{1154, 1030},	{1155, 1030},	{1156, 920},	{1157, 930},	{1158, 550},	{1159, 1050},
	{1160, 1050},	{1161, 950},	{1162, 650},	{1163, 450},	{1164, 550},	{1165, 850},	{1166, 950},	{1167, 850},
	{1168, 950},	{1169, 970},	{1170, 880},	{1171, 990},	{1172, 900},	{1173, 950},	{1174, 1000},	{1175, 900},
	{1176, 1000},	{1177, 900},	{1178, 2050},	{1179, 2150},	{1180, 2130},	{1181, 2050},	{1182, 2130},	{1183, 2040},
	{1184, 2150},	{1185, 2040},	{1186, 2095},	{1187, 2175},	{1188, 2080},	{1189, 2200},	{1190, 1200},	{1191, 1040},
	{1192, 940},	{1193, 1100}
};

#define MAX_POLICE_OBJECTS	300
enum enum_POLICE_OBJECTS
{
	bool:police_object_VALID,
	police_object_USER[24],
	police_object_OBJECT_ID
};
new POLICE_OBJECTS[MAX_POLICE_OBJECTS][enum_POLICE_OBJECTS];

//====================================    Forwads     ====================================//
forward CargarPlanta(id);
forward CrearPlanta(playerid,id);
forward Forzado(playerid);
forward Forzado2(playerid);
forward Forzado3(playerid);
forward Forzado4(playerid);
forward Forzado5(playerid);
forward Forzado6(playerid);
forward Forzado7(playerid);
forward Forzado8(playerid);
forward Forzado9(playerid);
forward Forzado10(playerid);
forward Forzado11(playerid);
forward Forzado12(playerid);
forward CargarCasa1();
forward CargarCasa2();
forward CargarCasa3();
forward CargarCasa4();
forward CargarCasa5();
forward CargarCasa6();
forward CargarCasa7();
forward CargarCasa9();
forward CargarCasa11();
forward CargarCasa12();
forward CargarCasa8();
forward CargarCasa10();
forward CerrarPuerta();
forward CerrarPuerta2();
forward CerrarPuerta3();
forward CerrarPuerta4();
forward CerrarPuerta5();
forward CerrarPuerta6();
forward CerrarPuerta7();
forward CerrarPuerta8();
forward CerrarPuerta9();
forward CerrarPuerta10();
forward CerrarPuerta11();
forward CerrarPuerta12();
forward DarSlap(playerid);
forward CrearPlanta2(playerid, Float:X, Float:Y, Float:Z,id);
forward CargarEstacionamientos();
forward setEstacionamientoName(id);
forward LoadParkings();
forward RemovePlayerAttachedItem(playerid,slot);
forward Quitar2Cargos(playerid);
forward Quitar1Cargo(playerid);
forward LoadMaletero(playerid,vehicleid);
forward RemoveReport(playerid,id);
forward CargarPuertas();
forward LoadDoor();
forward Encerrando2(playerid);
forward CargarActores();
forward ArrestarJugador(actor,playerid,tienda);
forward RobarTiendaTerminado(playerid,actor,tienda);
forward datosCargados(playerid);
forward cargarRoboTiendas();
forward StopAudioStream(playerid);
forward AntiCJ(playerid);
forward KickPlayerState(playerid);
forward OcultarAnim(playerid);
forward SacarAnimF(playerid);
forward StopCell(playerid);
forward QuitarDinero(playerid,cantidad);
forward DarDinero(playerid,cantidad);
forward DarDineroLogin(playerid);
forward CheckNickName(playerid,result);
forward UsuarioRegistrado(playerid);
forward PayDay(value);
forward Descongelar(playerid);
forward QuitarLogro(playerid);
forward Maneja(playerid);
forward DArmas(playerid);
forward ColorJugadorDefault(playerid);
forward accionesProstitutas();
forward ProstitutaJugador(playerid);
forward UpdateTerritorio(terri_id);
forward TimerPlantas();
forward elSexoOral(playerid);
forward LlamadaAceptada(playerid);
forward LlamadaCancelada(playerid);
forward OfertaPerdida(playerid);
forward TiempoVender(playerid);
forward Autos(playerid);
forward OnPlayerDataLoaded(playerid);
forward OnPlayerRegister(playerid);
forward OnPlayerSpawnLoaded(playerid);
forward L_Vehicles(resultid, extraid);
forward L_Objetos(vehicle_id);
forward Consumiendo(playerid);
forward RespawnearVF2(vehicleid);
forward RespawnearVF(vehicleid);
forward RespawnearV(vehicleid);
forward OcultarLuegoDe(playerid);
forward LimpiarSombrero(playerid);
forward pVomitar(playerid);
forward MostrarAfinidad(playerid);
forward OcultarAfinidad(playerid);
forward QuitandoA(playerid);
forward Revisado(playerid,id);
forward QuitarReporte(playerid);
forward ColgarLlamada(playerid);
forward CurarON(playerid);
forward Taximetro(playerid);
forward LlamadaCops(playerid);
forward LlamadaGrua(playerid);
forward ServicioGrua1(playerid);
forward ServicioGrua2(playerid);
forward MINUTOSG_BONER(playerid);
forward DarGasolina(driver, autoid, petroleo);
forward MostrarLuegoDe(playerid);
forward LlevarClub(playerid,club);
forward SacarClub(playerid);
forward DescongelarCBUG(playerid);
forward MusicaEventos();
forward NavidadActiva();
forward Conteo(Tiempo);
forward CurandoHospital(playerid);
forward RutraTransportista(playerid);
forward MandarMensajeTransportistas(playerid);
forward RutaTransportista(playerid);
forward ApareceHospital2(playerid);
forward ComprobarDanoMotor(playerid);
forward ApagarMotor(playerid);
forward Estacionando(playerid);
forward EncenderMotor(playerid);
forward SinGasolina(playerid);
forward Logeado2(playerid);
forward Logeado(playerid);
forward SaveAccount(playerid);
forward CerrarAviso(playerid);
forward ClearAnim(playerid);
forward BorrarDinero(id);
forward TextoCombate(playerid);
forward CargarFacciones();
forward DesCargarMapeosEx(playerid);
forward llamada2(playerid);
forward llamada(playerid);
forward MostrarMapas(playerid);
forward MostrarBoxMedico(playerid);
forward DestruirDineroColegiala(dinero);
forward CargarCasas();
forward bool:Buscar(const search[], const find[]);
forward SetPlayerStats(playerid);
forward ReanimarMedico(playerid,ID);
forward RutaCosechador(playerid);
forward CosechasPoints(playerid);
forward PrimerP(playerid);
forward TiempoArresto(playerid);
forward Encerrando(playerid);
forward EnviarJail(playerid);
forward Aviso(playerid);
forward Aviso2(playerid);
forward Aviso3(playerid);
forward Aviso4(playerid);
forward LeaveDancer(id);
forward OcultarMensajeAlerta(playerid);
forward EncerrandoNombre(playerid,i);
forward TimerLogin(playerid);
forward Forzado(playerid);
forward Forzado2(playerid);
forward LlenarBalde(playerid);
forward finllamadax(playerid,i);
forward finllamada(playerid);
forward kicktimer(playerid);
forward AutoCheats2();
forward PuntoB(playerid);
forward SalonTimer();
forward CargarPropiedades();
forward CancelarLlamada(playerid, tipo);
forward Recolectar(playerid);
forward TextoMarcelo(playerid);
forward TextoMarcelo(playerid);
forward TextoMrBeast(playerid);
forward TextoBrayan(playerid);
forward QuitarCargando(playerid);
forward MoverAvion();
forward Reparando(playerid,reparaid,vehicleid,darexp);
forward Legal1(playerid);
forward Legal2(playerid);
forward TAUDIO(playerid);
forward Legal3(playerid);
forward Legal4(playerid);
forward Legal5(playerid);
forward Ilegal1(playerid);
forward Ilegal2(playerid);
forward Ilegal3(playerid);
forward Ilegal4(playerid);
forward Ilegal5(playerid);
forward DescargandoCamion(playerid);
forward ProxDetector(Float:radi, playerid, const string[],col1,col2,col3,col4,col5);
forward VerificarPalabra(playerid, const string[]);
forward CorreoInvalido(playerid);
forward VolverRobo();
forward DestroyDynamicObjectEx(&objeto);
forward DespuesTimerAsalto(a);
forward DescongelarAsalto();
forward Auto1(playerid, tipo);
forward Auto2(playerid, tipo);
forward Auto3(playerid, tipo);
forward Auto4(playerid, tipo);
forward cargartodo();
forward LevantarMano(playerid,actor);
forward LevantarActor(actor);
forward MatarPolicia(actor);
forward RendirseUsuario(playerid);
forward AplicarAlarma(vehicleid);
forward TimerHideNotification(playerid);
forward SendNotification(playerid, const reason[]);
forward SendNotification_Manual(playerid, const reason[]);
forward HideNotification(playerid, TDN);
forward OnTrailerAttach(playerid,trailerid,vehicleid);
forward OneSecTimer();
//====================================    STOCKS     ====================================//
 //
stock BZ_MILIFORME(p,s,d,r = 0)
{
	if(PLAYER_INFO[p][pSexo] != d)return SendClientMessage(p, -1,"Tu  no puedes colocarte este uniforme.");
 	if(PLAYER_INFO[p][pRango] < r)return SendClientMessage(p, -1,"No posees el rango necesario para usar éste uniforme.");
	PLAYER_INFO[p][pModelo] = s;
	SetPlayerSkin(p, PLAYER_INFO[p][pModelo]);
	SetPlayerColor(p, COLOR_MILICIA);
	PLAYER_INFO[p][mDuty] = 1;
	new FORMA_BON[100+MAX_PLAYER_NAME];
	format(FORMA_BON, sizeof(FORMA_BON), "%s %s toma su placa y su uniforme del casillero.", RangoMilitar(p), PLAYER_INFO[p][Nickname]);
	ProxDetector(20, p, FORMA_BON, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
 	return 1;
}
//LOD ADM

LOG_ADM(const dato[])
{
	foreach(new i : Player)
	{
		if(PLAYER_INFO[i][pAdmin] >= 5 && VerAdmin[i] == 1) SendClientMessage(i, -1, dato);
	}
	return 1;
}
stock QUE_CONSUME(playerid,t)
{
	new string[200];
	switch(t)
	{
	    case 1:
	    {
	        if(PLAYER_INFO[playerid][pCrack] <= 0) return SendClientMessage(playerid, -1, "No tienes gramos de crack.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCrack] - gettime() <= 0)
			{
				GivePlayerArmour(playerid, 10.0);
				PLAYER_INFO[playerid][pCrack]--;
				PLAYER_TIMES[playerid][TiempoCrack] = gettime() + 30;
				LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AccionesRol(playerid,"consume un poco de crack.", 20);
				PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCrack] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}

	    case 2:
	    {
	        if(PLAYER_INFO[playerid][pRemedios] < 1) return SendClientMessage(playerid, -1, "Ya no te quedan medicamentos.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoMedicamentos] - gettime() <= 0)
			{
				GivePlayerHealth(playerid, 10.0);
				PLAYER_INFO[playerid][pRemedios]--;
    			PLAYER_TIMES[playerid][TiempoMedicamentos] = gettime() + 30;
				LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AccionesRol(playerid,"consume un medicamento.", 20);
				PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir medicamentos.",PLAYER_TIMES[playerid][TiempoMedicamentos] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
	    }

	    case 3:
	    {
	        if(PLAYER_INFO[playerid][pHeroina] <= 0) return SendClientMessage(playerid, -1, "No tienes heroína.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoHeroina] - gettime() <= 0)
			{
			    GivePlayerHealth(playerid, 100.0);
			    PLAYER_INFO[playerid][pHeroina]--;
			    PLAYER_TIMES[playerid][TiempoHeroina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de heroina.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoHeroina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
	    }
	    case 4:
	    {
    		if(PLAYER_INFO[playerid][pCocaina] <= 0) return SendClientMessage(playerid, -1, "No tienes cocaina.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCocaina] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 100.0);
			    PLAYER_INFO[playerid][pCocaina]--;
			    PLAYER_TIMES[playerid][TiempoCocaina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de cocaina.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCocaina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
     		return 1;
	    }
	   	case 5:
	    {
    		if(PLAYER_INFO[playerid][pPerico] <= 0) return SendClientMessage(playerid, -1, "No tienes perico.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCocaina] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 100.0);
			    PLAYER_INFO[playerid][pPerico]--;
			    PLAYER_TIMES[playerid][TiempoCocaina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de perico.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCocaina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
     		return 1;
	    }
	    case 6:
	    {
    		if(PLAYER_INFO[playerid][pGino] <= 0) return SendClientMessage(playerid, -1, "No tienes Gino.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoGino] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 50.0);
			    PLAYER_INFO[playerid][pGino]--;
			    PLAYER_TIMES[playerid][TiempoGino] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de gino.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoGino] - gettime());
				SendClientMessage(playerid, -1, string);
			}
     		return 1;
	    }
	    case 7:
	    {
    		if(PLAYER_INFO[playerid][pPreper] <= 0) return SendClientMessage(playerid, -1, "No tienes Preper.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoPreper] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 50.0);
			    PLAYER_INFO[playerid][pPreper]--;
			    PLAYER_TIMES[playerid][TiempoPreper] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de preper.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoPreper] - gettime());
				SendClientMessage(playerid, -1, string);
			}
     		return 1;
	    }
	}
	return 1;
}
//
stock NameCheck(const source[])
{
    new length = strlen(source);
    if (!(3 <= length <= 20)) return 0;
    new pos = strfind(source, "_");
    if (pos == -1) return 0;
    new    us_count;
    for (new i; i != length; ++i)
    {
        switch (source[i])
        {
            case '_': ++us_count;
        }
        if (!i || i == pos + 1)
        {
            switch (source[i])
            {
                case 'A' .. 'Z': continue;
                case 'a' .. 'z': continue;
				case '0' .. '9': continue;
                default: return 0;
            }
        }
        else if (i && i != pos && i != pos + 1)
        {
            switch (source[i])
            {
                case 'A' .. 'Z': continue;
                case 'a' .. 'z': continue;
				case '0' .. '9': continue;
                default: return 0;
            }
        }
    }
    return (us_count == 1 && source[length - 1] != '_');
}
//=======SISTEMA GRUA BY B0N3R===================
stock TypeGrua(playerid)
{
	new r_grua[50];
	switch(INFO_GRUA[playerid][Tipo])
	{
		case 1:r_grua= "Al estacionamiento registrado con anterioridad";
		case 2:r_grua= "Al estacionamiento municipal";
		case 3:r_grua= "Al estacionamiento marítimo";
		case 4:r_grua= "A mi posición actual";
	}
	return r_grua;
}

stock PRICE_FORVIP(playerid)
{
	new price;
	switch(PLAYER_INFO[playerid][pVIP])
	{
	    case 0,1:price = 20000;
	    case 2:price = 10000;
	    default:price = 0;
	}
	return price;
}
//milicia
stock ARMA_MILI(playerid,a)
{

     DarArma(playerid,a);
	 new string[128];
	 format(string, sizeof(string), "%s %s toma un/a %s del casillero.", RangoMilitar(playerid), PLAYER_INFO[playerid][Nickname],OBJETOS_INFO[a][obj_NAME]);
	 ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
}
stock PANEL_GRUA(playerid)
{

 	for(new i = 0; i < 4; i++)
  	{
   		PLAYER_TEMP[playerid][pVEHICLES][i] = 0;
    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 0;
    }
	if(autos[playerid] > 0 || autos2[playerid] > 0 || autos3[playerid] > 0 || autos4[playerid] > 0)
	{
		new vehiculo1[150],vehiculo2[150],vehiculo3[150],vehiculo4[150],mensaje[400];
		if(PLAYER_INFO[playerid][vModelo] > 0&& autosSpawned[playerid][0])
		{
  				for(new i = 0; i < 4; i++)
		    	{
       				if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
			        {
			        	PLAYER_TEMP[playerid][pVEHICLES][i] = autos[playerid];
		    			PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 1;
			    		break;
		    		}
			    }
				format(vehiculo1, sizeof(vehiculo1), " Vehículo: {F6E200}%s{FFFFFF}  | Patente: {f21111}%s{FFFFFF} | Costo del servicio: {F81414}$%d", NombreAuto[PLAYER_INFO[playerid][vModelo]-400], PLAYER_INFO[playerid][vpatente], PRICE_FORVIP(playerid));
		}
		if(PLAYER_INFO[playerid][vModelo2] > 0&& autosSpawned[playerid][1])
		{
  			for(new i = 0; i < 4; i++)
	    	{
      			if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
	        	{
		        	PLAYER_TEMP[playerid][pVEHICLES][i] = autos2[playerid];
	    			PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 2;
		    		break;
	    		}
		    }
			format(vehiculo2, sizeof(vehiculo2), "\n Vehículo: {F6E200}%s{FFFFFF}  | Patente: {f21111}%s{FFFFFF} | Costo del servicio: {F81414}$%d", NombreAuto[PLAYER_INFO[playerid][vModelo2]-400], PLAYER_INFO[playerid][v2patente],PRICE_FORVIP(playerid));
		}
		if(PLAYER_INFO[playerid][vModelo3] > 0&& autosSpawned[playerid][2])
		{
  			for(new i = 0; i < 4; i++)
	    	{
      			if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
	        	{
		        	PLAYER_TEMP[playerid][pVEHICLES][i] = autos3[playerid];
	    			PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 3;
			    	break;
	    		}
		    }
			format(vehiculo3, sizeof(vehiculo3), "\n Vehículo: {F6E200}%s{FFFFFF}  | Patente: {f21111}%s{FFFFFF} | Costo del servicio: {F81414}$%d", NombreAuto[PLAYER_INFO[playerid][vModelo3]-400], PLAYER_INFO[playerid][v3patente],PRICE_FORVIP(playerid));
		}
		if(PLAYER_INFO[playerid][vModelo4] > 0&& autosSpawned[playerid][3])
		{
  			for(new i = 0; i < 4; i++)
	    	{
      			if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
	        	{
		        	PLAYER_TEMP[playerid][pVEHICLES][i] = autos4[playerid];
	    			PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 4;
			    	break;
	    		}
		    }
			format(vehiculo4, sizeof(vehiculo4), "\n Vehículo: {F6E200}%s{FFFFFF}  | Patente: {f21111}%s{FFFFFF} | Costo del servicio: {F81414}$%d", NombreAuto[PLAYER_INFO[playerid][vModelo4]-400], PLAYER_INFO[playerid][v4patente], PRICE_FORVIP(playerid));
		}
		format(mensaje, sizeof(mensaje), "%s%s%s%s", vehiculo1,vehiculo2,vehiculo3,vehiculo4);
		ShowPlayerDialog(playerid, DIALOGO_GRUA4, DIALOG_STYLE_LIST, "Selecciona un vehiculo para remolca", mensaje, "Aceptar","Cancelar");
	}
	return 1;
}

stock resetventa(playerid)
{
	VEHPLAYER[playerid][IDU] = - 1;//id a vender
	VEHPLAYER[playerid][IDVEN] = -1;//Id usuario que vende
	VEHPLAYER[playerid][PRECIO] = 0;//PRECIO A VENDER
	VEHPLAYER[playerid][PMAX] = 0;//PRECIO MAXIMO
	VEHPLAYER[playerid][TIPO] = 0;//Tipo de auto
	VEHPLAYER[playerid][SLOT] = 0;//SLOT DEL PJ QUE VENDE
	VEHPLAYER[playerid][IDV] = 0;//ID REAL VEHÍCULO
	//DATOS VEHÍCULOS
	VEHPLAYER[playerid][GASOLINA] = 0;//Gasolina actual
	VEHPLAYER[playerid][MODELO] = 0;//Modelo
	VEHPLAYER[playerid][TRABA] = 0;//
	VEHPLAYER[playerid][ALARMA] = 0;
	VEHPLAYER[playerid][INTERIOR] = 0;
	VEHPLAYER[playerid][SEGURO] = 0;
	VEHPLAYER[playerid][MUNDO] = 0;
	VEHPLAYER[playerid][PLACA] = 0;
	VEHPLAYER[playerid][COLOR1] = 0;
	VEHPLAYER[playerid][COLOR2] = 0;
 	VEHPLAYER[playerid][  XAV] = 0;
	VEHPLAYER[playerid][  YAV] = 0;
	VEHPLAYER[playerid][  ZAV] = 0;
	VEHPLAYER[playerid][MONEDA] = 0;
	VEHPLAYER[playerid][SQL] = -1;
	return 1;
}

//==========SISTEMA PINTAR ARMAS by boner thx
DAR_COLOREARAM(playerid, newweapon) {

    RemovePlayerAttachedObject(playerid, 7);
    if(COLOR_ARMA[playerid] != -1)
	{
        PINTARARMA_(playerid, newweapon, COLOR_ARMA[playerid]);
    }
}

PINTARARMA_(playerid, iWepID, iChoice)
{

    switch(iWepID)
	{

        case 22: SetPlayerAttachedObject(playerid, 7, 346, 6, -0.004999, -0.003999, -0.006000, 0.000000, 0.000000, -1.800000, 1.007000, 1.337999, 1.069000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 23: SetPlayerAttachedObject(playerid, 7, 347, 6, -0.003999, -0.001999, -0.003999, 0.000000, 0.299999, -0.999999, 1.000000, 1.188000, 1.063000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 24: SetPlayerAttachedObject(playerid, 7, 348, 6, -0.006999, -0.004000, 0.002000, -1.600000, -0.200000, 0.400000, 1.019999, 1.146999, 1.027000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 25: SetPlayerAttachedObject(playerid, 7, 349, 6, 0.000000, -0.008999, -0.004000, 0.000000, 1.099999, 1.499999, 1.000000, 1.222000, 1.088000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 27: SetPlayerAttachedObject(playerid, 7, 351, 6, 0.003000, -0.014000, -0.003000, 0.000000, 0.000000, 2.199999, 1.000000, 1.371000, 1.023000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 28: SetPlayerAttachedObject(playerid, 7, 352, 6, -0.002000, -0.008000, -0.001999, -0.300000, 0.000000, 1.199999, 1.019999, 1.245000, 1.043000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 29: SetPlayerAttachedObject(playerid, 7, 353, 6, 0.000000, -0.009000, -0.009000, 0.000000, 0.099999, 2.100000, 1.000000, 1.290001, 1.053000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 30: SetPlayerAttachedObject(playerid, 7, 355, 6, 0.000000, -0.011000, 0.000000, 0.000000, 0.000000, 2.100000, 1.009000, 1.424000, 1.013000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 31: SetPlayerAttachedObject(playerid, 7, 356, 6, -0.002000, -0.005999, 0.001000, 0.000000, 0.899999, 1.699999, 0.997999, 1.318999, 1.088001, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 32: SetPlayerAttachedObject(playerid, 7, 372, 6, -0.003000, -0.009000, -0.001999, 0.000000, 0.400000, 0.800000, 1.015000, 1.232000, 1.055000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 33: SetPlayerAttachedObject(playerid, 7, 357, 6, 0.000000, -0.015000, -0.001999, 0.000000, 1.200000, 2.199999, 1.000000, 1.286001, 1.096001, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 35: SetPlayerAttachedObject(playerid, 7, 359, 6, 0.001999, -0.007000, -0.009000, 0.000000, -0.100000, 0.000000, 0.989999, 1.213001, 1.084001, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 36: SetPlayerAttachedObject(playerid, 7, 360, 6, 0.001000, -0.004999, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.140000, 1.055000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        case 38: SetPlayerAttachedObject(playerid, 7, 362, 6, -0.041000, 0.001999, 0.012000, 0.000000, 0.999999, -0.599999, 1.085000, 1.189999, 1.134000, iWeaponTints[iChoice], iWeaponTints[iChoice]);
        default: return 1;
    }
    COLOR_ARMA[playerid] = iChoice;
    return 1;
}


stock MSG_COMPROVEH(playerid)
{
    if(mayPlayerSpawnVehicle(playerid))
	{
		SendClientMessage(playerid, -1, "Compraste el vehículo, ahora estacionalo en un lugar seguro usando {009AFF}/estacionar");
		SendClientMessage(playerid, -1, "Puedes trabar y destrabar las puertas de tu vehículo con {f21111}/abrir{FFFFFF} y {f21111}/cerrar{FFFFFF}.");
		SendClientMessage(playerid, -1, "Para localizar tu vehículo usa {009AFF}/localizar {ffffff}.");
		SendClientMessage(playerid, -1, "En caso de que tu vehículo sea robado, llama a la policía y comunícales la patente.");
		RELOAD_TD(playerid);
	}
	else return SendClientMessage(playerid, 0xFF0000FF, "Info: Detectamos 2 vehículos spawneados; Tu vehículo fue guardado en /vehiculos.");
	return 1;
}

enum V_ROB
{
	EsRobo,//es pa robar
	IDro//id del robo
};
new ROBO_COCHE[MAX_VEHICLES][V_ROB];

stock MostrarVeriAdmin(playerid)
{
	ShowPlayerDialog(playerid, VERIFICAR_ADMIN, DIALOG_STYLE_PASSWORD, "Verificación Administrativa.", "{FFFFFF}Ingrese el código de {ffff04}seguridad{FFFFFF}.\n{ffff04}Tienes 1 intento", "Verificar", "");
    return 1;
}

stock AUTO_ROLGRU(playerid,autoid,placa[])
{

    if(EstaEnVehiculog(autoid,playerid))
	{
		
		new INGO_GRUAP[90+MAX_PLAYER_NAME];
		new MSG_GRUA[200];
		format(INGO_GRUAP, sizeof(INGO_GRUAP), "%s (por celular): %s.", PLAYER_INFO[playerid][Nickname], placa);
		ProxDetector(15.0, playerid, INGO_GRUAP, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
		format(MSG_GRUA,sizeof(MSG_GRUA),"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Acabamos de enviar una grúa a buscar tu %s matrícula %s.",NombreAuto[GetVehicleModel(autoid)-400], placa);
		SendClientMessage(playerid,-1,MSG_GRUA);
		
		QuitarDinero(playerid, PRICE_FORVIP(playerid));
		SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Muchas gracias por utilizar nuestro servicio.");

		callcmd::colgar(playerid);
		switch(INFO_GRUA[playerid][Tipo] )
		{
			case 1:
			{
				SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el ultimo lugar donde lo estacionaste");
				SetVehicleToRespawn(autoid);
			}
			case 2:
			{
				SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el estacionamiento municipal");
				new lugar = random(4);
				switch(lugar)
				{
					case 0:POSICION_GRUA(autoid,-13.0813,-374.6711,5.4297,358.1299);
					case 1:POSICION_GRUA(autoid,-29.7148,-375.2507,5.4297,354.9965);
					case 2:POSICION_GRUA(autoid,-2.0937,-346.8077,5.4297,89.6241);
					case 3:POSICION_GRUA(autoid,-3.3296,-332.9302,5.4297,91.8175);
				}
			}
			case 3:
			{
				SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado hacia el estacionamiento maritimo");
				new lugar = random(4);
				switch(lugar)
				{
					case 0:POSICION_GRUA(autoid,2634.2881,-2486.2009,-0.7707,2.5868);
					case 1:POSICION_GRUA(autoid,2623.3982,-2488.3628,-0.6238,2.1582);
					case 2:POSICION_GRUA(autoid,2607.7522,-2487.5833,-0.4461,0.4526);
					case 3:POSICION_GRUA(autoid,2594.8560,-2484.1121,-0.3442,357.9986);
				}
			}
			case 4:
			{
				SendClientMessage(playerid, -1, "Una grua fue enviada a la posición de tu vehículo, el cual sera transladado a tu posición actual");
				VEHICLE_GRUA[playerid] = autoid;
				SetTimerEx("MINUTOSG_BONER",3000,false,"d",playerid);
			}
		}
	}
	return 1;
}

stock FIN_SERVI(playerid)
{
	new chatadmin[90+MAX_PLAYER_NAME];
	format(chatadmin, sizeof(chatadmin), "%s (por celular): Perdón, no usaré el servicio.", PLAYER_INFO[playerid][Nickname]);
	ProxDetector(10.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
	callcmd::colgar(playerid);
	return 1;
}
stock POSICION_GRUA(autoid,Float:gx,Float:gy,Float:gz,Float:a)
{

	SetVehiclePosEx(autoid,gx,gy,gz);
	SetVehicleZAngle(autoid,a);
	LinkVehicleToInterior(autoid, 0);
	SetVehicleVirtualWorldEx(autoid, 0);
	return 1;
}

EstaEnVehiculog(vehicleid,playerid)
{
	foreach(new i : Player)
    {
    	if(IsPlayerInVehicle(i, vehicleid))
        {
            SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Encontramos una persona dentro del vehículo, no podemos remolcarlo.");
            SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Llama a la policía si crees que tu vehículo ha sido robado.");
			callcmd::colgar(playerid);
			return 0;
        }
    }
    return 1;
}



stock RELOAD_TD(playerid)
{

	OCULTAR_TD(playerid,true);
	OCULTAR_TD(playerid);
	return 1;
}

stock OCULTAR_TD(playerid, bool:m=false)
{
	#undef INVALID_TEXT_DRAW
		#define INVALID_TEXT_DRAW 0
	
	if(m == true)
	{
		for(new i = 0; i < 4; i++)
		{
			if(VehTD[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
			{
			    PlayerTextDrawDestroy(playerid, VehTD[playerid][i]);
			    VehTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
	}
	else
	{

 	  		if(autos[playerid] != 0)
	    	{

     			VehTD[playerid][0] = CreatePlayerTextDraw(playerid, -6.500000, 151.000000, " ");
				PlayerTextDrawBackgroundColor(playerid, VehTD[playerid][0], 0);
				PlayerTextDrawFont(playerid, VehTD[playerid][0], 5);
				PlayerTextDrawLetterSize(playerid, VehTD[playerid][0], 0.000000, 0.000000);
				PlayerTextDrawColor(playerid, VehTD[playerid][0], -1395920385);
				PlayerTextDrawSetOutline(playerid, VehTD[playerid][0], 0);
				PlayerTextDrawSetProportional(playerid, VehTD[playerid][0], 1);
				PlayerTextDrawSetShadow(playerid, VehTD[playerid][0], 1);
				PlayerTextDrawUseBox(playerid, VehTD[playerid][0], 1);
				PlayerTextDrawBoxColor(playerid, VehTD[playerid][0], 255);
				PlayerTextDrawTextSize(playerid, VehTD[playerid][0],  80.000000, 95.000000);
				PlayerTextDrawSetPreviewRot(playerid, VehTD[playerid][0],  -20.000000, 0.000000, 46.000000, 1.000000);
				PlayerTextDrawSetPreviewModel(playerid, VehTD[playerid][0],PLAYER_INFO[playerid][vModelo]);
				PlayerTextDrawSetPreviewVehCol(playerid, VehTD[playerid][0],PLAYER_INFO[playerid][vColor1], PLAYER_INFO[playerid][vColor2]);
				PlayerTextDrawShow(playerid, VehTD[playerid][0]);
			}
   		  	if(autos2[playerid] != 0)
   		  	{

     			VehTD[playerid][1] = CreatePlayerTextDraw(playerid, -6.500000, 189.000000, " ");
				PlayerTextDrawBackgroundColor(playerid, VehTD[playerid][1], 0);
				PlayerTextDrawFont(playerid, VehTD[playerid][1], 5);
				PlayerTextDrawLetterSize(playerid, VehTD[playerid][1], 0.000000, 0.000000);
				PlayerTextDrawColor(playerid, VehTD[playerid][1], -1395920385);
				PlayerTextDrawSetOutline(playerid, VehTD[playerid][1], 0);
				PlayerTextDrawSetProportional(playerid, VehTD[playerid][1], 1);
				PlayerTextDrawSetShadow(playerid, VehTD[playerid][1], 1);
				PlayerTextDrawUseBox(playerid, VehTD[playerid][1], 1);
				PlayerTextDrawBoxColor(playerid, VehTD[playerid][1], 255);
				PlayerTextDrawTextSize(playerid, VehTD[playerid][1],  80.000000, 95.000000);
				PlayerTextDrawSetPreviewRot(playerid, VehTD[playerid][1],  -20.000000, 0.000000, 46.000000, 1.000000);
				PlayerTextDrawSetPreviewModel(playerid, VehTD[playerid][1],PLAYER_INFO[playerid][vModelo2]);
				PlayerTextDrawSetPreviewVehCol(playerid, VehTD[playerid][1],PLAYER_INFO[playerid][v2Color1], PLAYER_INFO[playerid][v2Color2]);
				PlayerTextDrawShow(playerid, VehTD[playerid][1]);
			}
	  		if(autos3[playerid] != 0)
	    	{

     			VehTD[playerid][2] = CreatePlayerTextDraw(playerid, -6.500000, 227.000000, " ");
				PlayerTextDrawBackgroundColor(playerid, VehTD[playerid][2], 0);
				PlayerTextDrawFont(playerid, VehTD[playerid][2], 5);
				PlayerTextDrawLetterSize(playerid, VehTD[playerid][0], 0.000000, 0.000000);
				PlayerTextDrawColor(playerid, VehTD[playerid][2], -1395920385);
				PlayerTextDrawSetOutline(playerid, VehTD[playerid][2], 0);
				PlayerTextDrawSetProportional(playerid, VehTD[playerid][2], 1);
				PlayerTextDrawSetShadow(playerid, VehTD[playerid][2], 1);
				PlayerTextDrawUseBox(playerid, VehTD[playerid][2], 1);
				PlayerTextDrawBoxColor(playerid, VehTD[playerid][2], 255);
				PlayerTextDrawTextSize(playerid, VehTD[playerid][2], 80.000000, 95.000000);
				PlayerTextDrawSetPreviewRot(playerid, VehTD[playerid][2],  -20.000000, 0.000000, 46.000000, 1.000000);
				PlayerTextDrawSetPreviewModel(playerid, VehTD[playerid][2], PLAYER_INFO[playerid][vModelo3]);
				PlayerTextDrawSetPreviewVehCol(playerid, VehTD[playerid][2],PLAYER_INFO[playerid][v3Color1], PLAYER_INFO[playerid][v3Color2]);
				PlayerTextDrawShow(playerid, VehTD[playerid][2]);
			}
	  		if(autos4[playerid] != 0)
	    	{

     			VehTD[playerid][3] = CreatePlayerTextDraw(playerid, -6.500000, 265.000000, " ");
				PlayerTextDrawBackgroundColor(playerid, VehTD[playerid][3], 0);
				PlayerTextDrawFont(playerid, VehTD[playerid][3], 5);
				PlayerTextDrawLetterSize(playerid, VehTD[playerid][3], 0.000000, 0.000000);
				PlayerTextDrawColor(playerid, VehTD[playerid][3], -1395920385);
				PlayerTextDrawSetOutline(playerid, VehTD[playerid][3], 0);
				PlayerTextDrawSetProportional(playerid, VehTD[playerid][3], 1);
				PlayerTextDrawSetShadow(playerid, VehTD[playerid][3], 1);
				PlayerTextDrawUseBox(playerid, VehTD[playerid][3], 1);
				PlayerTextDrawBoxColor(playerid, VehTD[playerid][3], 255);
				PlayerTextDrawTextSize(playerid, VehTD[playerid][3], 80.000000, 95.000000);
				PlayerTextDrawSetPreviewRot(playerid, VehTD[playerid][3], -20.000000, 0.000000, 46.000000, 1.000000);
				PlayerTextDrawSetPreviewModel(playerid, VehTD[playerid][3], PLAYER_INFO[playerid][vModelo4]);
				PlayerTextDrawSetPreviewVehCol(playerid, VehTD[playerid][3],PLAYER_INFO[playerid][v4Color1], PLAYER_INFO[playerid][v4Color2]);
				PlayerTextDrawShow(playerid, VehTD[playerid][3]);
			}

	    }
	#undef INVALID_TEXT_DRAW
		#define INVALID_TEXT_DRAW (0xFFFF)

	return 1;
}

stock DarVIP(playerid, vip)
{
	new year, month, day, query[180];
	getdate(year, month, day);

    PLAYER_INFO[playerid][pVIP] = vip;
	PLAYER_INFO[playerid][finmes] = month + 1;
	PLAYER_INFO[playerid][finano] = year;
	PLAYER_INFO[playerid][findia] = day;

	mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `FinDia`='%d',`FinMes`='%d',`FinAno`='%d' WHERE `Username`='%e'",
	PLAYER_INFO[playerid][findia],PLAYER_INFO[playerid][finmes],PLAYER_INFO[playerid][finano],PLAYER_INFO[playerid][Nickname]);
	mysql_tquery(handle_db, query);


	if(!vip) format(query, sizeof query, "Tu membresia actual fue removida.");
	else
		format(query, sizeof query, "Has recibido membresia {D55124}VIP%d{FFFFFF} por 1 mes.", vip);
	SendClientMessage(playerid, -1, query);
}

stock used(playerid, id)
{
    for(new cycle; cycle < 4; cycle++)
    {
        if(TextDrawsNotification[playerid][cycle][Hide] == id) return 1;
    }
    return 0;
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//by: whoever
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid))
	{
	    case 0: GetPlayerFacingAngle(playerid, a);
	    case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

public OneSecTimer()
{
	PlayerBucle(playerid)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  		{
		    TrailerUpdate(playerid,vehicleid);
		}
		if(TrailerJob[playerid] == 1)
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && timerjob2[playerid] <= 0)
		    {
				if(timerjob[playerid] == 0)
				{
					timerjob[playerid] = 60;
				}
			}
			else
			{
			    if(timerjob[playerid] != 0)
				{
					timerjob[playerid] = 0;
				}
			}
			if(!IsTrailerAttachedToVehicle(vehicleid) && timerjob[playerid] <= 0)
		    {
				if(timerjob2[playerid] == 0)
				{
					timerjob2[playerid] = 60;
				}
			}
			else
			{
			    if(timerjob2[playerid] != 0)
				{
					timerjob2[playerid] = 0;
				}
			}
		}
		if(timerjob[playerid] != 0 && TrailerJob[playerid] == 1)
		{
			timerjob[playerid]--;
			new string[100];
			format(string, sizeof string, "Por favor ingrese al camion ~n~~r~ %i ~g~segundos", timerjob[playerid]);
			GameTextForPlayer(playerid, string, 1000, 3);
			if(timerjob[playerid] <= 0)
			{
			    TrailerJob[playerid] = 0;
			    timerjob[playerid] = 0;
			    Respawnear(trailervehicle[playerid]);
			    SendNotification(playerid, "Has ~r~fallado.");
			}
		}
		else if(timerjob2[playerid] != 0 && TrailerJob[playerid] == 1)
		{
			timerjob2[playerid]--;
			new string2[100];
			format(string2, sizeof string2, "Por favor enganche el trailer ~n~~r~ %i ~g~segundos", timerjob2[playerid]);
			GameTextForPlayer(playerid, string2, 1000, 3);
			if(timerjob2[playerid] <= 0)
			{
			    TrailerJob[playerid] = 0;
			    timerjob2[playerid] = 0;
			    Respawnear(trailervehicle[playerid]);
			    SendNotification(playerid, "Has ~r~fallado.");
			}
		}
	}
	return 1;
}


stock TrailerUpdate(playerid,vehicleid)
{
	trailervehicle[playerid] = GetVehicleTrailer(vehicleid);
	if(PLAYER_INFO[playerid][pTrabajo] != T_Trailero && PLAYER_INFO[playerid][pTrabajo2] != T_Trailero) return 1;
    if(trailervehicle[playerid] > 0)
    {
        if(TrailerJob[playerid] == 0)
		{
	    	OnTrailerAttach(playerid,trailervehicle[playerid],vehicleid);
		}
	}
	return 1;
}

funcion CheckVIP(playerid)
{
	new day,month,year,Query[200];
	getdate(year,month,day);
	if(month >= 13) { month = 1; }
	if(day >= PLAYER_INFO[playerid][findia] && month >= PLAYER_INFO[playerid][finmes] && year >= PLAYER_INFO[playerid][finano])
	{
		SendClientMessage(playerid,-1,"Tu membresia VIP ha expirado, puedes comprar un mes nuevamente para seguir obteniendo las ventajas.");
		PLAYER_INFO[playerid][pVIP] = 0;
		mysql_format(handle_db, Query, sizeof(Query),"UPDATE `usuarios` SET `FinDia`='0',`FinMes`='0',`FinAno`='0' WHERE `Username`='%s'",PLAYER_INFO[playerid][Nickname]);
		mysql_tquery(handle_db, Query);
	}
}

funcion PagoTraileroGaso(playerid, ruta)
{
	switch(ruta)
	{
	    case 1:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 12500; }
				case 2: { Paga = 13568; }
				case 3: { Paga = 14900; }
				case 4: { Paga = 16890; }
				case 5: { Paga = 18900; }
				case 6: { Paga = 20000; }
			}
	        DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 20;
	        PLAYER_INFO[playerid][pRemedios] += 20;
	        PLAYER_INFO[playerid][pGino] += 6;
	        PLAYER_INFO[playerid][pPreper] += 6;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 100;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			Descongelar(playerid);
			TimerDescargarTrailer[playerid] = 0;
			ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 20g ~w~Crack -~y~ 20~w~ Medicamentos -~y~ 6g~w~ Preper -~y~ 6g ~w~Gino - ~r~100 ~w~Piezas", Paga);
            SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
			GuardarCuenta(playerid);
		}
        case 2:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 6000; }
				case 2: { Paga = 8700; }
				case 3: { Paga = 11700; }
				case 4: { Paga = 13500; }
				case 5: { Paga = 15000; }
				case 6: { Paga = 16000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 16;
	        PLAYER_INFO[playerid][pRemedios] += 17;
	        PLAYER_INFO[playerid][pPreper] += 7;
	        PLAYER_INFO[playerid][pGino] += 8;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 90;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			TimerDescargarTrailer[playerid] = 0;
   			Descongelar(playerid);
   			ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 16g ~w~Crack -~y~ 17~w~ Medicamentos -~y~ 7g~w~ Preper -~y~ 8g ~w~Gino - ~r~90 ~w~Piezas", Paga);
            GuardarCuenta(playerid);
            SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
		}
	    case 3:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 11500; }
				case 2: { Paga = 13470; }
				case 3: { Paga = 15900; }
				case 4: { Paga = 18500; }
				case 5: { Paga = 20500; }
				case 6: { Paga = 22000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 23;
	        PLAYER_INFO[playerid][pCocaina] += 12;
	        PLAYER_INFO[playerid][pHeroina] += 12;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 300;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			Descongelar(playerid);
			ExpTrailero(playerid);
			TimerDescargarTrailer[playerid] = 0;
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23~w~Crack -~y~ 23~w~ Medicamentos -~y~ 12g~w~ Preper -~y~ 12g ~w~Gino - ~r~300 ~w~Piezas", Paga);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	    }
	    case 4:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 6900; }
				case 2: { Paga = 8600; }
				case 3: { Paga = 11000; }
				case 4: { Paga = 12500; }
				case 5: { Paga = 14000; }
				case 6: { Paga = 15000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 11;
	        PLAYER_INFO[playerid][pRemedios] += 11;
	        PLAYER_INFO[playerid][pPreper] += 3;
	        PLAYER_INFO[playerid][pGino] += 3;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 50;
	        Descongelar(playerid);
	        DisablePlayerCheckpoint(playerid);
	        TimerDescargarTrailer[playerid] = 0;
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 11 ~w~Crack -~y~ 11~w~ Medicamentos -~y~ 3g~w~ Preper -~y~ 3g ~w~Gino - ~r~50 ~w~Piezas", Paga);
	    }
	    case 5:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 12500; }
				case 2: { Paga = 15700; }
				case 3: { Paga = 18500; }
				case 4: { Paga = 20400; }
				case 5: { Paga = 22500; }
				case 6: { Paga = 25000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 22;
	        PLAYER_INFO[playerid][pPreper] += 7;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pGino] += 8;
	        TimerDescargarTrailer[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
	        PLAYER_INFO[playerid][pMateriales] += 140;
	        ExpTrailero(playerid);
	        Descongelar(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23 ~w~Crack -~y~ 22~w~ Medicamentos -~y~ 7g~w~ Preper -~y~ 8g ~w~Gino - ~r~140 ~w~Piezas", Paga);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	    }
	    case 6:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 7600; }
				case 2: { Paga = 9700; }
				case 3: { Paga = 11590; }
				case 4: { Paga = 13670; }
				case 5: { Paga = 15800; }
				case 6: { Paga = 17000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 24;
	        PLAYER_INFO[playerid][pPreper] += 8;
	        PLAYER_INFO[playerid][pGino] += 7;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        TimerDescargarTrailer[playerid] = 0;
	        Descongelar(playerid);
	        TrailerJob[playerid] = 0;
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23 ~w~Crack -~y~ 24~w~ Medicamentos -~y~ 8g~w~ Preper -~y~ 7g ~w~Gino - ~r~200 ~w~Piezas", Paga);
	    }
	    case 7:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 15700; }
				case 2: { Paga = 19500; }
				case 3: { Paga = 22600; }
				case 4: { Paga = 25000; }
				case 5: { Paga = 27500; }
				case 6: { Paga = 30000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 30;
	        PLAYER_INFO[playerid][pRemedios] += 40;
	        PLAYER_INFO[playerid][pPreper] += 10;
	        PLAYER_INFO[playerid][pGino] += 10;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        TimerDescargarTrailer[playerid] = 0;
	        Descongelar(playerid);
	        TrailerJob[playerid] = 0;
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 30 ~w~Crack -~y~ 40~w~ Medicamentos -~y~ 10g~w~ Preper -~y~ 10g ~w~Gino - ~r~200 ~w~Piezas", Paga);
	    }

	}
	return 1;
}

funcion PagoTrailero(playerid, ruta)
{
	switch(ruta)
	{
	    case 1:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 15700; }
				case 2: { Paga = 19500; }
				case 3: { Paga = 22600; }
				case 4: { Paga = 25000; }
				case 5: { Paga = 27500; }
				case 6: { Paga = 30000; }
			}
	        DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 30;
	        PLAYER_INFO[playerid][pRemedios] += 30;
	        PLAYER_INFO[playerid][pPreper] += 10;
	        PLAYER_INFO[playerid][pGino] += 10;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			Descongelar(playerid);
			TimerDescargarTrailer[playerid] = 0;
	        TrailerJob[playerid] = 0;
	        ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 30g ~w~Crack -~y~ 30~w~ Medicamentos -~y~ 10g~w~ Preper -~y~ 10g ~w~Gino - ~r~200 ~w~Piezas", Paga);
            SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
			GuardarCuenta(playerid);
		}
        case 2:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 6720; }
				case 2: { Paga = 8790; }
				case 3: { Paga = 10590; }
				case 4: { Paga = 12670; }
				case 5: { Paga = 14000; }
				case 6: { Paga = 16000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 16;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pRemedios] += 17;
	        PLAYER_INFO[playerid][pPreper] += 7;
	        PLAYER_INFO[playerid][pGino] += 8;
	        PLAYER_INFO[playerid][pMateriales] += 90;
	        Descongelar(playerid);
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			TimerDescargarTrailer[playerid] = 0;
			ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 16g ~w~Crack -~y~ 17~w~ Medicamentos -~y~ 7g~w~ Preper -~y~ 8g ~w~Gino - ~r~90 ~w~Piezas", Paga);
            GuardarCuenta(playerid);
            SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
		}
	    case 3:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 12500; }
				case 2: { Paga = 14500; }
				case 3: { Paga = 16700; }
				case 4: { Paga = 18100; }
				case 5: { Paga = 20000; }
				case 6: { Paga = 22000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 23;
	        PLAYER_INFO[playerid][pPreper] += 12;
	        PLAYER_INFO[playerid][pGino] += 12;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 300;
	        Descongelar(playerid);
	        DisablePlayerCheckpoint(playerid);
	        TimerDescargarTrailer[playerid] = 0;
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23~w~Crack -~y~ 23~w~ Medicamentos -~y~ 12g~w~ Preper -~y~ 12g ~w~Gino - ~r~300 ~w~Piezas", Paga);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	    }
	    case 4:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 6700; }
				case 2: { Paga = 9700; }
				case 3: { Paga = 11000; }
				case 4: { Paga = 12690; }
				case 5: { Paga = 13670; }
				case 6: { Paga = 15000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 11;
	        PLAYER_INFO[playerid][pRemedios] += 11;
	        PLAYER_INFO[playerid][pPreper] += 3;
	        PLAYER_INFO[playerid][pGino] += 3;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pMateriales] += 50;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			TimerDescargarTrailer[playerid] = 0;
			Descongelar(playerid);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 11 ~w~Crack -~y~ 11~w~ Medicamentos -~y~ 3g~w~ Preper -~y~ 3g ~w~Gino - ~r~50 ~w~Piezas", Paga);
	    }
	    case 5:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 13470; }
				case 2: { Paga = 15780; }
				case 3: { Paga = 18700; }
				case 4: { Paga = 21500; }
				case 5: { Paga = 23500; }
				case 6: { Paga = 25000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 22;
	        PLAYER_INFO[playerid][pCocaina] += 7;
	        TrailerJob[playerid] = 0;
	        PLAYER_INFO[playerid][pHeroina] += 8;
	        PLAYER_INFO[playerid][pMateriales] += 140;
	        TimerDescargarTrailer[playerid] = 0;
	        Descongelar(playerid);
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23 ~w~Crack -~y~ 22~w~ Medicamentos -~y~ 7g~w~ Preper -~y~ 8g ~w~Gino - ~r~140 ~w~Piezas", Paga);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	    }
	    case 6:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 6700; }
				case 2: { Paga = 8700; }
				case 3: { Paga = 11000; }
				case 4: { Paga = 13500; }
				case 5: { Paga = 15000; }
				case 6: { Paga = 17000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 23;
	        PLAYER_INFO[playerid][pRemedios] += 24;
	        PLAYER_INFO[playerid][pPreper] += 8;
	        PLAYER_INFO[playerid][pGino] += 7;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        TimerDescargarTrailer[playerid] = 0;
	        Descongelar(playerid);
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        TrailerJob[playerid] = 0;
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 23 ~w~Crack -~y~ 24~w~ Medicamentos -~y~ 8g~w~ Preper -~y~ 7g ~w~Gino - ~r~200 ~w~Piezas", Paga);
	    }
	    case 7:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 15700; }
				case 2: { Paga = 19500; }
				case 3: { Paga = 22600; }
				case 4: { Paga = 25000; }
				case 5: { Paga = 27500; }
				case 6: { Paga = 30000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 30;
	        PLAYER_INFO[playerid][pRemedios] += 40;
	        PLAYER_INFO[playerid][pPreper] += 10;
	        PLAYER_INFO[playerid][pGino] += 10;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			TimerDescargarTrailer[playerid] = 0;
			Descongelar(playerid);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        TrailerJob[playerid] = 0;
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 30 ~w~Crack -~y~ 40~w~ Medicamentos -~y~ 10g~w~ Preper -~y~ 10g ~w~Gino - ~r~200 ~w~Piezas", Paga);
	    }
	    case 8:
	    {
	        new Paga;
	        switch(PLAYER_INFO[playerid][pNivelTrailero])
			{
				case 1: { Paga = 15700; }
				case 2: { Paga = 19500; }
				case 3: { Paga = 21500; }
				case 4: { Paga = 23000; }
				case 5: { Paga = 25500; }
				case 6: { Paga = 27000; }
			}
            DarDinero(playerid, Paga);
	        PLAYER_INFO[playerid][pCrack] += 35;
	        PLAYER_INFO[playerid][pRemedios] += 35;
	        PLAYER_INFO[playerid][pPreper] += 11;
	        PLAYER_INFO[playerid][pGino] += 12;
	        PLAYER_INFO[playerid][pMateriales] += 200;
	        DisablePlayerCheckpoint(playerid);
			Respawnear(trailervehicle[playerid]);
			TimerDescargarTrailer[playerid] = 0;
			Descongelar(playerid);
			ExpTrailero(playerid);
	        GuardarCuenta(playerid);
	        SendClientMessageEx(-1,-1,"{FFFF04}[CNN]{FFFFFF} El trailero {00FAFF}%s {FFFFFF}completo su ruta.", NombreJugador(playerid));
	        SendFormatNotification(playerid, "Felicidades! terminaste el trabajo, se te pago ~g~$%d ~w~-~y~ 35 ~w~Crack -~y~ 35~w~ Medicamentos -~y~ 11g~w~ Preper -~y~ 11g ~w~Gino - ~r~200 ~w~Piezas", Paga);
            TrailerJob[playerid] = 0;
		}

	}
	return 1;
}

RutasGasolinero(playerid)
{
	new rutas = random(7);
	if(TrailerJob[playerid] == 0)
	{
		switch(rutas)
		{
		    case 0:
		    {
		        TrailerJob[playerid] = 1;
		        Get3DZone(-91.3788,-1171.4752,2.3628, RutaTrailerZone, 64);
		        CheckpointGaso[playerid][0] = SetPlayerCheckpoint(playerid, -91.3788,-1171.4752,2.3628, 5.0);
		        SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
		        PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 1:
		    {
		        TrailerJob[playerid] = 1;
		        Get3DZone(1004.3800,-939.3970,42.1797, RutaTrailerZone, 64);
		        CheckpointGaso[playerid][1] = MarcadoTraileroGPS(playerid, 1004.3800,-939.3970,42.1797);
		        SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
		        PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 2:
		    {
		        TrailerJob[playerid] = 1;
		        Get3DZone(1944.2216,-1773.1908,13.3906, RutaTrailerZone, 64);
		        CheckpointGaso[playerid][2] = MarcadoTraileroGPS(playerid, 1944.2216,-1773.1908,13.3906);
		        SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
		        PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 3:
		    {
	            TrailerJob[playerid] = 1;
		        Get3DZone(2114.0730,920.0683,10.8203, RutaTrailerZone, 64);
	            CheckpointGaso[playerid][3] = MarcadoTraileroGPS(playerid, 2114.0730,920.0683,10.8203);
	            SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
	            PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 4:
		    {
	            TrailerJob[playerid] = 1;
		        Get3DZone(2320.6587,579.8505,10.8554, RutaTrailerZone, 64);
	            CheckpointGaso[playerid][4] = MarcadoTraileroGPS(playerid, 2320.6587,579.8505,10.8554);
	            SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
	            PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 5:
		    {
	            TrailerJob[playerid] = 1;
		        Get3DZone(-1676.8866,414.0332,7.1797, RutaTrailerZone, 64);
	            CheckpointGaso[playerid][5] = MarcadoTraileroGPS(playerid, -1676.8866,414.0332,7.1797);
	            SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
	            PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		    case 6:
		    {
	   			TrailerJob[playerid] = 1;
		        Get3DZone(-1605.7072,-2714.0933,48.5335, RutaTrailerZone, 64);
	   			CheckpointGaso[playerid][6] = MarcadoTraileroGPS(playerid, -1605.7072,-2714.0933,48.5335);
	   			SendFormatMessage(playerid, "Ve a la {FFFF04}Gasolinera {FFFFFF}de{f21111} %s", RutaTrailerZone);
	   			PLAYER_TEMP[playerid][pt_Trailero] = true;
		    }
		}
  	}
	return 1;
}

RutasTrailero(playerid)
{
	new rutas = random(8);
	switch(rutas)
	{
	    case 0:
	    {
	        TrailerJob[playerid] = 1;
	        Get3DZone(1825.9948,-1847.1438,13.4141, RutaTrailerZone, 64);
	        CheckpointTrailer[playerid][0] = MarcadoTraileroGPS(playerid, 1825.9948,-1847.1438,13.4141);
	        SendFormatMessage(playerid, "Ve al {FFFF04}24/7 {FFFFFF}de{f21111} %s", RutaTrailerZone);
	        PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 1:
	    {
	        TrailerJob[playerid] = 1;
	        Get3DZone(2243.1563,-1660.2441,15.2884, RutaTrailerZone, 64);
	        CheckpointTrailer[playerid][1] = MarcadoTraileroGPS(playerid, 2243.1563,-1660.2441,15.2884);
	        SendFormatMessage(playerid, "Ve al {FFFF04}Binco {FFFFFF}de{f21111} %s", RutaTrailerZone);
	        PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 2:
	    {
	        TrailerJob[playerid] = 1;
	        Get3DZone(2115.0330,-1217.6182,23.8047, RutaTrailerZone, 64);
	        CheckpointTrailer[playerid][2] = MarcadoTraileroGPS(playerid, 2115.0330,-1217.6182,23.8047);
	        SendFormatMessage(playerid, "Ve al {FFFF04}Sub Urban {FFFFFF}de{f21111} %s", RutaTrailerZone);
	        PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 3:
	    {
            TrailerJob[playerid] = 1;
	        Get3DZone(1451.4331,-1154.9667,23.8482, RutaTrailerZone, 64);
            CheckpointTrailer[playerid][3] = MarcadoTraileroGPS(playerid, 1451.4331,-1154.9667,23.8482);
            SendFormatMessage(playerid, "Ve al {FFFF04}Zip {FFFFFF}de{f21111} %s", RutaTrailerZone);
            PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 4:
	    {
            TrailerJob[playerid] = 1;
	        Get3DZone(1314.9225,-917.5856,38.2084, RutaTrailerZone, 64);
            CheckpointTrailer[playerid][4] = MarcadoTraileroGPS(playerid, 1314.9225,-917.5856,38.2084);
            SendFormatMessage(playerid, "Ve al {FFFF04}24/7 {FFFFFF}de{f21111} %s", RutaTrailerZone);
            PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 5:
	    {
            TrailerJob[playerid] = 1;
	        Get3DZone(-1820.4784,-120.3155,5.4975, RutaTrailerZone, 64);
            CheckpointTrailer[playerid][5] = MarcadoTraileroGPS(playerid, -1820.4784,-120.3155,5.4975);
            SendFormatMessage(playerid, "Ve al {FFFF04}Bar {FFFFFF}de{f21111} %s", RutaTrailerZone);
            PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 6:
	    {
   			TrailerJob[playerid] = 1;
	        Get3DZone(-1805.5746,937.4834,24.7422, RutaTrailerZone, 64);
   			CheckpointTrailer[playerid][6] = MarcadoTraileroGPS(playerid, -1805.5746,937.4834,24.7422);
   			SendFormatMessage(playerid, "Ve al {FFFF04}24/7 {FFFFFF}de{f21111} %s", RutaTrailerZone);
   			PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 7:
	    {
   			TrailerJob[playerid] = 1;
	        Get3DZone(-2445.7969,745.1008,35.0156, RutaTrailerZone, 64);
   			CheckpointTrailer[playerid][7] = MarcadoTraileroGPS(playerid, -2445.7969,745.1008,35.0156);
   			SendFormatMessage(playerid, "Ve al {FFFF04}24/7 {FFFFFF}de{f21111} %s", RutaTrailerZone);
   			PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	    case 8:
	    {
   			TrailerJob[playerid] = 1;
	        Get3DZone(-209.2740,2745.7065,63.6235, RutaTrailerZone, 64);
   			CheckpointTrailer[playerid][7] = MarcadoTraileroGPS(playerid, -209.2740,2745.7065,63.6235);
   			SendFormatMessage(playerid, "Ve a {FFFF04}la base militar{FFFFFF}de{f21111} %s", RutaTrailerZone);
   			PLAYER_TEMP[playerid][pt_Trailero] = true;
	    }
	}
	return 1;
}

public OnTrailerAttach(playerid,trailerid,vehicleid)
{
	new model=GetVehicleModel(trailervehicle[playerid]);
	switch(model)
	{
	    case 435:
	    	RutasTrailero(playerid);
		case 584:
		    RutasGasolinero(playerid);
	}
	return 1;
}

stock UpdateNotification(playerid)
{
    for(new cycle = 0; cycle < 4; cycle ++)
    {
        if(!TextDrawsNotification[playerid][cycle][Use])
        {
            if(cycle != 4 - 1)
            {
                if(TextDrawsNotification[playerid][cycle + 1][Use])
                {
                    TextDrawsNotification[playerid][cycle][Use] = TextDrawsNotification[playerid][cycle + 1][Use];
                    TextDrawsNotification[playerid][cycle][Line] = TextDrawsNotification[playerid][cycle + 1][Line];
                    strcat(TextDrawsNotification[playerid][cycle][Text], TextDrawsNotification[playerid][cycle + 1][Text], 800);
                    TextDrawsNotification[playerid][cycle][TextDraw] = TextDrawsNotification[playerid][cycle + 1][TextDraw];
                    TextDrawsNotification[playerid][cycle][Hide] = TextDrawsNotification[playerid][cycle + 1][Hide];

                    TextDrawsNotification[playerid][cycle + 1][Use] = 0;
                    TextDrawsNotification[playerid][cycle + 1][Line] = 0;
                    TextDrawsNotification[playerid][cycle + 1][Text][0] = EOS;
                    TextDrawsNotification[playerid][cycle + 1][TextDraw] = PlayerText:-1;
                    TextDrawsNotification[playerid][cycle + 1][MinPosY] = 0;
                    TextDrawsNotification[playerid][cycle + 1][MaxPosY] = 0;
                    TextDrawsNotification[playerid][cycle + 1][Hide] = -1;

                    MinPosYNotification(playerid, cycle);
                    MaxPosYNotification(playerid, cycle);
                }
            }
        }
        else if(TextDrawsNotification[playerid][cycle][Use])
        {
            if(cycle != 0)
            {
                if(!TextDrawsNotification[playerid][cycle - 1][Use])
                {
                    TextDrawsNotification[playerid][cycle - 1][Use] = TextDrawsNotification[playerid][cycle][Use];
                    TextDrawsNotification[playerid][cycle - 1][Line] = TextDrawsNotification[playerid][cycle][Line];
                    strcat(TextDrawsNotification[playerid][cycle - 1][Text], TextDrawsNotification[playerid][cycle][Text], 800);
                    TextDrawsNotification[playerid][cycle - 1][TextDraw] = TextDrawsNotification[playerid][cycle][TextDraw];
                    TextDrawsNotification[playerid][cycle - 1][Hide] = TextDrawsNotification[playerid][cycle][Hide];

                    TextDrawsNotification[playerid][cycle][Use] = 0;
                    TextDrawsNotification[playerid][cycle][Line] = 0;
                    TextDrawsNotification[playerid][cycle][Text][0] = EOS;
                    TextDrawsNotification[playerid][cycle][TextDraw] = PlayerText:-1;
                    TextDrawsNotification[playerid][cycle][MinPosY] = 0;
                    TextDrawsNotification[playerid][cycle][MaxPosY] = 0;
                    TextDrawsNotification[playerid][cycle][Hide] = -1;

                    MinPosYNotification(playerid, cycle - 1);
                    MaxPosYNotification(playerid, cycle - 1);
                }
            }
        }
        CreateTDN(playerid, cycle);
    }
    return 1;
}

stock MinPosYNotification(playerid, TDN)
{
    if(TDN == 0)
    {
        TextDrawsNotification[playerid][TDN][MinPosY] = PLAYER_INFO[playerid][pCargos] == 0 ? 130.000000 : 153.0;
    }
    else
    {
        TextDrawsNotification[playerid][TDN][MinPosY] = TextDrawsNotification[playerid][TDN - 1][MaxPosY] + 10;
    }
    return 1;
}

stock MaxPosYNotification(playerid, TDN)
{
    TextDrawsNotification[playerid][TDN][MaxPosY] = TextDrawsNotification[playerid][TDN][MinPosY] + (TD_NOTIFICATION_LETTER_Y * 2) + 2 + (TD_NOTIFICATION_LETTER_Y * 5.75 * TextDrawsNotification[playerid][TDN][Line]) + ((TextDrawsNotification[playerid][TDN][Line] - 1) * ((TD_NOTIFICATION_LETTER_Y * 2) + 2 + TD_NOTIFICATION_LETTER_Y)) + TD_NOTIFICATION_LETTER_Y + 3;
    return 1;
}

stock ConvertirNumero(iValue,const iDelim[2] = ".", szNum[15] = "", iSize = sizeof(szNum))
{
	format(szNum, iSize, "%d", iValue < 0 ? -iValue : iValue);
	for(new i = strlen(szNum) - 3; i > 0; i -= 3) strins(szNum, iDelim, i, iSize);
	if(iValue < 0) strins(szNum, "-", 0, iSize);
	return szNum;
}

stock Localizar(playerid)
{

 		new vehiculo1[360],vehiculo2[360],vehiculo3[360],vehiculo4[360],mensaje[1200], count = 0;

	    new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:x3,Float:y3,Float:z3,Float:x4,Float:y4,Float:z4;
	    GetVehiclePos(autos[playerid],x,y,z);
		GetVehiclePos(autos2[playerid],x2,y2,z2);
		GetVehiclePos(autos3[playerid],x3,y3,z3);
		GetVehiclePos(autos4[playerid],x4,y4,z4);

		if(PLAYER_INFO[playerid][vModelo] > 0&& autosSpawned[playerid][0])
		{
			LocalizarID[playerid][count] = autos[playerid];
			format(vehiculo1, sizeof(vehiculo1), "Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s {FFFFFF}", NombreAuto[GetVehicleModel(autos[playerid])-400], PLAYER_INFO[playerid][vpatente]);
			count++;
		}
		if(PLAYER_INFO[playerid][vModelo2] > 0&& autosSpawned[playerid][1])
		{
			LocalizarID[playerid][count] = autos2[playerid];
			format(vehiculo2, sizeof(vehiculo2), "\nVehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s {FFFFFF}", NombreAuto[GetVehicleModel(autos2[playerid])-400], PLAYER_INFO[playerid][v2patente]);
			count++;
		}
		if(PLAYER_INFO[playerid][vModelo3] > 0&& autosSpawned[playerid][2])
		{
			LocalizarID[playerid][count] = autos3[playerid];
			format(vehiculo3, sizeof(vehiculo3), "\nVehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s {FFFFFF}", NombreAuto[GetVehicleModel(autos3[playerid])-400], PLAYER_INFO[playerid][v3patente]);
			count++;
		}
		if(PLAYER_INFO[playerid][vModelo4] > 0&& autosSpawned[playerid][3])
		{
			LocalizarID[playerid][count] = autos4[playerid];
			format(vehiculo4, sizeof(vehiculo4), "\nVehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s {FFFFFF}", NombreAuto[GetVehicleModel(autos4[playerid])-400], PLAYER_INFO[playerid][v4patente]);
			count++;
		}
		if(count == 0)
		{
			SendClientMessage(playerid, -1, "No hay vehiculos para localizar.");
			return 1;
		}
		format(mensaje, sizeof(mensaje), "%s%s%s%s%s",vehiculo1,vehiculo2,vehiculo3,vehiculo4);
		ShowPlayerDialog(playerid, GeoLocalization, DIALOG_STYLE_LIST, "Selecciona el vehiculo que deseas localizar", mensaje, "Localizar","Cancelar");
		return 1;
}
stock Localizar2(ID,playerid)
{
	if(PLAYER_INFO[ID][vModelo] > 0 || PLAYER_INFO[ID][vModelo2] > 0 || PLAYER_INFO[ID][vModelo3] > 0 || PLAYER_INFO[ID][vModelo4] > 0)
	{
		new vehiculo1[123],vehiculo2[123],vehiculo3[123],vehiculo4[123];
		if(PLAYER_INFO[ID][vModelo] > 0 && autosSpawned[ID][0])  format(vehiculo1, sizeof(vehiculo1), "- Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | ID: %d", NombreAuto[PLAYER_INFO[playerid][vModelo]-400], PLAYER_INFO[ID][vpatente],autos[ID]);
		if(PLAYER_INFO[ID][vModelo2] > 0 && autosSpawned[ID][1]) format(vehiculo2, sizeof(vehiculo2), "- Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | ID: %d", NombreAuto[PLAYER_INFO[playerid][vModelo2]-400], PLAYER_INFO[ID][v2patente],autos2[ID]);
		if(PLAYER_INFO[ID][vModelo3] > 0 && autosSpawned[ID][2]) format(vehiculo3, sizeof(vehiculo3), "- Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | ID: %d", NombreAuto[PLAYER_INFO[playerid][vModelo3]-400], PLAYER_INFO[ID][v3patente],autos3[ID]);
		if(PLAYER_INFO[ID][vModelo4] > 0 && autosSpawned[ID][3]) format(vehiculo4, sizeof(vehiculo4), "- Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | ID: %d", NombreAuto[PLAYER_INFO[playerid][vModelo4]-400], PLAYER_INFO[ID][v4patente],autos4[ID]);
		if(PLAYER_INFO[ID][vModelo] > 0 && autosSpawned[ID][0])  SendClientMessage(playerid,-1,vehiculo1);
		if(PLAYER_INFO[ID][vModelo2] > 0 && autosSpawned[ID][1]) SendClientMessage(playerid,-1,vehiculo2);
		if(PLAYER_INFO[ID][vModelo3] > 0 && autosSpawned[ID][2]) SendClientMessage(playerid,-1,vehiculo3);
		if(PLAYER_INFO[ID][vModelo4] > 0 && autosSpawned[ID][3]) SendClientMessage(playerid,-1,vehiculo4);
	}
	else SendClientMessage(playerid,-1,"Este jugador no tiene ningún vehiculo a su nombre.");
	return 1;
}

stock NombreJugador(playerid)
{
    new nombre[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nombre, sizeof(nombre));
    return nombre;
}
AbrirRegalo(playerid)
{
    new regalo = random(13);
    switch (regalo)
    {
        case 0:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$5.000{FFFFFF} y {0058ff}una Camara{FFFFFF} de regalo.");
        DarDinero(playerid,5000);
        DarArma(playerid,43);
        }
        case 1:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$8.000{FFFFFF} y {0058ff}un bate de Beisbol{FFFFFF} de regalo.");
        DarDinero(playerid,8000);
        DarArma(playerid,5);
        }
        case 2:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$7.000{FFFFFF} y {0058ff}una Katana{FFFFFF} de regalo.");
        DarDinero(playerid,8000);
        DarArma(playerid,8);
        }
        case 3:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$3.000{FFFFFF} y {0058ff}una Palo de Golf{FFFFFF} de regalo.");
        DarDinero(playerid,3000);
        DarArma(playerid,2);
        }
        case 4:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$4.000{FFFFFF} y {0058ff}50 piezas de armas{FFFFFF} de regalo.");
        DarDinero(playerid,4000);
        PLAYER_INFO[playerid][pMateriales] += 50;
        }
        case 5:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$9.500{FFFFFF} y {0058ff}1 "SERVER_COIN"{FFFFFF} de regalo.");
        DarDinero(playerid,9500);
        PLAYER_INFO[playerid][Moneda] += 1;
        }
        case 6:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$9.000{FFFFFF} y {0058ff}1 RZ{FFFFFF} de regalo.");
        DarDinero(playerid,9000);
        PLAYER_INFO[playerid][Moneda] += 1;
        }
        case 7:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$1.000{FFFFFF} y {0058ff}100 de crack{FFFFFF} de regalo.");
        DarDinero(playerid,1000);
        PLAYER_INFO[playerid][pCrack] += 100;
        }
        case 8:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$5000{FFFFFF} y {0058ff}1 RZ{FFFFFF} de regalo.");
        DarDinero(playerid,5000);
        PLAYER_INFO[playerid][Moneda] += 1;
        }
        case 9:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$8500{FFFFFF} y {0058ff}una Katana{FFFFFF} de regalo.");
        DarDinero(playerid,8500);
        DarArma(playerid,8);
        }
        case 10:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}$2.000{FFFFFF} y {0058ff}una Camara{FFFFFF} de regalo.");
        DarDinero(playerid,2000);
        DarArma(playerid,43);
        }
        case 11:
        {
        SendClientMessage(playerid,-1,"Lamentablemente no recibiras regalo.");
        }
		case 12:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}1 RootCoins{FFFFFF} de regalo.");
        PLAYER_INFO[playerid][pRootCoins] += 1;
        }
        case 13:
        {
        SendClientMessage(playerid,-1,"Recibes {0058ff}Patines{FFFFFF} de regalo.");
        PLAYER_INFO[playerid][pPatines] = 1;
        }
    }
    return 1;
}
stock LinesNotification(playerid, TDN)
{
    new lines = 1, Float:width, lastspace = -1, supr, len = strlen(TextDrawsNotification[playerid][TDN][Text]);

    for(new i = 0; i < len; i ++)
    {
        if(TextDrawsNotification[playerid][TDN][Text][i] == '~')
        {
            if(supr == 0)
            {
                supr = 1;
                if(TextDrawsNotification[playerid][TDN][Text][i+2] != '~') return 1;
            }
            else if(supr == 1) supr = 0;
        }
        else
        {
            if(supr == 1)
            {
                if(TextDrawsNotification[playerid][TDN][Text][i] == 'n')
                {
                    lines ++;
                    lastspace = -1;
                    width = 0;
                }
            }
            else
            {
                if(TextDrawsNotification[playerid][TDN][Text][i] == ' ') lastspace = i;

                width += TD_NOTIFICATION_LETTER_X * GetTextDrawCharacterWidth(TextDrawsNotification[playerid][TDN][Text][i], 1, bool:1);

                if(width > 112.100000 - 4)
                {
                    if(lastspace != i && lastspace != -1)
                    {
                        lines ++;
                        i = lastspace;
                        lastspace = -1;
                        width = 0;
                    }
                    else
                    {
                        lines ++;
                        lastspace = -1;
                        width = 0;
                    }
                }
            }
        }
    }

    TextDrawsNotification[playerid][TDN][Line] = lines;

    return 1;
}

stock CreateTDN(playerid, TDN)
{
    if(TextDrawsNotification[playerid][TDN][Use] == 1)
    {
        if(TextDrawsNotification[playerid][TDN][TextDraw] != PlayerText:-1)
        {
            PlayerTextDrawDestroy(playerid, TextDrawsNotification[playerid][TDN][TextDraw]);
        }

        TextDrawsNotification[playerid][TDN][TextDraw] = CreatePlayerTextDraw(playerid, 492.000000, TextDrawsNotification[playerid][TDN][MinPosY], TextDrawsNotification[playerid][TDN][Text]);
        PlayerTextDrawFont(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 1);
        PlayerTextDrawLetterSize(playerid, TextDrawsNotification[playerid][TDN][TextDraw], TD_NOTIFICATION_LETTER_X, TD_NOTIFICATION_LETTER_Y);
        PlayerTextDrawTextSize(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 617.500000, 155.000000);
        PlayerTextDrawSetOutline(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 0);
        PlayerTextDrawSetShadow(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 0);
        PlayerTextDrawAlignment(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 1);
        PlayerTextDrawColor(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 0xFFFFFFFF);
        PlayerTextDrawBackgroundColor(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 255);
        PlayerTextDrawBoxColor(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 50);
        PlayerTextDrawUseBox(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 1);
        PlayerTextDrawSetProportional(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 1);
        PlayerTextDrawSetSelectable(playerid, TextDrawsNotification[playerid][TDN][TextDraw], 0);
        PlayerTextDrawShow(playerid, TextDrawsNotification[playerid][TDN][TextDraw]);
    }
    return 1;
}


HideNotifications(playerid) {
    for(new cycle; cycle < 3; cycle++)
    {
        if(TextDrawsNotification[playerid][cycle][TextDraw] != PlayerText:-1) {
            PlayerTextDrawDestroy(playerid, TextDrawsNotification[playerid][cycle][TextDraw]);
        }
        if(TextDrawsNotification[playerid][cycle][Timer] != -1) {
            KillTimer(TextDrawsNotification[playerid][cycle][Timer]);
        }
        TextDrawsNotification[playerid][cycle][Use] = 0;
        TextDrawsNotification[playerid][cycle][Line] = 0;
        TextDrawsNotification[playerid][cycle][Text][0] = EOS;
        TextDrawsNotification[playerid][cycle][MinPosY] = 0;
        TextDrawsNotification[playerid][cycle][MaxPosY] = 0;
        TextDrawsNotification[playerid][cycle][Hide] = -1;
        TextDrawsNotification[playerid][cycle][TextDraw] = PlayerText:-1;
        TextDrawsNotification[playerid][cycle][Timer] = -1;
    }
}

SendFormatNotification(playerid, const text[], {Float, _}:...)
{
	static
	    args,
	    str[192];

	if ((args = numargs()) <= 2)
	{
	    SendNotification(playerid, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit ADD
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendNotification(playerid, str);

		#emit RETN
	}
	return 1;
}

SendFormatMessage(playerid, const text[], {Float, _}:...)
{
	static
	    args,
	    str[192];

	if ((args = numargs()) <= 2)
	{
	    SendClientMessage(playerid, -1, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit ADD
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, -1, str);

		#emit RETN
	}
	return 1;
}

stock LocalizarPropiedad(playerid)
{
	new string[100*MAX_PCASAS];
	for(new i = 0; i < MAX_PCASAS; i++)
	{
		if(PLAYER_INFO[playerid][CasaID][i] == 0) continue;
		for(new p= 0; p < MAX_PROPIEDADES; p++)
		{
			    if(PropInfo[p][pID] == PLAYER_INFO[playerid][CasaID][i]) format(string, sizeof(string), "%s Ubicación: {DBED15}%s{FFFFFF} | Interior: {009BE4}%d{FFFFFF}\n",string,PropInfo[p][pLocalizacion],PropInfo[p][pInterior]);
		}
	}
	ShowPlayerDialog(playerid,LocalizarP,DIALOG_STYLE_LIST,"Selecciona la propiedad que deseas localizar",string,"Localizar","Cancelar");
	return 1;
}

stock ObtenerCasas(playerid)
{
	new casas;
    for(new i = 0; i < MAX_PCASAS; i++)
    {
    	if(PLAYER_INFO[playerid][CasaID][i] == 0) continue;
		else casas++;
    }
	return casas;
}

stock SlotPropiedad(playerid)
{
	new slot = -1;
    for(new i = 0; i < MAX_PCASAS; i++)
    {
        if(PLAYER_INFO[playerid][CasaID][i] != 0) continue;
        else
		{
			slot = i;
        	break;
  		}
	}
	return slot;
}

//SISTEMA MOCHILA
stock CAR_BackPack(playerid)
{
	if(!BackPack[playerid][bDBID]) return 0;
	new query[90], Cache:result;
	mysql_format(handle_db, query, sizeof query, "SELECT * FROM backpack WHERE ID = %d LIMIT 1", BackPack[playerid][bDBID]);
	result = mysql_query(handle_db, query);

	if(!cache_num_rows()) return 0;

	new items[10 * BP_MAX_SLOTS], cant[10 * BP_MAX_SLOTS];

	cache_get_value_name(0, "Objeto", items); sscanf(items, "p<|>ddddddddd",
		BackPack[playerid][bObjeto][0],
		BackPack[playerid][bObjeto][1],
		BackPack[playerid][bObjeto][2],
		BackPack[playerid][bObjeto][3],
		BackPack[playerid][bObjeto][4],
		BackPack[playerid][bObjeto][5],
		BackPack[playerid][bObjeto][6],
		BackPack[playerid][bObjeto][7],
		BackPack[playerid][bObjeto][8]);

	cache_get_value_name(0, "Cantidad", cant);  sscanf(cant, "p<|>ddddddddd",
		BackPack[playerid][bCantidad][0],
		BackPack[playerid][bCantidad][1],
		BackPack[playerid][bCantidad][2],
		BackPack[playerid][bCantidad][3],
		BackPack[playerid][bCantidad][4],
		BackPack[playerid][bCantidad][5],
		BackPack[playerid][bCantidad][6],
		BackPack[playerid][bCantidad][7],
		BackPack[playerid][bCantidad][8]);
	cache_delete(result);
	return 1;
}

stock ALM_BackPack(playerid)
{
	new query[512];
	mysql_format(handle_db, query, sizeof query, "UPDATE backpack SET Objeto='%d|%d|%d|%d|%d|%d|%d|%d|%d', Cantidad='%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE ID = %d LIMIT 1",
		BackPack[playerid][bObjeto][0], BackPack[playerid][bObjeto][1], BackPack[playerid][bObjeto][2], BackPack[playerid][bObjeto][3], BackPack[playerid][bObjeto][4], BackPack[playerid][bObjeto][5], BackPack[playerid][bObjeto][6], BackPack[playerid][bObjeto][7], BackPack[playerid][bObjeto][8],
		BackPack[playerid][bCantidad][0], BackPack[playerid][bCantidad][1], BackPack[playerid][bCantidad][2], BackPack[playerid][bCantidad][3], BackPack[playerid][bCantidad][4], BackPack[playerid][bCantidad][5], BackPack[playerid][bCantidad][6], BackPack[playerid][bCantidad][7], BackPack[playerid][bCantidad][8], BackPack[playerid][bDBID]);
	return mysql_tquery(handle_db, query);
}

stock CREATE_BackPack(playerid)
{
    if(BackPack[playerid][bDBID] > 0) return 0;
    CLEAR_ITEMS(playerid);
    new Cache:da = mysql_query(handle_db, "INSERT INTO backpack (Objeto) VALUES ('0')", true);
    BackPack[playerid][bDBID] = cache_insert_id();
    cache_delete(da);
    return BackPack[playerid][bDBID];
}

stock SetBackPackItem(playerid, objeto, cantidad)
{
	if(!BackPack[playerid][bDBID]) return 0;

	new libre = -1;
	for(new i; i < BP_MAX_SLOTS; i++)
	{
		if(BackPack[playerid][bObjeto][i] == NO_ITEM)
		{
			libre = i;
			break;
		}
	}

	if(libre == -1) return libre;

	BackPack[playerid][bObjeto][libre] = objeto;
	BackPack[playerid][bCantidad][libre] = cantidad;

	return libre;
}

stock SET_BackPackItem(playerid, slot, objeto, cant)
{
	if(!BackPack[playerid][bDBID]) return 0;
	if(!(slot >= 0 && slot < BP_MAX_SLOTS)) return 0;
	BackPack[playerid][bObjeto][slot] = objeto;
	BackPack[playerid][bCantidad][slot] = cant;
	if(BackPack[playerid][bCantidad][slot] < 1 || BackPack[playerid][bObjeto][slot] >= sizeof OBJETOS_INFO)
	{
		BackPack[playerid][bObjeto][slot] = 0;
		BackPack[playerid][bCantidad][slot] = 0;
		return 0;
	}
	if(BackPack[playerid][bCantidad][slot] > OBJETOS_INFO[BackPack[playerid][bObjeto][slot]][obj_MAX])
		BackPack[playerid][bCantidad][slot] = OBJETOS_INFO[BackPack[playerid][bObjeto][slot]][obj_MAX];
	return 1;
}

stock GIVE_BackPackItem(playerid, slot, cant)
{
	if(!BackPack[playerid][bDBID]) return 0;
	if(!(slot >= 0 && slot < BP_MAX_SLOTS)) return 0;

	return SET_BackPackItem(playerid, slot, BackPack[playerid][bObjeto][slot], BackPack[playerid][bCantidad][slot] + cant);
}

stock PlayerBackPackShow(playerid)
{
	if(!BackPack[playerid][bDBID]) return 0;

	new title[32], columnas[50 * BP_MAX_SLOTS] = "Nombre\tCantidad", color, count;
	ALM_Sel[playerid] = ALM_Slot[playerid] = 0;
	for(new i; i < sizeof ALM_List[]; i ++) ALM_List[playerid][i] = 0;
	for(new i; i < BP_MAX_SLOTS; i ++)
	{
		if(BackPack[playerid][bObjeto][i] > sizeof OBJETOS_INFO)
		{
			SET_BackPackItem(playerid, i, 0, 0);
			continue;
		}
		if(GetWeaponSlot(BackPack[playerid][bObjeto][i]) != 0) color = 0xFF0000FF;
		else if(BackPack[playerid][bObjeto][i] == 48) color = 0xEBF912FF;
		else if(BackPack[playerid][bObjeto][i] == 47) color = 0x4DDF1AFF;
		else color = -1;


		if(OBJETOS_INFO[BackPack[playerid][bObjeto][i]][obj_MAX] > 1) format(columnas, sizeof columnas, "%s\n{%06x}%s{FFFF00}\t(%d/%d)",
			columnas, color >>> 8, OBJETOS_INFO[BackPack[playerid][bObjeto][i]][obj_NAME], BackPack[playerid][bCantidad][i], OBJETOS_INFO[BackPack[playerid][bObjeto][i]][obj_MAX]);
		else format(columnas, sizeof columnas, "%s\n{%06x}%s{FFFF00}\t-",
			columnas, color >>> 8, OBJETOS_INFO[BackPack[playerid][bObjeto][i]][obj_NAME], BackPack[playerid][bCantidad][i]);

		if(BackPack[playerid][bObjeto][i] > 0) count++;
	}
	format(title, sizeof title, "Mochila{FFFF00} %d/%d", count, BP_MAX_SLOTS); //#BP_MAX_SLOTS
	ShowPlayerDialog(playerid, DIALOG_BACKPACK, DIALOG_STYLE_TABLIST_HEADERS, title, columnas, "Pulsa", "Salir");
 	return 1;
}

stock DALM_ITEM(playerid, slot)
{
	if(!BackPack[playerid][bDBID]) return 0;
	if(!(slot >= 0 && slot < BP_MAX_SLOTS)) return 0;

	new columnas[512] = "Nombre\tCantidad{FF0000}", libre;

	for(new i; i < sizeof ALM_List[]; i++) ALM_List[playerid][i] = 0;
	ALM_Slot[playerid] = slot;


	for(new i; i < 13; i++)
	{
		if(PLAYER_INFO[playerid][j_ARMAS][i] > 0)
		{
			format(columnas, sizeof columnas, "%s\n%s", columnas, OBJETOS_INFO[PLAYER_INFO[playerid][j_ARMAS][i]][obj_NAME]);
			ALM_List[playerid][libre] = PLAYER_INFO[playerid][j_ARMAS][i];
			libre++;
		}
	}

	if(PLAYER_INFO[playerid][pCrack] > 0)
	{
		format(columnas, sizeof columnas, "%s\n{EBF912}Crack\t{FFFF00}(%d)", columnas, PLAYER_INFO[playerid][pCrack]);
		ALM_List[playerid][libre] = 48;
		libre++;
	}
	if(PLAYER_INFO[playerid][pRemedios] > 0)
	{
		format(columnas, sizeof columnas, "%s\n{4DDF1A}Medicamentos\t{FFFF00}(%d)", columnas, PLAYER_INFO[playerid][pRemedios]);
		ALM_List[playerid][libre] = 47;
		libre++;
	}
	if(libre > 0) ShowPlayerDialog(playerid, DIALOG_BACKPACK_ALM, DIALOG_STYLE_TABLIST_HEADERS, "Mochila - {FFFF00}Guardar", columnas, "Pulsa", "Salir");
	else
	{
		SendClientMessage(playerid, -1, "No tienes nada para guardar en la mochila.");
	}
	return 1;
}

stock CLEAR_DROP(id)
{
	Streamer_SetIntData(STREAMER_TYPE_OBJECT, DropBackPack[id], E_STREAMER_EXTRA_ID, 0);
	DestroyDynamicObject(DropBackPack[id]);
	DropBackPack[id] = INVALID_STREAMER_ID;
	TimeDrop[id] = 0;
}

stock DROP_BACKPACK(playerid)
{
	if(!BackPack[playerid][bDBID]) return 0;
	new id;

	for(; id < MAX_DROPS_BP; id++)
	{
		if(DropBackPack[id] == STREAMER_TYPE_OBJECT) break;
	}
	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	DropBackPack[id] = CreateDynamicObject(19559, x, y, z - 0.7, 0.0, 0.0, 0.0,
		GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	TimeDrop[id] = gettime();

	Streamer_SetIntData(STREAMER_TYPE_OBJECT, DropBackPack[id], E_STREAMER_EXTRA_ID, BackPack[playerid][bDBID]);

	BackPack[playerid][bDBID] = 0;
	CLEAR_ITEMS(playerid);
	RemovePlayerAttachedObject(playerid, 3);
	return 1;
}

stock BUCAR_DROP(Float:x, Float:y, Float:z, Float:size = 3.0)
{
	new id = -1, Float:px, Float:py, Float:pz;

	for(new i; i < sizeof DropBackPack; i++)
	{
		if(DropBackPack[i] == INVALID_STREAMER_ID) continue;

		GetDynamicObjectPos(DropBackPack[i], px, py, pz);
		if(VectorSize(x - px, y - py, z - pz) <= size)
		{
			id = i;
			break;
		}
	}
	return id;
}

stock TOMAR_BACKPACK(playerid, id)
{
	BackPack[playerid][bDBID] = Streamer_GetIntData(STREAMER_TYPE_OBJECT, DropBackPack[id], E_STREAMER_EXTRA_ID);
	CLEAR_DROP(id);
	CAR_BackPack(playerid);
	DarMochila(playerid);
}

stock CLEAR_ITEMS(playerid)
{
	for(new i; i < BP_MAX_SLOTS; i ++)
	{
		BackPack[playerid][bObjeto][i] = BackPack[playerid][bCantidad][i] = 0;
	}
}

stock CALT_ITEM(playerid, slot)
{
	new title[32], str[126], cantidad;
	format(title, sizeof title, "Guardar - {FFFF00}%s", OBJETOS_INFO[ALM_List[playerid][slot]][obj_NAME]);
	ALM_Sel[playerid] = slot;
	if(ALM_List[playerid][slot] == 48)
		cantidad = PLAYER_INFO[playerid][pCrack];

	if(ALM_List[playerid][slot] == 47)
		cantidad = PLAYER_INFO[playerid][pRemedios];

	format(str, sizeof str, "{30AC1C}Tienes %d de %s{FFFFFF}\n\n{FFFFFF}¿Cuánto desea guardar?", cantidad, OBJETOS_INFO[ALM_List[playerid][slot]][obj_NAME]);
	ShowPlayerDialog(playerid, DIALOG_BP_ALM_CANT, DIALOG_STYLE_INPUT, title, str, "Guardar", "Atras");
}

stock SALT_ITEM(playerid, slot)
{
	new title[32], str[126];
	format(title, sizeof title, "Sacar - {FFFF00}%s", OBJETOS_INFO[BackPack[playerid][bObjeto][slot]][obj_NAME]);
	ALM_Sel[playerid] = slot;

	format(str, sizeof str, "{30AC1C}Tienes %d de %s{FFFFFF}\n\n{FFFFFF}¿Cuánto deseas sacar?", BackPack[playerid][bCantidad][slot], OBJETOS_INFO[BackPack[playerid][bObjeto][slot]][obj_NAME]);
	ShowPlayerDialog(playerid, DIALOG_BP_SAC_CANT, DIALOG_STYLE_INPUT, title, str, "Guardar", "Atras");
}

stock DELETE_SQL_BP(sql)
{
	new str[45];
	mysql_format(handle_db, str, sizeof str, "DELETE FROM backpack WHERE ID=%d LIMIT 1", sql);
	mysql_tquery(handle_db, str);
}

stock DarMochila(playerid)
{
	if(BackPack[playerid][bDBID] > 0)
	{
		RemovePlayerAttachedObject(playerid, 3);
		SetPlayerAttachedObject(playerid, 3, 3026, 1, -0.128999, -0.099000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); //Mochila
	}
}

stock ObtenerOrdenPropiedad(playerid,listitem)
{
    new home,saltados = 0;
    for(new i = 0; i < MAX_PCASAS; i++)
    {
        if(PLAYER_INFO[playerid][CasaID][i] == 0) continue;
        if(listitem <= saltados)
        {
            home = i;
            break;
        }
        saltados++;
    }
    return home;
}
GetNameAcento(ID)
{
	new name[27];
	switch(ID)
    {
       	case 0: name = "Normal";
		case 1: name = "Aleman";
		case 2: name = "Britanico";
		case 3: name = "Japones";
		case 4: name = "Chino";
		case 5: name = "Koreano";
		case 6: name = "Venezolano";
		case 7: name = "Peruano";
		case 8: name = "Ruso";
		case 9: name = "Americano";
		case 10: name = "Español";
		case 11: name = "Colombiano";
		case 12: name = "Francés";
		case 13: name = "Italiano";
		case 14: name = "Gangster";
		case 15: name = "Uruguayo";
		case 16: name = "Brasilero";
		case 17: name = "Argentino";
		case 18: name = "Chileno";
		case 19: name = "Cubano";
		case 20: name = "Israeli";
		case 21: name = "Alemán";
		case 22: name = "Hippie";
		case 23: name = "Escocés";
		case 24: name = "Irlandés";
		case 25: name = "Australiano";
		case 26: name = "Árabe";
		case 27: name = "Canadiense";
		case 28: name = "Mexicano";
		case 29: name = "Dominicano";
		default: name = "Normal";
   	}
   	return name;
}

RangoAdministrativo(level)
{
   new adnm[65];
   switch(level)
   {
      case 1: adnm = "Aprendiz";
      case 2: adnm = "Moderador de Dudas";
      case 3: adnm = "Moderador de Juego";
      case 4: adnm = "Moderador Global";
      case 5: adnm = "Administrador";
      case 6: adnm = "Sub Dueño";
      case 7: adnm = "Dueño";
      default: adnm = "Usuario";
   }
   return adnm;
}
new const ADMIN_RANKS[][] =
{
	"Usuario",
	"Aprendiz",
	"Moderador Del N ",
	"Moderador Juego ",
	"Moderador Global",
	"Administrador",
	"Sub Dueño",
	"Dueño"
};
GetPlayerSpeed(playerid)
{
	new Float:xPos[3];
	GetPlayerVelocity(playerid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}
GetPlayerCountAKA(playerid)
{
    new query[100];
    mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `aka` WHERE IP = '%e'", PlayerIP(playerid));
    mysql_query(handle_db, query, true);
	return cache_num_rows();
}
PlayerIP(playerid)
{
    new pIP[17];
    GetPlayerIp(playerid, pIP, 17);
    return pIP;
}
GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}
SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	for(new i = 0; i != MAX_OBJETOS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;
        //if(!IsValidDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID])) continue;
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, worldid);
	}
    SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TieneFabrica(bandaid)
{
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
	{
	    if(!FABRICAS_INFO[ID][f_VALID]) continue;

    	if(FABRICAS_INFO[ID][f_FACCION_ID] == bandaid && bandaid != 0)
		{
			return ID;
		}
	}
	return 0;
}
MandarMensajeFabrica(ID, const string[])
{
    foreach(new i : Player)
    {
	    if(PLAYER_INFO[i][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
	    {
	    	SendClientMessage(i,-1, string);
	    }
    }
    return 1;
}

GuardarFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;

    new query[620];
	mysql_format(handle_db, query, sizeof(query), "UPDATE `fabricas` SET `BandaID`='%d',`Tanque1Contenido`='%d',`Tanque2Contenido`='%d',`Tanque3Contenido`='%d',`Tanque4Contenido`='%d',`Tanque5Contenido`='%d',`Tanque6Contenido`='%d',`Tanque7Contenido`='%d',`Tanque8Contenido`='%d',`Tanque9Contenido`='%d' WHERE `ID`='%d';", FABRICAS_INFO[ID][f_FACCION_ID], FABRICAS_INFO[ID][f_TANQUE][0], FABRICAS_INFO[ID][f_TANQUE][1], FABRICAS_INFO[ID][f_TANQUE][2], FABRICAS_INFO[ID][f_TANQUE][3], FABRICAS_INFO[ID][f_TANQUE][4], FABRICAS_INFO[ID][f_TANQUE][5], FABRICAS_INFO[ID][f_TANQUE][6], FABRICAS_INFO[ID][f_TANQUE][7], FABRICAS_INFO[ID][f_TANQUE][8], FABRICAS_INFO[ID][f_DBID]);
    mysql_query(handle_db, query, true);

    mysql_format(handle_db, query, sizeof(query), "UPDATE `fabricas` SET `Sniper`='%d',`Recortada`='%d',`Uzi`='%d',`Tec9`='%d', `Chalecos`='%d',`Almacen1`='%d',`Almacen2`='%d',`Almacen3`='%d',`Almacen4`='%d',`Almacen5`='%d',`Almacen6`='%d',`Almacen7`='%d',`Almacen8`='%d',`Almacen9`='%d',`Almacen10`='%d' WHERE `ID`='%d';", FABRICAS_INFO[ID][f_SNIPER],FABRICAS_INFO[ID][f_RECORTADA],FABRICAS_INFO[ID][f_UZI],FABRICAS_INFO[ID][f_TEC9], FABRICAS_INFO[ID][f_CHALECOS], FABRICAS_INFO[ID][f_CAJAS_SLOT][0], FABRICAS_INFO[ID][f_CAJAS_SLOT][1], FABRICAS_INFO[ID][f_CAJAS_SLOT][2], FABRICAS_INFO[ID][f_CAJAS_SLOT][3], FABRICAS_INFO[ID][f_CAJAS_SLOT][4], FABRICAS_INFO[ID][f_CAJAS_SLOT][5], FABRICAS_INFO[ID][f_CAJAS_SLOT][6], FABRICAS_INFO[ID][f_CAJAS_SLOT][7], FABRICAS_INFO[ID][f_CAJAS_SLOT][8], FABRICAS_INFO[ID][f_CAJAS_SLOT][9], FABRICAS_INFO[ID][f_DBID]);
    mysql_query(handle_db, query, true);

    mysql_format(handle_db, query, sizeof(query), "UPDATE `fabricas` SET `DineroAlmacenado`='%d',`Soborno`='%d',`EnVenta`='%d',`MContra`='%d',`PorcentajeLleno1`='%d',`PorcentajeLleno2`='%d',`PorcentajeLleno3`='%d',`ProgresoC1`='%d',`ProgresoC2`='%d',`ProgresoC3`='%d',`ProgresoC4`='%d',`ProgresoC5`='%d' WHERE `ID`='%d';", FABRICAS_INFO[ID][f_DINERO],FABRICAS_INFO[ID][f_SOBORNO_TIME] - gettime(),FABRICAS_INFO[ID][f_VENTA],FABRICAS_INFO[ID][f_TIPO_ACTOR][10],FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0],FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1],FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2],FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0],FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1],FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2], FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3], FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4],FABRICAS_INFO[ID][f_DBID]);
    mysql_query(handle_db, query, true);

    mysql_format(handle_db, query, sizeof(query), "UPDATE `fabricas` SET `EstadoC1`='%d',`EstadoC2`='%d',`EstadoC3`='%d',`EstadoC4`='%d',`EstadoC5`='%d',`TieneMoledor1`='%d',`TieneMoledor2`='%d',`TieneMoledor3`='%d',`TieneMoledor4`='%d',`TieneMoledor5`='%d',`Guardia1`='%d',`Guardia2`='%d',`Guardia3`='%d',`Guardia4`='%d',`Guardia5`='%d' WHERE `ID`='%d';", FABRICAS_INFO[ID][f_ESTADO_COCINERO][0], FABRICAS_INFO[ID][f_ESTADO_COCINERO][1], FABRICAS_INFO[ID][f_ESTADO_COCINERO][2], FABRICAS_INFO[ID][f_ESTADO_COCINERO][3], FABRICAS_INFO[ID][f_ESTADO_COCINERO][4], FABRICAS_INFO[ID][f_TIPO_ACTOR][0], FABRICAS_INFO[ID][f_TIPO_ACTOR][1], FABRICAS_INFO[ID][f_TIPO_ACTOR][2], FABRICAS_INFO[ID][f_TIPO_ACTOR][3], FABRICAS_INFO[ID][f_TIPO_ACTOR][4], FABRICAS_INFO[ID][f_TIPO_ACTOR][5], FABRICAS_INFO[ID][f_TIPO_ACTOR][6], FABRICAS_INFO[ID][f_TIPO_ACTOR][7], FABRICAS_INFO[ID][f_TIPO_ACTOR][8], FABRICAS_INFO[ID][f_TIPO_ACTOR][9],FABRICAS_INFO[ID][f_DBID]);
    mysql_query(handle_db, query, true);
	return 1;
}

CargarFabricas()
{
	new query[40], count;
    mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `fabricas`");
    mysql_query(handle_db, query, true);

    for(new x = 1; x < MAX_FABRICAS; x++) FABRICAS_INFO[x][f_VALID] = false;

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new ID = -1;
	    for(new x = 1; x < MAX_FABRICAS; x++)
	    {
	        if(!FABRICAS_INFO[x][f_VALID])
	        {
	            ID = x;
				break;
	        }
	    }
	    if(ID == -1) return  1;
	    FABRICAS_INFO[ID][f_VALID] = true;

		cache_get_value_name_int(i, "ID",FABRICAS_INFO[ID][f_DBID]);
		DesocuparFabrica(ID);
		
		cache_get_value_name_int(i, "BandaID",FABRICAS_INFO[ID][f_FACCION_ID]);

		cache_get_value_name_int(i, "Tanque1Contenido", FABRICAS_INFO[ID][f_TANQUE][0]);
		cache_get_value_name_int(i, "Tanque2Contenido", FABRICAS_INFO[ID][f_TANQUE][1]);
		cache_get_value_name_int(i, "Tanque3Contenido", FABRICAS_INFO[ID][f_TANQUE][2]);
		cache_get_value_name_int(i, "Tanque4Contenido", FABRICAS_INFO[ID][f_TANQUE][3]);
		cache_get_value_name_int(i, "Tanque5Contenido", FABRICAS_INFO[ID][f_TANQUE][4]);
		cache_get_value_name_int(i, "Tanque6Contenido", FABRICAS_INFO[ID][f_TANQUE][5]);
		cache_get_value_name_int(i, "Tanque7Contenido", FABRICAS_INFO[ID][f_TANQUE][6]);
		cache_get_value_name_int(i, "Tanque8Contenido", FABRICAS_INFO[ID][f_TANQUE][7]);
		cache_get_value_name_int(i, "Tanque9Contenido", FABRICAS_INFO[ID][f_TANQUE][8]);

		cache_get_value_name_int(i, "Almacen1", FABRICAS_INFO[ID][f_CAJAS_SLOT][0]);
		cache_get_value_name_int(i, "Almacen2", FABRICAS_INFO[ID][f_CAJAS_SLOT][1]);
		cache_get_value_name_int(i, "Almacen3", FABRICAS_INFO[ID][f_CAJAS_SLOT][2]);
		cache_get_value_name_int(i, "Almacen4", FABRICAS_INFO[ID][f_CAJAS_SLOT][3]);
		cache_get_value_name_int(i, "Almacen5", FABRICAS_INFO[ID][f_CAJAS_SLOT][4]);
		cache_get_value_name_int(i, "Almacen6", FABRICAS_INFO[ID][f_CAJAS_SLOT][5]);
		cache_get_value_name_int(i, "Almacen7", FABRICAS_INFO[ID][f_CAJAS_SLOT][6]);
		cache_get_value_name_int(i, "Almacen8", FABRICAS_INFO[ID][f_CAJAS_SLOT][7]);
		cache_get_value_name_int(i, "Almacen9", FABRICAS_INFO[ID][f_CAJAS_SLOT][8]);
		cache_get_value_name_int(i, "Almacen10", FABRICAS_INFO[ID][f_CAJAS_SLOT][9]);

		cache_get_value_name_int(i, "DineroAlmacenado", FABRICAS_INFO[ID][f_DINERO]);

		cache_get_value_name_float(i, "EntradaX", FABRICAS_INFO[ID][f_POS][0]);
		cache_get_value_name_float(i, "EntradaY", FABRICAS_INFO[ID][f_POS][1]);
		cache_get_value_name_float(i, "EntradaZ", FABRICAS_INFO[ID][f_POS][2]);
		cache_get_value_name_float(i, "EntradaA", FABRICAS_INFO[ID][f_POS][3]);
		cache_get_value_name_float(i, "GarajeE_X", FABRICAS_INFO[ID][f_POS_GARAJE][0]);
		cache_get_value_name_float(i, "GarajeE_Y", FABRICAS_INFO[ID][f_POS_GARAJE][1]);
		cache_get_value_name_float(i, "GarajeE_Z", FABRICAS_INFO[ID][f_POS_GARAJE][2]);
		cache_get_value_name_float(i, "GarajeE_A", FABRICAS_INFO[ID][f_POS_GARAJE][3]);

		cache_get_value_name_int(i, "Soborno", FABRICAS_INFO[ID][f_SOBORNO_TIME]);
		cache_get_value_name_int(i, "EnVenta", FABRICAS_INFO[ID][f_VENTA]);
		cache_get_value_name_int(i, "MContra", FABRICAS_INFO[ID][f_TIPO_ACTOR][10]);
		cache_get_value_name_int(i, "PorcentajeLleno1", FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0]);
		cache_get_value_name_int(i, "PorcentajeLleno2", FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1]);
		cache_get_value_name_int(i, "PorcentajeLleno3", FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2]);
		cache_get_value_name_int(i, "ProgresoC1", FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0]);
		cache_get_value_name_int(i, "ProgresoC2", FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1]);
		cache_get_value_name_int(i, "ProgresoC3", FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2]);
		cache_get_value_name_int(i, "ProgresoC4", FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3]);
		cache_get_value_name_int(i, "ProgresoC5", FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4]);
		cache_get_value_name_int(i, "EstadoC1", FABRICAS_INFO[ID][f_ESTADO_COCINERO][0]);
		cache_get_value_name_int(i, "EstadoC2", FABRICAS_INFO[ID][f_ESTADO_COCINERO][1]);
		cache_get_value_name_int(i, "EstadoC3", FABRICAS_INFO[ID][f_ESTADO_COCINERO][2]);
		cache_get_value_name_int(i, "EstadoC4", FABRICAS_INFO[ID][f_ESTADO_COCINERO][3]);
		cache_get_value_name_int(i, "EstadoC5", FABRICAS_INFO[ID][f_ESTADO_COCINERO][4]);
		cache_get_value_name_int(i, "TieneMoledor1", FABRICAS_INFO[ID][f_TIPO_ACTOR][0]);
		cache_get_value_name_int(i, "TieneMoledor2", FABRICAS_INFO[ID][f_TIPO_ACTOR][1]);
		cache_get_value_name_int(i, "TieneMoledor3", FABRICAS_INFO[ID][f_TIPO_ACTOR][2]);
		cache_get_value_name_int(i, "TieneMoledor4", FABRICAS_INFO[ID][f_TIPO_ACTOR][3]);
		cache_get_value_name_int(i, "TieneMoledor5", FABRICAS_INFO[ID][f_TIPO_ACTOR][4]);
		cache_get_value_name_int(i, "Guardia1", FABRICAS_INFO[ID][f_TIPO_ACTOR][5]);
		cache_get_value_name_int(i, "Guardia2", FABRICAS_INFO[ID][f_TIPO_ACTOR][6]);
		cache_get_value_name_int(i, "Guardia3", FABRICAS_INFO[ID][f_TIPO_ACTOR][7]);
		cache_get_value_name_int(i, "Guardia4", FABRICAS_INFO[ID][f_TIPO_ACTOR][8]);
		cache_get_value_name_int(i, "Guardia5", FABRICAS_INFO[ID][f_TIPO_ACTOR][9]);
        cache_get_value_name_int(i, "Chalecos", FABRICAS_INFO[ID][f_CHALECOS]);
        cache_get_value_name_int(i, "Sniper", FABRICAS_INFO[ID][f_SNIPER]);
        cache_get_value_name_int(i, "Recortada", FABRICAS_INFO[ID][f_RECORTADA]);
        cache_get_value_name_int(i, "Uzi", FABRICAS_INFO[ID][f_UZI]);
        cache_get_value_name_int(i, "Tec9", FABRICAS_INFO[ID][f_TEC9]);

        FABRICAS_INFO[ID][f_ID] = ID;
	    FABRICAS_INFO[ID][f_INTERIOR] = ID;
	    FABRICAS_INFO[ID][f_VW] = ID;

     	FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
		FABRICAS_INFO[ID][f_CESTADO][0] = 0;
	    FABRICAS_INFO[ID][f_CESTADO][1] = 0;
	    FABRICAS_INFO[ID][f_CESTADO][2] = 0;
	    if(FABRICAS_INFO[ID][f_CHALECOS] >= 24) FABRICAS_INFO[ID][f_CHALECOS] = 23;
	    FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
	    
        if(FABRICAS_INFO[ID][f_VENTA] == 0) FABRICAS_INFO[ID][f_SOBORNO_TIME] = gettime();
		else FABRICAS_INFO[ID][f_SOBORNO_TIME] = gettime() + FABRICAS_INFO[ID][f_SOBORNO_TIME];
        if(FABRICAS_INFO[ID][f_FACCION_ID] == 0 && FABRICAS_INFO[ID][f_VENTA] == 1) FABRICAS_INFO[ID][f_VENTA] = 0;
        
	    CargarFabrica(ID);
	    count ++;
	}
	printf("[FABRICAS]: %d",count);
	return 1;
}

DesocuparFabrica(ID, bool:save = false)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
    POS_FABRICA[ID][0] = FABRICAS_INFO[ID][f_POS][0];
    POS_FABRICA[ID][1] = FABRICAS_INFO[ID][f_POS][1];
    POS_FABRICA[ID][2] = FABRICAS_INFO[ID][f_POS][2];
    POS_FABRICA[ID][3] = FABRICAS_INFO[ID][f_POS][3];
	POS_GARAJE_FABRICA[ID][0] = FABRICAS_INFO[ID][f_POS_GARAJE][0];
	POS_GARAJE_FABRICA[ID][1] = FABRICAS_INFO[ID][f_POS_GARAJE][1];
	POS_GARAJE_FABRICA[ID][2] = FABRICAS_INFO[ID][f_POS_GARAJE][2];
	POS_GARAJE_FABRICA[ID][3] = FABRICAS_INFO[ID][f_POS_GARAJE][3];
	FABRICA_ID_DB[ID] = FABRICAS_INFO[ID][f_DBID];

	if(IsValidVehicle(FABRICAS_INFO[ID][f_VEHICLES][0])) DestroyVehicleEx(FABRICAS_INFO[ID][f_VEHICLES][0]);
	if(IsValidVehicle(FABRICAS_INFO[ID][f_VEHICLES][1])) DestroyVehicleEx(FABRICAS_INFO[ID][f_VEHICLES][1]);

 	for(new a = 0; a < MAX_ACTORS_FABRICA; a++)
	{
		if(IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a])) 	DestroyDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a]);
	}
    for(new l = 0; l < MAX_LABELS_FABRICA; l++)
	{
		if(IsValidDynamic3DTextLabel(FABRICAS_INFO[ID][f_LABELS][l])) 	DestroyDynamic3DTextLabel(FABRICAS_INFO[ID][f_LABELS][l]);
	}
	if(IsValidDynamicPickup(FABRICAS_INFO[ID][f_MAPICON])) 			DestroyDynamicPickup(FABRICAS_INFO[ID][f_MAPICON]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_PUERTA])) 			DestroyDynamicObject(FABRICAS_INFO[ID][f_PUERTA]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_DINERO_PARED])) 	DestroyDynamicObject(FABRICAS_INFO[ID][f_DINERO_PARED]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_PORTON][0])) 		DestroyDynamicObject(FABRICAS_INFO[ID][f_PORTON][0]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_PORTON][1])) 		DestroyDynamicObject(FABRICAS_INFO[ID][f_PORTON][1]);
	
	new reiniciar_fabrica[f_info];
	FABRICAS_INFO[ID] = reiniciar_fabrica;
	FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
	FABRICAS_INFO[ID][f_VALID] = true;
	FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
	FABRICAS_INFO[ID][f_POS][0] = POS_FABRICA[ID][0];
    FABRICAS_INFO[ID][f_POS][1] = POS_FABRICA[ID][1];
    FABRICAS_INFO[ID][f_POS][2] = POS_FABRICA[ID][2];
    FABRICAS_INFO[ID][f_POS][3] = POS_FABRICA[ID][3];
	FABRICAS_INFO[ID][f_POS_GARAJE][0] = POS_GARAJE_FABRICA[ID][0];
	FABRICAS_INFO[ID][f_POS_GARAJE][1] = POS_GARAJE_FABRICA[ID][1];
	FABRICAS_INFO[ID][f_POS_GARAJE][2] = POS_GARAJE_FABRICA[ID][2];
	FABRICAS_INFO[ID][f_POS_GARAJE][3] = POS_GARAJE_FABRICA[ID][3];
	FABRICAS_INFO[ID][f_DBID] = FABRICA_ID_DB[ID];
    FABRICAS_INFO[ID][f_DINERO] = 3000000;
    FABRICAS_INFO[ID][f_SOBORNO_TIME] = gettime();
	FABRICAS_INFO[ID][f_ID] = ID;
    FABRICAS_INFO[ID][f_INTERIOR] = ID;
    FABRICAS_INFO[ID][f_VW] = ID;
    
    if(save)
    {
        CargarFabrica(ID);
        GuardarFabrica(ID);
    }
	return 1;
}

CargarFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
    
    Get3DZone(FABRICAS_INFO[ID][f_POS][0],FABRICAS_INFO[ID][f_POS][1],FABRICAS_INFO[ID][f_POS][2], FABRICAS_INFO[ID][f_LOCALITATION], 64);

	if(IsValidVehicle(FABRICAS_INFO[ID][f_VEHICLES][0])) DestroyVehicleEx(FABRICAS_INFO[ID][f_VEHICLES][0]);
	if(IsValidVehicle(FABRICAS_INFO[ID][f_VEHICLES][1])) DestroyVehicleEx(FABRICAS_INFO[ID][f_VEHICLES][1]);
	for(new a = 0; a < MAX_ACTORS_FABRICA; a++)
	{
		if(IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a])) 	DestroyDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a]);
	}
    for(new l = 0; l < MAX_LABELS_FABRICA; l++)
	{
		if(IsValidDynamic3DTextLabel(FABRICAS_INFO[ID][f_LABELS][l])) 	DestroyDynamic3DTextLabel(FABRICAS_INFO[ID][f_LABELS][l]);
	}
	if(IsValidDynamicPickup(FABRICAS_INFO[ID][f_MAPICON])) 			DestroyDynamicPickup(FABRICAS_INFO[ID][f_MAPICON]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_PUERTA])) 			DestroyDynamicObject(FABRICAS_INFO[ID][f_PUERTA]);
	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_DINERO_PARED])) 	DestroyDynamicObject(FABRICAS_INFO[ID][f_DINERO_PARED]);

	FABRICAS_INFO[ID][f_MAPICON] = CreateDynamicMapIcon(FABRICAS_INFO[ID][f_POS][0],FABRICAS_INFO[ID][f_POS][1],FABRICAS_INFO[ID][f_POS][2], 23, -1, -1, -1, -1, 600.0);
	FABRICAS_INFO[ID][f_PUERTA] = CreateDynamicObject(19303, -2022.93274, 254.14169, 1036.06921,   0.00000, 0.00000, 90.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	FABRICAS_INFO[ID][f_DINERO_PARED] = CreateDynamicObject(18660, -2026.720825, 253.748703, 1036.851807, 0.000000, 0.000000, 180.000000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR], -1);
    FABRICAS_INFO[ID][f_LABELS][0] = CreateDynamic3DTextLabel(" ", -1, FABRICAS_INFO[ID][f_POS][0],FABRICAS_INFO[ID][f_POS][1],FABRICAS_INFO[ID][f_POS][2]+1.0, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    FABRICAS_INFO[ID][f_LABELS][1] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.", -1, FABRICAS_INFO[ID][f_POS_GARAJE][0],FABRICAS_INFO[ID][f_POS_GARAJE][1],FABRICAS_INFO[ID][f_POS_GARAJE][2]+1.0, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    FABRICAS_INFO[ID][f_LABELS][2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir de la propiedad.", -1,-1976.0731,206.4436,1035.8162, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    FABRICAS_INFO[ID][f_LABELS][3] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para salir de la propiedad.", -1,-1976.1282,212.3176,1035.8162, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    FABRICAS_INFO[ID][f_LABELS][4] = CreateDynamic3DTextLabel(" ", -1, -1992.2786, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][5] = CreateDynamic3DTextLabel(" ", -1, -1995.6786, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][6] = CreateDynamic3DTextLabel(" ", -1, -1999.1986, 194.1294, 1035.4269, 4.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][7] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 209.3350, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][8] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 212.2440, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][9] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 215.3320, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][10] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 194.5190, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][11] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 197.5950, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][12] = CreateDynamic3DTextLabel(" ", -1, -2025.3972, 200.4760, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][13] = CreateDynamic3DTextLabel(" ", -1, -1976.9731, 200.2980, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][14] = CreateDynamic3DTextLabel(" ", -1, -1976.9731, 197.4360, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][15] = CreateDynamic3DTextLabel(" ", -1, -1976.9731, 194.3620, 1041.0414-0.5, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][16] = CreateDynamic3DTextLabel(" ", -1, -2016.39978, 226.99930, 1035.33789+0.2, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][17] = CreateDynamic3DTextLabel(" ", -1, -2012.56006, 226.99930, 1035.33789+0.2, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][18] = CreateDynamic3DTextLabel(" ", -1, -2008.72021, 226.99930, 1035.33789+0.2, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][19] = CreateDynamic3DTextLabel(" ", -1, -2004.88074, 226.99930, 1035.33789+0.2, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][20] = CreateDynamic3DTextLabel(" ", -1, -2001.06067, 226.99930, 1035.33789+0.2, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][21] = CreateDynamic3DTextLabel(" ", -1, -2020.0555,239.3711,1035.8162+0.3, 3.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
	FABRICAS_INFO[ID][f_LABELS][22] = CreateDynamic3DTextLabel(" ", -1, -2019.9447,243.5474,1035.8162+0.3 ,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    FABRICAS_INFO[ID][f_LABELS][23] = CreateDynamic3DTextLabel(" ", -1, -2019.0933,246.1469,1035.8389+0.3 ,5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
    
    for(new i = 24; i < MAX_LABELS_FABRICA;i++)
	{
	    for(new l = 0; l < sizeof(GuardarCajas); l++)
		{
			FABRICAS_INFO[ID][f_LABELS][i] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para sacar o guardar cajas.", -1,GuardarCajas[l][c_POS_X],GuardarCajas[l][c_POS_Y],GuardarCajas[l][c_POS_Z],2,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR],-1,100.0);
		}
	}
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 1) FABRICAS_INFO[ID][f_ACTORES][0] = CreateDynamicActor(146, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 2) FABRICAS_INFO[ID][f_ACTORES][0] = CreateDynamicActor(145, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 1) FABRICAS_INFO[ID][f_ACTORES][1] = CreateDynamicActor(146, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 2) FABRICAS_INFO[ID][f_ACTORES][1] = CreateDynamicActor(145, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 1) FABRICAS_INFO[ID][f_ACTORES][2] = CreateDynamicActor(146, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 2) FABRICAS_INFO[ID][f_ACTORES][2] = CreateDynamicActor(145, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 1) FABRICAS_INFO[ID][f_ACTORES][3] = CreateDynamicActor(146, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 2) FABRICAS_INFO[ID][f_ACTORES][3] = CreateDynamicActor(145, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 1) FABRICAS_INFO[ID][f_ACTORES][4] = CreateDynamicActor(146, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 2) FABRICAS_INFO[ID][f_ACTORES][4] = CreateDynamicActor(145, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][5] == 1) FABRICAS_INFO[ID][f_ACTORES][5] = CreateDynamicActor(66, -1983.3815,207.0429,1040.0468,76.4343, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][6] == 1) FABRICAS_INFO[ID][f_ACTORES][6] = CreateDynamicActor(163, -2010.1060,208.9797,1035.8162,272.1400, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][7] == 1) FABRICAS_INFO[ID][f_ACTORES][7] = CreateDynamicActor(223, -2016.1063,233.2106,1035.8162,229.3722, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][8] == 1) FABRICAS_INFO[ID][f_ACTORES][8] = CreateDynamicActor(166, -2022.6560,243.8168,1035.8162,145.2300, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][9] == 1) FABRICAS_INFO[ID][f_ACTORES][9] = CreateDynamicActor(124, -2023.5002,244.8579,1035.8389,1.5771, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][10] != 0) FABRICAS_INFO[ID][f_ACTORES][10] = CreateDynamicActor(276, -2022.5638,215.6430,1035.8162,302.6615,1,100, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    FABRICAS_INFO[ID][f_ACTORES][11] = CreateDynamicActor(179, -2019.0933,246.1469,1035.8389,42.9757, 1,100, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    
    FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
    FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
    
	LoadFabricaReja(ID);
    CreateVehicleFabrica(ID, 1);
	CreateVehicleFabrica(ID, 2);
	ActualizarAlmacenFabrica(ID);
	ActualizarDineroFabrica(ID);
	ActualizarLabelsFabrica(ID);
	CargarActoresFabrica(ID);
	CargarCocinaFabrica(ID);
	CargarChalecosFabrica(ID);
	CargarUziFabrica(ID);
	CargarSniperFabrica(ID);
	CargarTec9Fabrica(ID);
	CargarRecortadasFabrica(ID);
	return 1;
}
timer CerrarRejaFabrica[2500](ID)
{
    EstadoRejaFabrica(ID, 0);
	return 1;
}

timer entrarGarajeCasa[1500](casaid, vehicleid)
{
	SetPosVeh(vehicleid, -1136.6586,-4247.3647,8075.8682+1, 0.4197, 4, PropInfo[casaid][pVW]);
	return 1;
}
EstadoRejaFabrica(ID, estado)
{
    switch(estado)
    {
        case 0://cerrar
        {
            FABRICAS_INFO[ID][f_PORTON_ESTADO] = 0;
            new count;
            for(new i = 0; i < sizeof(REJAS_INFO); i++)
		    {
			    if(REJAS_INFO[i][rf_ID] == ID && REJAS_INFO[i][rf_SLOT] == count)
			    {
            		MoveDynamicObject(FABRICAS_INFO[ID][f_PORTON][count], REJAS_INFO[i][rf_POS_X], REJAS_INFO[i][rf_POS_Y], REJAS_INFO[i][rf_POS_Z], 5.0);
            		count ++;
        		}
        	}
        	return 1;
        }
        case 1://abrir
        {
            FABRICAS_INFO[ID][f_PORTON_ESTADO] = 1;
            new count;
            for(new i = 0; i < sizeof(REJAS_INFO); i++)
		    {
			    if(REJAS_INFO[i][rf_ID] == ID && REJAS_INFO[i][rf_SLOT] == count)
			    {
		            MoveDynamicObject(FABRICAS_INFO[ID][f_PORTON][count], REJAS_INFO[i][rf_NEW_POS_X], REJAS_INFO[i][rf_NEW_POS_Y], REJAS_INFO[i][rf_NEW_POS_Z], 5.0);
		            count ++;
				}
			}
			defer CerrarRejaFabrica(ID);
			return 1;
        }
    }
	return 1;
}
LoadFabricaReja(ID)
{
    for(new slot = 0; slot < 2; slot++)
    {
	    for(new i = 0; i < sizeof(REJAS_INFO); i++)
	    {
		    if(REJAS_INFO[i][rf_ID] == ID && REJAS_INFO[i][rf_SLOT] == slot)
		    {
				FABRICAS_INFO[ID][f_PORTON][slot] = CreateDynamicObject(REJAS_INFO[i][rf_OBJETO_ID], REJAS_INFO[i][rf_POS_X], REJAS_INFO[i][rf_POS_Y], REJAS_INFO[i][rf_POS_Z],
				REJAS_INFO[i][rf_POS_RX], REJAS_INFO[i][rf_POS_RY], REJAS_INFO[i][rf_POS_RZ]);
			}
		}
	}
    return 1;
}

CargarUziFabrica(ID, bool:quitar = false)
{
    for(new ch = 0; ch < 10; ch++)
	{
	    DestroyDynamicObject(FABRICAS_INFO[ID][f_OBJETO_UZI][ch]);
	}
	if(quitar) FABRICAS_INFO[ID][f_UZI] --;
	for(new cb = 0; cb < FABRICAS_INFO[ID][f_UZI]; cb++)
	{
		FABRICAS_INFO[ID][f_OBJETO_UZI][cb] = CreateDynamicObject(352, PUzis[cb][0], PUzis[cb][1], PUzis[cb][2],   PUzis[cb][3], PUzis[cb][4], PUzis[cb][5], FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	}
	return 1;
}
CargarSniperFabrica(ID, bool:quitar = false)
{
    for(new ch = 0; ch < 10; ch++)
	{
	    DestroyDynamicObject(FABRICAS_INFO[ID][f_OBJETO_SNIPER][ch]);
	}
	if(quitar) FABRICAS_INFO[ID][f_SNIPER] --;
	for(new cb = 0; cb < FABRICAS_INFO[ID][f_SNIPER]; cb++)
	{
		FABRICAS_INFO[ID][f_OBJETO_SNIPER][cb] = CreateDynamicObject(358, PSnipers[cb][0], PSnipers[cb][1], PSnipers[cb][2],   PSnipers[cb][3], PSnipers[cb][4], PSnipers[cb][5], FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	}
	return 1;
}
CargarTec9Fabrica(ID, bool:quitar = false)
{
    for(new ch = 0; ch < 10; ch++)
	{
	    DestroyDynamicObject(FABRICAS_INFO[ID][f_OBJETO_TEC9][ch]);
	}
	if(quitar) FABRICAS_INFO[ID][f_TEC9] --;
	for(new cb = 0; cb < FABRICAS_INFO[ID][f_TEC9]; cb++)
	{
		FABRICAS_INFO[ID][f_OBJETO_TEC9][cb] = CreateDynamicObject(372, PTec[cb][0], PTec[cb][1], PTec[cb][2], PTec[cb][3], PTec[cb][4], PTec[cb][5], FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	}
	return 1;
}
CargarRecortadasFabrica(ID, bool:quitar = false)
{
    for(new ch = 0; ch < 10; ch++)
	{
	    DestroyDynamicObject(FABRICAS_INFO[ID][f_OBJETOS_RECORTADA][ch]);
	}
	if(quitar) FABRICAS_INFO[ID][f_RECORTADA] --;
	for(new cb = 0; cb < FABRICAS_INFO[ID][f_RECORTADA]; cb++)
	{
		FABRICAS_INFO[ID][f_OBJETOS_RECORTADA][cb] = CreateDynamicObject(350, EscopetasRecortadas[cb][0], EscopetasRecortadas[cb][1], EscopetasRecortadas[cb][2],   EscopetasRecortadas[cb][3], EscopetasRecortadas[cb][4], EscopetasRecortadas[cb][5], FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	}
	return 1;
}

CargarChalecosFabrica(ID, bool:quitar = false)
{
    for(new ch = 0; ch < 23; ch++)
    {
    	if(IsValidDynamicObject(FABRICAS_INFO[ID][f_OBJETO_CHALECOS][ch])) DestroyDynamicObject(FABRICAS_INFO[ID][f_OBJETO_CHALECOS][ch]);
	}
	if(quitar) FABRICAS_INFO[ID][f_CHALECOS] --;
	for(new ch = 0; ch < FABRICAS_INFO[ID][f_CHALECOS]; ch++)
	{
		FABRICAS_INFO[ID][f_OBJETO_CHALECOS][ch] = CreateDynamicObject(373, ChalecoSpawn[ch][0], ChalecoSpawn[ch][1], ChalecoSpawn[ch][2],   ChalecoSpawn[ch][3], ChalecoSpawn[ch][4], ChalecoSpawn[ch][5], FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	}
	return 1;
}

ActualizarAlmacenFabrica(ID)
{
	new count;
    for(new slot = 0; slot < 10; slot++)
    {
        if(FABRICAS_INFO[ID][f_CAJAS_SLOT][slot] == 1)
       	{
       	    for(new ci = 0; ci <sizeof(CAJAS_INFO); ci++)
            {
                if(slot == CAJAS_INFO[ci][c_ID] && CAJAS_INFO[ci][c_SLOT] == 1)
      			{
      			    if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count]);
      			    FABRICAS_INFO[ID][f_CAJAS][count] = CreateDynamicObject(1271, CAJAS_INFO[ci][c_POS_X],CAJAS_INFO[ci][c_POS_Y],CAJAS_INFO[ci][c_POS_Z],   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
                    count ++;
				}
			}
       	}
       	else if(FABRICAS_INFO[ID][f_CAJAS_SLOT][slot] == 2)
       	{
       	    for(new ci = 0; ci <sizeof(CAJAS_INFO); ci++)
            {
                if(slot == CAJAS_INFO[ci][c_ID] && CAJAS_INFO[ci][c_SLOT] == 1)
      			{
      			    if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count]);
      			    FABRICAS_INFO[ID][f_CAJAS][count] = CreateDynamicObject(1271, CAJAS_INFO[ci][c_POS_X],CAJAS_INFO[ci][c_POS_Y],CAJAS_INFO[ci][c_POS_Z],   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
                    count ++;
				}
				if(slot == CAJAS_INFO[ci][c_ID] && CAJAS_INFO[ci][c_SLOT] == 2)
      			{
      			    if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJAS][count]);
      			    FABRICAS_INFO[ID][f_CAJAS][count] = CreateDynamicObject(1271, CAJAS_INFO[ci][c_POS_X],CAJAS_INFO[ci][c_POS_Y],CAJAS_INFO[ci][c_POS_Z],   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
                    count ++;
				}
			}
       	}
    }
	return 1;
}

CargarActoresFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;

    for(new a = 0; a < MAX_ACTORS_FABRICA; a++)
	{
		if(IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a])) 	DestroyDynamicActor(FABRICAS_INFO[ID][f_ACTORES][a]);
	}
	
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 2)
	{
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] == 2)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] >= 100) FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] = 3;
		}
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] == 3)
		{
		    DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
			FABRICAS_INFO[ID][f_CAJA_COCINERO][0] = CreateDynamicObject(1271, -2017.67334, 227.02380, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
	}
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 2)
	{
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] == 2)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] >= 100) FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] = 3;
		}
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] == 3)
		{
		    DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
			FABRICAS_INFO[ID][f_CAJA_COCINERO][1] = CreateDynamicObject(1271, -2013.86060, 227.05284, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
	}
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 2)
	{
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] == 2)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] >= 100) FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] = 3;
		}
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] == 3)
		{
		    DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
			FABRICAS_INFO[ID][f_CAJA_COCINERO][2] = CreateDynamicObject(1271, -2009.98157, 227.00481, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
	}
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 2)
	{
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] == 2)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] >= 100) FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] = 3;
		}
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] == 3)
		{
		    DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
			FABRICAS_INFO[ID][f_CAJA_COCINERO][3] = CreateDynamicObject(1271, -2006.16040, 226.99612, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
	}
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 2)
	{
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] == 2)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] >= 100) FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] = 3;
		}
	    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] == 3)
		{
		    DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
			FABRICAS_INFO[ID][f_CAJA_COCINERO][4] = CreateDynamicObject(1271, -2002.34033, 227.01234, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
	}
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 1) FABRICAS_INFO[ID][f_ACTORES][0] = CreateDynamicActor(146, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 2) FABRICAS_INFO[ID][f_ACTORES][0] = CreateDynamicActor(145, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 1) FABRICAS_INFO[ID][f_ACTORES][1] = CreateDynamicActor(146, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 2) FABRICAS_INFO[ID][f_ACTORES][1] = CreateDynamicActor(145, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 1) FABRICAS_INFO[ID][f_ACTORES][2] = CreateDynamicActor(146, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 2) FABRICAS_INFO[ID][f_ACTORES][2] = CreateDynamicActor(145, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 1) FABRICAS_INFO[ID][f_ACTORES][3] = CreateDynamicActor(146, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 2) FABRICAS_INFO[ID][f_ACTORES][3] = CreateDynamicActor(145, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 1) FABRICAS_INFO[ID][f_ACTORES][4] = CreateDynamicActor(146, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 2) FABRICAS_INFO[ID][f_ACTORES][4] = CreateDynamicActor(145, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][5] == 1) FABRICAS_INFO[ID][f_ACTORES][5] = CreateDynamicActor(66, -1983.3815,207.0429,1040.0468,76.4343, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][6] == 1) FABRICAS_INFO[ID][f_ACTORES][6] = CreateDynamicActor(163, -2010.1060,208.9797,1035.8162,272.1400, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][7] == 1) FABRICAS_INFO[ID][f_ACTORES][7] = CreateDynamicActor(223, -2016.1063,233.2106,1035.8162,229.3722, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][8] == 1) FABRICAS_INFO[ID][f_ACTORES][8] = CreateDynamicActor(166, -2022.6560,243.8168,1035.8162,145.2300, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
	if(FABRICAS_INFO[ID][f_TIPO_ACTOR][9] == 1) FABRICAS_INFO[ID][f_ACTORES][9] = CreateDynamicActor(124, -2023.5002,244.8579,1035.8389,1.5771, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][10] != 0) FABRICAS_INFO[ID][f_ACTORES][10] = CreateDynamicActor(276, -2022.5638,215.6430,1035.8162,302.6615,1,100, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
    FABRICAS_INFO[ID][f_ACTORES][11] = CreateDynamicActor(179, -2019.0933,246.1469,1035.8389,42.9757, 1,100, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);

	ActualizarLabelsFabrica(ID);
	return 1;
}

CargarCocinaFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
	if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] >= 100) FABRICAS_INFO[ID][f_CRISTAL][0] = 1;
	if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] >= 100) FABRICAS_INFO[ID][f_CRISTAL][1] = 1;
	if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] >= 100) FABRICAS_INFO[ID][f_CRISTAL][2] = 1;
	ActualizarLabelsFabrica(ID);
	return 1;
}

EstadoCocinero(tipo, actor_id)
{
	new str[52];
	switch(tipo)
	{
	    case 0: str = "{3399FF}falta trabajador{FFFFFF}";
	    case 1:
		{
			str = "{FFFF04}faltan materiales{FFFFFF}";
			ApplyDynamicActorAnimation(actor_id, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		}
		case 2:
		{
			str = "{f21111}procesando{FFFFFF}";
			ApplyDynamicActorAnimation(actor_id,"SMOKING", "M_smkstnd_loop", 4.1, 1, 0, 0, 1, 0);
		}
		case 3:
		{
			str = "{3D83CE}esperando recolección{FFFFFF}";
			ApplyDynamicActorAnimation(actor_id, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		}
		case 4:
		{
			str = "{EB0000}asesinado{FFFFFF}";
			ApplyDynamicActorAnimation(actor_id, "WUZI","CS_Dead_Guy", 4.1, 1, 0, 0, 1, 0);
		}
	}
	return str;
}
QuitarDineroFabrica(ID, cantidad)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
    FABRICAS_INFO[ID][f_DINERO] -= cantidad;
    if(FABRICAS_INFO[ID][f_DINERO] < 0) FABRICAS_INFO[ID][f_DINERO] = 0;
	ActualizarDineroFabrica(ID);
	return 1;
}
DarDineroFabrica(ID, cantidad)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
    FABRICAS_INFO[ID][f_DINERO] += cantidad;
    if(FABRICAS_INFO[ID][f_DINERO] < 0) FABRICAS_INFO[ID][f_DINERO] = 0;
	ActualizarDineroFabrica(ID);
	return 1;
}

ActualizarDineroFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;
    
    new moneytext[500];
    UpdateAllBagsMoney(ID);
	format(moneytext,sizeof(moneytext),"Dinero guardado:\n$%s", number_format(FABRICAS_INFO[ID][f_DINERO]));
	SetDynamicObjectMaterialText(FABRICAS_INFO[ID][f_DINERO_PARED], 0, moneytext, 90, "Comic Sans MS", 26, 0, 0xFFFFFFFF, 0, 1);
	return 1;
}

CalcularBolsos(ID)
{
	new cantidad_x = FABRICAS_INFO[ID][f_DINERO];
    FABRICAS_INFO[ID][f_CANTIDAD_BOLSOS] = cantidad_x / 1000000;
	return 1;
}

UpdateAllBagsMoney(ID)
{
	new count;
    for(new ch = 0; ch < FABRICAS_INFO[ID][f_CANTIDAD_BOLSOS]; ch++)
	{
	    if(count >= 31) break;
	    DestroyDynamicObject(FABRICAS_INFO[ID][f_BOLSOS_DINERO][ch]);
	    count ++;
	}
	CalcularBolsos(ID);
	count = 0;
	for(new cb = 0; cb < FABRICAS_INFO[ID][f_CANTIDAD_BOLSOS]; cb++)
	{
	    if(count >= 31) break;
	    
		FABRICAS_INFO[ID][f_BOLSOS_DINERO][cb] = CreateDynamicObject(1550, BolsoSpawn[cb][0], BolsoSpawn[cb][1], BolsoSpawn[cb][2],   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
        count ++;
	}
	return 1;
}

ActualizarLabelsFabrica(ID)
{
    if(!FABRICAS_INFO[ID][f_VALID]) return 1;

    new label_string[300];

    if(FABRICAS_INFO[ID][f_VENTA] == 1) format(label_string, sizeof(label_string), "{FF0000}Fábrica de metanfetamina\n{FFFFFF}Propiedad de {dbed15}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar ingresar.", BandasInfo[FABRICAS_INFO[ID][f_FACCION_ID]][BNombre]);
	else format(label_string, sizeof(label_string), "{FF0000}Fábrica de metanfetamina\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}$3.000.000\n\n{FFFFFF}Escribe {FFFF04}/comprar fabrica {FFFFFF}para comprar la fabrica.", FABRICAS_INFO[ID][f_LOCALITATION]);
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][0], -1, label_string);

	format(label_string, sizeof(label_string), "{f21111}Cocina: #1{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}%s",FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0], (FABRICAS_INFO[ID][f_CESTADO][0]) ? ("{07C400}Encendida") : ("{FF0000}Apagada"), (FABRICAS_INFO[ID][f_CRISTAL][0]) ? ("\nPulsa {3d83ce}'H'{FFFFFF} para recolectar el cristal") : (" "));
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][4], -1, label_string);

	format(label_string, sizeof(label_string), "{f21111}Cocina: #2{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}%s",FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1], (FABRICAS_INFO[ID][f_CESTADO][1]) ? ("{07C400}Encendida") : ("{FF0000}Apagada"), (FABRICAS_INFO[ID][f_CRISTAL][1]) ? ("\nPulsa {3d83ce}'H'{FFFFFF} para recolectar el cristal") : (" "));
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][5], -1, label_string);

    format(label_string, sizeof(label_string), "{f21111}Cocina: #3{FFFFFF}\nProducción: {3d83ce}%d%%{FFFFFF} completada.\nEstado: %s{FFFFFF}%s",FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2], (FABRICAS_INFO[ID][f_CESTADO][2]) ? ("{07C400}Encendida") : ("{FF0000}Apagada"), (FABRICAS_INFO[ID][f_CRISTAL][2]) ? ("\nPulsa {3d83ce}'H'{FFFFFF} para recolectar el cristal") : (" "));
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][6], -1, label_string);

    format(label_string, sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #1",FABRICAS_INFO[ID][f_TANQUE][0]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][7], -1, label_string);

    format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #1",FABRICAS_INFO[ID][f_TANQUE][1]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][8], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #1",FABRICAS_INFO[ID][f_TANQUE][2]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][9], -1, label_string);

 	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #2",FABRICAS_INFO[ID][f_TANQUE][3]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][10], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #2",FABRICAS_INFO[ID][f_TANQUE][4]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][11], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #2",FABRICAS_INFO[ID][f_TANQUE][5]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][12], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #3",FABRICAS_INFO[ID][f_TANQUE][6]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][13], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #3",FABRICAS_INFO[ID][f_TANQUE][7]);
    UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][14], -1, label_string);

	format(label_string,sizeof(label_string),"{3399FF}Tanque de almacenaje de químicos{FFFFFF}\nCapacidad ocupada: {EB0000}%d%%{FFFFFF}\nCocina:{f21111} #3",FABRICAS_INFO[ID][f_TANQUE][8]);
 	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][15], -1, label_string);

    format(label_string,sizeof(label_string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado: %s",FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0], EstadoCocinero(FABRICAS_INFO[ID][f_ESTADO_COCINERO][0], FABRICAS_INFO[ID][f_ACTORES][0]));
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][16], -1, label_string);

	format(label_string, sizeof(label_string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado: %s",FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1], EstadoCocinero(FABRICAS_INFO[ID][f_ESTADO_COCINERO][1], FABRICAS_INFO[ID][f_ACTORES][1]));
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][17], -1, label_string);

	format(label_string, sizeof(label_string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado: %s",FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2], EstadoCocinero(FABRICAS_INFO[ID][f_ESTADO_COCINERO][2], FABRICAS_INFO[ID][f_ACTORES][2]));
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][18], -1, label_string);

	format(label_string, sizeof(label_string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado: %s",FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3], EstadoCocinero(FABRICAS_INFO[ID][f_ESTADO_COCINERO][3], FABRICAS_INFO[ID][f_ACTORES][3]));
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][19], -1, label_string);

	format(label_string, sizeof(label_string),"{000cff}Mesa de producción\n{FFFFFF}Cristal molido: {EB0000}%d%%{FFFFFF}\nEstado: %s",FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4], EstadoCocinero(FABRICAS_INFO[ID][f_ESTADO_COCINERO][4], FABRICAS_INFO[ID][f_ACTORES][4]));
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][20], -1, label_string);

	format(label_string, sizeof(label_string),"{3399FF}Chalecos antibalas{FFFFFF}\nCantidad disponible: {f21111}%d{FFFFFF}\n\nPulsa {FFFF04}'H'{FFFFFF} para equipar uno.",FABRICAS_INFO[ID][f_CHALECOS]);
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][21], -1, label_string);

	format(label_string, sizeof(label_string),"{EB0000}Armas{FFFFFF}\nCantidad disponible:{f21111} %d{FFFFFF}\n\nPulsa {FFFF04}'H'{FFFFFF} para equipar una.\nPulsa {f21111}'Y'{FFFFFF} para guardar el arma que llevas en tus manos.",FABRICAS_INFO[ID][f_RECORTADA] + FABRICAS_INFO[ID][f_UZI] + FABRICAS_INFO[ID][f_TEC9] + FABRICAS_INFO[ID][f_SNIPER]);
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][22], -1, label_string);
	
	format(label_string, sizeof(label_string),"{3399FF}¿La fabrica tiene un bug?{FFFFFF}\nYo te puedo ayudar\n\nPulsa {f21111}'H'{FFFFFF} para abrir el menu.",FABRICAS_INFO[ID][f_RECORTADA] + FABRICAS_INFO[ID][f_UZI] + FABRICAS_INFO[ID][f_TEC9] + FABRICAS_INFO[ID][f_SNIPER]);
	UpdateDynamic3DTextLabelText(FABRICAS_INFO[ID][f_LABELS][23], -1, label_string);
	return 1;
}

CargarBarriles(vehicleid, bool:show = false)
{
    new slot = GetVehicleFreeObjectSlot(vehicleid), temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 3632;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = 0.394999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.084999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.230000;
	UpdateVehicleAttachedObject(vehicleid, slot);

    slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 3632;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.519999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.084999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.199500;
	UpdateVehicleAttachedObject(vehicleid, slot);

	slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 3632;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.049999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.729998;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.230000;
	UpdateVehicleAttachedObject(vehicleid, slot);

    slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 3632;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = 0.429999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -2.320005;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.165000;
	UpdateVehicleAttachedObject(vehicleid, slot);

	slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 3632;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.554999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -2.285004;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.220000;
	UpdateVehicleAttachedObject(vehicleid, slot);
	return 1;
}

ObjetoDistraccion(vehicleid, bool:show = true)
{
	new slot = GetVehicleFreeObjectSlot(vehicleid), temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 1271;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.011962;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.074538;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.107927;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0] = -0.199999;
    UpdateVehicleAttachedObject(vehicleid, slot);

    slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 1271;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = 0.000000;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.999999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.100000;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0] = 0.349999;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1] = -1.149999;
    UpdateVehicleAttachedObject(vehicleid, slot);

	slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 1271;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.007348;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -1.509131;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.746309;
    UpdateVehicleAttachedObject(vehicleid, slot);

    slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 1271;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = 0.658764;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -2.240282;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.650753;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1] = 34.049999;
    UpdateVehicleAttachedObject(vehicleid, slot);

    slot = GetVehicleFreeObjectSlot(vehicleid);
	VEHICLE_OBJECTS[vehicleid][slot] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID] = 1271;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED] = show;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0] = -0.714648;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1] = -2.216089;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2] = 0.620124;
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1] = -29.000000;
    UpdateVehicleAttachedObject(vehicleid, slot);
	return 1;
}

CreateVehicleFabrica(fabricaid, slot)
{
    new vehicleid;
    switch(slot)
	{
	    case 1:
		{
			vehicleid = CreateVehicle(554,-2004.7108,213.2912,1035.9205,269.5182, 1, 53,-1);
			FABRICAS_INFO[fabricaid][f_VEHICLES][0] = vehicleid;
			CargarBarriles(vehicleid, false);
			ObjetoDistraccion(vehicleid, false);
			ROBO_COCHE[vehicleid][EsRobo] = 0;
		}
		case 2:
		{
		    vehicleid = CreateVehicle(554,-2000.0254,208.3542,1035.9175,291.0907, 1, 53,-1);
		    FABRICAS_INFO[fabricaid][f_VEHICLES][1] = vehicleid;
		    ObjetoDistraccion(vehicleid, true);
            ROBO_COCHE[vehicleid][EsRobo] = 0;
	    }
	}
	FABRICAS_INFO[fabricaid][f_VEHICLE_BARRIL] = 0;
	FABRICAS_INFO[fabricaid][f_VEHICLE_CAJAS] = 0;
	VehicleFuel[vehicleid] = CombustibleCoche(GetVehicleModel(vehicleid));
	SetVehicleHealth(vehicleid, 5000.0);
	
	format(VehiculosInfo[vehicleid][vpatente],10,"FAB%d", fabricaid);
    SetVehicleNumberPlate(vehicleid, VehiculosInfo[vehicleid][vpatente]);

	LinkVehicleToInterior(vehicleid, FABRICAS_INFO[fabricaid][f_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, FABRICAS_INFO[fabricaid][f_VW]);
	return 1;
}

IsValidName(const string[])
{
    new regex:reg_exp = regex_new("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*");
    new result = regex_check(string, reg_exp);
    regex_delete(reg_exp);
    return result;
}

StringContainsIP(const string[])
{
    new regex:reg_exp = regex_new("([0-9]{1,3}[\\.]){3}[0-9]{1,3}"), match_results:results, pos;
    new result = regex_search(string, reg_exp, results, pos);
    regex_delete(reg_exp);
    return result;
}

DetectoSPAM(playerid, const mensaje[])
{
    new string[256];
	format(string, sizeof(string), "{FF0000}(AntiCheat):{FFDD00} Posible SPAM - %s [ID: %d | N: %d] {FF0000}%s",PLAYER_INFO[playerid][Nickname],playerid,PLAYER_INFO[playerid][pNivel],mensaje);
	MensajeAdmin(0x00CC00FF, string, 3);
	return 1;
}

DetectarSpam(const string[])
{
    if(StringContainsIP(string)) return 1; // Por si la ip es común
 	if(strfind(string, "evert zone", true) != -1 || strfind(string, "RootZone", true) != -1) return 0;
 	
	if(strfind(string, "zone", true) != -1   		|| strfind(string, "sobelt", true) != -1 		||
	   strfind(string, "s0belt", true) != -1 		|| strfind(string, "m0d s0belt", true) != -1 	|| strfind(string, "m0d s0beit", true) != -1 	||
	   strfind(string, "s.0.b.e.i.t", true) != -1 	|| strfind(string, "s0beit", true) != -1 		|| strfind(string, "m0d s0beit", true) != -1 	||
	   strfind(string, "s.o.b.e.i.t", true) != -1 	|| strfind(string, "sobeit", true) != -1 		|| strfind(string, "playerzeta", true) != -1 	||
	   strfind(string, "fz", true) != -1 			|| strfind(string, "Tuxzina", true) != -1 		|| strfind(string, "Unplayer", true) != -1  	||
	   strfind(string, "fenixzone", true) != -1 	|| strfind(string, "samp.samphosting.info:7777", true) != -1 ||strfind(string, "fenix zone", true) != -1 ||
	   strfind(string, "estrellazone", true) != -1 	|| strfind(string, "estrella zone", true) != -1 || strfind(string, "galactic", true) != -1 		||
	   strfind(string, "linexzone", true) != -1 	|| strfind(string, "omegazone", true) != -1 	|| strfind(string, "playerzeta", true) != -1 	||
	   strfind(string, "oldzone", true) != -1 		|| strfind(string, "gamingzone", true) != -1 	|| strfind(string, "fz", true) != -1			||
	   strfind(string, ":7777", true) != -1   		|| strfind(string, ": 7777", true) != -1) return 1;
 	return 0;
}

GetNewIDPedido()
{
    for(new i = 1; i < MAX_PEDIDOS; i++)
	{
    	if(PEDIDO_INFO[i][pi_ID] == 0)
    	{
    	    return i;
		}
	}
	return 1;
}
CargarPedidos()
{
    for(new i = 1; i < MAX_PEDIDOS; i++)
	{
	    if(PEDIDO_INFO[i][pi_ESTADO] == 1)
	    {
			PEDIDO_INFO[i][pi_ID] = 0;
		}
	}
    new Query[128];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `pedidos` WHERE ESTADO = '1'");
	mysql_query(handle_db, Query, true);
	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new ID_PEDIDO = GetNewIDPedido();
		PEDIDO_INFO[ID_PEDIDO][pi_ID] = ID_PEDIDO;
	    cache_get_value_name_int(i,"ID",PEDIDO_INFO[ID_PEDIDO][pi_DB]);
	    cache_get_value_name_int(i,"ESTADO",PEDIDO_INFO[ID_PEDIDO][pi_ESTADO]);
	    cache_get_value_name(i,"NOMBRE",PEDIDO_INFO[ID_PEDIDO][pt_NAME]);
	    cache_get_value_name(i,"PEDIDO",PEDIDO_INFO[ID_PEDIDO][pi_TEXT]);
	    cache_get_value_name(i,"INFO",PEDIDO_INFO[ID_PEDIDO][pt_TIPO]);
	    cache_get_value_name_float(i,"X",PEDIDO_INFO[ID_PEDIDO][pt_POS][0]);
	    cache_get_value_name_float(i,"Y",PEDIDO_INFO[ID_PEDIDO][pt_POS][1]);
	    cache_get_value_name_float(i,"Z",PEDIDO_INFO[ID_PEDIDO][pt_POS][2]);
	}
	return 1;
}
RegistrarPedido(playerid, const pedido[], const INFO_text[], guardarpos = 0)
{
    new string[200];
	format(string, sizeof(string), "%s[%d]: Acaba de enviar un pedido de: %s ",PLAYER_INFO[playerid][Nickname], playerid, pedido);
    MensajeAdmin(COLOR_CHEAT, string, 3);
    
	PLAYER_TIMES[playerid][pTIME_PEDIDO] = gettime() + (60*2);
	
    new Query[250+ 24], Float:POS[3];

	if(guardarpos == 1) GetPlayerPos(playerid, POS[0],POS[1],POS[2]);

	mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `pedidos`(`nombre`,`PEDIDO`, `INFO`, `X`, `Y`, `Z`) VALUES ('%e','%e','%e','%f','%f','%f')", PLAYER_INFO[playerid][Nickname], pedido, INFO_text, POS[0],POS[1],POS[2]);
	mysql_query(handle_db, Query, true);
    CargarPedidos();
	return 1;
}
ColocoSi_No(const text[])
{
    new len = strlen(text);
    for(new i = 2; i < len; i++)
    {
        if(text[i-1] == ' ' && text[i] == 's' && text[i+1] == 'i') return 1;
        else if(text[i-1] == ' ' && text[i] == 'S' && text[i+1] == 'i') return 1;
        else if(text[i-1] == ' ' && text[i] == 's' && text[i+1] == 'I') return 1;
        else if(text[i-1] == ' ' && text[i] == 'S' && text[i+1] == 'I') return 1;
        else if(text[i-1] == ' ' && text[i] == 'n' && text[i+1] == 'o') return 1;
        else if(text[i-1] == ' ' && text[i] == 'N' && text[i+1] == 'o') return 2;
        else if(text[i-1] == ' ' && text[i] == 'n' && text[i+1] == 'O') return 2;
        else if(text[i-1] == ' ' && text[i] == 'N' && text[i+1] == 'O') return 2;
    }
	return 0;
}

funcion ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(REPORT_INFO[i][Report], "Ninguno", 0, 4, 4);
		REPORT_INFO[i][ReportadoID] = 999;
		REPORT_INFO[i][CheckingReport] = 999;
        REPORT_INFO[i][ReportFrom] = 999;
        REPORT_INFO[i][HasBeenUsed] = 0;
        REPORT_INFO[i][BeingUsed] = 0;
        REPORT_INFO[i][TiempoReport] = 0;
	}
	return 1;
}

funcion EditVehicleObjectEx(playerid, vehicleid, slot)
{
    if(!IsPlayerInVehicle(playerid,vehicleid)) PutPlayerInVehicleEx(playerid, vehicleid, 0);
    
    SetVehicleHealth(vehicleid, 1000.0);
	RepairVehicle(vehicleid);
    KillTimer(PLAYER_TIMES[playerid][t_TIME_TUNING]);
    PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] = vehicleid;
    PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
    EditVehicleObject(playerid, vehicleid, slot);
	return 1;
}

AddPlayerConectats(playerid)
{
	new slot = GetEmptyPlayerPhoneBookSlot(playerid);
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policía");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);

    slot = GetEmptyPlayerPhoneBookSlot(playerid);
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Asistencia Médica");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 71;
	RegisterNewPlayerPhoneBook(playerid, slot);
	
	slot = GetEmptyPlayerPhoneBookSlot(playerid);
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Servicio de grúas");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 815;
	RegisterNewPlayerPhoneBook(playerid, slot);
	
	slot = GetEmptyPlayerPhoneBookSlot(playerid);
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Asistencia mecánica");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 80;
	RegisterNewPlayerPhoneBook(playerid, slot);
	
	slot = GetEmptyPlayerPhoneBookSlot(playerid);
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Servicio de taxi");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 82;
	RegisterNewPlayerPhoneBook(playerid, slot);
	return 1;
}

SavePlayerRespuestas(playerid)
{
	new Query[1500 + 24];

	mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `curriculum_table`(`NAME`, `ID_DB`,`PREGUNTA_1`, `PREGUNTA_2`, `PREGUNTA_3`, `PREGUNTA_4`, `PREGUNTA_5`, `PREGUNTA_6`, `PREGUNTA_7`, `PREGUNTA_8`, `PREGUNTA_9`) VALUES ('%s','%d','%s','%s','%s','%s','%s','%s','%s','%s','%s')",
	PLAYER_INFO[playerid][Nickname],PLAYER_INFO[playerid][pID],
	PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_0],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_1],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_2],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_3],
	PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_4],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_5],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_6],PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_7],
	PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_8]);
	mysql_query(handle_db, Query, false);
	CargarTablero();
	return 1;
}
CargarTablero()
{
    for(new i = 0; i < MAX_CURRICULUMS; i ++) CURRICULUM_INFO[i][cv_VALID] = false;
	
	new Query[150], count;
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `curriculum_table`");
	mysql_query(handle_db, Query, true);

	for(new i = 0; i < cache_num_rows(); i++)
	{
		new ID;
	    for(new x = 0; x < MAX_CURRICULUMS; x ++)
	    {
	    	if(!CURRICULUM_INFO[x][cv_VALID])
	    	{
				ID = x;
				CURRICULUM_INFO[ID][cv_VALID] = true;
				cache_get_value_name(i, "NAME", CURRICULUM_INFO[ID][cv_NAME]);
				cache_get_value_name_int(i, "CV_ESTADO", CURRICULUM_INFO[ID][cv_ESTADO]);
				cache_get_value_name_int(i, "ID_DB", CURRICULUM_INFO[ID][cv_DBPLAYER]);
				cache_get_value_name(i, "PREGUNTA_1", CURRICULUM_INFO[ID][cv_RESPUESTA_1]);
				cache_get_value_name(i, "PREGUNTA_2", CURRICULUM_INFO[ID][cv_RESPUESTA_2]);
				cache_get_value_name(i, "PREGUNTA_3", CURRICULUM_INFO[ID][cv_RESPUESTA_3]);
				cache_get_value_name(i, "PREGUNTA_4", CURRICULUM_INFO[ID][cv_RESPUESTA_4]);
				cache_get_value_name(i, "PREGUNTA_5", CURRICULUM_INFO[ID][cv_RESPUESTA_5]);
				cache_get_value_name(i, "PREGUNTA_6", CURRICULUM_INFO[ID][cv_RESPUESTA_6]);
				cache_get_value_name(i, "PREGUNTA_7", CURRICULUM_INFO[ID][cv_RESPUESTA_7]);
				cache_get_value_name(i, "PREGUNTA_8", CURRICULUM_INFO[ID][cv_RESPUESTA_8]);
				cache_get_value_name(i, "PREGUNTA_9", CURRICULUM_INFO[ID][cv_RESPUESTA_9]);
				count ++;
				break;
			}
		}
	}
	printf("[CURRICULUMS]: %d", count);
	ActualizarTablero();
	return 1;
}

ActualizarTablero()
{
	new Lista_1[24 * 9],Lista_2[24 * 9],Lista_3[24 * 9], count = 0,line_str[24];

	for(new i = 0; i < MAX_CURRICULUMS; i ++)
	{
	    if(CURRICULUM_INFO[i][cv_VALID] && CURRICULUM_INFO[i][cv_ESTADO] != 2)
	    {
	        if(count <= 8)
	        {
	            format(line_str, sizeof line_str, "%s\n", CURRICULUM_INFO[i][cv_NAME]);
				strcat(Lista_1, line_str);
				count ++;
	        }
	        else if(count <= 17)
	        {
	            format(line_str, sizeof line_str, "%s\n", CURRICULUM_INFO[i][cv_NAME]);
				strcat(Lista_2, line_str);
				count ++;
	        }
	        else if(count <= 26)
	        {
	            format(line_str, sizeof line_str, "%s\n", CURRICULUM_INFO[i][cv_NAME]);
				strcat(Lista_3, line_str);
				count ++;
	        }
	        else break;
	    }
	}
	if(count > 0)
	{
		SetDynamicObjectMaterialText(TEX_CV[1], 0, Lista_1, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[7], 0, Lista_1, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	else
	{
		SetDynamicObjectMaterialText(TEX_CV[1], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[7], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	if(count > 8)
	{
		SetDynamicObjectMaterialText(TEX_CV[2], 0, Lista_2, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[8], 0, Lista_2, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	else
	{
		SetDynamicObjectMaterialText(TEX_CV[2], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[8], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	if(count > 17)
	{
		SetDynamicObjectMaterialText(TEX_CV[3], 0, Lista_3, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[9], 0, Lista_3, 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	else
	{
	    SetDynamicObjectMaterialText(TEX_CV[9], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(TEX_CV[3], 0, "No hay registros", 90, "Comic Sans MS", 13, 0, 0xFFFFFFFF, 0, 1);
	}
	return 1;
}

funcion AccionPostulacion(playerid, type)
{
    KillTimer(PLAYER_TIMES[playerid][t_TIME_POSTULACION]);
	switch(type)
	{
		case 0:
		{
		    SetCameraBehindPlayer(playerid);
	    	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
			PLAYER_TIMES[playerid][t_TIME_POSTULACION] = SetTimerEx("AccionPostulacion",1500,false,"dd",playerid, 1);
		}
		case 1: ShowDialog(playerid, DIALOG_POSTULACION_1);
		case 2://terminar o cancelar test
		{
		    ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
		    PLAYER_TEMP[playerid][pt_ENPOSTULACION] = false;
		    PLAYER_TIMES[playerid][t_TIME_POSTULACION] = SetTimerEx("AccionPostulacion",1500,false,"dd",playerid, 3);
		}
		case 3: TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 4;
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = z;

	SetVehiclePos(vehicleid, x, y, z);
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
    PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 4;

    PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][0] = x;
	PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][1] = y;
	PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2] = z;
    SetPlayerPos(playerid, x, y, z);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
    PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 4;
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 4;

    PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

DarPrendas(playerid)
{
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
    {
        if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 0) continue;
	    if(PLAYER_TOYS[playerid][i][pt_ATTACHED])
	    {
			SetPlayerAttachedObject(playerid, i, PLAYER_TOYS[playerid][i][pt_MODEL_ID],PLAYER_TOYS[playerid][i][pt_BONE], PLAYER_TOYS[playerid][i][pt_POS][0],PLAYER_TOYS[playerid][i][pt_POS][1], PLAYER_TOYS[playerid][i][pt_POS][2],
			PLAYER_TOYS[playerid][i][pt_ROT][0], PLAYER_TOYS[playerid][i][pt_ROT][1],PLAYER_TOYS[playerid][i][pt_ROT][2], PLAYER_TOYS[playerid][i][pt_SCALE][0],PLAYER_TOYS[playerid][i][pt_SCALE][1], PLAYER_TOYS[playerid][i][pt_SCALE][2]);
		}
	}
	DarMochila(playerid);
	return 1;
}

GetNameObjeto(ID)
{
	new name[32] = "Vacío";
    for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
    {
        if(OBJETOS_INFO[i][obj_ID] == ID)
		{
			format(name, sizeof name, "%s", OBJETOS_INFO[i][obj_NAME]);
		    break;
		}
	}
	return name;
}
GetNameBoneToy(boneid)
{
	new name_bone[34];
	switch(boneid)
	{
		case 0: name_bone = "Nada";
		case 1: name_bone = "Columna";
		case 2: name_bone = "Cabeza";
		case 3: name_bone = "Brazo Izq Superior";
		case 4: name_bone = "Brazo Der Superior";
		case 5: name_bone = "Mano Izquierda";
		case 6: name_bone = "Mano Derecha";
		case 7: name_bone = "Muslo Izquierdo";
		case 8: name_bone = "Muslo Derecho";
		case 9: name_bone = "Pie Izquierdo";
		case 10: name_bone = "Pie Derecho";
		case 11: name_bone = "Rodilla Izquierda";
		case 12: name_bone = "Rodilla Derecha";
		case 13: name_bone = "AnteBrazo Izquierdo";
		case 14: name_bone = "AnteBrazo Derecho";
		case 15: name_bone = "Clavicula Izquierda";
		case 16: name_bone = "Clavicula Derecha";
		case 17: name_bone = "Cuello";
		case 18: name_bone = "Mandíbula";
	}
	return name_bone;
}

SavePlayerToys(playerid)
{
    for(new ID = 0; ID < MAX_PLAYER_TOYS; ID ++)
    {
        if(PLAYER_TOYS[playerid][ID][pt_ID] != 0)
        {
    		new query[520];
			mysql_format(handle_db, query, sizeof(query), "UPDATE `player_toys` SET `ATTACHED`='%d',`BONE`='%d',`POS_X`='%f',`POS_Y`='%f',`POS_Z`='%f',`ROT_X`='%f',`ROT_Y`='%f',`ROT_Z`='%f',`SCALE_X`='%f',`SCALE_Y`='%f',`SCALE_Z`='%f',`COLOR_1`='%d',`COLOR_2`='%d' WHERE `ID`='%d'",
			PLAYER_TOYS[playerid][ID][pt_ATTACHED], PLAYER_TOYS[playerid][ID][pt_BONE], PLAYER_TOYS[playerid][ID][pt_POS][0],PLAYER_TOYS[playerid][ID][pt_POS][1],PLAYER_TOYS[playerid][ID][pt_POS][2],PLAYER_TOYS[playerid][ID][pt_ROT][0],PLAYER_TOYS[playerid][ID][pt_ROT][1],PLAYER_TOYS[playerid][ID][pt_ROT][2],PLAYER_TOYS[playerid][ID][pt_SCALE][0],PLAYER_TOYS[playerid][ID][pt_SCALE][1],PLAYER_TOYS[playerid][ID][pt_SCALE][2],PLAYER_TOYS[playerid][ID][player_toy_COLOR_1],PLAYER_TOYS[playerid][ID][player_toy_COLOR_2],PLAYER_TOYS[playerid][ID][pt_ID]);
			mysql_query(handle_db, query, false);
		}
	}
	return 1;
}

LoadPlayerToys(playerid)
{
	new Query[70];
    mysql_format(handle_db, Query, sizeof(Query),"SELECT * FROM `player_toys` WHERE `player_id`='%d';",PLAYER_INFO[playerid][pID]);
    new Cache:result = mysql_query(handle_db, Query, true);

    for(new i = 0; i < cache_num_rows(); i++)
    {
        new ID = GetNewIDPlayerToy(playerid);
	    if(ID == -1) return 1;

	    cache_get_value_name_int(i,"ID",PLAYER_TOYS[playerid][ID][pt_ID]);
	    cache_get_value_name_int(i,"MODEL_ID",PLAYER_TOYS[playerid][ID][pt_MODEL_ID]);
	    cache_get_value_name_int(i,"ATTACHED",PLAYER_TOYS[playerid][ID][pt_ATTACHED]);
	    cache_get_value_name_int(i,"BONE",PLAYER_TOYS[playerid][ID][pt_BONE]);
	    cache_get_value_name_float(i,"POS_X",PLAYER_TOYS[playerid][ID][pt_POS][0]);
	    cache_get_value_name_float(i,"POS_Y",PLAYER_TOYS[playerid][ID][pt_POS][1]);
	    cache_get_value_name_float(i,"POS_Z",PLAYER_TOYS[playerid][ID][pt_POS][2]);
        cache_get_value_name_float(i,"ROT_X",PLAYER_TOYS[playerid][ID][pt_ROT][0]);
        cache_get_value_name_float(i,"ROT_Y",PLAYER_TOYS[playerid][ID][pt_ROT][1]);
        cache_get_value_name_float(i,"ROT_Z",PLAYER_TOYS[playerid][ID][pt_ROT][2]);
        cache_get_value_name_float(i,"SCALE_X",PLAYER_TOYS[playerid][ID][pt_SCALE][0]);
        cache_get_value_name_float(i,"SCALE_Y",PLAYER_TOYS[playerid][ID][pt_SCALE][1]);
        cache_get_value_name_float(i,"SCALE_Z",PLAYER_TOYS[playerid][ID][pt_SCALE][2]);
        cache_get_value_name_int(i,"COLOR_1",PLAYER_TOYS[playerid][ID][player_toy_COLOR_1]);
        cache_get_value_name_int(i,"COLOR_2",PLAYER_TOYS[playerid][ID][player_toy_COLOR_2]);

        if(PLAYER_TOYS[playerid][ID][pt_BONE] == 0) PLAYER_TOYS[playerid][ID][pt_BONE] = GetBoneObjeto(PLAYER_TOYS[playerid][ID][pt_MODEL_ID]);
    }
    DarPrendas(playerid);
	cache_delete(result);
	return 1;
}

CountPlayerToys(playerid)
{
    new count = 0;
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
    {
        if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] != 0) count ++;
    }
    return count;
}

GetNewIDPlayerToy(playerid)
{
    new ID = -1;
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
    {
        if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 0)
        {
            ID = i;
            break;
        }
    }
    return ID;
}

GetBoneObjeto(ID)
{
    new ID_BONE = 2;
    for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
    {
        if(OBJETOS_INFO[i][obj_ID] == ID)
		{
			ID_BONE = OBJETOS_INFO[i][obj_BONE];
		    break;
		}
	}
	return ID_BONE;
}

GivePlayerToy(playerid, modelid)
{
	new ID = GetNewIDPlayerToy(playerid);
    if(ID == -1) return 1;

    PLAYER_TOYS[playerid][ID][pt_MODEL_ID] = modelid;
    PLAYER_TOYS[playerid][ID][pt_BONE] = GetBoneObjeto(modelid);
    PLAYER_TOYS[playerid][ID][pt_ATTACHED] = false;
    PLAYER_TOYS[playerid][ID][pt_POS][0] = 0.085;
	PLAYER_TOYS[playerid][ID][pt_POS][1] = 0.017999;
	PLAYER_TOYS[playerid][ID][pt_POS][2] = 0.000999;
	PLAYER_TOYS[playerid][ID][pt_ROT][0] = 87.2;
	PLAYER_TOYS[playerid][ID][pt_ROT][1] = 88.1;
	PLAYER_TOYS[playerid][ID][pt_ROT][2] = -7.5;
	PLAYER_TOYS[playerid][ID][pt_SCALE][0] = 1;
	PLAYER_TOYS[playerid][ID][pt_SCALE][1] = 1;
	PLAYER_TOYS[playerid][ID][pt_SCALE][2] = 1;

	new query[520];
	mysql_format(handle_db, query, sizeof(query), "INSERT INTO `player_toys`(`player_id`,`MODEL_ID`,`BONE`) VALUES ('%d', '%d', '%d')",PLAYER_INFO[playerid][pID], modelid, PLAYER_TOYS[playerid][ID][pt_BONE]);
	new Cache:result = mysql_query(handle_db, query, true);

	PLAYER_TOYS[playerid][ID][pt_ID] = cache_insert_id();
	cache_delete(result);
	return 1;
}
LoadPlayerPhoneBook(playerid)
{
    if(PLAYER_INFO[playerid][pNumero] == 0) return 1;
    new query[520];
	mysql_format(handle_db, query, sizeof(query), "SELECT * FROM `player_book` WHERE `PHONE_ID` = '%d' LIMIT %d;", PLAYER_INFO[playerid][pNumero], MAX_PHONE_CONTACTS);
	new Cache:result = mysql_query(handle_db, query, true);

	new count;
	for(new i; i < cache_num_rows(); i++)
	{
		if(count >= MAX_PHONE_CONTACTS) break;
		PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_VALID] = true;
		cache_get_value_name_int(i, "ID", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_ID]);
		cache_get_value_name(i, "NAME", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_NAME]);
		cache_get_value_name_int(i, "PHONE_NUMBER", PLAYER_PHONE_BOOK[playerid][count][phone_book_contact_PHONE_NUMBER]);
		count ++;
	}
	cache_delete(result);
	return 1;
}

convertPhoneNumber(playerid, number, ID = INVALID_PLAYER_ID)
{
	new f_string[24+50], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists)
	{
	    if(ID != INVALID_PLAYER_ID) format(f_string, sizeof f_string, "%s[%d]",PLAYER_INFO[ID][Nickname], number);
		else format(f_string, sizeof f_string, "%d", number);
	}
	return f_string;
}

GetPlayerPhoneBookCount(playerid)
{
	new count;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) count ++;
	}
	return count;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
    new query[520];
	mysql_format(handle_db, query, sizeof(query), "INSERT INTO `player_book`(`NAME`, `PHONE_NUMBER`, `PHONE_ID`) VALUES ('%s', '%d', '%d')",PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER], PLAYER_INFO[playerid][pNumero]);
	new Cache:result = mysql_query(handle_db, query, true);

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
    PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = cache_insert_id();
    cache_delete(result);
	return 1;
}
CerrarEmisora(cabinaid)
{
	if(cabinaid == 1)
	{
		CabinasOcupadasEmisoras[1][0] = 0;
		CabinasOcupadasEmisoras[1][0] = 0;
		CabinasOcupadasEmisoras[1][0] = 0;
		CabinasOcupadasEmisoras[1][1] = -1;
		CabinasOcupadasEmisoras[1][2] = 0;
		UpdateDynamic3DTextLabelText(CabinasTextos[1], 0xFFFFFFFF, "{FFFFFF}Radio disponible {C0C0C0}[N1]");
        foreach(new id : Player)
		{
			if(Emisoras[id][CabinaOcupada] == 1 && Emisoras[id][TransEmisora] == 1)
			{
				Emisoras[id][TransEmisora] = 0;
				Emisoras[id][CabinaOcupada] = 0;
			}
			if(TieneMicrofono[id] == 1)
			{
				TieneMicrofono[id] = 0;
			}
			if(IsPlayerInDynamicArea(id, AreaCabinas[1]))
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				PararEmisora(id);
			}
			if(IsPlayerInAnyVehicle(id) && GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] == 1)
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] = 0;
				PararEmisora(id);
			}
		}
	}
	if(cabinaid == 2)
	{
		CabinasOcupadasEmisoras[2][0] = 0;
		CabinasOcupadasEmisoras[2][1] = -1;
		CabinasOcupadasEmisoras[2][2] = 0;
		UpdateDynamic3DTextLabelText(CabinasTextos[2], 0xFFFFFFFF, "{FFFFFF}Radio disponible {C0C0C0}[N2]");
        foreach(new id : Player)
		{
			if(Emisoras[id][CabinaOcupada] == 2 && Emisoras[id][TransEmisora] == 1)
			{
				Emisoras[id][TransEmisora] = 0;
				Emisoras[id][CabinaOcupada] = 0;
			}
			if(TieneMicrofono[id] == 2)
			{
				TieneMicrofono[id] = 0;
			}
			if(IsPlayerInDynamicArea(id, AreaCabinas[2]))
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				PararEmisora(id);
			}
			if(IsPlayerInAnyVehicle(id) && GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] == 2)
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] = 0;
				PararEmisora(id);
			}
		}
	}
	if(cabinaid == 3)
	{
		CabinasOcupadasEmisoras[3][0] = 0;
		CabinasOcupadasEmisoras[3][1] = -1;
		CabinasOcupadasEmisoras[3][2] = 0;
		UpdateDynamic3DTextLabelText(CabinasTextos[3], 0xFFFFFFFF, "{FFFFFF}Radio disponible {C0C0C0}[N3]");
        foreach(new id : Player)
		{
			if(Emisoras[id][CabinaOcupada] == 3 && Emisoras[id][TransEmisora] == 1)
			{
				Emisoras[id][TransEmisora] = 0;
				Emisoras[id][CabinaOcupada] = 0;
			}
			if(TieneMicrofono[id] == 3)
			{
				TieneMicrofono[id] = 0;
			}
			if(IsPlayerInDynamicArea(id, AreaCabinas[3]))
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				PararEmisora(id);
			}
			if(IsPlayerInAnyVehicle(id) && GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] == 3)
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] = 0;
				PararEmisora(id);
			}
		}
	}
	if(cabinaid == 4)
	{
		CabinasOcupadasEmisoras[4][0] = 0;
		CabinasOcupadasEmisoras[4][1] = -1;
		CabinasOcupadasEmisoras[4][2] = 0;
		UpdateDynamic3DTextLabelText(CabinasTextos[4], 0xFFFFFFFF, "{FFFFFF}Radio disponible {C0C0C0}[N4]");
        foreach(new id : Player)
		{
			if(Emisoras[id][CabinaOcupada] == 4 && Emisoras[id][TransEmisora] == 1)
			{
				Emisoras[id][TransEmisora] = 0;
				Emisoras[id][CabinaOcupada] = 0;
			}
			if(TieneMicrofono[id] == 4)
			{
				TieneMicrofono[id] = 0;
			}
			if(IsPlayerInDynamicArea(id, AreaCabinas[4]))
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				PararEmisora(id);
			}
			if(IsPlayerInAnyVehicle(id) && GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] == 4)
			{
				SendClientMessage(id, -1, "La emisora que estabas escuchando dejo de transmitir.");
				GLOBAL_VEHICLES[GetPlayerVehicleID(id)][gb_vehicle_EMISORA_ID] = 0;
				PararEmisora(id);
			}
		}
	}
	return 1;
}
PararEmisora(playerid)
{
	PLAYER_TEMP[playerid][p_ESCUCHANDO_EMISORA] = 0;
    return StopAudioStreamForPlayer(playerid);
}
ReproducirEmisora(playerid, emisoraid, const url[])
{
	if(PLAYER_INFO[playerid][pSonidos] == 1) PLAYER_TEMP[playerid][p_ESCUCHANDO_EMISORA] = emisoraid;
	else PLAYER_TEMP[playerid][p_ESCUCHANDO_EMISORA] = 0;
	return PlayAudioStreamForPlayer(playerid, url);
}

PlayAudioStreamForPlayerEx(playerid, const url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(PLAYER_INFO[playerid][pSonidos] == 1) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	else StopAudioStreamForPlayer(playerid);
	return 1;
}
PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if(PLAYER_INFO[playerid][pSonidos] == 1)  PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

GetVehicleComponentPrice(componentid)
{
	for(new i = 0; i < sizeof(ComponentPrice); i++)
	{
		if(ComponentPrice[i][0] == componentid)
		{
			return ComponentPrice[i][1];
		}
	}
	return 0;
}
SendClientMessageEx(playerid, color, const form[], {Float, _}: ...)
{
    #pragma unused form
    static tmp[250];
    new t1 = playerid,t2 = color;
    const n4 = -4,n16 = -16,size = sizeof tmp;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16
    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}
PuedeExpulsar(playerid)
{
    new banda = PLAYER_INFO[playerid][pFaccion];
    if(BandasInfo[banda][RANK_EXP][6] == 0 && PLAYER_INFO[playerid][pRango] == 7) { return 1; }
    else if(BandasInfo[banda][RANK_EXP][5] == 0 && PLAYER_INFO[playerid][pRango] == 6) { return 1; }
	else if(BandasInfo[banda][RANK_EXP][4] == 0 && PLAYER_INFO[playerid][pRango] == 5) { return 1; }
	else if(BandasInfo[banda][RANK_EXP][3] == 0 && PLAYER_INFO[playerid][pRango] == 4) { return 1; }
	else if(BandasInfo[banda][RANK_EXP][3] == 0 && PLAYER_INFO[playerid][pRango] == 3) { return 1; }
	else if(BandasInfo[banda][RANK_EXP][1] == 0 && PLAYER_INFO[playerid][pRango] == 2) { return 1; }
	else if(BandasInfo[banda][RANK_EXP][0] == 0 && PLAYER_INFO[playerid][pRango] == 1) { return 1; }
	return 0;
}
PuedeAscDes(playerid)
{
    new banda = PLAYER_INFO[playerid][pFaccion];
    if(BandasInfo[banda][RANK_EDIT][6] == 0 && PLAYER_INFO[playerid][pRango] == 7) { return 1; }
    else if(BandasInfo[banda][RANK_EDIT][5] == 0 && PLAYER_INFO[playerid][pRango] == 6) { return 1; }
	else if(BandasInfo[banda][RANK_EDIT][4] == 0 && PLAYER_INFO[playerid][pRango] == 5) { return 1; }
	else if(BandasInfo[banda][RANK_EDIT][3] == 0 && PLAYER_INFO[playerid][pRango] == 4) { return 1; }
	else if(BandasInfo[banda][RANK_EDIT][2] == 0 && PLAYER_INFO[playerid][pRango] == 3) { return 1; }
	else if(BandasInfo[banda][RANK_EDIT][1] == 0 && PLAYER_INFO[playerid][pRango] == 2) { return 1; }
	else if(BandasInfo[banda][RANK_EDIT][0] == 0 && PLAYER_INFO[playerid][pRango] == 1) { return 1; }
	return 0;
}
PuedeInvitar(playerid)
{
    new banda = PLAYER_INFO[playerid][pFaccion];
    if(BandasInfo[banda][RANK_INV][6] == 0 && PLAYER_INFO[playerid][pRango] == 7) { return 1; }
    else if(BandasInfo[banda][RANK_INV][5] == 0 && PLAYER_INFO[playerid][pRango] == 6) { return 1; }
	else if(BandasInfo[banda][RANK_INV][4] == 0 && PLAYER_INFO[playerid][pRango] == 5) { return 1; }
	else if(BandasInfo[banda][RANK_INV][3] == 0 && PLAYER_INFO[playerid][pRango] == 4) { return 1; }
	else if(BandasInfo[banda][RANK_INV][2] == 0 && PLAYER_INFO[playerid][pRango] == 3) { return 1; }
	else if(BandasInfo[banda][RANK_INV][1] == 0 && PLAYER_INFO[playerid][pRango] == 2) { return 1; }
	else if(BandasInfo[banda][RANK_INV][0] == 0 && PLAYER_INFO[playerid][pRango] == 1) { return 1; }
	return 0;
}
RangoBanda(famid, rangoid)
{
	new string[24];
	switch(rangoid)
	{
		case 1: format(string, sizeof(string), "%s", BandasInfo[famid][bRango1]);
		case 2: format(string, sizeof(string), "%s", BandasInfo[famid][bRango2]);
		case 3: format(string, sizeof(string), "%s", BandasInfo[famid][bRango3]);
		case 4: format(string, sizeof(string), "%s", BandasInfo[famid][bRango4]);
		case 5: format(string, sizeof(string), "%s", BandasInfo[famid][bRango5]);
		case 6: format(string, sizeof(string), "%s", BandasInfo[famid][bRango6]);
		case 7: format(string, sizeof(string), "%s", BandasInfo[famid][bRango7]);
		case 8: format(string, sizeof(string), "%s", BandasInfo[famid][bRango8]);
		default: format(string, sizeof(string), "Desconocido");
	}
	return string;
}

RangoYaCreado(famid, const rango[])
{
    if(!strcmp(BandasInfo[famid][bRango1], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango2], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango3], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango4], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango5], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango6], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango7], rango, true)) return 0;
    else if(!strcmp(BandasInfo[famid][bRango8], rango, true)) return 0;
	return 1;
}

DarPropietarioBanda(playerid, const nombrebanda[])
{
	for(new BANDA_ID; BANDA_ID < MAX_BANDAS; BANDA_ID++)
	{
	    if(!strcmp(BandasInfo[BANDA_ID][BNombre], nombrebanda, true))
	    {
	        PLAYER_INFO[playerid][pFaccion] = BANDA_ID;
	        PLAYER_INFO[playerid][pRango] = 8;
	        break;
	    }
	}
	return 1;
}
GetInvitacionesPlayerid(playerid)
{
    new Query[150];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s'",PLAYER_INFO[playerid][Nickname]);
	mysql_query(handle_db, Query, true);
 	return cache_num_rows();
}
PlantaLibre()
{
	for(new p = 0; p < MAX_MARIHUANA; p++)
	{
	    if(Marihuana[p][Created] == 0 && Marihuana[p][Status] == 0 && p != 0) return p;
	}
	return -1;
}

MarcarLocalizarGPS(playerid,Float:x,Float:y)
{
	LocalizandoAuto[playerid][0] = x;
	LocalizandoAuto[playerid][1] = y;
}
stock AttachedObjectItem(playerid,a)
{
    switch(a)
	{
	    case 1000:  SetPlayerAttachedObject(playerid, 7, 2060,  6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
	    case 1001:  SetPlayerAttachedObject(playerid, 7, 3800,  6, 0.262000,0.070999,0.021000,106.599998,-1.999999,171.599975,0.372999,0.239999,0.166000);
	    case 1002:  SetPlayerAttachedObject(playerid, 7, 2900,  6, 0.256000,0.074999,0.019000,94.400001,0.000000,1.300018,0.376999,0.207000,0.164999);
	    case 1429:  SetPlayerAttachedObject(playerid, 7, 1429,  5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149 );
	    case 1518:  SetPlayerAttachedObject(playerid, 7, 1518,  5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104 );
	    case 2912:  SetPlayerAttachedObject(playerid, 7, 2912,  5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000 );
	    case 2190:  SetPlayerAttachedObject(playerid, 7, 2190,  5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000 );
	    case 1788:  SetPlayerAttachedObject(playerid, 7, 1788,  5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000 );
	    case 1790:  SetPlayerAttachedObject(playerid, 7, 1790,  5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000 );
	    case 2028:  SetPlayerAttachedObject(playerid, 7, 2028,  5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 );
	    case 2226:  SetPlayerAttachedObject(playerid, 7, 2226,  5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 );
	    case 1650:  SetPlayerAttachedObject(playerid, 7, 1650,  5, 0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000);
	    case 10004: SetPlayerAttachedObject(playerid, 7, 19571, 6, 0.263000,0.039999,-0.141999,116.299987,-76.799858,136.799835,0.800998,1.016000,0.866998);
	    case 9003:  SetPlayerAttachedObject(playerid, 7, 19468, 5, 0.126999,-0.089000,0.127998,101.199981,-164.499847,82.999900,1.032001,0.972000,1.002997);
	    case 10000: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
	    case 10001: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
	    case 10002: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
	    case 10003: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
    	case 1210:  SetPlayerAttachedObject(playerid, 7, 1210,  6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
	}
	if(a == 1518 || a == 10000 || a == 10001 || a == 10002 || a == 10003 || a == 1429 || a == 2912 || a == 2190 || a == 1788 || a == 1790 || 2028) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	Objeto[playerid] = a;
}
QuitarAuto(playerid,x,autoid)
{
    if(x == 1)
	{
	    ContadorLlenarGaso[autos[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo] = 0;
		PLAYER_INFO[playerid][vTraba] = 0;
		PLAYER_INFO[playerid][vAlarma] = 0;
		PLAYER_INFO[playerid][vinterior] = 0;
		PLAYER_INFO[playerid][vSeguro] = 0;
		PLAYER_INFO[playerid][vAAlarma] = 0;
		PLAYER_INFO[playerid][vvw] = 0;
		PLAYER_INFO[playerid][vPrecio] = 0;
		DestroyVehicleEx(autoid);
		autos[playerid] = 0;
		autosSpawned[playerid][0] = false;
    }
    if(x == 2)
	{
        ContadorLlenarGaso[autos2[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo2] = 0;
		PLAYER_INFO[playerid][v2Traba] = 0;
		PLAYER_INFO[playerid][v2Alarma] = 0;
		PLAYER_INFO[playerid][v2interior] = 0;
		PLAYER_INFO[playerid][vSeguro2] = 0;
		PLAYER_INFO[playerid][vAAlarma2] = 0;
		PLAYER_INFO[playerid][v2vw] = 0;
		PLAYER_INFO[playerid][v2Precio] = 0;
		DestroyVehicleEx(autoid);
		autos2[playerid] = 0;
		autosSpawned[playerid][1] = false;
    }
    if(x == 3)
	{
        ContadorLlenarGaso[autos3[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo3] = 0;
		PLAYER_INFO[playerid][v3Traba] = 0;
		PLAYER_INFO[playerid][v3Alarma] = 0;
		PLAYER_INFO[playerid][v3interior] = 0;
		PLAYER_INFO[playerid][vSeguro3] = 0;
		PLAYER_INFO[playerid][vAAlarma3] = 0;
		PLAYER_INFO[playerid][v3vw] = 0;
		PLAYER_INFO[playerid][v3Precio] = 0;
		DestroyVehicleEx(autoid);
		autos3[playerid] = 0;
		autosSpawned[playerid][2] = false;
    }
	if(x == 4)
	{
	    ContadorLlenarGaso[autos4[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo4] = 0;
		PLAYER_INFO[playerid][v4Traba] = 0;
		PLAYER_INFO[playerid][v4Alarma] = 0;
		PLAYER_INFO[playerid][v4interior] = 0;
		PLAYER_INFO[playerid][vSeguro4] = 0;
		PLAYER_INFO[playerid][vAAlarma4] = 0;
		PLAYER_INFO[playerid][v4vw] = 0;
		PLAYER_INFO[playerid][v4Precio] = 0;
		DestroyVehicleEx(autoid);
		autos4[playerid] = 0;
		autosSpawned[playerid][3] = false;
    }
}
EnRobarCasa(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,-2279.5313,-15.7742,38.2993)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,940.9877,1975.9991,11.6227)) return 2;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2395.1436,-17.9285,36.0232)) return 3;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,2369.1536,-1129.9429,30.0510)) return 4;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2730.4773,-58.2881,7.0453)) return 5;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2731.7236,-163.1700,7.2174)) return 6;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1757.8156,-2093.0769,13.9916)) return 7;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,2481.8132,-1988.2745,13.6347)) return 8;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1843.2115,767.0028,11.5541)) return 9;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,-1449.6107,2644.2051,56.5616)) return 10;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1355.4598,2612.6050,11.5559)) return 11;
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1676.9354,2612.3923,11.5559)) return 12;
    return 0;
}

stock GuardarHerramienta(playerid)
{
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
	    case 1: SendClientMessage(playerid,-1,"Tu martillo fue guardado en el inventario.");
	    case 2: SendClientMessage(playerid,-1,"Tu barreta fue guardado en el inventario.");
	    default: SendClientMessage(playerid,-1,"Tu destornillador fue guardado en el inventario.");
	}
	Descongelar(playerid);
    RemovePlayerAttachedObject(playerid, 7);
    Forzando[playerid] = 0;
    return 1;
}
stock ExperienciaMaximaLadron(playerid)
{
    if(PLAYER_INFO[playerid][pExpLadron] < 49)
	{
		SendClientMessage(playerid,0x2d8cecFF,"Habilidad de ladrón de casas aumentada +1 punto.");
		PLAYER_INFO[playerid][pExpLadron]++;
	}
	else if(PLAYER_INFO[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,0x00CC00FF,"Llegaste al nivel máximo como ladrón de casas.");
	return 1;
}
stock AudioAlarma(Float:x,Float:y,Float:z)
{
    foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPoint(i,15.0,x,y,z))
		{
			PlayAudioStreamForPlayerEx(i,"http://"AUDIO_ALARMA"",x,y,z,50.0,1);
		}
	}
	return 1;
}
stock AudioLadron(playerid,i, Float:x,Float:y,Float:z)
{
	if(IsPlayerInRangeOfPoint(i,20.0,x,y,z))
	{
	    if(PLAYER_INFO[playerid][pNivelLadron] == 1)
		{
			PlayAudioStreamForPlayerEx(i,"http://"AUDIO_GOLPES"",x,y,z,20.0,1);
	    }
		if(PLAYER_INFO[playerid][pNivelLadron] == 2)
	    {
			PlayAudioStreamForPlayerEx(i,"http://"AUDIO_BARRETA"",x,y,z,20.0,1);
	    }
		if(PLAYER_INFO[playerid][pNivelLadron] > 3)
		{
			PlayAudioStreamForPlayerEx(i,"http://"AUDIO_DESTORNILLADOR"",x,y,z,20.0,1);
	    }
	}
	return 1;
}
stock DarHabilidadLadron1(playerid)
{
	new exp = random(4);
	switch(exp)
	{
		case 0 .. 2: { SendClientMessage(playerid,-1,"Esta vez no ganaste ningún punto de habilidad."); }
		case 3:
		{
		    if(PLAYER_INFO[playerid][pNivelLadron] >= 3 && PLAYER_INFO[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,-1,"Has llegado al máximo nivel de este trabajo.");
			if(PLAYER_INFO[playerid][pExpLadron] < 49)
			{
				SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad.");
				PLAYER_INFO[playerid][pExpLadron]++;
			}
			else if(PLAYER_INFO[playerid][pExpLadron] >= 49)
			{
				SendClientMessage(playerid,-1,"Felicidades, has aumentado tu nivel en este trabajo.");
				PLAYER_INFO[playerid][pExpLadron] = 0;
				PLAYER_INFO[playerid][pNivelLadron]++;
			}
		}
	}
	return true;
}
stock DarHabilidadLadron2(playerid)
{
	new exp = random(3);
	switch(exp)
	{
		case 0 .. 1: { SendClientMessage(playerid,-1,"Esta vez no ganaste ningún punto de habilidad."); }
		case 2:
		{
		    if(PLAYER_INFO[playerid][pNivelLadron] >= 3 && PLAYER_INFO[playerid][pExpLadron] >= 49) return SendClientMessage(playerid,-1,"Has llegado al máximo nivel de este trabajo.");
			if(PLAYER_INFO[playerid][pExpLadron] < 49)
			{
				SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad.");
				PLAYER_INFO[playerid][pExpLadron]++;
			}
			else if(PLAYER_INFO[playerid][pExpLadron] >= 49)
			{
				SendClientMessage(playerid,-1,"Felicidades, has aumentado tu nivel en este trabajo.");
				PLAYER_INFO[playerid][pExpLadron] = 0;
				PLAYER_INFO[playerid][pNivelLadron]++;
			}
		}
	}
	return true;
}
stock AnimacionRobar(playerid,tiempo)
{
    SetCameraBehindPlayer(playerid);
	Forzando[playerid] = 1;
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1: LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, tiempo*1000+500);
		case 2: ApplyAnimation(playerid, "BASEBALL", "BAT_M", 4.0, 1, 1, 1, 1, tiempo*1000+500);
		default: LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, tiempo*1000+500);
	}
}
puedeCrearArmas(playerid)
{
    new vw = GetPlayerVirtualWorld(playerid), intt = GetPlayerInterior(playerid);
	if(intt == 6 && vw == 6) return 0; //Hospital Los Santos.
	if(intt == 5 && vw == 5) return 0; //Estudio de radio y televisión.
	if(intt == 9 && vw == 9) return 0; //Mina castillo del diablo.
	if(intt == 7 && vw == 7) return 0; //Estadio de Las Venturas.
	if(intt == 1 && vw == 19) return 0; //Albergue de indigentes
	if(intt == 6 && vw == 7) return 0; //Hospital Groove
	if(intt == 17 && vw == 3) return 0; //Club Alhambra
	if(intt == 2 && vw == 5) return 0; //Club de striptease
	if(intt == 1 && vw == 9) return 0; //Academia de agentes (LV)
	if(intt == 6 && vw == 9) return 0; //Hospital Las Venturas
	if(intt == 6 && vw == 8) return 0; //Hospital San Fierro
	if(intt == 13 && vw == 1) return 0; //Salón de eventos
	return 1;
}
MandarMensajeTodos(const string[])
{
    foreach(new i : Player)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	    {
		    if(JugadorLogeado[i] == 1)
	    	{
		    	if(PLAYER_INFO[i][pMuteos] == 1)	SendClientMessage(i,-1,string);
            }
		}
	}
	return 1;
}
SacarVehiculo(playerid)
{
    NoTeleportHack(playerid);
	RemovePlayerFromVehicle(playerid);
	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);
	SetPlayerPosEx(playerid, sx, sy, sz);
	EnAuto[playerid] = INVALID_VEHICLE_ID;
	return 1;
}

GivePlayerHealth(playerid, Float:health)
{
	PLAYER_TIMES[playerid][TIMER_VIDA] = gettime() + 3;
	PLAYER_INFO[playerid][j_HEALTH] += health;
	if(PLAYER_INFO[playerid][j_HEALTH] > 100.0) PLAYER_INFO[playerid][j_HEALTH] = 100.0;
	return SetPlayerHealth(playerid, PLAYER_INFO[playerid][j_HEALTH]);
}

GivePlayerArmour(playerid, Float:chaleco)
{
	PLAYER_TIMES[playerid][TIMER_CHALECO] = gettime() + 3;
	PLAYER_INFO[playerid][j_ARMOUR] += chaleco;
	if(PLAYER_INFO[playerid][j_ARMOUR] > 100.0) PLAYER_INFO[playerid][j_ARMOUR] = 100.0;
	return SetPlayerArmour(playerid, PLAYER_INFO[playerid][j_ARMOUR]);
}

SetPlayerHealthEx(playerid, Float:vida)
{
    PLAYER_TIMES[playerid][TIMER_VIDA] = gettime() + 3;
	PLAYER_INFO[playerid][j_HEALTH] = vida;
	if(PLAYER_INFO[playerid][j_HEALTH] > 100.0) PLAYER_INFO[playerid][j_HEALTH] = 100.0;
	return SetPlayerHealth(playerid, PLAYER_INFO[playerid][j_HEALTH]);
}

SetPlayerArmourEx(playerid, Float:chaleco)
{
	PLAYER_TIMES[playerid][TIMER_CHALECO] = gettime() + 3;
	PLAYER_INFO[playerid][j_ARMOUR] = chaleco;
	if(PLAYER_INFO[playerid][j_ARMOUR] > 100.0) PLAYER_INFO[playerid][j_ARMOUR] = 100.0;
	return SetPlayerArmour(playerid, PLAYER_INFO[playerid][j_ARMOUR]);
}

MotorMalogrado(playerid)
{
    AccionesRol(playerid,"intenta encender el motor de su vehículo pero no puede.", 20);
	return SendClientMessage(playerid, -1, "El motor del vehículo está dañado, escribe {FFFF04}/servicio mecanico");
}

SaveParking(id)
{
    new query[1024];
	mysql_format(handle_db, query, sizeof(query), "UPDATE estacionamientos SET EnUso = '%d', Propietario = '%d', Precio = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', EntradaA = '%f', SalidaX = '%f', SalidaY = '%f', SalidaZ = '%f', SalidaA = '%f', Interior = '%d', VirtualWorld = '%d', Nivel = '%d', Precio = '%d' WHERE ID = '%d'",
	Estacionamientos[id][eEnUso],
	Estacionamientos[id][Dueno],
	Estacionamientos[id][ePrecio],
	Estacionamientos[id][SalidX],
	Estacionamientos[id][SalidY],
	Estacionamientos[id][SalidZ],
	Estacionamientos[id][SalidA],
	Estacionamientos[id][PosX],
	Estacionamientos[id][PosY],
	Estacionamientos[id][PosZ],
	Estacionamientos[id][PosA],
	Estacionamientos[id][eInterior],
	Estacionamientos[id][eMundoVirtual],
	Estacionamientos[id][Nivel],
	Estacionamientos[id][ePrecio],id);
	mysql_pquery(handle_db, query);
	return 1;
}
Error(playerid)
{
	ExpulsarJugador(playerid, "Ingresa nuevamente y ten cuidado con lo que escribes.");
	return 1;
}

public OnPlayerUnpause(playerid)
{
    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 3;
    PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 3;
	return 1;
}
public ColorJugadorDefault(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid, DEFAULT_COLOR);
	}
}

public TimerHideNotification(playerid)
{
    for(new cycle; cycle < 3; cycle++)
    {
        if(TextDrawsNotification[playerid][cycle][Hide] == -1)
        {
            TextDrawsNotification[playerid][cycle][Use] = 0;
            if(TextDrawsNotification[playerid][cycle][TextDraw] != PlayerText:-1)
            {
                PlayerTextDrawDestroy(playerid, TextDrawsNotification[playerid][cycle][TextDraw]);
                TextDrawsNotification[playerid][cycle][Line] = 0;
                TextDrawsNotification[playerid][cycle][Text][0] = EOS;
                TextDrawsNotification[playerid][cycle][MinPosY] = 0;
                TextDrawsNotification[playerid][cycle][MaxPosY] = 0;
                TextDrawsNotification[playerid][cycle][TextDraw] = PlayerText:-1;
            }
            TextDrawsNotification[playerid][cycle][Hide] = -1;
            UpdateNotification(playerid);

            return 1;
        }
    }
    return 0;
}


FixTextDrawString(message[], bool:space = false) {
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			case ' ': {
				if(space) {
					message[pos] = '_';
				}
			}
			default:  message[pos] = message[pos];
		}
	}
}

public SendNotification(playerid, const reason[])
{
    for(new cycle; cycle < 4; cycle++)
    {
        if(!TextDrawsNotification[playerid][cycle][Use])
        {
            TextDrawsNotification[playerid][cycle][Text][0] = EOS;

            strcat(TextDrawsNotification[playerid][cycle][Text], reason, 800);
            FixTextDrawString(TextDrawsNotification[playerid][cycle][Text]);

            TextDrawsNotification[playerid][cycle][Use] = 1;

            LinesNotification(playerid, cycle);

            MinPosYNotification(playerid, cycle);
            MaxPosYNotification(playerid, cycle);

            TextDrawsNotification[playerid][cycle][Hide] = -1;

            CreateTDN(playerid, cycle);

            SetTimerEx("TimerHideNotification", 5000, false, "i", playerid);

            return 1;
        }
    }
    return -1;
}

public SendNotification_Manual(playerid, const reason[])
{
    for(new cycle; cycle < 4; cycle++)
    {
        if(!TextDrawsNotification[playerid][cycle][Use])
        {
            TextDrawsNotification[playerid][cycle][Text][0] = EOS;

            strcat(TextDrawsNotification[playerid][cycle][Text], reason, 800);
            FixTextDrawString(TextDrawsNotification[playerid][cycle][Text]);

            TextDrawsNotification[playerid][cycle][Use] = 1;

            LinesNotification(playerid, cycle);

            MinPosYNotification(playerid, cycle);
            MaxPosYNotification(playerid, cycle);

            CreateTDN(playerid, cycle);

            for(new i; i < 4; i++)
            {
                if(used(playerid, counter_@[playerid]))
                {
                    if(counter_@[playerid] == 4 - 1) counter_@[playerid] = 0;
                    else counter_@[playerid]++;
                }
                else break;
            }

            new TDN = counter_@[playerid];

            TextDrawsNotification[playerid][cycle][Hide] = TDN;

            if(counter_@[playerid] == 4 - 1) counter_@[playerid] = 0;
            else counter_@[playerid]++;

            return TDN;
        }
    }
    return -1;
}

public HideNotification(playerid, TDN)
{
    for(new cycle; cycle < 4; cycle++)
    {
        if(TextDrawsNotification[playerid][cycle][Hide] == TDN)
        {
            TextDrawsNotification[playerid][cycle][Use] = 0;
            if(TextDrawsNotification[playerid][cycle][TextDraw] != PlayerText:-1)
            {
                PlayerTextDrawDestroy(playerid, TextDrawsNotification[playerid][cycle][TextDraw]);
                TextDrawsNotification[playerid][cycle][Line] = 0;
                TextDrawsNotification[playerid][cycle][Text][0] = EOS;
                TextDrawsNotification[playerid][cycle][MinPosY] = 0;
                TextDrawsNotification[playerid][cycle][MaxPosY] = 0;
                TextDrawsNotification[playerid][cycle][TextDraw] = PlayerText:-1;
                TextDrawsNotification[playerid][cycle][Timer] = -1;
            }
            TextDrawsNotification[playerid][cycle][Hide] = -1;
            UpdateNotification(playerid);
            return 1;
        }
    }
    return 0;
}

ObtenerEstacionamientos(playerid)
{
	new count;
	for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(Estacionamientos[i][eEnUso] > 0)
	    {
	    	if(strcmp(Estacionamientos[i][DuenoName],PLAYER_INFO[playerid][Nickname], true) == 0) count ++;
		}
	}
	return count;
}
ObtenerCoordenadasPaciente(playerid, &Float:X, &Float:Y, &Float:Z)
{
    X = PLAYER_INFO[playerid][jPosE_x];
	Y = PLAYER_INFO[playerid][jPosE_y];
	Z = PLAYER_INFO[playerid][jPosE_z];
	return 1;
}
AccesoDenegado(playerid)
{
	if(PLAYER_TIMES[playerid][ErrorMensaje] - gettime() <= 0)
	{
		SendClientMessage(playerid,-1,"Acceso Denegado.");
		PLAYER_TIMES[playerid][ErrorMensaje] = gettime() + 1;
	}
	return 1;
}
PonerRopaMedico(playerid, hospital)
{
    if(RopaMedi[playerid] == 0)
	{
	    switch(hospital)
	    {
	        case 1:
			{
	            switch(PLAYER_INFO[playerid][pSexo])
				{
					case 1:	SetPlayerSkin(playerid,276);
					case 2:	SetPlayerSkin(playerid,308);
				}
	        }
	        case 2:
			{
		        switch(GetPlayerVirtualWorld(playerid))
				{
				    case 7: // LS Groove
					{
                        switch(PLAYER_INFO[playerid][pSexo])
						{
							case 1:	SetPlayerSkin(playerid,276);
							case 2:	SetPlayerSkin(playerid,308);
						}
					}
					case 9: // LV
					{
					    switch(PLAYER_INFO[playerid][pSexo])
						{
							case 1:	SetPlayerSkin(playerid,274);
							case 2:	SetPlayerSkin(playerid,308);
						}
    				}
			    }
	        }
	        case 3:
			{
	            switch(PLAYER_INFO[playerid][pSexo])
				{
					case 1:	SetPlayerSkin(playerid,275);
					case 2:	SetPlayerSkin(playerid,308);
				}
	        }
	    }
        PLAYER_INFO[playerid][pModelo] = GetPlayerSkin(playerid);
		RopaMedi[playerid] = 1,	RopaBasu[playerid] = 0;
		SendClientMessage(playerid,-1,"Te has colocado el uniforme correctamente.");
	}
	else if(RopaMedi[playerid] == 1)
	{
		RopaMedi[playerid] = 0,	RopaBasu[playerid] = 0;
		SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
		SendClientMessage(playerid,-1,"Te has quitado el uniforme correctamente.");
	}
    foreach(new i : Player) RemovePlayerMapIcon(playerid, i);
    return 1;
}
HexToInt(const string[])
{
    if(!string[0]) return 0;
    new cur = 1, res = 0;
    for(new i = strlen(string); i > 0; i--)
    {
        res += cur * (string[i - 1] - ((string[i - 1] < 58) ? (48) : (55)));
        cur = cur * 16;
    }
    return res;
}
Borracho(playerid)
{
	new restased = 100-PLAYER_INFO[playerid][pSed];
	if(restased >= 15)	PLAYER_INFO[playerid][pSed] += 15;
	else if(restased < 15) PLAYER_INFO[playerid][pSed] += restased;
	new restahambre = 100-PLAYER_INFO[playerid][pHambre];
	if(restahambre >= 10) PLAYER_INFO[playerid][pHambre] += 10;
	else if(restahambre < 10) PLAYER_INFO[playerid][pHambre] += restahambre;
	if(PLAYER_INFO[playerid][pBarras] == 0)
	{
		BarraSed(playerid);
		BarraHambre(playerid);
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	AccionesRol(playerid,"comienza a sentirse mal.", 20);
	return 1;
}
HasWeapon(playerid,arma)
{
	if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(arma)] == arma) return 1;
	return 0;
}
DarDineroRoboTienda(playerid)
{
    ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
	new mensaje[128];
	format(mensaje,sizeof(mensaje),"Acabas de robar {f21111}$%d{FFFFFF} del negocio, escapa o serás arrestado.",valortotal[playerid]);
	SendClientMessage(playerid,-1,mensaje);
	DarDinero(playerid,valortotal[playerid]);
	valortotal[playerid] = 0;
	PLAYER_TEMP[playerid][PuedeRobar] = 0;
	if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
	if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
	return 1;
}
LimpiarMaletero(vehicleid)
{
	for(new i = 0; i < 11; i++)
	{
	    EspacioBaul[vehicleid][i] = 0;
	}
}
main()
{
	print(" ");
	return 1;
}
TraerPolicia(playerid)
{
    new Float:x,Float:y,Float:z,Float:a;
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		if(UltimoRobado[playerid] == RoboTiendas[i][rID])
	    {
			new actor = RoboTiendas[i][Actor];
			GetDynamicActorPos(actor,x,y,z);
			new vw = GetDynamicActorVirtualWorld(actor);
		    if(IsPlayerInRangeOfPoint(playerid,30.0,x,y,z))
			{
			    if(IsPlayerInRangeOfPoint(playerid,30,-30.6934,-90.8069,1003.5469))
			    {
			        x = -30.6934; y = -90.8069; z = 1003.5469; a = 318.9343;
			    }
			    if(IsPlayerInRangeOfPoint(playerid,30,-26.1474,-187.0378,1007.7300))
			    {
			        x = -26.1474; y = -187.0378; z = 1007.7300; a = 67.7816;
			    }
			    if(IsPlayerInRangeOfPoint(playerid,30,370.4197,-123.0341,1001.4995))
			    {
			        x = 372.0728; y = -130.9169; z = 1001.4922; a = 14.4730;
			    }
			    if(x == 0) return 1;
	           	if(IsValidDynamicActor(RoboTiendas[i][rPolicia])) DestroyDynamicActor(RoboTiendas[i][rPolicia]);
	           	RoboTiendas[i][rPolicia] = CreateDynamicActor(280, x, y, z, a,1,100.0,vw);
	            ApplyDynamicActorAnimation(RoboTiendas[i][rPolicia],"ped", "ARRESTgun", 4.000000, 0, 0, 0, 1, 0);
	            SetTimerEx("RendirseUsuario",500,false,"d",playerid);
	 	  	 	SetTimerEx("MatarPolicia",8000,false,"d",RoboTiendas[i][rPolicia]);
		   		SetTimerEx("Encerrando2",7000,false,"d",playerid);
			}
		}
  	}
	return 1;
}
UpdateVehicleParams(vehicleid)
{
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}
GetOyentesEmisora(emisora)
{
	new count;
	foreach(new i : Player)
	{
		if(PLAYER_TEMP[i][p_ESCUCHANDO_EMISORA] == emisora) count++;
	}
	return count;
}
stock EnRadio(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1434.3252,589.3580,1000.9779))				return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 225.3002,1187.7854,1080.2578))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2327.0132,-1018.0557,1050.2178))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2331.0811,-1068.4113,1049.0234))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2194.8037,-1201.2301,1049.0234))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2311.1023,-1207.4109,1049.0234))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2360.8394,-1130.8195,1050.8750))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2282.0415,-1135.8741,1050.8984))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2491.3289,-1697.8755,1014.7490))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 224.4195,1241.0884,1082.1406))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 232.9977,1289.9427,1082.1406))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 236.3799,1048.3400,1084.0067))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 292.4060,1472.9526,1080.2642))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 320.25391, 1490.39087, 1083.43884))	return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 379.02029, 1469.72083, 1079.17688))	return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 366.4335,1425.3593,1081.3359))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 482.1933,1399.6086,1080.2578))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 450.5942,1414.1479,1084.3080))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 263.4377,1288.6233,1080.2578))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 229.50169, 1151.12305, 1081.60596))	return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 23.2901,1347.0875,1088.8750))			return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -270.6304,1447.6964,1088.8672))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 17.9222,1407.9509,1084.4297))			return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 147.5579,1373.5997,1083.8594))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 236.7255,1082.3959,1084.2415))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -70.99350, 1359.27661, 1079.21289))	return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -287.9925,1478.1453,1088.8823))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -47.8563,1411.1011,1084.4297))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 95.8903,1337.5476,1088.3672))			return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 265.88324, 1242.81116, 1083.25623))	return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2451.8186,-1705.9608,1013.5078))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2806.3760,-1165.6929,1025.5703))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 321.8526,1117.1307,1083.8828))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2319.1746,-1142.2817,1050.4922))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2267.0566,-1136.5151,1050.6403))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2166.1284,641.7698,1057.5875))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 417.8647,2535.4861,10.0000))			return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1273.2833,-785.8144,1089.9303))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2549.2622,-1280.6965,1060.9844))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1475.0764,548.1407,1000.9959))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -786.8574,488.8219,1376.1953))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2261.9563,-1208.6964,1049.0308))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1099.4520,-817.2785,107.4822))		return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1254.7644,-804.6345,1084.0151))		return 1;
	return 0;
}
stock CercaDeObjeto(Float:rango,playerid,objectid)
{
	new Float:Pos[3];
	GetObjectPos(objectid,Pos[0],Pos[1],Pos[2]);
	if(IsPlayerInRangeOfPoint(playerid,rango,Pos[0],Pos[1],Pos[2])) return 1;
	return 0;
}
number_format(e_number)
{
	new f_string[500], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}
	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}
	if(negative) strins(f_string, "-", 0);
	return f_string;
}
stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}
IsValidVehicleTunning(vehicleid)
{
	new bool:valid;
    switch(GetVehicleModel(vehicleid))
    {
        case 407..408:  valid = false; 	//FireTruck - Trashmaster
        case 416:       valid = false; 	//Ambulance
        case 420:       valid = false;  //taxi
        case 427:       valid = false;  //Enforcer
        case 438:       valid = false;  //Taxi 2
        case 448: 		valid = false;  //Pizzaboy
        case 456:       valid = false;  //Yankee
        case 461..463:	valid = false;  //PCJ-600 - Faggio
        case 468:		valid = false;  //Sanchez
        case 471:		valid = false;  //Quad
        case 481:		valid = false;  //BMX
        case 490:       valid = false;  //FBI Rancher
        case 498:       valid = false;  //Boxville
        case 509..510:	valid = false;  //Bike - MountainBike
        case 521..523:	valid = false;  //FCR-900 - NRG-500 - HPV1000
        case 528:       valid = false;  //FBI Truck
        case 544:       valid = false; 	//FireTruck
        case 573:       valid = false;  //Dune
        case 578:       valid = false;   //DFT
        case 581:		valid = false;  //BF-400
        case 586:		valid = false;  //Wayfarer
        case 596..599:  valid = false; 	//Police Car (LS-SF-LV) - Police Ranger
		case 601:       valid = false;  //S.W.A.T
		case 609:       valid = false;  //Boxville
        default: 		valid = true;
    }
	return valid;
}

stock TunearCoche(playerid)
{
    new tunning_id = PosTunningCercano(playerid), vehicleid = GetPlayerVehicleID(playerid);
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, PointVehicleTunnin[tunning_id][0],PointVehicleTunnin[tunning_id][1],PointVehicleTunnin[tunning_id][2])) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "No estás conduciendo ningún vehículo.");
	new Float:health;
    GetVehicleHealth(vehicleid, health);
	if(health < 375.0) return SendClientMessage(playerid, -1, "Primero debes reparar tu vehículo para tunear.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return 1;
	if(!IsValidVehicleTunning(vehicleid)) return SendClientMessage(playerid,-1,"No puedes modificar este tipo vehículos.");

    if((vehicleid == autos[playerid]) || (vehicleid == autos2[playerid]) | (vehicleid == autos3[playerid]) || (vehicleid == autos4[playerid]))
    {
        if(vehicleid == autos[playerid] && PLAYER_INFO[playerid][vID1] == 0) return SendClientMessage(playerid, -1, "Debes reloguear para tunear.");
		if(vehicleid == autos2[playerid] && PLAYER_INFO[playerid][vID2] == 0) return SendClientMessage(playerid, -1, "Debes reloguear para tunear.");
		if(vehicleid == autos3[playerid] && PLAYER_INFO[playerid][vID3] == 0) return SendClientMessage(playerid, -1, "Debes reloguear para tunear.");
		if(vehicleid == autos4[playerid] && PLAYER_INFO[playerid][vID4] == 0) return SendClientMessage(playerid, -1, "Debes reloguear para tunear.");

		PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] = vehicleid;

		SetVehiclePosEx(vehicleid, PointVehicleTunnin[tunning_id][0],PointVehicleTunnin[tunning_id][1],PointVehicleTunnin[tunning_id][2]);
		SetVehicleZAngle(vehicleid, PointVehicleTunnin[tunning_id][3]);

		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(vehicleid);
		ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	}
	else SendClientMessage(playerid, -1, "Sólo puedes modificar tus vehículos.");
	return 1;
}
GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_OBJETOS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = CreateDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],0.0,0.0,0.0,0.0,0.0,0.0);
		}
		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++) SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
				}
				case VOBJECT_TYPE_TEXT: SetDynamicObjectMaterialText(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],0,VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],130,VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],0,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}
		AttachDynamicObjectToVehicle(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],vehicleid,VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(IsValidPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]) || PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
	    DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}
	PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 1, 0, "null", "null");
	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z)
{
    new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
	if(info[0] == PLAYER_INFO[playerid][pFaccion])
	{
		if(PLAYER_INFO[playerid][pFaccion] != 1)
		{
		    CancelEdit(playerid);
			return SendClientMessage(playerid, -1, "No eres policía.");
		}
	    if(PLAYER_INFO[playerid][pDuty] != 1)
		{
		    CancelEdit(playerid);
			return SendClientMessage(playerid, -1, "No estás de servicio como policía.");
		}
		if(AUTORIZED_POLICE_OBJECT_ID == 0)
		{
            CancelEdit(playerid);
			return SendClientMessage(playerid, -1,"No hay autorización para editar controles policíales.");
		}
		SendClientMessageEx(playerid, -1, "Este objeto fue colocado por %s. Usa 'ESC' para borrar el objeto.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
		PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_ID] = info[1];
		EditDynamicObject(playerid, objectid);
		return 1;
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{

	if(response == EDIT_RESPONSE_CANCEL)
	{
		new info[2];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
		if(info[0] == PLAYER_INFO[playerid][pFaccion])
		{
			if(PLAYER_INFO[playerid][pFaccion] != 1)
			{
			    CancelEdit(playerid);
				return SendClientMessage(playerid, -1, "No eres policía.");
			}
		    if(PLAYER_INFO[playerid][pDuty] != 1)
			{
			    CancelEdit(playerid);
				return SendClientMessage(playerid, -1, "No estás de servicio como policía.");
			}
			if(AUTORIZED_POLICE_OBJECT_ID == 0)
			{
                CancelEdit(playerid);
				return SendClientMessage(playerid, -1,"No hay autorización para editar controles policíales.");
			}
			DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
			POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
			POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
			POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
			SendClientMessage(playerid, -1, "Objeto policial eliminado.");
		}
	}

	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid ==  PLAYER_TEMP[playerid][pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyDynamicObjectEx(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;

					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					UpdateVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);
					SendClientMessage(playerid, -1, "{FFFFFF}Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{

					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyDynamicObjectEx(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;

					}
					new Float:v_size[3];
					GetVehicleModelInfo(GetVehicleModel(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]), VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);

					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendClientMessage(playerid, -1, "{FFFFFF}Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
					UpdateVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				}
    			case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
     				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);

				}
			}
		}
	}
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag		= "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 1: // Argentina
		{
			text_flag		= "{1FBEF2}ggg\n{FFFFFF}ggg\n{1FBEF2}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 2: // Austria
		{
			text_flag		= "{d81e05}ggg\n{FFFFFF}ggg\n{d81e05}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 3: // Belgica
		{
			text_flag		= "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 4: // Bolivia
		{
			text_flag		= "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 5: // Bulgaria
		{
			text_flag		= "{FFFFFF}ggg\n{00966e}ggg\n{d62612}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 6: // Chile
		{
			text_flag		= "{04019a}g{FFFFFF}gg\n{fe0002}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 7: // Colombia
		{
			text_flag		= "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 0;
		}
		case 8: // El Salvador
		{
			text_flag		= "{0f47af}ggg\n{FFFFFF}ggg\n{0f47af}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 9: // España
		{
			text_flag		= "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 10: // Estonia
		{
			text_flag		= "{3a75c4}ggg\n{000000}ggg\n{FFFFFF}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 11: // Francia
		{
			text_flag		= "{00209f}g{FFFFFF}g{f42a41}g\n{00209f}g{FFFFFF}g{f42a41}g\n{00209f}g{FFFFFF}g{f42a41}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 12: // Guatemala
		{
			text_flag		= "{4997d0}g{FFFFFF}g{4997d0}g\n{4997d0}g{FFFFFF}g{4997d0}g\n{4997d0}g{FFFFFF}g{4997d0}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 13: // Holanda
		{
			text_flag		= "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 14: // Hungria
		{
			text_flag		= "{d2232c}ggg\n{FFFFFF}ggg\n{008d46}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 15: // India
		{
			text_flag		= "{ff9933}ggg\n{FFFFFF}ggg\n{138808}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 16: // Indonesia
		{
			text_flag		= "{ce1126}ggg\n{FFFFFF}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 17: // Irlanda
		{
			text_flag		= "{009e60}g{FFFFFF}g{f77f00}g\n{009e60}g{FFFFFF}g{f77f00}g\n{009e60}g{FFFFFF}g{f77f00}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 18: // Italia
		{
			text_flag		= "{009246}g{FFFFFF}g{ce2b37}g\n{009246}g{FFFFFF}g{ce2b37}g\n{009246}g{FFFFFF}g{ce2b37}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 19: // Lituania
		{
			text_flag		= "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 20: // Luxemburgo
		{
			text_flag		= "{ef2b2d}ggg\n{FFFFFF}ggg\n{00a3dd}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 21: // Madagascar
		{
			text_flag		= "{FFFFFF}g{d11f33}gg\n{FFFFFF}g{00a651}gg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 22: // Malta
		{
			text_flag		= "{FFFFFF}g{d11f33}g\n{FFFFFF}g{d11f33}g\n{FFFFFF}g{d11f33}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 23: // Mali
		{
			text_flag		= "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 24: // México
		{
			text_flag		= "{006847}g{FFFFFF}g{ce1126}g\n{006847}g{FFFFFF}g{ce1126}g\n{006847}g{FFFFFF}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 25: // Nigeria
		{
			text_flag		= "{008751}g{FFFFFF}g{008751}g\n{008751}g{FFFFFF}g{008751}g\n{008751}g{FFFFFF}g{008751}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 26: // Panamá
		{
			text_flag		= "{FFFFFF}g{d21034}g\n{0067c6}g{FFFFFF}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 0;
		}
		case 27: // Paraguay
		{
			text_flag		= "{d52b1e}ggg\n{FFFFFF}ggg\n{0038a8}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 28: // Perú
		{
			text_flag		= "{e30000}g{FFFFFF}g{e30000}g\n{e30000}g{FFFFFF}g{e30000}g\n{e30000}g{FFFFFF}g{e30000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 29: // Polonia
		{
			text_flag		= "{FFFFFF}ggg\n{dc143c}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 30: // Rumania
		{
			text_flag		= "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 31: // Rusia
		{
			text_flag		= "{FFFFFF}ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 32: // Ucrania
		{
			text_flag		= "{3a75c4}ggg\n{f9dd16}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 33: // Venezuela
		{
			text_flag		= "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
	}
	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0,
		0xFFFFFFFF,
		0,
		text_alignment
	);
	return 1;
}
RegisterNewVehicleObject(playerid,vehicleid, slot)
{
	new DB_Query[1800];
	new auto_slot;
	if(autos[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID1]; }
	else if(autos2[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID2]; }
	else if(autos3[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID3]; }
	else if(autos4[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID4]; }
	if(auto_slot == 0) return 1;
	mysql_format(handle_db, DB_Query, sizeof(DB_Query),
	"\
		INSERT INTO `tuning_objects`\
		(\
			`ID_VEHICLE`, `TYPE`, `NAME`, `MODELID`,\
			`OFF_X`, `OFF_Y`, `OFF_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`,\
			`ATTACHED`,\
			`COLOR_0`, `COLOR_1`, `COLOR_2`, `COLOR_3`, `COLOR_4`,\
			`TEXT`, `FONT`, `FONT_SIZE`, `FONT_BOLD`, `FONT_COLOR`\
		)\
		VALUES\
		(\
			'%d', '%d', '%s', '%d',\
			'%f', '%f', '%f', '%f', '%f', '%f',\
			'%d',\
			'%d', '%d', '%d', '%d', '%d',\
			'%s', '%s', '%d', '%d', '%d'\
		);\
	",
		auto_slot, VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	mysql_query(handle_db, DB_Query);
	VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = cache_insert_id();

	return 1;
}
UpdateVehicleObject(playerid,vehicleid, slot)
{
	new DB_Query[1800];
	new auto_slot;
	if(autos[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID1]; }
	else if(autos2[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID2]; }
	else if(autos3[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID3]; }
	else if(autos4[playerid] == vehicleid) {  auto_slot = PLAYER_INFO[playerid][vID4]; }
	if(auto_slot == 0) return 1;
	format(DB_Query, sizeof DB_Query,

		"UPDATE `tuning_objects` SET \
			`ID_VEHICLE` = '%d', `TYPE` = '%d', `NAME` = '%s', `MODELID` = '%d',\
			`OFF_X` = '%f', `OFF_Y` = '%f', `OFF_Z` = '%f', `ROT_X` = '%f', `ROT_Y` = '%f', `ROT_Z` = '%f',\
			`ATTACHED` = '%d',\
			`COLOR_0` = '%d', `COLOR_1` = '%d', `COLOR_2` = '%d', `COLOR_3` = '%d', `COLOR_4` = '%d',\
			`TEXT` = '%s', `FONT` = '%s', `FONT_SIZE` = '%d', `FONT_BOLD` = '%d', `FONT_COLOR` = '%d' \
		WHERE `ID` = '%d';\
		",
			auto_slot, VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);
	mysql_query(handle_db, DB_Query);
	return 1;
}
ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
		case DIALOG_VOBJECT_MENU:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{FFFF04}Tuning", "» Mis objetos\n» Comprar objeto\n» Añadir texto (500$)\n» Añadir bandera de país (2.000$)\n» Añadir panel de país (2.000$)", ">>", "-");
			return 1;
		}
		case  TUNING_TYPE:
		{
			new caption[45];
			format(caption, sizeof caption, "Tuning Club - '%s'",GetVehicleName( GetPlayerVehicleID(playerid)  ));
			ShowPlayerDialog(playerid, TUNING_TYPE, DIALOG_STYLE_LIST, caption, "Parachoques delanteros\nParachoques traseros\nAlerones\nNeones", "Siguente", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_OBJETOS_USERS + 2)], line_str[145];
			format(caption, sizeof caption, "Tuning",0);
			format(dialog, sizeof dialog, "{FFFFFF}Objeto\tColocado\n");
			for(new i = 0; i != MAX_OBJETOS_USERS; i ++)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{FFFFFF}» %d. %s\t{FFFF04}colocado\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}» %d. %s\t{FFFF04}guardado\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{FFFFFF}» %d espacio libre.\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}» Eliminar todo\n");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Colores\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{FFFFFF}Eliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Texto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\n{FFFFFF}Eliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{FFFFFF}Colocar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{FFFFFF}Eliminar este objeto");
				}
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			new dialog[145];
			format(dialog, sizeof dialog,
			"\
			Color original\n\
			{%06x}Veh Color 1\n\
			{%06x}Veh Color 2\n\
			{FFFFFF}Otro (ARGB)\n\
			",
			VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_COLOR_1] ] >>> 8,
			VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_COLOR_2] ] >>> 8
			);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Está seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, "Texto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Texto actual:\n\"%s\"\n\nIndica el nuevo texto (1-32 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar texto", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Fuente actual:\n\"%s\"\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Tamaño actual: %d\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona país",
			"\
			Alemania\n\
			Argentina\n\
			Austria\n\
			Belgica\n\
			Bolivia\n\
			Bulgaria\n\
			Chile\n\
			Colombia\n\
			El Salvador\n\
			España\n\
			Estonia\n\
			Francia\n\
			Guatemala\n\
			Holanda\n\
			Hungría\n\
			India\n\
			Indonesia\n\
			Irlanda\n\
			Italia\n\
			Lituania\n\
			Luxemburgo\n\
			Madagascar\n\
			Malta\n\
			Malí\n\
			México\n\
			Nigeria\n\
			Panamá\n\
			Paraguay\n\
			Perú\n\
			Polonia\n\
			Rumanía\n\
			Rusia\n\
			Ucrania\n\
			Venezuela\n\
			"
			, ">>", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_NEON:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{FFFF04}Neones", "» Neon {e01102}Rojo\n» Neon {0619c2}Azul\n» Neon {04b51e}Verde\n» Neon {FFFF04}Amarillo\n» Neon {ff05d5}Rosa\n» Neon {f0f2f2}Blanco", "Comprar", "Cancelar");
			return 1;
		}
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, "Mi teléfono - %d", PLAYER_INFO[playerid][pNumero]);

			new dialog[200];
			if(TelefonoEstado[playerid] == 0) format(dialog, sizeof dialog, "{FFFFFF}1. Agenda\n2. Llamar\n3. Enviar mensaje\n4. Apagar teléfono");
			else format(dialog, sizeof dialog, "{FFFFFF}1. Encender teléfono\n2. Agenda\n3. Llamar\n4. Enviar mensaje");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Seleccionar", "Salir");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;

			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\tNúmero\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] = i;

				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "{CCCCCC}+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mi teléfono - Agenda", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "{FFFFFF}Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "Siguiente", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "{FFFFFF}Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "Siguiente", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{CCCCCC}1. Llamar\n{CCCCCC}2. Enviar mensaje\n{CCCCCC}3. Cambiar nombre del contacto\n{CCCCCC}4. Eliminar este contacto", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "{FFFFFF}Nombre actual: %s\n{FFFFFF}Teléfono: %d\n\n{FFFFFF}Indica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "{FFFFFF}¿Está seguro de que desea eliminar el siguiente contacto?\n\n{FFFFFF}Nombre: %s\n{FFFFFF}Teléfono: %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "{FFFFFF}¿Está seguro de que quiere eliminar todos sus contactos?\n{FFFFFF}Esta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Realizar una llamada", "{FFFFFF}¿A quién quieres llamar?\n{FFFFFF}Indique el número al que desea llamar.", "Siguiente", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}¿A quién quieres enviarle el mensaje?\n{FFFFFF}Indique el número al que desea enviar el mensaje.", "Siguiente", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}Escribe el mensaje que quieres enviar\n{FFFFFF}Caracteres: 1-145.", "Siguiente", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi teléfono - Enviar mensaje", "{FFFFFF}Escribe el mensaje que quieres enviar\n{FFFFFF}Caracteres: 1-145.", "Siguiente", "Atrás");
		case DIALOG_TOYS:
  		{
   	    	for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;
  		    new dialog[42*MAX_PLAYER_TOYS],line_str[128],count;
  		    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
			{
			    if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] != 0)
			    {
					PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][count] = i;
				    format(line_str, sizeof line_str, "{FFFFFF}- %s \n", GetNameObjeto(PLAYER_TOYS[playerid][i][pt_MODEL_ID]));
				    strcat(dialog, line_str);
				    count++;
			    }
			}
   			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DIALOG_CAPTION" Accesorios", dialog, "Seleccionar", "Salir");
		}
		case DIALOG_TOYS_MENU:
		{
		    new dialog[110] = "{FFFFFF}- Poner accesorio\n{FFFFFF}- Modificar accesorio\n{FFFFFF}- Cambiar Color\n{FFFFFF}- Eliminar accesorio";
		    if(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED]) dialog = "{FFFFFF}- Quitar accesorio\n{FFFFFF}- Modificar accesorio\n{FFFFFF}- Cambiar Color\n{FFFFFF}- Eliminar accesorio";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DIALOG_CAPTION" - Accesorios", dialog, "Siguiente", "Volver");
		}
		case DIALOG_TOYS_EDIT:
		{
		    new dialog[75 * 2 + 1], line_str[256];
			if(PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] == 4 && PLAYER_INFO[playerid][pVIP] != 3)
						return SendClientMessage(playerid, -1, "Necesitas {D55124}VIP3{FFFFFF} para poder editar esta prenda.");
		    format(line_str, sizeof line_str, "Editar parte {00A5FF}(%s)\n", GetNameBoneToy(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE]));
			strcat(dialog, line_str);
			strcat(dialog, "Editor Personalizado");

			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DIALOG_CAPTION" - Accesorios", dialog, "Seleccionar", "Cancelar");
		}
		case DIALOG_TOYS_EDIT_2:
		{

		    new dialog[35 * 19 + 1], line_str[70];
		    for(new i = 1; i < 19; i ++)
			{
			    format(line_str, sizeof line_str, "Parte {00A5FF}(%s)\n", GetNameBoneToy(i));
			    strcat(dialog, line_str);
			}
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DIALOG_CAPTION" - Accesorios", dialog, "Seleccionar", "Cancelar");
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atras");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atras");
			return 1;
		}
		
		case DIALOG_CHANGE_PASS:
		{
		    new PASS[] = "{FFFFFF}La contraseña debe contener de 4 a 18 caracteres";
		    return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""DIALOG_CAPTION" - Cambio de contraseña", PASS, "Ingresar", "Salir");
		}
		case DIALOG_POSTULACION:
		{
		    new dialog[] = "{ffffff}Información:\n\n\
			{ffffff}Solo personas con muy buenas virtudes podrán ser parte de nuestra organización.\n\
			{ffffff}Aquel que desee someterse tendrá que pasar por muchas pruebas/etapas\n\
			{ffffff}la cual se los probaran en todo lo que es y conforma parte de la organización.";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Postulación", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_1:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Qué lo movito a postularse a San Andreas Police Department?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 1", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_2:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Qué trabajo ha obtenido anteriormente? ¿Hasta que cargo llegó (Habilidad)? ¿Por qué los dejó?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 2", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_3:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Posee Conocimientos de las leyes de San Andreas?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 3", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_4:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Posee antecedentes penales? sí es así ¿por que los obtuvo?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 4", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_5:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿En una situación de agresión por parte de un civil a usted. ¿Cómo procedería ante ésta situación?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 5", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_6:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}En caso de que un compañero de trabajo esté incumpliendo con las normativas del departamento. ¿Cómo procedería usted?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 6", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_7:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Es una persona que le gusta recibir y acatar ordenes?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 7", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_8:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Se considera una persona apta para el cargo?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 8", dialog, "Siguiente", "Salir");
		}
		case DIALOG_POSTULACION_9:
		{
		    new dialog[] = "{999999}Escribe brevemente la respuesta a la siguiente pregunta.\n\n\
			{ffffff}¿Por que cree usted que deberíamos contratarlo?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Pregunta 9", dialog, "Siguiente", "Salir");
		}
		case DIALOG_CURRICULUMS:
		{
		    new dialog[200 * 200 + 1], line_str[115], estado[32],count = 0;
			dialog = "ID\tNombre\tEstado\n";
	        for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;

	        for(new x = 0; x < MAX_CURRICULUMS; x ++)
		    {
		    	if(CURRICULUM_INFO[x][cv_VALID] && CURRICULUM_INFO[x][cv_ESTADO] != 2)
		    	{
		    	    if(CURRICULUM_INFO[x][cv_ESTADO] == 0) estado = "{999999}Sin revisar";
		    	    if(CURRICULUM_INFO[x][cv_ESTADO] == 1) estado = "{00FF00}Aprobado";
		    	    if(CURRICULUM_INFO[x][cv_ESTADO] == 2) estado = "{FF0000}Rechazado";

			        PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][count] = x;
			        format(line_str, sizeof line_str, "%d.\t%s\t%s\n", x, CURRICULUM_INFO[x][cv_NAME],estado);
					strcat(dialog, line_str);
					count ++;
			    }
		    }
			if(count == 0) return SendClientMessage(playerid,-1,"No hay curriculums ingresados al sistema.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Curriculums", dialog, "Seleccionar", "Salir");
		}
		case DIALOG_INACTIVOS:
		{
	        new dialog[] = "- Desocupar casa\n- Desocupar Fabrica";
		    return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DIALOG_CAPTION" - Inactivos", dialog, "Seleccionar", "Cancelar");
		}
		case DIALOG_DESOCUPAR_CASAS:
		{
		    new Query[150],dialog[300 * 100 + 1], line_str[115],Conexion, online, count = 0;
		    dialog = "cID\tPropietario\tÚlt. conexión\n";

		    for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;

		    for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
				    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username`='%s'", PropInfo[p][pPropietario]);
					mysql_query(handle_db, Query, true);

				 	for(new i = 0; i < cache_num_rows(); i++)
					{
				        cache_get_value_name_int(i, "TiempoOffline",Conexion);
		                cache_get_value_name_int(i, "Online",online);
		                if(online == 1) continue;

		                PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][count] = p;

				        format(line_str, sizeof line_str, "%d\t%s\t%s\n", p, PropInfo[p][pPropietario], FormatTimeleft(gettime() - Conexion));
						strcat(dialog, line_str);
						count ++;
					}
				}
			}
			if(count == 0) return SendClientMessage(playerid,-1,"No hay propiedades en venta.");
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Casas", dialog, "Desocupar", "Salir");
		}
		case DIALOG_DESOCUPAR_FABRICAS:
		{
		    new dialog[140 * 30 + 1], line_str[115], count = 0;
		    dialog = "ID\tZona\tNombre de la banda\n";
		    
		    for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;
		    
		    for(new ID = 1; ID < MAX_FABRICAS; ID++)
		    {
		     	if(FABRICAS_INFO[ID][f_VALID])
		     	{
	                PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][count] = ID;
                    if(FABRICAS_INFO[ID][f_VENTA] == 0) format(line_str, sizeof line_str, "%d\t%s\tEn Venta\n", ID, FABRICAS_INFO[ID][f_LOCALITATION]);
			        else format(line_str, sizeof line_str, "%d\t%s\t%s\n", ID, FABRICAS_INFO[ID][f_LOCALITATION], BandasInfo[FABRICAS_INFO[ID][f_FACCION_ID]][BNombre]);
					strcat(dialog, line_str);
					count ++;
				}
			}
			if(count == 0) return SendClientMessage(playerid, -1,"No hay fabricas compradas por usuarios");
		    return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Fabricas", dialog, "Seleccionar", "Atras");
		}
		case DIALOG_ACTIVIDAD:
		{
		    for(new ID = 1; ID < MAX_FABRICAS; ID++)
		    {
		        if(!FABRICAS_INFO[ID][f_VALID]) continue;
		        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		        if(FABRICAS_INFO[ID][f_ACTIVIDAD] != ACTIVIDAD_NONE)
		        {
			        new dialog[] = "- Adquirir químicos\n- Vender metanfetamina\n- Pagar soborno a la policía\n{999999}- Ver actividad actual\n{c4290d}- Cancelar actividad actual";
					return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Actividades", dialog, "Siguiente","Salir");
				}
				else
				{
				    new dialog[] = "- Adquirir químicos\n- Vender metanfetamina\n- Pagar soborno a la policía";
					return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Actividades", dialog, "Siguiente","Salir");
				}
			}
		}
		case DIALOG_ADMINISTRACION:
		{
		    new dialog[] = "- Contratar empleados\n- Comprar armas\n- Comprar chalecos antibalas\n- Regresar vehiculo de la fábrica\n- Regresar vehiculo de distracción";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Administración de fábrica", dialog, "Siguiente","Salir");
		}
		case DIALOG_EMPLEADOS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST,"Elige el tipo de empleado", "Moledor de cristal\nMédico\nSeguridad", "Siguiente", "Volver");
        case DIALOG_EMPLEADOS2:
		{
			new dialog[] = "{FFFFFF}Sexo\tCosto\n- Masculino\t{f21111}$1.000.000{FFFFFF}\n- Femenino\t{f21111}$1.000.000";
			ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_TABLIST_HEADERS,"Moledor de cristal",dialog,"Aceptar","Volver");
   		}
		case DIALOG_ARMAS_FABRICA:
		{
		    new dialog[] = "Modelo\tCantidad\tPrecio{FFFFFF}\n- Sniper rifle\t10\t{f21111}$10.000.000\n{FFFFFF}- Escopeta recortada\t10\t{f21111}$4.000.000\n{FFFFFF}- Micro UZI\t10\t{f21111}$2.000.000\n{FFFFFF}- Tec-9\t10\t{f21111}$2.500.000";
      		return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS,"Armas", dialog, "Comprar", "Salir");
		}
		case DIALOG_CHALE_FABRICA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{FFFFFF}Chalecos antibalas", "{FFFFFF}¿Desea comprar {f21111}10 chalecos antibalas{FFFFFF} por{f21111} $500.000{FFFFFF}?","Comprar","Volver");
		case DIALOG_FABRICA_VEH:
		{
			new dialog[] = "{ffffff}Si regresas {f21111}el vehículo{FFFFFF} a la fábrica, {EB0000}se perderá{FFFFFF} lo que tenga cargado.\n\n¿Estás seguro de hacer esto?";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Regresar vehículo", dialog,"Si","No");
		}
		case DIALOG_FABRICA_DESBUG:
		{
		    new dialog[] = "- Actualizar cajas del almacen\n- Actualizar empleados\n- Actualizar cocinas de cristal\n- Actualizar dinero de la fabrica";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Desbug de fábrica", dialog, "Siguiente","Salir");
		}
		case DIALOG_MENU_DESBAN:
		{
		    new Query[250];
		    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Baneado`='1'");
			mysql_query(handle_db, Query, true);

		    new dialog[300 * 50 + 83], line_str[300],name[24],time, razon[32],ban_admin[24],count;
			dialog = "Nombre\tAdmin\tRazón\tÚlt. conexión\n";

		  	for(new i = 0; i < cache_num_rows(); i++)
			{
			    cache_get_value_name_int(i, "ID", PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][count]);
			    cache_get_value_name(i, "Username", name);
		        cache_get_value_name_int(i, "TiempoOffline", time);
		        cache_get_value_name(i, "razon", razon);
		        cache_get_value_name(i, "Banpor", ban_admin);

				if(time >= (gettime() - 604800))
				{
			        format(line_str, sizeof line_str, "%s\t%s\t%s\t%s\n", name, ban_admin, razon, FormatTimeleft(gettime() - time));
					strcat(dialog, line_str);
					count ++;
				}
			}
			if(count == 0) return SendClientMessage(playerid, -1,"No hay registros de usuarios baneados los últimos 7 días.");
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administración - Baneados", dialog, "Desban", "Salir");
		}
		case CONFIG_BANDA:
		{
		    new dialog[] = "{FFFFFF}- Cambiar el nombre de la banda\n{FFFFFF}- Cambiar el nombre de los rangos\n{FFFFFF}- Ajustar permisos de la banda\n{ffffff}- Cambiar color de la banda\n{ffffff}- Ver Miembros\n{FFFFFF}- Eliminar tu banda";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Administrar tu banda",dialog,"Seleccionar", "Salir");
		}
		case CHANGE_NAME_CREW:
		{
		    ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banda: Nuevo nombre", "{FFFFFF}El costo para cambiar el nombre es de {f21111}$150.000{ffffff}.\nSi estas seguro de cambiar el nombre, indica cual sera", "Continuar", "Volver");
		    return 1;
		}
		case VIEW_RANK_NAME:
		{
		    if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			new DIALOG[676], string[150];
		 	format(string, sizeof(string), "{FFFFFF}1. %s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango1]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}2. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango2]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}3. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango3]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}4. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango4]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}5. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango5]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}6. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango6]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}7. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango7]);
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}8. %s\n",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango8]);
			strcat(DIALOG, string);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Rangos de la banda",DIALOG, "Cambiar", "Volver");
		}
		case CHANGE_PROP_RANK:
		{
		    new dialog[] = "{FFFFFF}- Ajustar permiso de invitaciones\n{FFFFFF}- Ajustar permiso de expulsiones\n{FFFFFF}- Ajustar permiso de ascender/descender";
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Bandas: Administra tu banda", dialog, "Cambiar", "Volver");
		}
				case CREW_VIEW_MEMBERS:
		{
		    new Query[150],string[128];
		    new banda = PLAYER_INFO[playerid][pFaccion];
		    
		    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Faccion`='%d'",PLAYER_INFO[playerid][pFaccion]);
			mysql_query(handle_db, Query, true);

		    new dialog[115 * 25 + 1], line_str[115],Conexion[90],rango,name[24],online,time;
			dialog = "Nombre\tRango\tUlt. conexion\n";

		 	for(new i = 0; i < cache_num_rows(); i++)
			{
			    cache_get_value_name(i, "Username", name);
			    cache_get_value_name_int(i, "Rango", rango);
		        cache_get_value_name(i, "Conexion",Conexion);
		        cache_get_value_name_int(i, "Online",online);
                cache_get_value_name_int(i, "TiempoOffline", time);

		        if(online == 0) format(line_str, sizeof line_str, "%s\t%s\t%s\n", name, RangoBanda(PLAYER_INFO[playerid][pFaccion], rango),FormatTimeleft(gettime() - time));
		        else format(line_str, sizeof line_str, "%s\t%s\t{80D465}Conectado{FFFFFF}\n", name, RangoBanda(PLAYER_INFO[playerid][pFaccion], rango));
				strcat(dialog, line_str);
			}
			if(PLAYER_INFO[playerid][pRango] == 8)
			{
			    format(string, sizeof(string), "%s: Miembros",BandasInfo[banda][BNombre]);
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Bandas: Miembros", dialog, "Aceptar", "Volver");
			}
			else 
		    {
		        format(string, sizeof(string), "%s: Miembros",BandasInfo[banda][BNombre]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, string, dialog, "Aceptar", "");
			}
		}
		case CREW_RANK_INV:
		{
			new DIALOG[676], string[130];
		    if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			strcat(DIALOG, "Rango\tEstado actual\n");
		 	format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango1], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango2], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango3], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango4], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango5], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango6], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango7], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_INV][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			return ShowPlayerDialog(playerid, CREW_RANK_INV, DIALOG_STYLE_TABLIST_HEADERS, "Configuracion de invitaciones", DIALOG, "Cambiar", "Volver");
		}
		case CREW_RANK_EXP:
		{
			new DIALOG[676], string[130];
		    if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			strcat(DIALOG, "Rango\tEstado actual\n");
		 	format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango1], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango2], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango3], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango4], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango5], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango6], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango7], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EXP][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			return ShowPlayerDialog(playerid, CREW_RANK_EXP, DIALOG_STYLE_TABLIST_HEADERS, "Configuracion de expulsiones", DIALOG, "Cambiar", "Volver");
		}
		case CREW_RANK_EDI:
		{
			new DIALOG[676], string[130];
		    if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			strcat(DIALOG, "Rango\tEstado actual\n");
		 	format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango1], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][0]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango2], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][1]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango3], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][2]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango4], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][3]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango5], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][4]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango6], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][5]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			format(string, sizeof(string), "{FFFFFF}- %s:\t%s\n", BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][bRango7], (BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][RANK_EDIT][6]) ? ("    {07C400}« Si »") : ("    {FF0000}« No »"));
			strcat(DIALOG, string);
			return ShowPlayerDialog(playerid, CREW_RANK_EDI, DIALOG_STYLE_TABLIST_HEADERS, "Configuracion de ascenso u descenso", DIALOG, "Cambiar", "Volver");
		}
		case CREW_DELETE:
		{
			new Query[190], affected_members, crew_territories, dialog[450];
		    if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes cambiar los nombres de esta banda.");
			mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Faccion`='%d';", PLAYER_INFO[playerid][pFaccion]);
			mysql_query(handle_db, Query, true);
			affected_members = cache_num_rows();
            mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `territorios` WHERE `Z_Activa` = '1' AND `Banda`='%d';", PLAYER_INFO[playerid][pFaccion]);
            mysql_query(handle_db, Query, true);
   			crew_territories = cache_num_rows();
			format(dialog, sizeof dialog,"Banda: %s\nMiembros: %d\nFabrica: %s\nTerritorios: %d\n\n¿De verdad quieres borrar la banda?",BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][BNombre], affected_members, (TieneFabrica(PLAYER_INFO[playerid][pFaccion])) ? ("Si") : ("No"), crew_territories);
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Si", "Volver");
		}
		case CREW_MODIFY_COLOR: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Volver");
		case DIALOG_ACENTO:
		{
		    new dialog[40 * 30 + 1], line_str[300];
		    for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;
		    for(new i = 0; i < 30; i++)
		    {
		        if(PLAYER_INFO[playerid][pAcento] == i) format(line_str, sizeof line_str, "{999999}%d. %s\n", i, GetNameAcento(i));
		        else format(line_str, sizeof line_str, "{ffffff}%d. %s\n", i, GetNameAcento(i));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = i;
		    }
		    ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona tu nuevo acento", dialog, "Seleccionar", "Salir");
		}
		//new dialog
	}
	return 1;
}

public DarSlap(playerid)
{
	new szMessage[128];
	format(szMessage, sizeof(szMessage), "Jugador {f21111}%s{FFFFFF} después del slap: {f21111}%f", PLAYER_INFO[Slapeo[playerid]][Nickname], PLAYER_INFO[Slapeo[playerid]][j_HEALTH]);
	SendClientMessage(playerid, -1, szMessage);
	return 1;
}
public RendirseUsuario(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,30,-30.6934,-90.8069,1003.5469))
    {
        SetPlayerCameraPos(playerid, -22.6988, -88.2985, 1006.2784);
		SetPlayerCameraLookAt(playerid, -23.5363, -88.8423, 1005.8837);
    }
    if(IsPlayerInRangeOfPoint(playerid,30,-26.1474,-187.0378,1007.7300))
    {
        SetPlayerCameraPos(playerid, -23.0768, -86.9407, 1006.6096);
		SetPlayerCameraLookAt(playerid, -23.7740, -87.6557, 1006.1846);
    }
    CongelarPlayerID(playerid);
    new Float:x1,Float:y1,Float:z1,Float:a1;
	GetPlayerArrestedPositions(playerid,x1,y1,z1,a1);
    NoTeleportHack(playerid);
	SetPosEntrar(playerid,x1,y1,z1,a1,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid));
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	GameTextForPlayer(playerid,"~r~ARRESTADO",6500,3);
}
public MatarPolicia(actor)
{
    if(IsValidDynamicActor(actor)) DestroyDynamicActor(actor);
	return 1;
}
stock Actualizar(playerid)
{
	CalcularNivel(playerid);
    BarraExp(playerid, 1);
	SetPlayerScore(playerid, PLAYER_INFO[playerid][pNivel]);
	SetPlayerStats(playerid);
}
stock BarraExp(playerid, variable)
{
	switch(variable)
	{
	    case 1:
		{
			BarrasJugador[playerid][2] = CreatePlayerProgressBar(playerid, 115.000000, 443.000000, 527.500000, 4.000000, -1, 1000);
			SetPlayerProgressBarValue(playerid, BarrasJugador[playerid][2], PLAYER_INFO[playerid][pExperiencia]);
			SetPlayerProgressBarMaxValue(playerid, BarrasJugador[playerid][2], PLAYER_INFO[playerid][ExperienciaTotal]);
			ShowPlayerProgressBar(playerid, BarrasJugador[playerid][2]);
			UpdatePlayerProgressBar(playerid, BarrasJugador[playerid][2]);
			return 1;
		}
	}
	return 1;
}

/*public OnPlayerGiveDamageDynamicActor(playerid, actorid, Float:amount, weaponid, bodypart)
{
	return true;
}*/

stock VENDER_VPLAYER(playerid)
{
				for(new i = 0; i < 4; i++)
			    {
			        PLAYER_TEMP[playerid][pVEHICLES][i] = 0;
			    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 0;
			    }
				if(autos[playerid] > 0 || autos2[playerid] > 0 || autos3[playerid] > 0 || autos4[playerid] > 0)
				{
					new vehiculo1[150],vehiculo2[150],vehiculo3[150],vehiculo4[150],mensaje[600];
					if(PLAYER_INFO[playerid][vModelo] > 0 && autosSpawned[playerid][0])
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 1;
						    	break;
					    	}
					    }
						format(vehiculo1, sizeof(vehiculo1), " Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio máximo de venta: {f21111}%d%s", NombreAuto[PLAYER_INFO[playerid][vModelo]-400], PLAYER_INFO[playerid][vpatente], PLAYER_INFO[playerid][vPrecio],(PLAYER_INFO[playerid][vMonedaa] > 0)?(""SERVER_COIN""):("$"));
					}
					if(PLAYER_INFO[playerid][vModelo2] > 0 && autosSpawned[playerid][1])
					{
                        for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos2[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 2;
						    	break;
					    	}
					    }

						format(vehiculo2, sizeof(vehiculo2), "\n Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio máximo de venta: {f21111}%d%s", NombreAuto[PLAYER_INFO[playerid][vModelo2]-400], PLAYER_INFO[playerid][v2patente], PLAYER_INFO[playerid][v2Precio],(PLAYER_INFO[playerid][v2Monedaa] > 0)?(""SERVER_COIN""):("$"));
					}
					if(PLAYER_INFO[playerid][vModelo3] > 0 && autosSpawned[playerid][2])
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos3[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 3;
						    	break;
					    	}
					    }

						format(vehiculo3, sizeof(vehiculo3), "\n Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio máximo de venta: {f21111}%d%s", NombreAuto[PLAYER_INFO[playerid][vModelo3]-400], PLAYER_INFO[playerid][v3patente], PLAYER_INFO[playerid][v3Precio],(PLAYER_INFO[playerid][v3Monedaa] > 0)?(""SERVER_COIN""):("$"));
					}
					if(PLAYER_INFO[playerid][vModelo4] > 0 && autosSpawned[playerid][3])
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos4[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 4;
						    	break;
					    	}
					    }
						format(vehiculo4, sizeof(vehiculo4), "\n Vehículo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio máximo de venta: {f21111}%d%s", NombreAuto[PLAYER_INFO[playerid][vModelo4]-400], PLAYER_INFO[playerid][v4patente], PLAYER_INFO[playerid][v4Precio],(PLAYER_INFO[playerid][v4Monedaa] > 0)?(""SERVER_COIN""):("$"));
					}
					format(mensaje, sizeof(mensaje), "%s%s%s%s", vehiculo1,vehiculo2,vehiculo3,vehiculo4);
					ShowPlayerDialog(playerid, VCPLAYER, DIALOG_STYLE_LIST, "Selecciona el vehículo que deseas vender", mensaje, "Siguiente","Cancelar");
				}
				return 1;
}


stock D_ESCRIBEPRICE(playerid)
{

	printf("ESCRIBIR PRICE");
	new msgven[300];
	format(msgven,sizeof(msgven),"{FFFFFF}Escribe el precio por el cual venderás tu {f21111}%s.\n{FFFFFF}Nota: No puedes venderlo por un precio menor a 0 ",NombreAuto[GetVehicleModel(VEHPLAYER[playerid][IDV])-400]);
	ShowPlayerDialog(playerid, VCPLAYER2, DIALOG_STYLE_INPUT,"{FFFFFF}Escribe el precio", msgven,"{FFFFFF}Siguiente","{FFFFFF}Cancelar");
	return 1;
}

stock D_ESCRIBEID(playerid)
{

	new msgven[250];
	format(msgven,sizeof(msgven),"{FFFFFF}Escribe  id del usuario cual venderás  tu el vehículo.",NombreAuto[GetVehicleModel(VEHPLAYER[playerid][IDV])-400]);
	ShowPlayerDialog(playerid, VCPLAYER3, DIALOG_STYLE_INPUT,"{FFFFFF}Escribe el id", msgven,"{FFFFFF}Vender","{FFFFFF}Cancelar");
	return 1;
}
stock OBTENER_DATOSV(playerid,slot)
{
		switch(slot)
		{
		case 1:
		{


			new Float:Pb[3];
			GetVehiclePos(autos[playerid],Pb[0],Pb[1],Pb[2]);
			VEHPLAYER[playerid][GASOLINA]  = VehicleFuel[autos[playerid]];
			VEHPLAYER[playerid][MODELO]    = PLAYER_INFO[playerid][vModelo];
			VEHPLAYER[playerid][TRABA]     = PLAYER_INFO[playerid][vTraba];
			VEHPLAYER[playerid][ALARMA]    = PLAYER_INFO[playerid][vAlarma];

			VEHPLAYER[playerid][INTERIOR] = PLAYER_INFO[playerid][vinterior];



		 	VEHPLAYER[playerid][SEGURO]   = PLAYER_INFO[playerid][vSeguro];

			VEHPLAYER[playerid][MUNDO]    = PLAYER_INFO[playerid][vvw];
	 		VEHPLAYER[playerid][PRECIO]   = PLAYER_INFO[playerid][vPrecio];
	 		//
	 		format(VEHPLAYER[playerid][PLACA], 24,"%s", PLAYER_INFO[playerid][vpatente]);

    	 	VEHPLAYER[playerid][MONEDA]      = PLAYER_INFO[playerid][vMonedaa];
    	 	//
    	 	VEHPLAYER[playerid][IDV]      = autos[playerid];
    	 	VEHPLAYER[playerid][SLOT] = 1;
    	 	//
    	 	VEHPLAYER[playerid][SQL] = PLAYER_INFO[playerid][vID1];

   	 		if(PLAYER_INFO[playerid][vMonedaa] == 0)
			{
			    VEHPLAYER[playerid][TIPO] = 0;
			}else VEHPLAYER[playerid][TIPO] = 1;


          	VEHPLAYER[playerid][XAV] = Pb[0];
          	VEHPLAYER[playerid][YAV] = Pb[1];
          	VEHPLAYER[playerid][ZAV] = Pb[2];
          	D_ESCRIBEPRICE(playerid);




	        //
	    }
	    case 2:
		{
 			new Float:Pb[3];
			GetVehiclePos(autos2[playerid],Pb[0],Pb[1],Pb[2]);
  			VEHPLAYER[playerid][GASOLINA]  = VehicleFuel[autos2[playerid]];
			VEHPLAYER[playerid][MODELO]    = PLAYER_INFO[playerid][vModelo2];
			VEHPLAYER[playerid][TRABA]     = PLAYER_INFO[playerid][v2Traba];
			VEHPLAYER[playerid][ALARMA]    = PLAYER_INFO[playerid][v2Alarma];

			VEHPLAYER[playerid][INTERIOR] = PLAYER_INFO[playerid][v2interior];

		 	VEHPLAYER[playerid][SEGURO]   = PLAYER_INFO[playerid][vSeguro2];

			VEHPLAYER[playerid][MUNDO]    = PLAYER_INFO[playerid][v2vw];
	 		VEHPLAYER[playerid][PRECIO]   = PLAYER_INFO[playerid][v2Precio];

    		format(VEHPLAYER[playerid][PLACA], 24,"%s", PLAYER_INFO[playerid][v2patente]);

    	 	VEHPLAYER[playerid][MONEDA]      = PLAYER_INFO[playerid][v2Monedaa];
    	 	VEHPLAYER[playerid][IDV]      = autos2[playerid];
    	 	VEHPLAYER[playerid][SLOT] = 2;
    	 	VEHPLAYER[playerid][SQL] = PLAYER_INFO[playerid][vID2];
   	 		if(PLAYER_INFO[playerid][v2Monedaa] == 0)
			{
			    VEHPLAYER[playerid][TIPO] = 0;
			}else VEHPLAYER[playerid][TIPO] = 1;
			VEHPLAYER[playerid][XAV] = Pb[0];
          	VEHPLAYER[playerid][YAV] = Pb[1];
          	VEHPLAYER[playerid][ZAV] = Pb[2];
          	D_ESCRIBEPRICE(playerid);
	    }
	    case 3:
	 	{
  			new Float:Pb[3];
			GetVehiclePos(autos3[playerid],Pb[0],Pb[1],Pb[2]);
			VEHPLAYER[playerid][GASOLINA]  = VehicleFuel[autos3[playerid]];
			VEHPLAYER[playerid][MODELO]    = PLAYER_INFO[playerid][vModelo3];
			VEHPLAYER[playerid][TRABA]     = PLAYER_INFO[playerid][v3Traba];
			VEHPLAYER[playerid][ALARMA]    = PLAYER_INFO[playerid][v3Alarma];

			VEHPLAYER[playerid][INTERIOR] = PLAYER_INFO[playerid][v3interior];

		 	VEHPLAYER[playerid][SEGURO]   = PLAYER_INFO[playerid][vSeguro3];

			VEHPLAYER[playerid][MUNDO]    = PLAYER_INFO[playerid][v3vw];
	 		VEHPLAYER[playerid][PRECIO]   = PLAYER_INFO[playerid][v3Precio];
    		format(VEHPLAYER[playerid][PLACA], 24,"%s", PLAYER_INFO[playerid][v3patente]);
    	 	VEHPLAYER[playerid][MONEDA]      = PLAYER_INFO[playerid][v3Monedaa];
    	 	VEHPLAYER[playerid][IDV]      = autos3[playerid];
    	 	VEHPLAYER[playerid][SLOT] = 3;
    	 	VEHPLAYER[playerid][SQL] = PLAYER_INFO[playerid][vID3];

 			if(PLAYER_INFO[playerid][v3Monedaa] == 0)
			{
			    VEHPLAYER[playerid][TIPO] = 0;
			}else VEHPLAYER[playerid][TIPO] = 1;


			VEHPLAYER[playerid][XAV] = Pb[0];
          	VEHPLAYER[playerid][YAV] = Pb[1];
          	VEHPLAYER[playerid][ZAV] = Pb[2];
          	D_ESCRIBEPRICE(playerid);
          	//


	    }
		case 4:
		{
 			new Float:Pb[3];
			GetVehiclePos(autos4[playerid],Pb[0],Pb[1],Pb[2]);

			VEHPLAYER[playerid][GASOLINA]  = VehicleFuel[autos4[playerid]];
			VEHPLAYER[playerid][MODELO]    = PLAYER_INFO[playerid][vModelo4];
			VEHPLAYER[playerid][TRABA]     = PLAYER_INFO[playerid][v4Traba];
			VEHPLAYER[playerid][ALARMA]    = PLAYER_INFO[playerid][v4Alarma];

			VEHPLAYER[playerid][INTERIOR] = PLAYER_INFO[playerid][v4interior];

		 	VEHPLAYER[playerid][SEGURO]   = PLAYER_INFO[playerid][vSeguro4];

			VEHPLAYER[playerid][MUNDO]    = PLAYER_INFO[playerid][v4vw];
	 		VEHPLAYER[playerid][PRECIO]   = PLAYER_INFO[playerid][v4Precio];
    		format(VEHPLAYER[playerid][PLACA], 24,"%s", PLAYER_INFO[playerid][v4patente]);
    	 	VEHPLAYER[playerid][MONEDA]      = PLAYER_INFO[playerid][v4Monedaa];
    	 	VEHPLAYER[playerid][IDV]      = autos4[playerid];
    	 	VEHPLAYER[playerid][SLOT] = 4;
    	 	VEHPLAYER[playerid][SQL] = PLAYER_INFO[playerid][vID4];
   	 		if(PLAYER_INFO[playerid][v4Monedaa] == 0)
			{
			    VEHPLAYER[playerid][TIPO] = 0;
			}else VEHPLAYER[playerid][TIPO] = 1;
     		VEHPLAYER[playerid][XAV] = Pb[0];
          	VEHPLAYER[playerid][YAV] = Pb[1];
          	VEHPLAYER[playerid][ZAV] = Pb[2];
          	D_ESCRIBEPRICE(playerid);
     	}
		}
		return 1;
}


ABBVEHICLE_PLAYER(playerid,v,gas,modelo,traba,alarms,int,seguro,mundo,precio,monedas,pat[],Float:x,Float:y,Float:z,c1,c2,slots)
{

   	if(PLAYER_INFO[playerid][vModelo] == 0)
	{
		autos[playerid] = v;
		PLAYER_INFO[playerid][vModelo] = modelo;
		PLAYER_INFO[playerid][pOX] = x;
		PLAYER_INFO[playerid][pOY] = y;
		PLAYER_INFO[playerid][pOZ] = z;
		PLAYER_INFO[playerid][pOA] = 90;
		PLAYER_INFO[playerid][vColor1] = c1;
		PLAYER_INFO[playerid][vColor2] = c2;
		PLAYER_INFO[playerid][vPrecio] = precio;
		PLAYER_INFO[playerid][vMonedaa] = monedas;
		bloqueado[autos[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro] = seguro;
		PLAYER_INFO[playerid][vAAlarma] = alarms;
		PLAYER_INFO[playerid][vinterior] = int;
		PLAYER_INFO[playerid][vvw] = mundo;
		PLAYER_INFO[playerid][vTraba] 	= traba;

		format(PLAYER_INFO[playerid][vpatente], 10,"%s", pat);

		//
 		new Query[200];
	 	mysql_format(handle_db, Query, sizeof(Query), "UPDATE p_vehicles SET `Propietario`='%d',`Slot`='1' WHERE `id`='%d' ",PLAYER_INFO[playerid][pID],slots);
		mysql_tquery(handle_db, Query);
		//
		PLAYER_INFO[playerid][vID1] = slots;
		resetventa(playerid);

		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo2] == 0)
	{
		autos2[playerid] = v;
		PLAYER_INFO[playerid][vModelo2] = modelo;
		PLAYER_INFO[playerid][pOX2] = x;
		PLAYER_INFO[playerid][pOY2] = y;
		PLAYER_INFO[playerid][pOZ2] = z;
		PLAYER_INFO[playerid][pOA2] = 90;
		PLAYER_INFO[playerid][v2Color1] = c1;
		PLAYER_INFO[playerid][v2Color2] = c2;
		PLAYER_INFO[playerid][v2Precio] = precio;
		PLAYER_INFO[playerid][v2Monedaa] = monedas;
		bloqueado[autos2[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro2] = seguro;
		PLAYER_INFO[playerid][vAAlarma2] = alarms;
		PLAYER_INFO[playerid][v2interior] = int;
		PLAYER_INFO[playerid][v2vw] = mundo;
		PLAYER_INFO[playerid][v2Traba] 	= traba;
		alarma[autos2[playerid]] = 0;

		VehicleFuel[autos2[playerid]] = 50;
		PLAYER_INFO[playerid][v2Gas] = gas;
		format(PLAYER_INFO[playerid][v2patente] ,40,pat);
		PLAYER_INFO[playerid][vID2] = slots;


        new Query[200];
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE p_vehicles SET `Propietario`='%d',`Slot`='2' WHERE `id`='%d' ",PLAYER_INFO[playerid][pID],slots);
		mysql_tquery(handle_db, Query);
		resetventa(playerid);

		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo3] == 0)
	{
		autos3[playerid] = v;
		PLAYER_INFO[playerid][vModelo3] = modelo;
		PLAYER_INFO[playerid][pOX3] = x;
		PLAYER_INFO[playerid][pOY3] = y;
		PLAYER_INFO[playerid][pOZ3] = z;
		PLAYER_INFO[playerid][pOA3] = 90;
		PLAYER_INFO[playerid][v3Color1] = c1;
		PLAYER_INFO[playerid][v3Color2] = c2;
		PLAYER_INFO[playerid][v3Precio] = precio;
		PLAYER_INFO[playerid][v3Monedaa] = monedas;
		bloqueado[autos3[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro3] = seguro;
		PLAYER_INFO[playerid][vAAlarma3] = alarms;
		PLAYER_INFO[playerid][v3vw] = mundo;
		alarma[autos3[playerid]] = 0;
		VehicleFuel[autos3[playerid]] = gas;
		PLAYER_INFO[playerid][v3Gas] = gas;
		PLAYER_INFO[playerid][v3Traba] 	= traba;
		PLAYER_INFO[playerid][v3interior] = int;
		format(PLAYER_INFO[playerid][v3patente] ,40,pat);

        new Query[200];
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE p_vehicles SET `Propietario`='%d',`Slot`='3' WHERE `id`='%d' ",PLAYER_INFO[playerid][pID],slots);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][vID3] = slots;
		resetventa(playerid);

		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo4] == 0)
	{
		autos4[playerid] = v;
		PLAYER_INFO[playerid][vModelo4] = modelo;
		PLAYER_INFO[playerid][pOX4] = x;
		PLAYER_INFO[playerid][pOY4] = y;
		PLAYER_INFO[playerid][pOZ4] = z;
		PLAYER_INFO[playerid][pOA4] = 90;
		PLAYER_INFO[playerid][v4Color1] = c1;
		PLAYER_INFO[playerid][v4Color2] = c2;
		PLAYER_INFO[playerid][v4Precio] = precio;
		PLAYER_INFO[playerid][v4Monedaa] = monedas;
		bloqueado[autos4[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro4] = seguro;
		PLAYER_INFO[playerid][vAAlarma4] = alarms;
		PLAYER_INFO[playerid][v4interior] = int;
		PLAYER_INFO[playerid][v4vw] = mundo;
		PLAYER_INFO[playerid][v4Traba] 	= traba;
		alarma[autos4[playerid]] = 0;

		VehicleFuel[autos4[playerid]] = gas;
		PLAYER_INFO[playerid][v4Gas] = gas;
		format(PLAYER_INFO[playerid][v4patente] ,40,pat);
		PLAYER_INFO[playerid][vID4] = slots;

		new Query[200];
 		mysql_format(handle_db, Query, sizeof(Query), "UPDATE p_vehicles SET `Propietario`='%d',`Slot`='4' WHERE `id`='%d' ",PLAYER_INFO[playerid][pID],slots);
		mysql_tquery(handle_db, Query);
		resetventa(playerid);
		return 1;
	}
	else SendClientMessage(VEHPLAYER[playerid][IDVEN], -1, "Este jugador no puede tener más vehiculos.");
	return 1;

}
//
Remove_SVEHICLE(playerid,x)
{


    if(x == 1) {
        //

        ABBVEHICLE_PLAYER(VEHPLAYER[playerid][IDU],autos[playerid],VEHPLAYER[playerid][GASOLINA],VEHPLAYER[playerid][MODELO],VEHPLAYER[playerid][TRABA],VEHPLAYER[playerid][ALARMA],
		VEHPLAYER[playerid][INTERIOR],VEHPLAYER[playerid][SEGURO],VEHPLAYER[playerid][MUNDO],VEHPLAYER[playerid][PRECIO],
		VEHPLAYER[playerid][MONEDA],VEHPLAYER[playerid][PLACA],VEHPLAYER[playerid][XAV],VEHPLAYER[playerid][YAV],VEHPLAYER[playerid][ZAV],VEHPLAYER[playerid][COLOR1],VEHPLAYER[playerid][COLOR2],VEHPLAYER[playerid][SQL]);
		//

	    ContadorLlenarGaso[autos[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo] = 0;
		PLAYER_INFO[playerid][vTraba] = 0;
		PLAYER_INFO[playerid][vAlarma] = 0;
		PLAYER_INFO[playerid][vinterior] = 0;
		PLAYER_INFO[playerid][vSeguro] = 0;
		PLAYER_INFO[playerid][vAAlarma] = 0;
		PLAYER_INFO[playerid][vvw] = 0;
		PLAYER_INFO[playerid][vPrecio] = 0;
		PLAYER_INFO[playerid][vID1] = 0;

		autos[playerid] = 0;
		autosSpawned[playerid][0] = false;
		RELOAD_TD(playerid);
    	RELOAD_TD(VEHPLAYER[playerid][IDU]);

    }
    if(x == 2) {
    	ABBVEHICLE_PLAYER(VEHPLAYER[playerid][IDU],autos2[playerid],VEHPLAYER[playerid][GASOLINA],VEHPLAYER[playerid][MODELO],VEHPLAYER[playerid][TRABA],VEHPLAYER[playerid][ALARMA],
		VEHPLAYER[playerid][INTERIOR],VEHPLAYER[playerid][SEGURO],VEHPLAYER[playerid][MUNDO],VEHPLAYER[playerid][PRECIO],
		VEHPLAYER[playerid][MONEDA],VEHPLAYER[playerid][PLACA],VEHPLAYER[playerid][XAV],VEHPLAYER[playerid][YAV],VEHPLAYER[playerid][ZAV],VEHPLAYER[playerid][COLOR1],VEHPLAYER[playerid][COLOR2],VEHPLAYER[playerid][SQL]);
        ContadorLlenarGaso[autos2[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo2] = 0;
		PLAYER_INFO[playerid][v2Traba] = 0;
		PLAYER_INFO[playerid][v2Alarma] = 0;
		PLAYER_INFO[playerid][v2interior] = 0;
		PLAYER_INFO[playerid][vSeguro2] = 0;
		PLAYER_INFO[playerid][vAAlarma2] = 0;
		PLAYER_INFO[playerid][v2vw] = 0;
		PLAYER_INFO[playerid][v2Precio] = 0;
		PLAYER_INFO[playerid][vID2] = 0;
		autos2[playerid] = 0;
		autosSpawned[playerid][1] = false;
		RELOAD_TD(playerid);
    	RELOAD_TD(VEHPLAYER[playerid][IDU]);
    }
    if(x == 3) {
    	ABBVEHICLE_PLAYER(VEHPLAYER[playerid][IDU],autos3[playerid],VEHPLAYER[playerid][GASOLINA],VEHPLAYER[playerid][MODELO],VEHPLAYER[playerid][TRABA],VEHPLAYER[playerid][ALARMA],
		VEHPLAYER[playerid][INTERIOR],VEHPLAYER[playerid][SEGURO],VEHPLAYER[playerid][MUNDO],VEHPLAYER[playerid][PRECIO],
		VEHPLAYER[playerid][MONEDA],VEHPLAYER[playerid][PLACA],VEHPLAYER[playerid][XAV],VEHPLAYER[playerid][YAV],VEHPLAYER[playerid][ZAV],VEHPLAYER[playerid][COLOR1],VEHPLAYER[playerid][COLOR2],VEHPLAYER[playerid][SQL]);
		//
		ContadorLlenarGaso[autos3[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo3] = 0;
		PLAYER_INFO[playerid][v3Traba] = 0;
		PLAYER_INFO[playerid][v3Alarma] = 0;
		PLAYER_INFO[playerid][v3interior] = 0;
		PLAYER_INFO[playerid][vSeguro3] = 0;
		PLAYER_INFO[playerid][vAAlarma3] = 0;
		PLAYER_INFO[playerid][v3vw] = 0;
		PLAYER_INFO[playerid][v3Precio] = 0;
		PLAYER_INFO[playerid][vID3] = 0;
		autosSpawned[playerid][2] = false;

		autos3[playerid] = 0;
		RELOAD_TD(playerid);
    	RELOAD_TD(VEHPLAYER[playerid][IDU]);
    }
	if(x == 4)
	{

	    ABBVEHICLE_PLAYER(VEHPLAYER[playerid][IDU],autos4[playerid],VEHPLAYER[playerid][GASOLINA],VEHPLAYER[playerid][MODELO],VEHPLAYER[playerid][TRABA],VEHPLAYER[playerid][ALARMA],
		VEHPLAYER[playerid][INTERIOR],VEHPLAYER[playerid][SEGURO],VEHPLAYER[playerid][MUNDO],VEHPLAYER[playerid][PRECIO],
		VEHPLAYER[playerid][MONEDA],VEHPLAYER[playerid][PLACA],VEHPLAYER[playerid][XAV],VEHPLAYER[playerid][YAV],VEHPLAYER[playerid][ZAV],VEHPLAYER[playerid][COLOR1],VEHPLAYER[playerid][COLOR2],VEHPLAYER[playerid][SQL]);
		//
	    ContadorLlenarGaso[autos4[playerid]] = 0;
		PLAYER_INFO[playerid][vModelo4] = 0;
		PLAYER_INFO[playerid][v4Traba] = 0;
		PLAYER_INFO[playerid][v4Alarma] = 0;
		PLAYER_INFO[playerid][v4interior] = 0;
		PLAYER_INFO[playerid][vSeguro4] = 0;
		PLAYER_INFO[playerid][vAAlarma4] = 0;
		PLAYER_INFO[playerid][v4vw] = 0;
		PLAYER_INFO[playerid][v4Precio] = 0;
		PLAYER_INFO[playerid][vID4] = 0;
		autosSpawned[playerid][3] = false;
		autos4[playerid] = 0;
	 	RELOAD_TD(playerid);
    	RELOAD_TD(VEHPLAYER[playerid][IDU]);
    }

}

AnimacionVenta(playerid)
{
	new actor;
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		actor = RoboTiendas[i][Actor];
  		if(IsValidDynamicActor(actor))
		{
	 		new Float:x,Float:y,Float:z;
	    	GetDynamicActorPos(actor, x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,10.0,x,y,z))
			{
			    new vw = GetDynamicActorVirtualWorld(actor);
			    if(vw == GetPlayerVirtualWorld(playerid))
			    {
					if(RoboTiendas[i][TiendaRobada] == 0)
					{
						ApplyDynamicActorAnimation(actor,"BAR","Barserve_give", 4.000000, 0, 0, 0, 1, 0);
					}
				}
			}
		}
	}
}

CanDoAnims(playerid)
{
    if(PLAYER_TEMP[playerid][VariableCaido] == 1) return 1;
	if(PLAYER_INFO[playerid][pCama] > 0) return 1;
	if(Forzando[playerid] == 1) return 1;
	if(PLAYER_INFO[playerid][pCama] > 0) return 1;
	if(EnClub[playerid] > 0) return 1;
	if(Muriendo[playerid] == 1) return 1;
	if((PLAYER_TIMES[playerid][Consumible] - gettime()) > 0) return 1;
	if(PLAYER_INFO[playerid][Agonizando] != 0) return 1;
	if(Esposando[playerid] == 2) return 1;
	if(recogiendo[playerid] > 0) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(GetPVarInt(playerid,"IsFrozen") == 0) return 1;
	return 0;
}
DarTrabajo(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1178.1359,-1361.3021,14.2302))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas ser al menos nivel 2 para aprender el trabajo de médico.");
		if(PLAYER_INFO[playerid][pDinero] < 4000) return SendClientMessage(playerid,-1,"Necesitas tener {f21111}$4000{FFFFFF} para pertenecer al equipo médico.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000\n","Aceptar","Cancelar");
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000\n","Aceptar","Cancelar");
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2122.9236,-2275.1238,20.6719))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Para trabajar de armero necesitas nivel 3 como mínimo.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Armero || PLAYER_INFO[playerid][pTrabajo2] == T_Armero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Armero,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Armero,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, -65.0107,-340.5569,5.7070))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Camionero || PLAYER_INFO[playerid][pTrabajo2] == T_Camionero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Camionero,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Camionero,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2226.2988,-1718.7993,13.5236))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Guardaespaldas || PLAYER_INFO[playerid][pTrabajo2] == T_Guardaespaldas) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Guardaespaldas,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Guardaespaldas,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2583.8274,1644.3837,1087.5602) && GetPlayerInterior(playerid) == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pNivelCamionero] < 3) return SendClientMessage(playerid,-1,"Para conseguir este trabajo necesitas habilidad de camionero. (nivel 3 o más)");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Transportista || PLAYER_INFO[playerid][pTrabajo2] == T_Transportista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Transportista,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Transportista,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-177.6093,-1549.4420,6.3284))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Basurero || PLAYER_INFO[playerid][pTrabajo2] == T_Basurero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Basurero,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Basurero,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-2024.7489,-113.9102,1038.8187))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Taxista || PLAYER_INFO[playerid][pTrabajo2] == T_Taxista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Taxista,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Taxista,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 900.4680,-1193.4021,16.9832))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Mecanico || PLAYER_INFO[playerid][pTrabajo2] == T_Mecanico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Mecanico,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Mecanico,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -2181.3860,714.7617,53.8915))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Criminal || PLAYER_INFO[playerid][pTrabajo2] == T_Criminal) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pNivel] <= 3) return  SendClientMessage(playerid, -1, "Necesitas ser {FF3300}nivel 4{FFFFFF} para conseguir este trabajo.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Criminal,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Criminal,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
    }
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 958.2482,-54.3517,1001.1172))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Prostituta || PLAYER_INFO[playerid][pTrabajo2] == T_Prostituta) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Prostituta,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Prostituta,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -242.4498,-236.5014,2.4297))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehiculo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
        if(PLAYER_INFO[playerid][pTrabajo] == T_Trailero || PLAYER_INFO[playerid][pTrabajo2] == T_Trailero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Trailero,0);
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Trailero,1);
		else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
	}
	return 1;
}

GetMedicalWorking()
{
	new count = 0;
	foreach(new i : Player)
	{
	    if(JugadorLogeado[i] > 0)
		{
	        if(RopaMedi[i] == 1)	count ++;
	    }
	}
	return count;
}
darAfinidad(playerid,value)
{
	new slutName[20],rand,AfinidadTotal,DineroObjeto,line[256],randDineroB = random(3),TiempoDinero,string[128];
	if(PLAYER_TIMES[playerid][TiempoCLUB] > gettime()) return 1;
	if(PLAYER_INFO[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"Te quedaste sin dinero.");
	switch(value)
	{
		case 1: { PLAYER_INFO[playerid][pAfinidad1] ++; slutName = "Gatubela"; rand = random(sizeof(DineroSpawn1)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad1]/3; }
		case 2: { PLAYER_INFO[playerid][pAfinidad2] ++; slutName = "Bailarina ardiente"; rand = random(sizeof(DineroSpawn2)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad2]/3; }
		case 3: { PLAYER_INFO[playerid][pAfinidad3] ++; slutName = "Gordita sensual"; rand = random(sizeof(DineroSpawn3)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad3]/3; }
		case 4: { PLAYER_INFO[playerid][pAfinidad4] ++; slutName = "Poli-Bailarina"; rand = random(sizeof(DineroSpawn4)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad4]/3; }
		case 5: { PLAYER_INFO[playerid][pAfinidad5] ++; slutName = "Colegiala"; rand = random(sizeof(DineroSpawn5)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad5]/3; }
		case 6: { PLAYER_INFO[playerid][pAfinidad6] ++; slutName = "Chocolatita"; rand = random(sizeof(DineroSpawn6)); AfinidadTotal = PLAYER_INFO[playerid][pAfinidad6]/3; }
	}
	TextDrawShowForPlayer(playerid, Cuadroputi);
	TextDrawShowForPlayer(playerid, Cuadroputi1);
	TextDrawShowForPlayer(playerid, PuticlubMedia);
	TextDrawShowForPlayer(playerid, PuticlubAlta);
	TextDrawShowForPlayer(playerid, FlechasArribaPuti);
	TextDrawShowForPlayer(playerid, FlechasArribaPuti2);
	new afinidad_completa[128];
	format(afinidad_completa,sizeof(afinidad_completa),"Afinidad con %s",slutName);
	PlayerTextDrawSetString(playerid, AfinidadconX[playerid], afinidad_completa);
	PlayerTextDrawShow(playerid, AfinidadconX[playerid]);
	PlayerTextDrawShow(playerid, LineasPutiNivel[playerid]);
 	for(new a=0;a<AfinidadTotal;a++)
	{
		if(a < 30) format(line,sizeof(line),"%s-",line);
		else format(line,sizeof(line),"------------------------------");
	}
	DineroTirado[playerid][value] ++;
	PlayerTextDrawSetString(playerid,Radly[playerid],line);
	PlayerTextDrawShow(playerid, Radly[playerid]);
	PLAYER_TIMES[playerid][TiempoCLUB] = gettime() + 2;

	QuitarDinero(playerid, 500);
	KillTimer(TimerDineroP[playerid]);
	TimerDineroP[playerid] = SetTimerEx("CerrarAviso",4000,false,"d",playerid);
	SetTimerEx("ClearAnim",2000,false,"d",playerid);
	ApplyAnimation(playerid,"STRIP","PUN_CASH",4.5,0,5,1,2000,0);
	format(string,sizeof(string),"arrojó dinero a %s.",slutName);
	AccionesRol(playerid,string,20);
	switch(value)
	{
		case 1: rand = random(sizeof(DineroSpawn1)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn1[rand][0], DineroSpawn1[rand][1], DineroSpawn1[rand][2], -1, -1, -1, 10.0);
		case 2: rand = random(sizeof(DineroSpawn2)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn2[rand][0], DineroSpawn2[rand][1], DineroSpawn2[rand][2], -1, -1, -1, 10.0);
		case 3: rand = random(sizeof(DineroSpawn3)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn3[rand][0], DineroSpawn3[rand][1], DineroSpawn3[rand][2], -1, -1, -1, 10.0);
		case 4: rand = random(sizeof(DineroSpawn4)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn4[rand][0], DineroSpawn4[rand][1], DineroSpawn4[rand][2], -1, -1, -1, 10.0);
		case 5: rand = random(sizeof(DineroSpawn5)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn5[rand][0], DineroSpawn5[rand][1], DineroSpawn5[rand][2], -1, -1, -1, 10.0);
		case 6: rand = random(sizeof(DineroSpawn6)), DineroObjeto = CreateDynamicPickup(1212, 23, DineroSpawn6[rand][0], DineroSpawn6[rand][1], DineroSpawn6[rand][2], -1, -1, -1, 10.0);
	}
	switch(randDineroB)
	{
	    case 0: TiempoDinero = 3000;
	    case 1: TiempoDinero = 3500;
	    case 2: TiempoDinero = 4000;
	}
 	SetTimerEx("BorrarDinero",TiempoDinero,false,"d",DineroObjeto);
 	if(DineroTirado[playerid][value] > 30)
 	{
 	    DineroTirado[playerid][value] = 0;
 	    switch(value)
 	    {
 	        case 1: Bailarina1 = 1,SetActorVirtualWorld(Strips[2], playerid+999);
 	        case 2: Bailarina2 = 1,SetActorVirtualWorld(Strips[8], playerid+999);
 	        case 3: Bailarina3 = 1,SetActorVirtualWorld(Strips[4], playerid+999);
 	        case 4: Bailarina4 = 1,SetActorVirtualWorld(Strips[9], playerid+999);
 	        case 5: Bailarina5 = 1,SetActorVirtualWorld(Strips[7], playerid+999);
 	        case 6: Bailarina6 = 1,SetActorVirtualWorld(Strips[3], playerid+999);
 	    }
 	    CerrarAviso(playerid);
		new accion[256];
		format(accion,sizeof(accion),"%s lleva de la mano a %s en dirección a la sala privada.",slutName,PLAYER_INFO[playerid][Nickname]);
		ProxDetector(20, playerid, accion, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        LlevarClubPrivada(playerid,value);
        MostrarLuegoDe(playerid);
		PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
		SetPlayerVirtualWorld(playerid,playerid);
 	}
	return true;
}
HideSelector(playerid)
{
    PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[playerid][_selector_objet1], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[playerid][_selector_objet2], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[playerid][_selector_objet3], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[playerid][_selector_objet4], INVALID_TOY_ID);
	TextDrawHideForPlayer(playerid,BoxRobar),
	TextDrawHideForPlayer(playerid, EquisCerrar);
	TextDrawHideForPlayer(playerid,SeleccionaPuerta);
    PlayerTextDrawHide(playerid, RoboCasas[playerid][0]),
	PlayerTextDrawHide(playerid, RoboCasas[playerid][1]);
	PlayerTextDrawHide(playerid, RoboCasas[playerid][2]),
	PlayerTextDrawHide(playerid, RoboCasas[playerid][3]);
	PlayerTextDrawHide(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ]);
	PlayerTextDrawHide(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ]);
	PlayerTextDrawHide(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ]);
	PlayerTextDrawHide(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ]);
 	TextDrawHideForPlayer(playerid, PlayerBackGround[ _background ][ 0 ]);
    TextDrawHideForPlayer(playerid, PlayerBackGround[ _background ][ 1 ]);
	TextDrawHideForPlayer(playerid, PlayerBackGround[ _button_close ]);
	TextDrawHideForPlayer(playerid, PlayerBackGround[ _string ]);
	_Select_Status[playerid] = false;
	_Model_Status[playerid] = false;
}

CongelarPlayerID(id)
{
    TogglePlayerControllable(id, 0);
	SetPVarInt(id, "IsFrozen", 0);
}

stock ForzarCerraduraPosiciones(playerid)
{
    new Float:ladronx,Float:ladrony,Float:ladronz;
    GetPlayerPos(playerid,ladronx,ladrony,ladronz);
	TiempoForzarCerradura[playerid] = 7;
	HideSelector(playerid);
	CancelSelectTextDraw(playerid);
	new tiempo;
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
	    case 1: tiempo = 20;
		case 2: tiempo = 16;
   		default: tiempo = 12;
	}
    switch(CasaForzada[playerid])
    {
        case 1:
        {
			if(Forzada1 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[0])) DestroyDynamic3DTextLabel(EscaparLabel[0]);
				Forzada1 = 1;
				foreach(new i : Player)
				{
					AudioLadron(playerid,i,ladronx,ladrony,ladronz);
				}
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa1",minutos(35),false);
			    SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
 		case 2:
        {
			if(Forzada2 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[4])) DestroyDynamic3DTextLabel(EscaparLabel[4]);
				Forzada2 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
                AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado2",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa2",minutos(35),false);
			    SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 3:
        {
			if(Forzada3 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[1])) DestroyDynamic3DTextLabel(EscaparLabel[1]);
				Forzada3 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado3",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa3",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 4:
        {
			if(Forzada4 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[2])) DestroyDynamic3DTextLabel(EscaparLabel[2]);
				Forzada4 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado4",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa4",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 5:
        {
			if(Forzada5 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[5])) DestroyDynamic3DTextLabel(EscaparLabel[5]);
				Forzada5 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado5",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa5",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 6:
        {
			if(Forzada6 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[6])) DestroyDynamic3DTextLabel(EscaparLabel[6]);
				Forzada6 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado6",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa6",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 7:
        {
			if(Forzada7 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[8])) DestroyDynamic3DTextLabel(EscaparLabel[8]);
				Forzada7 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado7",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa7",minutos(35),false);
			    SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 8:
        {
			if(Forzada8 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[7])) DestroyDynamic3DTextLabel(EscaparLabel[7]);
				Forzada8 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado8",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa8",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 9:
        {
			if(Forzada9 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[9])) DestroyDynamic3DTextLabel(EscaparLabel[9]);
				Forzada9 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado9",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa9",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 10:
        {
			if(Forzada10 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[3])) DestroyDynamic3DTextLabel(EscaparLabel[3]);
				Forzada10 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado10",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa10",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 11:
        {
			if(Forzada11 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[10])) DestroyDynamic3DTextLabel(EscaparLabel[10]);
				Forzada11 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado11",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa11",minutos(35),false);
                SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
		case 12:
        {
			if(Forzada12 == 0)
			{
			    if(IsValidDynamic3DTextLabel(EscaparLabel[11])) DestroyDynamic3DTextLabel(EscaparLabel[11]);
				Forzada12 = 1;
				foreach(new i : Player) { AudioLadron(playerid,i,ladronx,ladrony,ladronz); }
				AnimacionRobar(playerid,tiempo);
				SetTimerEx("Forzado12",tiempo*1000,false,"d",playerid);
				SetTimer("CargarCasa12",minutos(35),false);
				SendClientMessageEx(playerid,-1,"Forzando cerradura, espera {f21111}%d segundos",tiempo);
			}
			else return SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
  	}
  	CasaForzada[playerid] = 0;
	return 1;
}

stock MostrarForzarCerradura(playerid,value)
{
    _Select_Status[ playerid ] = true;
    CasaForzada[playerid] = value;
	new vR = random(4);
	TextDrawShowForPlayer(playerid,BoxRobar);
	TextDrawShowForPlayer(playerid,SeleccionaPuerta);
	TextDrawShowForPlayer(playerid,EquisCerrar);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 100.000000);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 100.000000);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 100.000000);
	switch(vR)
	{
	    case 0: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);
	    case 1: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);
	    case 2: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);
	    case 3: PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
	}
	ForzarCerraduraID[playerid] = vR+1;
	PlayerTextDrawShow(playerid,RoboCasas[playerid][0]);
	PlayerTextDrawShow(playerid,RoboCasas[playerid][1]);
	PlayerTextDrawShow(playerid,RoboCasas[playerid][2]);
	PlayerTextDrawShow(playerid,RoboCasas[playerid][3]);
	SelectTextDraw(playerid,0x272828FF);
}
CrearTextdrawPlayer(playerid)
{
	PlayerTextdrawInfo[playerid][NotiConnect][0] = CreatePlayerTextDraw(playerid,77.500000, 292.833282, "Se ha conectado");
	PlayerTextDrawLetterSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 0.223000, 0.829994);
	PlayerTextDrawAlignment(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 1);
	PlayerTextDrawColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 16711935);
	PlayerTextDrawSetShadow(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 0);
	PlayerTextDrawSetOutline(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 1);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 51);
	PlayerTextDrawFont(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 1);
	PlayerTextDrawSetProportional(playerid,PlayerTextdrawInfo[playerid][NotiConnect][0], 1);

	PlayerTextdrawInfo[playerid][NotiConnect][1] = CreatePlayerTextDraw(playerid,38.500000, 268.333129, "Dared_Kuznetsov");
	PlayerTextDrawLetterSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 0.296999, 1.973332);
	PlayerTextDrawAlignment(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 1);
	PlayerTextDrawColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], -1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 0);
	PlayerTextDrawSetOutline(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 1);
	PlayerTextDrawBackgroundColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 51);
	PlayerTextDrawFont(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 1);
	PlayerTextDrawSetProportional(playerid,PlayerTextdrawInfo[playerid][NotiConnect][1], 1);

	PlayerTextdrawInfo[playerid][NotiConnect][2] = CreatePlayerTextDraw(playerid,5.500000, 272.416687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 28.000000, 31.499959);
	PlayerTextDrawAlignment(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 1);
	PlayerTextDrawColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], -1);
	PlayerTextDrawSetShadow(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 0);
	PlayerTextDrawSetOutline(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 0);
	PlayerTextDrawFont(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 5);
	PlayerTextDrawSetPreviewModel(playerid,PlayerTextdrawInfo[playerid][NotiConnect][2], 108);

	PlayerTextdrawInfo[playerid][NotiConnect][3] = CreatePlayerTextDraw(playerid,152.500000, 272.750000, "usebox");
	PlayerTextDrawLetterSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 0.000000, 3.492588);
	PlayerTextDrawTextSize(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 1.500000, 0.000000);
	PlayerTextDrawAlignment(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 1);
	PlayerTextDrawColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 0);
	PlayerTextDrawUseBox(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], true);
	PlayerTextDrawBoxColor(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 102);
	PlayerTextDrawSetShadow(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 0);
	PlayerTextDrawSetOutline(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 0);
	PlayerTextDrawFont(playerid,PlayerTextdrawInfo[playerid][NotiConnect][3], 0);

	TAXIMET2[playerid] = CreatePlayerTextDraw(playerid, 499.000000, 407.000000, "$0");
	PlayerTextDrawLetterSize(playerid, TAXIMET2[playerid], 0.500000, 1.600000);
	PlayerTextDrawTextSize(playerid, TAXIMET2[playerid], 900.000000, 74.000000);
	PlayerTextDrawAlignment(playerid, TAXIMET2[playerid], 2);
	PlayerTextDrawColor(playerid, TAXIMET2[playerid], 0xFFFF00CC);
	PlayerTextDrawUseBox(playerid, TAXIMET2[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TAXIMET2[playerid], 0x00000099);
	PlayerTextDrawSetShadow(playerid, TAXIMET2[playerid], 1);
	PlayerTextDrawSetOutline(playerid, TAXIMET2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TAXIMET2[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, TAXIMET2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TAXIMET2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TAXIMET2[playerid], 0);

	RoboCasas[playerid][0] = CreatePlayerTextDraw(playerid, 209.000000, 170.000000, "sd");
	PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][0], 0.200000, 8.000002);
	PlayerTextDrawTextSize(playerid, RoboCasas[playerid][0], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, RoboCasas[playerid][0], 2);
	PlayerTextDrawColor(playerid, RoboCasas[playerid][0], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, RoboCasas[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][0], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][0], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, RoboCasas[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][0], 1);
	PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][0], 1498);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][0], 0.000000, 0.000000, 0.000000, 100.000000);

	RoboCasas[playerid][1] = CreatePlayerTextDraw(playerid, 298.000000, 170.000000, "sd");
	PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][1], 0.200000, 8.000002);
	PlayerTextDrawTextSize(playerid, RoboCasas[playerid][1], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, RoboCasas[playerid][1], 2);
	PlayerTextDrawColor(playerid, RoboCasas[playerid][1], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, RoboCasas[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][1], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][1], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, RoboCasas[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][1], 1);
	PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][1], 1498);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][1], 0.000000, 0.000000, 0.000000, 100.000000);

	RoboCasas[playerid][2] = CreatePlayerTextDraw(playerid, 209.000000, 265.799988, "sd");
	PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][2], 0.200000, 8.000002);
	PlayerTextDrawTextSize(playerid, RoboCasas[playerid][2], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, RoboCasas[playerid][2], 2);
	PlayerTextDrawColor(playerid, RoboCasas[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, RoboCasas[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][2], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][2], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, RoboCasas[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][2], 1);
	PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][2], 1498);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);

	RoboCasas[playerid][3] = CreatePlayerTextDraw(playerid, 298.000000, 265.799988, "sd");
	PlayerTextDrawLetterSize(playerid, RoboCasas[playerid][3], 0.270000, 8.800002);
	PlayerTextDrawTextSize(playerid, RoboCasas[playerid][3], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, RoboCasas[playerid][3], 2);
	PlayerTextDrawColor(playerid, RoboCasas[playerid][3], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, RoboCasas[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, RoboCasas[playerid][3], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, RoboCasas[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, RoboCasas[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, RoboCasas[playerid][3], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, RoboCasas[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, RoboCasas[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, RoboCasas[playerid][3], 1);
	PlayerTextDrawSetPreviewModel(playerid, RoboCasas[playerid][3], 1498);
	PlayerTextDrawSetPreviewRot(playerid, RoboCasas[playerid][3], 0.000000, 0.000000, 0.000000, 100.000000);

	LineasPutiNivel[playerid] = CreatePlayerTextDraw(playerid,228.000000, 386.000000, "------------------------------");
	PlayerTextDrawLetterSize(playerid, LineasPutiNivel[playerid], 0.439999, 2.299999);
	PlayerTextDrawTextSize(playerid, LineasPutiNivel[playerid], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, LineasPutiNivel[playerid], 0);
	PlayerTextDrawColor(playerid, LineasPutiNivel[playerid], 0x5C5C5CFF);
	PlayerTextDrawUseBox(playerid, LineasPutiNivel[playerid], 0);
	PlayerTextDrawBoxColor(playerid, LineasPutiNivel[playerid], 0x80808080);
	PlayerTextDrawSetShadow(playerid, LineasPutiNivel[playerid], 1);
	PlayerTextDrawSetOutline(playerid, LineasPutiNivel[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, LineasPutiNivel[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, LineasPutiNivel[playerid], 1);
	PlayerTextDrawSetProportional(playerid, LineasPutiNivel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, LineasPutiNivel[playerid], 0);

	AfinidadconX[playerid] = CreatePlayerTextDraw(playerid, 214.000000, 368.000000, "Afinidad con Colegiala");
	PlayerTextDrawLetterSize(playerid, AfinidadconX[playerid], 0.440000, 1.400000);
	PlayerTextDrawTextSize(playerid, AfinidadconX[playerid], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, AfinidadconX[playerid], 0);
	PlayerTextDrawColor(playerid, AfinidadconX[playerid], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, AfinidadconX[playerid], 0);
	PlayerTextDrawBoxColor(playerid, AfinidadconX[playerid], 0x80808080);
	PlayerTextDrawSetShadow(playerid, AfinidadconX[playerid], 1);
	PlayerTextDrawSetOutline(playerid, AfinidadconX[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, AfinidadconX[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, AfinidadconX[playerid], 0);
	PlayerTextDrawSetProportional(playerid, AfinidadconX[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AfinidadconX[playerid], 0);

	Radly[playerid] = CreatePlayerTextDraw(playerid, 228.000000, 386.000000, "-");
	PlayerTextDrawLetterSize(playerid, Radly[playerid], 0.440000, 2.300000);
	PlayerTextDrawTextSize(playerid, Radly[playerid], 1280.000000, 1280.000000);
	PlayerTextDrawAlignment(playerid, Radly[playerid], 0);
	PlayerTextDrawColor(playerid, Radly[playerid], 0xFF00FFFF);
	PlayerTextDrawUseBox(playerid, Radly[playerid], 0);
	PlayerTextDrawBoxColor(playerid, Radly[playerid], 0x80808080);
	PlayerTextDrawSetShadow(playerid, Radly[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Radly[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, Radly[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, Radly[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Radly[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Radly[playerid], 0);

	ContadorVelocimetro[playerid][0] = CreatePlayerTextDraw(playerid, 592.000000, 409.000000, "221 KM/H");
	PlayerTextDrawFont(playerid, ContadorVelocimetro[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, ContadorVelocimetro[playerid][0], 0.170833, 1.200000);
	PlayerTextDrawTextSize(playerid, ContadorVelocimetro[playerid][0], 645.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ContadorVelocimetro[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, ContadorVelocimetro[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, ContadorVelocimetro[playerid][0], 1);
	PlayerTextDrawColor(playerid, ContadorVelocimetro[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, ContadorVelocimetro[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, ContadorVelocimetro[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, ContadorVelocimetro[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, ContadorVelocimetro[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ContadorVelocimetro[playerid][0], 0);

	ContadorVelocimetro[playerid][1] = CreatePlayerTextDraw(playerid, 592.000000, 428.000000, "100/210 L");
	PlayerTextDrawFont(playerid, ContadorVelocimetro[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, ContadorVelocimetro[playerid][1], 0.170833, 1.200000);
	PlayerTextDrawTextSize(playerid, ContadorVelocimetro[playerid][1], 645.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ContadorVelocimetro[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, ContadorVelocimetro[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, ContadorVelocimetro[playerid][1], 1);
	PlayerTextDrawColor(playerid, ContadorVelocimetro[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, ContadorVelocimetro[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, ContadorVelocimetro[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, ContadorVelocimetro[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, ContadorVelocimetro[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ContadorVelocimetro[playerid][1], 0);
	
	F_0[playerid] = CreatePlayerTextDraw(playerid, 612.500000, 421.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, F_0[playerid], 5);
	PlayerTextDrawLetterSize(playerid, F_0[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, F_0[playerid], 35.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, F_0[playerid], 0);
	PlayerTextDrawSetShadow(playerid, F_0[playerid], 0);
	PlayerTextDrawAlignment(playerid, F_0[playerid], 1);
	PlayerTextDrawColor(playerid, F_0[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, F_0[playerid], 0);
	PlayerTextDrawBoxColor(playerid, F_0[playerid], 255);
	PlayerTextDrawUseBox(playerid, F_0[playerid], 0);
	PlayerTextDrawSetProportional(playerid, F_0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, F_0[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, F_0[playerid], 1614);
	PlayerTextDrawSetPreviewRot(playerid, F_0[playerid], 0.000000, 0.000000, 72.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, F_0[playerid], 1, 1);

	F_1[playerid] = CreatePlayerTextDraw(playerid, 568.400024, 427.000000, "ld_dual:black");
	PlayerTextDrawFont(playerid, F_1[playerid], 4);
	PlayerTextDrawLetterSize(playerid, F_1[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, F_1[playerid], 60.000000, 15.000000);
	PlayerTextDrawSetOutline(playerid, F_1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, F_1[playerid], 0);
	PlayerTextDrawAlignment(playerid, F_1[playerid], 1);
	PlayerTextDrawColor(playerid, F_1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, F_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, F_1[playerid], 50);
	PlayerTextDrawUseBox(playerid, F_1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, F_1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, F_1[playerid], 0);

	F_2[playerid] = CreatePlayerTextDraw(playerid, 552.000000, 415.700012, "Preview_Model");
	PlayerTextDrawFont(playerid, F_2[playerid], 5);
	PlayerTextDrawLetterSize(playerid, F_2[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, F_2[playerid], 35.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, F_2[playerid], 0);
	PlayerTextDrawSetShadow(playerid, F_2[playerid], 0);
	PlayerTextDrawAlignment(playerid, F_2[playerid], 1);
	PlayerTextDrawColor(playerid, F_2[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, F_2[playerid], 0);
	PlayerTextDrawBoxColor(playerid, F_2[playerid], 255);
	PlayerTextDrawUseBox(playerid, F_2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, F_2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, F_2[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, F_2[playerid], 1614);
	PlayerTextDrawSetPreviewRot(playerid, F_2[playerid], 126.000000, 230.000000, 226.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, F_2[playerid], 1, 1);

	FUELICON[playerid] = CreatePlayerTextDraw(playerid, 566.000000, 426.700012, "Preview_Model");
	PlayerTextDrawFont(playerid, FUELICON[playerid], 5);
	PlayerTextDrawLetterSize(playerid, FUELICON[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, FUELICON[playerid], 17.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, FUELICON[playerid], 0);
	PlayerTextDrawSetShadow(playerid, FUELICON[playerid], 0);
	PlayerTextDrawAlignment(playerid, FUELICON[playerid], 1);
	PlayerTextDrawColor(playerid, FUELICON[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, FUELICON[playerid], 0);
	PlayerTextDrawBoxColor(playerid, FUELICON[playerid], 255);
	PlayerTextDrawUseBox(playerid, FUELICON[playerid], 0);
	PlayerTextDrawSetProportional(playerid, FUELICON[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FUELICON[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, FUELICON[playerid], 1650);
	PlayerTextDrawSetPreviewRot(playerid, FUELICON[playerid], 2.000000, 0.000000, 1.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, FUELICON[playerid], 1, 1);

	H_0[playerid] = CreatePlayerTextDraw(playerid, 613.000000, 396.200012, "Preview_Model");
	PlayerTextDrawFont(playerid, H_0[playerid], 5);
	PlayerTextDrawLetterSize(playerid, H_0[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, H_0[playerid], 35.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, H_0[playerid], 0);
	PlayerTextDrawSetShadow(playerid, H_0[playerid], 0);
	PlayerTextDrawAlignment(playerid, H_0[playerid], 1);
	PlayerTextDrawColor(playerid, H_0[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, H_0[playerid], 0);
	PlayerTextDrawBoxColor(playerid, H_0[playerid], 255);
	PlayerTextDrawUseBox(playerid, H_0[playerid], 0);
	PlayerTextDrawSetProportional(playerid, H_0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, H_0[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, H_0[playerid], 1614);
	PlayerTextDrawSetPreviewRot(playerid, H_0[playerid], 0.000000, 180.000000, 86.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, H_0[playerid], 1, 1);

	S_1[playerid] = CreatePlayerTextDraw(playerid, 569.299987, 407.700012, "ld_dual:black");
	PlayerTextDrawFont(playerid, S_1[playerid], 4);
	PlayerTextDrawLetterSize(playerid, S_1[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, S_1[playerid], 60.000000, 15.000000);
	PlayerTextDrawSetOutline(playerid, S_1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, S_1[playerid], 0);
	PlayerTextDrawAlignment(playerid, S_1[playerid], 1);
	PlayerTextDrawColor(playerid, S_1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, S_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, S_1[playerid], 50);
	PlayerTextDrawUseBox(playerid, S_1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, S_1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, S_1[playerid], 0);

	S_2[playerid] = CreatePlayerTextDraw(playerid, 552.500000, 402.200012, "Preview_Model");
	PlayerTextDrawFont(playerid, S_2[playerid], 5);
	PlayerTextDrawLetterSize(playerid, S_2[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, S_2[playerid], 35.000000, 50.000000);
	PlayerTextDrawSetOutline(playerid, S_2[playerid], 0);
	PlayerTextDrawSetShadow(playerid, S_2[playerid], 0);
	PlayerTextDrawAlignment(playerid, S_2[playerid], 1);
	PlayerTextDrawColor(playerid, S_2[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, S_2[playerid], 0);
	PlayerTextDrawBoxColor(playerid, S_2[playerid], 255);
	PlayerTextDrawUseBox(playerid, S_2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, S_2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, S_2[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, S_2[playerid], 1614);
	PlayerTextDrawSetPreviewRot(playerid, S_2[playerid], -184.000000, 180.000000, -104.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, S_2[playerid], 1, 1);

	SPEEDICON[playerid] = CreatePlayerTextDraw(playerid, 570.000000, 410.000000, "HUD:radar_impound");
	PlayerTextDrawFont(playerid, SPEEDICON[playerid], 4);
	PlayerTextDrawLetterSize(playerid, SPEEDICON[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SPEEDICON[playerid], 10.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, SPEEDICON[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SPEEDICON[playerid], 0);
	PlayerTextDrawAlignment(playerid, SPEEDICON[playerid], 1);
	PlayerTextDrawColor(playerid, SPEEDICON[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, SPEEDICON[playerid], 255);
	PlayerTextDrawBoxColor(playerid, SPEEDICON[playerid], 50);
	PlayerTextDrawUseBox(playerid, SPEEDICON[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SPEEDICON[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, SPEEDICON[playerid], 0);

	PlayerObjetTextDraw[ playerid ][ _selector_objet1 ] = CreatePlayerTextDraw(playerid, 209.000000, 170.000000, "sd"); // Selector 1
	PlayerTextDrawLetterSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0.270000, 8.800002);
	PlayerTextDrawTextSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 2);
	PlayerTextDrawColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 1);
	PlayerTextDrawBoxColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0);
	PlayerTextDrawSetOutline(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 5);
	PlayerTextDrawSetProportional(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 1);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 18962);
	PlayerTextDrawSetPreviewRot(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet1 ], 80.000000, 0.000000, 90.000000, 1.000000); // Selector 2

	PlayerObjetTextDraw[ playerid ][ _selector_objet2 ] = CreatePlayerTextDraw(playerid, 298.000000, 170.000000, "sd");
	PlayerTextDrawLetterSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0.270000, 8.800002);
	PlayerTextDrawTextSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 2);
	PlayerTextDrawColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 1);
	PlayerTextDrawBoxColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0);
	PlayerTextDrawSetOutline(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 5);
	PlayerTextDrawSetProportional(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 1);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewRot(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet2 ], 0.000000, 0.000000, 0.000000, 1.000000); // Selector 3

	PlayerObjetTextDraw[ playerid ][ _selector_objet3 ] = CreatePlayerTextDraw(playerid, 209.000000, 265.799988, "sd");
	PlayerTextDrawLetterSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0.270000, 8.800002);
	PlayerTextDrawTextSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 2);
	PlayerTextDrawColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 1);
	PlayerTextDrawBoxColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0);
	PlayerTextDrawSetOutline(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 5);
	PlayerTextDrawSetProportional(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 1);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewRot(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet3 ], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerObjetTextDraw[ playerid ][ _selector_objet4 ] = CreatePlayerTextDraw(playerid, 298.000000, 265.799988, "sd"); // Selector 4
	PlayerTextDrawLetterSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0.270000, 8.800002);
	PlayerTextDrawTextSize(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 87.000000, 93.000000);
	PlayerTextDrawAlignment(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 2);
	PlayerTextDrawColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0xFFFFFFFF);
	PlayerTextDrawUseBox(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 1);
	PlayerTextDrawBoxColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0x000000FF);
	PlayerTextDrawSetShadow(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0);
	PlayerTextDrawSetOutline(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0x0B0B0B99);
	PlayerTextDrawFont(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 5);
	PlayerTextDrawSetProportional(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 1);
	PlayerTextDrawSetPreviewModel(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], INVALID_TOY_ID);
	PlayerTextDrawSetPreviewRot(playerid, PlayerObjetTextDraw[ playerid ][ _selector_objet4 ], 0.000000, 0.000000, 0.000000, 1.000000);

	TEXTO_VEHICULOS[playerid] = CreatePlayerTextDraw(playerid, 351.531433, 345.999938, "");
	PlayerTextDrawFont(playerid, TEXTO_VEHICULOS[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TEXTO_VEHICULOS[playerid], 0.241666, 1.799999);
	PlayerTextDrawTextSize(playerid, TEXTO_VEHICULOS[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TEXTO_VEHICULOS[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TEXTO_VEHICULOS[playerid], 0);
	PlayerTextDrawAlignment(playerid, TEXTO_VEHICULOS[playerid], 3);
	PlayerTextDrawColor(playerid, TEXTO_VEHICULOS[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TEXTO_VEHICULOS[playerid], 255);
	PlayerTextDrawBoxColor(playerid, TEXTO_VEHICULOS[playerid], 50);
	PlayerTextDrawUseBox(playerid, TEXTO_VEHICULOS[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TEXTO_VEHICULOS[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TEXTO_VEHICULOS[playerid], 0);

	return 1;
}
GetNivelEsta(Float:z)
{
    new floor = 0;
    if(z > 0.0000 && z < 12.027) floor = 1;
    if(z > 12.026 && z < 16.476) floor = 2;
    if(z > 16.475 && z < 21.041) floor = 3;
    if(z > 21.040 && z < 25.442) floor = 4;
    if(z > 25.441 && z < 29.523) floor = 5;
    if(z > 29.522 && z < 33.957) floor = 6;
    if(z > 33.956 && z < 38.106) floor = 7;
    if(z > 38.105 && z < 42.733) floor = 8;
    if(z > 42.732 && z < 46.774) floor = 9;
    if(z > 46.773) floor = 10;
    return floor;
}
PagoBasurero(playerid, nivel, ruta)
{
	switch(nivel)
	{
		case 1:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 1300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.300");
				}
				case 2:
				{
					DarDinero(playerid, 1300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.300");
				}
				case 3:
				{
					DarDinero(playerid, 1300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.300");
				}
				case 4:
				{
					DarDinero(playerid, 1300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.300");
				}
			}
		}
		case 2:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 1500);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.500");
				}
				case 2:
				{
					DarDinero(playerid, 1500);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.500");
				}
				case 3:
				{
					DarDinero(playerid, 1500);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.500");
				}
				case 4:
				{
					DarDinero(playerid, 1500);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.500");
				}
			}
		}
		case 3:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 1700);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.700");
				}
				case 2:
				{
					DarDinero(playerid, 1700);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.700");
				}
				case 3:
				{
					DarDinero(playerid, 1700);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.700");
				}
				case 4:
				{
					DarDinero(playerid, 1700);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.700");
				}
			}
		}
		case 4:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 1900);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.900");
				}
				case 2:
				{
					DarDinero(playerid, 1900);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.900");
				}
				case 3:
				{
					DarDinero(playerid, 1900);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.900");
				}
				case 4:
				{
					DarDinero(playerid, 1900);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$1.900");
				}
			}
		}
		case 5:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 2100);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.100");
				}
				case 2:
				{
					DarDinero(playerid, 2100);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.100");
				}
				case 3:
				{
					DarDinero(playerid, 2100);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.100");
				}
				case 4:
				{
					DarDinero(playerid, 2100);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.100");
				}
			}
		}
		case 6..9999:
		{
			switch(ruta)
			{
				case 1:
				{
					DarDinero(playerid, 2300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.300");
				}
				case 2:
				{
					DarDinero(playerid, 2300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.300");
				}
				case 3:
				{
					DarDinero(playerid, 2300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.300");
				}
				case 4:
				{
					DarDinero(playerid, 2300);
					SendClientMessage(Companero[playerid],-1,"Has terminado tu recorrido correctamente, has ganado {00FF00}$2.300");
				}
			}
		}
	}
	return 1;
}
DarHabilidadCamio(playerid, level)
{
	if(PLAYER_INFO[playerid][pNivelCamionero] == level && PLAYER_INFO[playerid][pExpCamionero] < 49)
	{
		if(PLAYER_INFO[playerid][pVIP] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0: { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1: { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2: { PLAYER_INFO[playerid][pExpCamionero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
	}
	else if(PLAYER_INFO[playerid][pNivelCamionero] == level && PLAYER_INFO[playerid][pExpCamionero] >= 49)
	{
		PLAYER_INFO[playerid][pNivelCamionero]++;
		PLAYER_INFO[playerid][pExpCamionero] = 0;
		SendClientMessage(playerid,-1,"Felicidades, Has aumentado tu nivel de camionero.");
	}
}

DarHabilidadCamio2(playerid)
{
	if(PLAYER_INFO[playerid][pNivelCamionero] == 6 && PLAYER_INFO[playerid][pExpCamionero] < 49)
	{
		if(PLAYER_INFO[playerid][pVIP] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0: { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1: { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2: { PLAYER_INFO[playerid][pExpCamionero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpCamionero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
	}
	else if(PLAYER_INFO[playerid][pNivelCamionero] == 6 && PLAYER_INFO[playerid][pExpCamionero] >= 49) SendClientMessage(playerid, -1, "Has llegado al máximo nivel de este trabajo.");
}
DarHabilidadBasurero(playerid, level)
{
	if(PLAYER_INFO[playerid][pNivelBasurero] == level && PLAYER_INFO[playerid][pExpBasurero] < 49)
	{
		if(PLAYER_INFO[playerid][pVIP] > 0)
        {
            new pago = random(3);
            switch (pago)
            {
                case 0:{ PLAYER_INFO[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 1:{ PLAYER_INFO[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
                case 2:{ PLAYER_INFO[playerid][pExpBasurero]+= 2; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 puntos de habilidad."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpBasurero]++; SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad."); }
	}
	else if(PLAYER_INFO[playerid][pNivelBasurero] == level && PLAYER_INFO[playerid][pExpBasurero] >= 49)
	{
		PLAYER_INFO[playerid][pNivelBasurero]++;
		PLAYER_INFO[playerid][pExpBasurero] = 0;
		SendClientMessage(playerid,-1,"Felicidades, Has aumentado tu nivel de basurero.");
	}
}

stock AutoRol2(playerid,const rol[])
{
	new string[160];
	format(string, sizeof(string), "  * %s %s *",PLAYER_INFO[playerid][Nickname], rol);
	ProxDetector(20.0, playerid, string,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}

stock GetGunObjectID(WeaponID)
{
    if (WeaponID < 0 || WeaponID > 64)
    {
        return 1575;
    }
    return GunObjectIDs[WeaponID];
}

stock SlotObjeto_T()
{
	Loop(i,MAX_OBJETOS_T,0)
	{
	    if(InfoObjeto_T[i][TipoOBJ] == 0 && !InfoObjeto_T[i][Posx]) return i;
	}
	return -1;
}

procesarCheckpointsBasurero(const playerid)
{
	new Float:puntos[][] =
	{
		// Ruta SF
		{-110.2728,-1169.3069,2.4092},
		{-103.7799,-1172.5127,3.5240},
		{-345.9767,-756.6649,30.8484},
		{-426.7870,-433.8864,17.8884},
		{-916.0715,-446.1450,29.7584},
		{-1904.3972,-567.3438,25.5184},
		{-2244.9705,-123.7534,36.0884},
		{-2245.8291,84.2427,35.9984},
		{-2166.9063,201.9160,35.9784},
		{-2033.2213,313.7436,35.9284},
		{-2013.7318,137.0096,28.3484},
		{-1813.1581,-122.9985,6.3384},
		{-1824.8383,-559.8033,17.1384},
		{-815.8467,-1021.9445,83.8480},
		{-44.1083,-1525.1487,2.2014},
		{-349.6644,-757.6539,29.0136},
		{-428.8095,-436.5871,16.6492},
		{-917.4271,-450.9999,27.6603},
		{-1904.0535,-572.3555,24.1474},
		{-2248.4912,-124.0376,34.8783},
		{-2248.7205,83.8178,34.8784},
		{-2167.4629,204.8546,34.8776},
		{-2033.6031,316.9929,34.7233},
		{-2010.0227,137.4623,27.2469},
		{-1813.6909,-119.8742,5.2043},
		{-1822.1787,-559.9365,15.9207},
		{-817.4674,-1018.3693,83.3079},
		{-43.7590,-1519.9025,1.5263},
		// Ruta LS - 1
		{990.8474,-1811.6334,14.2317},
		{991.5659,-1805.8092,14.0539},
		{1548.8268,-1879.8169,13.5469},
		{1548.8938,-1874.5441,13.3828},
		{2089.1584,-1908.3224,13.5469},
		{2084.0916,-1908.8611,13.3828},
		{2222.9968,-1793.5454,13.5625},
		{2218.6541,-1793.9825,13.1953},
		{2114.7368,-1607.7476,13.5625},
		{2115.4761,-1613.1133,13.3904},
		{1994.0798,-1681.3557,13.5469},
		{1999.2738,-1679.7145,13.3828},
		{1764.0529,-1724.7991,13.5469},
		{1765.4800,-1729.7675,13.3828},
		{1735.8999,-1589.8905,13.5455},
		{1738.8538,-1595.5604,13.3814},
		{1390.0305,-1581.1624,13.5469},
		{1393.0277,-1587.4966,13.3564},
		{1365.0758,-1155.3657,23.8660},
		{1360.2289,-1162.8208,23.7095},
		{1097.2964,-1133.7189,23.8281},
		{1098.3059,-1139.8910,23.6563},
		{1046.2882,-1304.1703,13.5469},
		{1051.4209,-1304.8677,13.3828},
		{679.1686,-1311.9562,13.6760},
		{679.4622,-1317.1431,13.5095},
		{483.6781,-1277.2889,15.6511},
		{487.7305,-1280.6522,15.5305},
		{345.4417,-1368.1273,14.3875},
		{344.1947,-1374.5900,14.2268},
		{197.3550,-1743.2972,4.5101},
		{195.3670,-1736.5179,4.3181},
		{390.4010,-1779.2229,5.5900},
		{388.9255,-1775.0706,5.3994},
		// Ruta LS - 2
		{183.3738,-1393.7588,47.3034},
		{188.6838,-1395.9762,47.2736},
		{350.3483,-1273.5121,53.7532},
		{353.9030,-1277.7860,53.8950},
		{680.5216,-1060.3474,49.4870},
		{686.0798,-1062.7533,49.6633},
		{873.2125,-863.1124,77.5146},
		{871.3945,-868.6337,77.5458},
		{1079.9196,-774.5426,107.9675},
		{1081.2075,-778.0049,107.7854},
		{918.6940,-680.4443,117.0033},
		{912.7013,-677.6242,116.8398},
		{810.9399,-792.6181,68.5974},
		{808.1866,-788.2479,68.7993},
		{272.8895,-1100.2932,81.7537},
		{266.5842,-1101.4108,81.7877},
		{339.2604,-1189.8682,76.4328},
		{343.5382,-1193.1310,76.5068},
		{549.9263,-1156.9595,54.1546},
		{554.6530,-1161.1757,54.4223},
		{326.4816,-1192.4799,76.1984},
		{322.6987,-1189.3054,76.3568},
		{179.2384,-1389.3564,47.9640},
		{175.0909,-1387.1046,48.6300},
		{-55.1223,-1594.4856,2.7740},
		{-78.5097,-1592.9054,2.6172},
		// Ruta LS - 3
		{259.6662,-1435.2172,13.5396},
		{263.6307,-1438.7028,13.7373},
		{715.6998,-1119.7213,17.9918},
		{721.1824,-1121.8177,18.2286},
		{1105.8407,-958.8027,42.3986},
		{1106.3229,-964.0125,42.6446},
		{1260.1581,-1106.3085,25.0804},
		{1254.5852,-1106.2231,25.2560},
		{1193.4933,-1498.0582,13.3828},
		{1188.3806,-1499.1213,13.5469},
		{1295.2137,-1839.4456,13.3828},
		{1289.6144,-1837.6057,13.5469},
		{1039.8508,-1670.3042,13.3828},
		{1045.2313,-1669.8091,13.5469},
		{932.7011,-1486.6115,13.3750},
		{932.4356,-1480.9509,13.5361},
		{855.2783,-1392.5234,13.3664},
		{857.4956,-1382.1349,13.7507},
		{483.1931,-1499.0760,20.3036},
		{478.3005,-1497.9749,20.4542},
		{656.1319,-1675.2115,14.2370},
		{655.2776,-1680.0502,14.4416},
		{807.8727,-1757.3798,13.3872},
		{802.7533,-1756.1191,13.5469},
		{107.0301,-1530.0708,6.4494},
		{108.2038,-1525.6523,7.0480}
	};
	for(new i = 0; i < sizeof(puntos); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, puntos[i][0], puntos[i][1], puntos[i][2]))
		{
			if(procesarCheckpoint(playerid)) return 1;
		}
	}
	return 0;
}
procesarCheckpoint(const playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && BASU(GetPlayerVehicleID(playerid)))
	{
		if(PLAYER_TEMP[playerid][pt_RolBasurero] == 1)
		{
			SendClientMessage(playerid, -1, "Tu trabajo es recolectar basura.");
			return 0;
		}
		SetTimerEx("PuntoB", 500, false, "d", Companero[playerid]);
		SendClientMessage(playerid, -1, "Espera a que tu compañero recolecte la basura.");
		DisablePlayerCheckpoint(playerid);
		PuntoBaX[playerid] = 0;
		return 1;
    }
    if(!IsPlayerInAnyVehicle(playerid) && RecorridoBasu[playerid] != 0)
    {
		if(PLAYER_TEMP[playerid][pt_RolBasurero] == 2)
		{
			SendClientMessage(playerid, -1, "Tu trabajo es manejar.");
			return 0;
		}
		recogiendo[playerid]++;
		DisablePlayerCheckpoint(playerid);
        PuntoBaX[playerid] = 0;
		switch(PLAYER_INFO[playerid][pNivelBasurero])
		{
			case 0..1:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 13000);
				SetTimerEx("Recolectar", 13000, false, "d", playerid);
			}
			case 2:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 11000);
				SetTimerEx("Recolectar", 11000, false, "d", playerid);
			}
			case 3:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 9000);
				SetTimerEx("Recolectar", 9000, false, "d", playerid);
			}
			case 4:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 7000);
				SetTimerEx("Recolectar", 7000, false, "d", playerid);
			}
			case 5:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 5000);
				SetTimerEx("Recolectar", 5000, false, "d", playerid);
			}
			case 6..999:
			{
				LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 3000);
				SetTimerEx("Recolectar", 2500, false, "d", playerid);
			}
		}
		TimerRecoleccion[playerid] = 5;
		return 1;
    }
	return 0;
}
public PrimerP(playerid)
{
   	new recorridobasurero = random(4);
	switch(recorridobasurero)
	{
		case 0:
		{
			RecorridoBasu[playerid] = 4;
			RecorridoBasu[Companero[playerid]] = 4;
			SetPlayerCheckpoint(playerid,259.6662,-1435.2172,13.5396,5.0);
			PuntoBaX[playerid] = 259.6662; PuntoBaY[playerid] = -1435.2172; PuntoBaZ[playerid] = 13.5396; PuntoBaA[playerid] = 5.0;
		}
		case 1:
		{
            RecorridoBasu[playerid] = 2;
			RecorridoBasu[Companero[playerid]] = 2;
			SetPlayerCheckpoint(playerid,-110.2728,-1169.3069,2.4092,5.0);
			PuntoBaX[playerid] = -110.2728; PuntoBaY[playerid] = -1169.3069; PuntoBaZ[playerid] = 2.4092; PuntoBaA[playerid] = 5.0;
		}
		case 2:
		{
            RecorridoBasu[playerid] = 3;
			RecorridoBasu[Companero[playerid]] = 3;
			SetPlayerCheckpoint(playerid,183.3738,-1393.7588,47.3034,5.0);
			PuntoBaX[playerid] = 183.3738; PuntoBaY[playerid] = -1393.7588; PuntoBaZ[playerid] = 47.3034; PuntoBaA[playerid] = 5.0;
		}
		case 3:
		{
            RecorridoBasu[playerid] = 4;
			RecorridoBasu[Companero[playerid]] = 4;
			SetPlayerCheckpoint(playerid,259.6662,-1435.2172,13.5396,5.0);
			PuntoBaX[playerid] = 259.6662; PuntoBaY[playerid] = -1435.2172; PuntoBaZ[playerid] = 13.5396; PuntoBaA[playerid] = 5.0;
		}
	}
	return 1;
}
public accionesProstitutas()
{
	if(Bailarina1 != 1)
	{
	    ProgresoProstituta[0] ++;
        switch(ProgresoProstituta[0])
        {
            case 1:  ApplyActorAnimation(Strips[2], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 7:  ApplyActorAnimation(Strips[2], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 14: ApplyActorAnimation(Strips[2], "STRIP","STR_B2C",4.1,0,5,1,1,0);
            case 20: ApplyActorAnimation(Strips[2], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 28: ApplyActorAnimation(Strips[2], "STRIP","STR_C2",4.1,0,5,1,1,0);
			case 35: ProgresoProstituta[0] = 0;
		}
	}
	if(Bailarina2 != 1)
	{
        ProgresoProstituta[1] ++;
        switch(ProgresoProstituta[1])
        {
            case 1: ApplyActorAnimation(Strips[8], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 6: ApplyActorAnimation(Strips[8], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 15: ProgresoProstituta[1] = 0;
        }
	}
	if(Bailarina3 != 1)
	{
        ProgresoProstituta[2] ++;
        switch(ProgresoProstituta[2])
        {
            case 1: ApplyActorAnimation(Strips[4], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[4], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 12: ProgresoProstituta[2] = 0;
        }
	}
	if(Bailarina4 != 1)
	{
        ProgresoProstituta[3] ++;
        switch(ProgresoProstituta[3])
        {
            case 1: ApplyActorAnimation(Strips[9], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[9], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 13: ApplyActorAnimation(Strips[9], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 18: ApplyActorAnimation(Strips[9], "STRIP","STR_B2C",4.1,0,5,1,1,0);
			case 22: ProgresoProstituta[3] = 0;
		}
	}
	if(Bailarina5 != 1)
	{
        ProgresoProstituta[4] ++;
        switch(ProgresoProstituta[4])
        {
            case 1: ApplyActorAnimation(Strips[7], "STRIP","STR_C1",4.1,0,5,1,1,0);
            case 8: ApplyActorAnimation(Strips[7], "STRIP","STR_C2",4.1,0,5,1,1,0);
            case 14: ApplyActorAnimation(Strips[7], "STRIP","STR_Loop_C",4.1,1,5,1,1,0);
            case 25: ApplyActorAnimation(Strips[7], "STRIP","STR_Loop_B",4.1,1,5,1,1,0);
            case 33: ApplyActorAnimation(Strips[7], "STRIP","STR_B2C",4.1,0,5,1,1,0);
            case 38: ProgresoProstituta[4] = 0;
		}
	}
	if(Bailarina6 != 1)
	{
        ProgresoProstituta[5] ++;
        switch(ProgresoProstituta[5])
        {
            case 1: ApplyActorAnimation(Strips[3], "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
            case 7: ApplyActorAnimation(Strips[3], "STRIP","strip_G",4.1,1,5,1,1,0);
            case 15: ProgresoProstituta[5] = 0;
        }
	}
	return true;
}
public cargarRoboTiendas()
{
	new count,Float:x,Float:y,Float:z,Float:a,vw,skin, countx;
	cache_get_result_count(count);
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p = 0;
		cache_get_value_name(i, "ID", content);	p = strval(content); RoboTiendas[p][rID] = strval(content);
		if(p > 0)
		{
			cache_get_value_name(i, "X", content);	x = floatstr(content);
			cache_get_value_name(i, "Y", content);	y = floatstr(content);
			cache_get_value_name(i, "Z", content);	z = floatstr(content);
			cache_get_value_name(i, "A", content);	a = floatstr(content);
			cache_get_value_name(i, "Skin", content);	skin = strval(content);
			cache_get_value_name(i, "VW", content);			vw = strval(content);
            cache_get_value_name(i, "Localidad", content);	format(RoboTiendas[p][LocalidadRobo],38,"%s",content);
            cache_get_value_name(i, "EntradaLocalX", content); RoboTiendas[p][EntradaX] = floatstr(content);
            cache_get_value_name(i, "EntradaLocalY", content); RoboTiendas[p][EntradaY] = floatstr(content);
            cache_get_value_name(i, "EntradaLocalZ", content); RoboTiendas[p][EntradaZ] = floatstr(content);
            //cache_get_value_name(i, "EnUso", content); RoboTiendas[p][rEnUso] = strval(content);
            RoboTiendas[p][Actor] = CreateDynamicActor(skin, x, y, z, a , 1, 100.0, vw);
            countx ++;
		}
  	}
  	printf("[ACTORES TIENDAS]: %d", countx);
	return 1;
}
public ArrestarJugador(actor,playerid,tienda)
{
    new Float:x,Float:y,Float:z,vw;
	GetDynamicActorPos(actor, x,y,z);
	vw = GetDynamicActorVirtualWorld(actor);
	if(IsPlayerInRangeOfPoint(playerid,30.0,x,y,z))
	{
	    if(GetPlayerVirtualWorld(playerid) == vw)
	    {
	        TraerPolicia(playerid);
		}
	}
	SetTimerEx("LevantarActor",8000,false,"i",actor);
	valortotal[playerid] = 0;
	if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
	if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
	PLAYER_TEMP[playerid][PuedeRobar] = 0;
	RoboTiendas[tienda][TiendaRobada] = 0;
}
public LevantarActor(actor)
{
	ClearDynamicActorAnimations(actor);
}
GetXYInFrontOfActor(actor, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetDynamicActorPos(actor, x, y, a);
    GetDynamicActorFacingAngle(actor, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
public RobarTiendaTerminado(playerid,actor,tienda)
{
    RoboTiendas[tienda][TiendaRobada] = 1;
    new Float:x,Float:y,Float:z, Resultado[128],Float:cord_x, Float:cord_y,vw,cantidad_string[120];
	GetPlayerPos(playerid,x,y,z);
    ApplyDynamicActorAnimation(actor,"ped", "cower", 4.1, 1, 0, 0, 1, 0);
	format(PLAYER_INFO[playerid][QuienC],64,"Cámara de seguridad");
	SendClientMessage(playerid,-1,"Un empleado accionó {FF0000}la alarma{FFFFFF} y la {3399FF}policía{FFFFFF} te vio por las cámaras de seguridad.");
    SendClientMessage(playerid,-1,"Escapa del negocio y permanece lejos de la policía durante {FFFF04}5 minutos {FFFFFF}para perderlos.");
    PLAYER_INFO[playerid][pCargos] = 2;
    ActualizarRadar();
    RoboTienda[playerid] = 1;
    SetTimerEx("Quitar2Cargos", 300000, 0, "d", playerid);
    PLAYER_TIMES[playerid][TiempoMensajeRobar] =  gettime() + 2;
    SetTimerEx("ArrestarJugador",segundos(60),false,"ddd",actor,playerid,tienda);
    SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]), ReportCrimen(playerid,PLAYER_INFO[playerid][pCargos]);
    RoboTiendas[tienda][TiendaLadron] = playerid;
    UltimoRobado[playerid] = tienda;
    PuedeTomarDinero[playerid] = actor;

    format(Resultado, sizeof(Resultado),"{3399FF}[Central de policía]{FFFFFF} reportando: (({f21111}%s{FFFFFF})) [%d] asaltó un negocio en %s.",PLAYER_INFO[playerid][Nickname],playerid,RoboTiendas[tienda][LocalidadRobo]);
   	SendRadioMessagePatrulla(1,-1,Resultado);

    GetXYInFrontOfActor(actor,cord_x,cord_y,0.8);
	GetDynamicActorPos(actor, x,y,z);
	vw = GetDynamicActorVirtualWorld(actor);
	new result = getRandomMoney(9500,11000);
	valortotal[playerid] = result;
	format(cantidad_string,sizeof(cantidad_string),"{f21111}$%d{FFFFFF}\nPulsa {FFFF04}'H'{FFFFFF} para tomar el dinero.",valortotal[playerid]);
	if(!IsValidDynamicPickup(roboTiendasObjeto[playerid])) roboTiendasObjeto[playerid] = CreateDynamicPickup(1212, 23, cord_x, cord_y, z, vw, -1, -1, 10.0);
	if(!IsValidDynamic3DTextLabel(LabelRobo[playerid])) LabelRobo[playerid] = CreateDynamic3DTextLabel(cantidad_string, COLOR_WHITE, cord_x, cord_y, z+0.15, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw,-1);
	return 1;
}
getRandomMoney(valorBase, valorMaximo)
{
	new value = valorMaximo - valorBase;
	new rand = random(value);
	return valorBase + rand;
}

public datosCargados(playerid)
{
	Descongelar(playerid);
    if(GetPlayerPhoneBookCount(playerid) == 0) AddPlayerConectats(playerid);
	if(PLAYER_INFO[playerid][pFaccion] >= 2) SetPlayerGangZones(playerid);
	if(GetInvitacionesPlayerid(playerid) > 0 && PLAYER_INFO[playerid][pFaccion] == 0) SendClientMessageEx(playerid, -1,"Tienes {FFCA00}%d{FFFFFF} invitaciones de banda activas, para verlas usa {FFFF04}/invitaciones.", GetInvitacionesPlayerid(playerid));
    if(PLAYER_INFO[playerid][pBarras] == 0)
	{
		BarraHambre(playerid);
		BarraSed(playerid);
	}
	DarPrendas(playerid);
 	return 1;
}
public PuntoB(playerid)
{
    SendClientMessage(playerid,-1,"Baja a recolectar la basura.");
	switch(RecorridoBasu[playerid])
	{
		case 1:
		{
			switch(PBasura[playerid])
			{
				case 1:
				{
					SetPlayerCheckpoint(playerid,990.8474,-1811.6334,14.2317,2.0);
				    PuntoBaX[playerid] = 990.8474; PuntoBaY[playerid] = -1811.6334; PuntoBaZ[playerid] = 14.2317; PuntoBaA[playerid] = 2.0;
				}
				case 2:
				{
					SetPlayerCheckpoint(playerid,1548.8268,-1879.8169,13.5469,2.0);
				    PuntoBaX[playerid] = 1548.8268; PuntoBaY[playerid] = -1879.8169; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 3:
				{
					SetPlayerCheckpoint(playerid,2089.1584,-1908.3224,13.5469,2.0);
				    PuntoBaX[playerid] = 2089.1584; PuntoBaY[playerid] = -1908.3224; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 4:
				{
					SetPlayerCheckpoint(playerid,2222.9968,-1793.5454,13.5625,2.0);
				    PuntoBaX[playerid] = 2222.9968; PuntoBaY[playerid] = -1793.5454; PuntoBaZ[playerid] = 13.5625; PuntoBaA[playerid] = 2.0;
				}
				case 5:
				{
					SetPlayerCheckpoint(playerid,2114.7368,-1607.7476,13.5625,2.0);
				    PuntoBaX[playerid] = 2114.7368; PuntoBaY[playerid] = -1607.7476; PuntoBaZ[playerid] = 13.5625; PuntoBaA[playerid] = 2.0;
				}
				case 6:
				{
					SetPlayerCheckpoint(playerid,1994.0798,-1681.3557,13.5469,2.0);
				    PuntoBaX[playerid] = 1994.0798; PuntoBaY[playerid] = -1681.3557; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 7:
				{
					SetPlayerCheckpoint(playerid,1764.0529,-1724.7991,13.5469,2.0);
				    PuntoBaX[playerid] = 1764.0529; PuntoBaY[playerid] = -1724.7991; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 8:
				{
					SetPlayerCheckpoint(playerid,1735.8999,-1589.8905,13.5455,2.0);
				    PuntoBaX[playerid] = 1735.8999; PuntoBaY[playerid] = -1589.8905; PuntoBaZ[playerid] = 13.5455; PuntoBaA[playerid] = 2.0;
				}
				case 9:
				{
					SetPlayerCheckpoint(playerid,1390.0305,-1581.1624,13.5469,2.0);
     				PuntoBaX[playerid] = 1390.0305; PuntoBaY[playerid] = -1581.1624; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 10:
				{
					SetPlayerCheckpoint(playerid,1365.0758,-1155.3657,23.8660,2.0);
				    PuntoBaX[playerid] = 1365.0758; PuntoBaY[playerid] = -1155.3657; PuntoBaZ[playerid] = 23.8660; PuntoBaA[playerid] = 2.0;
				}
				case 11:
				{
					SetPlayerCheckpoint(playerid,1097.2964,-1133.7189,23.8281,2.0);
				    PuntoBaX[playerid] = 1097.2964; PuntoBaY[playerid] = -1133.7189; PuntoBaZ[playerid] = 23.8281; PuntoBaA[playerid] = 2.0;
				}
				case 12:
				{
					SetPlayerCheckpoint(playerid,1046.2882,-1304.1703,13.5469,2.0);
				    PuntoBaX[playerid] = 1046.2882; PuntoBaY[playerid] = -1304.1703; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0;
				}
				case 13:
				{
					SetPlayerCheckpoint(playerid,679.1686,-1311.9562,13.6760,2.0);
				    PuntoBaX[playerid] = 679.1686; PuntoBaY[playerid] = -1311.9562; PuntoBaZ[playerid] = 13.6760; PuntoBaA[playerid] = 2.0;
				}
				case 14:
				{
					SetPlayerCheckpoint(playerid,483.6781,-1277.2889,15.6511,2.0);
	    			PuntoBaX[playerid] = 483.6781; PuntoBaY[playerid] = -1277.2889; PuntoBaZ[playerid] = 15.6511; PuntoBaA[playerid] = 2.0;
				}
				case 15:
				{
					SetPlayerCheckpoint(playerid,345.4417,-1368.1273,14.3875,2.0);
     				PuntoBaX[playerid] = 345.4417; PuntoBaY[playerid] = -1368.1273; PuntoBaZ[playerid] = 14.3875; PuntoBaA[playerid] = 2.0;
				}
				case 16:
				{
					SetPlayerCheckpoint(playerid,197.3550,-1743.2972,4.5101,2.0);
				    PuntoBaX[playerid] = 197.3550; PuntoBaY[playerid] = -1743.2972; PuntoBaZ[playerid] = 4.5101; PuntoBaA[playerid] = 2.0;
				}
				case 17:
				{
					SetPlayerCheckpoint(playerid,390.4010,-1779.2229,5.5900,2.0);
					PuntoBaX[playerid] = 390.4010; PuntoBaY[playerid] = -1779.2229; PuntoBaZ[playerid] = 5.5900; PuntoBaA[playerid] = 2.0;
				}
			}
	    }
		case 2:
		{
			switch(PBasura[playerid])
			{
				case 1: {	SetPlayerCheckpoint(playerid,-103.7799,-1172.5127,3.5240,2.0);
				            PuntoBaX[playerid] = -103.7799; PuntoBaY[playerid] = -1172.5127; PuntoBaZ[playerid] = 3.5240; PuntoBaA[playerid] = 2.0; }
				case 2: {	SetPlayerCheckpoint(playerid,-345.9767,-756.6649,30.8484,2.0);
				            PuntoBaX[playerid] = -345.9767; PuntoBaY[playerid] = -756.6649; PuntoBaZ[playerid] = 30.8484; PuntoBaA[playerid] = 2.0; }
				case 3: {	SetPlayerCheckpoint(playerid,-426.7870,-433.8864,17.8884,2.0);
				            PuntoBaX[playerid] = -426.7870; PuntoBaY[playerid] = -433.8864; PuntoBaZ[playerid] = 17.8884; PuntoBaA[playerid] = 2.0; }
				case 4: {	SetPlayerCheckpoint(playerid,-916.0715,-446.1450,29.7584,2.0);
				            PuntoBaX[playerid] = -916.0715; PuntoBaY[playerid] = -446.1450; PuntoBaZ[playerid] = 29.7584; PuntoBaA[playerid] = 2.0; }
				case 5: {	SetPlayerCheckpoint(playerid,-1904.3972,-567.3438,25.5184,2.0);
				            PuntoBaX[playerid] = -1904.3972; PuntoBaY[playerid] = -567.3438; PuntoBaZ[playerid] = 25.5184; PuntoBaA[playerid] = 2.0; }
				case 6: {	SetPlayerCheckpoint(playerid,-2244.9705,-123.7534,36.0884,2.0);
				            PuntoBaX[playerid] = -2244.9705; PuntoBaY[playerid] = -123.7534; PuntoBaZ[playerid] = 36.0884; PuntoBaA[playerid] = 2.0; }
				case 7: {	SetPlayerCheckpoint(playerid,-2245.8291,84.2427,35.9984,2.0);
				            PuntoBaX[playerid] = -2245.8291; PuntoBaY[playerid] = 84.2427; PuntoBaZ[playerid] = 35.9984; PuntoBaA[playerid] = 2.0; }
				case 8: {	SetPlayerCheckpoint(playerid,-2166.9063,201.9160,35.9784,2.0);
				            PuntoBaX[playerid] = -2166.9063; PuntoBaY[playerid] = 201.9160; PuntoBaZ[playerid] = 35.9784; PuntoBaA[playerid] = 2.0; }
				case 9: {	SetPlayerCheckpoint(playerid,-2033.2213,313.7436,35.9284,2.0);
				            PuntoBaX[playerid] = -2033.2213; PuntoBaY[playerid] = 313.7436; PuntoBaZ[playerid] = 35.9284; PuntoBaA[playerid] = 2.0; }
				case 10: {	SetPlayerCheckpoint(playerid,-2013.7318,137.0096,28.3484,2.0);
				            PuntoBaX[playerid] = -2013.7318; PuntoBaY[playerid] = 137.0096; PuntoBaZ[playerid] = 28.3484; PuntoBaA[playerid] = 2.0; }
				case 11: {	SetPlayerCheckpoint(playerid,-1813.1581,-122.9985,6.3384,2.0);
				            PuntoBaX[playerid] = -1813.1581; PuntoBaY[playerid] = -122.9985; PuntoBaZ[playerid] = 6.3384; PuntoBaA[playerid] = 2.0; }
				case 12: {	SetPlayerCheckpoint(playerid,-1824.8383,-559.8033,17.1384,2.0);
				            PuntoBaX[playerid] = -1824.8383; PuntoBaY[playerid] = -559.8033; PuntoBaZ[playerid] = 17.1384; PuntoBaA[playerid] = 2.0; }
				case 13: {	SetPlayerCheckpoint(playerid,-815.8467,-1021.9445,83.8480,2.0);
				            PuntoBaX[playerid] = -815.8467; PuntoBaY[playerid] = -1021.9445; PuntoBaZ[playerid] = 83.8480; PuntoBaA[playerid] = 2.0; }
				case 14: {	SetPlayerCheckpoint(playerid,-44.1083,-1525.1487,2.2014,2.0);
				            PuntoBaX[playerid] = -44.1083; PuntoBaY[playerid] = -1525.1487; PuntoBaZ[playerid] = 2.2014; PuntoBaA[playerid] = 2.0; }
			}
	    }
	    case 3:
		{
			switch(PBasura[playerid])
			{
				case 1: {	SetPlayerCheckpoint(playerid,188.6838,-1395.9762,47.2736,2.0);
				            PuntoBaX[playerid] = 188.6838; PuntoBaY[playerid] = -1395.9762; PuntoBaZ[playerid] = 47.2736; PuntoBaA[playerid] = 2.0; }
				case 2: {	SetPlayerCheckpoint(playerid,353.9030,-1277.7860,53.8950,2.0);
				            PuntoBaX[playerid] = 353.9030; PuntoBaY[playerid] = -1277.7860; PuntoBaZ[playerid] = 53.8950; PuntoBaA[playerid] = 2.0; }
				case 3: {	SetPlayerCheckpoint(playerid,686.0798,-1062.7533,49.6633,2.0);
				            PuntoBaX[playerid] = 686.0798; PuntoBaY[playerid] = -1062.7533; PuntoBaZ[playerid] = 49.6633; PuntoBaA[playerid] = 2.0; }
				case 4: {	SetPlayerCheckpoint(playerid,871.3945,-868.6337,77.5458,2.0);
				            PuntoBaX[playerid] = 871.3945; PuntoBaY[playerid] = -868.6337; PuntoBaZ[playerid] = 77.5458; PuntoBaA[playerid] = 2.0; }
				case 5: {	SetPlayerCheckpoint(playerid,1081.2075,-778.0049,107.7854,2.0);
				            PuntoBaX[playerid] = 1081.2075; PuntoBaY[playerid] = -778.0049; PuntoBaZ[playerid] = 107.7854; PuntoBaA[playerid] = 2.0; }
				case 6: {	SetPlayerCheckpoint(playerid,912.7013,-677.6242,116.8398,2.0);
				            PuntoBaX[playerid] = 912.7013; PuntoBaY[playerid] = -677.6242; PuntoBaZ[playerid] = 116.8398; PuntoBaA[playerid] = 2.0; }
				case 7: {	SetPlayerCheckpoint(playerid,808.1866,-788.2479,68.7993,2.0);
				            PuntoBaX[playerid] = 808.1866; PuntoBaY[playerid] = -788.2479; PuntoBaZ[playerid] = 68.7993; PuntoBaA[playerid] = 2.0; }
				case 8: {	SetPlayerCheckpoint(playerid,266.5842,-1101.4108,81.7877,2.0);
				            PuntoBaX[playerid] = 266.5842; PuntoBaY[playerid] = -1101.4108; PuntoBaZ[playerid] = 81.7877; PuntoBaA[playerid] = 2.0; }
				case 9: {	SetPlayerCheckpoint(playerid,343.5382,-1193.1310,76.5068,2.0);
				            PuntoBaX[playerid] = 343.5382; PuntoBaY[playerid] = -1193.1310; PuntoBaZ[playerid] = 76.5068; PuntoBaA[playerid] = 2.0; }
				case 10: {	SetPlayerCheckpoint(playerid,554.6530,-1161.1757,54.4223,2.0);
				            PuntoBaX[playerid] = 554.6530; PuntoBaY[playerid] = -1161.1757; PuntoBaZ[playerid] = 54.4223; PuntoBaA[playerid] = 2.0; }
				case 11: {	SetPlayerCheckpoint(playerid,322.6987,-1189.3054,76.3568,2.0);
				            PuntoBaX[playerid] = 322.6987; PuntoBaY[playerid] = -1189.3054; PuntoBaZ[playerid] = 76.3568; PuntoBaA[playerid] = 2.0; }
				case 12: {	SetPlayerCheckpoint(playerid,175.0909,-1387.1046,48.6300,2.0);
				            PuntoBaX[playerid] = 175.0909; PuntoBaY[playerid] = -1387.1046; PuntoBaZ[playerid] = 48.6300; PuntoBaA[playerid] = 2.0; }
				case 13: {	SetPlayerCheckpoint(playerid,-78.5097,-1592.9054,2.6172,2.0);
				            PuntoBaX[playerid] = -78.5097; PuntoBaY[playerid] = -1592.9054; PuntoBaZ[playerid] = 2.6172; PuntoBaA[playerid] = 2.0; }
    		}
	    }
	    case 4:
		{
			switch(PBasura[playerid])
			{
				case 1: {	SetPlayerCheckpoint(playerid,263.6307,-1438.7028,13.7373,2.0);
				            PuntoBaX[playerid] = 263.6307; PuntoBaY[playerid] = -1438.7028; PuntoBaZ[playerid] = 13.7373; PuntoBaA[playerid] = 2.0; }
				case 2: {	SetPlayerCheckpoint(playerid,721.1824,-1121.8177,18.2286,2.0);
				            PuntoBaX[playerid] = 721.1824; PuntoBaY[playerid] = -1121.8177; PuntoBaZ[playerid] = 18.2286; PuntoBaA[playerid] = 2.0; }
				case 3: {	SetPlayerCheckpoint(playerid,1106.3229,-964.0125,42.6446,2.0);
				            PuntoBaX[playerid] = 1106.3229; PuntoBaY[playerid] = -964.0125; PuntoBaZ[playerid] = 42.6446; PuntoBaA[playerid] = 2.0; }
				case 4: {	SetPlayerCheckpoint(playerid,1254.5852,-1106.2231,25.2560,2.0);
				            PuntoBaX[playerid] = 1254.5852; PuntoBaY[playerid] = -1106.2231; PuntoBaZ[playerid] = 25.2560; PuntoBaA[playerid] = 2.0; }
				case 5: {	SetPlayerCheckpoint(playerid,1188.3806,-1499.1213,13.5469,2.0);
				            PuntoBaX[playerid] = 1188.3806; PuntoBaY[playerid] = -1499.1213; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
				case 6: {	SetPlayerCheckpoint(playerid,1289.6144,-1837.6057,13.5469,2.0);
				            PuntoBaX[playerid] = 1289.6144; PuntoBaY[playerid] = -1837.6057; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
				case 7: {	SetPlayerCheckpoint(playerid,1045.2313,-1669.8091,13.5469,2.0);
				            PuntoBaX[playerid] = 1045.2313; PuntoBaY[playerid] = -1669.8091; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
				case 8: {	SetPlayerCheckpoint(playerid,932.4356,-1480.9509,13.5361,2.0);
				            PuntoBaX[playerid] = 932.4356; PuntoBaY[playerid] = -1480.9509; PuntoBaZ[playerid] = 13.5361; PuntoBaA[playerid] = 2.0; }
				case 9: {	SetPlayerCheckpoint(playerid,857.4956,-1382.1349,13.7507,2.0);
				            PuntoBaX[playerid] = 857.4956; PuntoBaY[playerid] = -1382.1349; PuntoBaZ[playerid] = 13.7507; PuntoBaA[playerid] = 2.0; }
				case 10: {	SetPlayerCheckpoint(playerid,478.3005,-1497.9749,20.4542,2.0);
				            PuntoBaX[playerid] = 478.3005; PuntoBaY[playerid] = -1497.9749; PuntoBaZ[playerid] = 20.4542; PuntoBaA[playerid] = 2.0; }
				case 11: {	SetPlayerCheckpoint(playerid,655.2776,-1680.0502,14.4416,2.0);
				            PuntoBaX[playerid] = 655.2776; PuntoBaY[playerid] = -1680.0502; PuntoBaZ[playerid] = 14.4416; PuntoBaA[playerid] = 2.0; }
				case 12: {	SetPlayerCheckpoint(playerid,802.7533,-1756.1191,13.5469,2.0);
				            PuntoBaX[playerid] = 802.7533; PuntoBaY[playerid] = -1756.1191; PuntoBaZ[playerid] = 13.5469; PuntoBaA[playerid] = 2.0; }
				case 13: {	SetPlayerCheckpoint(playerid,108.2038,-1525.6523,7.0480,2.0);
				            PuntoBaX[playerid] = 108.2038; PuntoBaY[playerid] = -1525.6523; PuntoBaZ[playerid] = 7.0480; PuntoBaA[playerid] = 2.0; }
    		}
	    }
	}
}
public Forzado(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta = 1;
					SetTimer("CerrarPuerta",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
					GuardarHerramienta(playerid);
					SacarAnimF(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta = 1;
					SetTimer("CerrarPuerta",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		default:
		{
			CasaAbierta = 1;
			SetTimer("CerrarPuerta",segundos(28) ,false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 184.9418);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado2(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta2 = 1;
					SetTimer("CerrarPuerta2",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta2 = 1;
					SetTimer("CerrarPuerta2",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta2 = 1;
			SetTimer("CerrarPuerta2",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[1], 931.2819, 1974.0637, 10.6143, 100.0, 0.0000, 0.0000, 165.7200);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado3(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta3 = 1;
					SetTimer("CerrarPuerta3",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta3 = 1;
					SetTimer("CerrarPuerta3",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
                	DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta3 = 1;
			SetTimer("CerrarPuerta3",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[2], -2395.2427, -15.0817, 34.9091, 100.0, 0.0000, 0.0000, 188.9614);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado4(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta4 = 1;
					SetTimer("CerrarPuerta4",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
                    DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta4 = 1;
					SetTimer("CerrarPuerta4",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta4 = 1;
			SetTimer("CerrarPuerta4",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[3],2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 87.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado5(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta5 = 1;
					SetTimer("CerrarPuerta5",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta5 = 1;
					SetTimer("CerrarPuerta5",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta5 = 1;
			SetTimer("CerrarPuerta5",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[4],-2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 179.7599);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado6(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta6 = 1;
					SetTimer("CerrarPuerta6",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta6 = 1;
					SetTimer("CerrarPuerta6",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta6 = 1;
			SetTimer("CerrarPuerta6",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 178.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado7(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta7 = 1;
					SetTimer("CerrarPuerta7",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 178.00000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta7 = 1;
					SetTimer("CerrarPuerta7",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 83.00000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta7 = 1;
			SetTimer("CerrarPuerta7",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 83.00000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado8(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta8 = 1;
					SetTimer("CerrarPuerta8",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
				    DarHabilidadLadron1(playerid);
				}
                default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta8 = 1;
					SetTimer("CerrarPuerta8",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta8 = 1;
			SetTimer("CerrarPuerta8",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[7],2485.14990, -1997.63000, 13.03000, 100.0,   0.00000, 0.00000, 88.18903);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado9(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta9 = 1;
					SetTimer("CerrarPuerta9",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de V200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta9 = 1;
					SetTimer("CerrarPuerta9",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta9 = 1;
			SetTimer("CerrarPuerta9",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 181.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado10(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta10 = 1;
					SetTimer("CerrarPuerta10",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta10 = 1;
					SetTimer("CerrarPuerta10",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta10 = 1;
			SetTimer("CerrarPuerta10",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[9],-1449.1982, 2647.2046, 55.4890, 100.0,   0.00000, 0.00000,  197.2201);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado11(playerid)
{
    TiempoForzarCerradura[playerid] = 0;
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta11 = 1;
					SetTimer("CerrarPuerta11",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta11 = 1;
					SetTimer("CerrarPuerta11",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta11 = 1;
			SetTimer("CerrarPuerta11",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 98.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public Forzado12(playerid)
{
	new Float:Pos[3];
	TiempoForzarCerradura[playerid] = 0;
	GetPlayerPos(playerid, Pos[0],Pos[1],Pos[2]);
	switch(PLAYER_INFO[playerid][pNivelLadron])
	{
		case 1:
		{
   			new intento = random(3);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta12 = 1;
					SetTimer("CerrarPuerta12",segundos(20),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}20 segundos{FFFFFF} o serás arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron1(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 2:
		{
			new intento = random(2);
			switch(intento)
			{
				case 0:
				{
					CasaAbierta12 = 1;
					SetTimer("CerrarPuerta12",segundos(24),false);
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
					GuardarHerramienta(playerid);
					SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}24 segundos{FFFFFF} o seras arrestado.");
					SacarAnimF(playerid);
					DarHabilidadLadron2(playerid);
				}
				default:
				{
					AudioAlarma(Pos[0],Pos[1],Pos[2]);
					SendClientMessage(playerid,-1,"No pudiste abrir la puerta, un vecino te vio y ha alertado a la policía, escapa de la zona."),SendClientMessage(playerid,-1,"Tienes {FF0000}1 minuto{FFFFFF} para alejarte de la casa a más de {f21111}200 metros{FFFFFF}");
					SacarAnimF(playerid);
					GuardarHerramienta(playerid);
				}
			}
		}
		case 3:
		{
			CasaAbierta12 = 1;
			SetTimer("CerrarPuerta12",segundos(28),false);
			AudioAlarma(Pos[0],Pos[1],Pos[2]);
			MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 86.0000);
			GuardarHerramienta(playerid);
			SendClientMessage(playerid,-1,"{f21111}Lograste abrir la puerta{FFFFFF}, roba todo lo que puedas antes de que pasen {f21111}28 segundos{FFFFFF} o serás arrestado.");
			SacarAnimF(playerid);
			ExperienciaMaximaLadron(playerid);
		}
	}
	return 1;
}
public AntiCJ(playerid)
{
	SetPlayerVirtualWorld(playerid,VWTemporal[playerid]);
	Descongelar(playerid);
}

public Recolectar(playerid)
{
	new item = random(16);
	switch(item)
	{
	    case 0:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado {00FF00}50gr de crack{FFFFFF} y le diste la mitad a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {F00000}50gr de crack{FFFFFF} y te dio la mitad.");
	        PLAYER_INFO[playerid][pCrack] += 25;
	        PLAYER_INFO[Companero[playerid]][pCrack] += 25;
	    }
	    case 3:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado un {f21111}par de manoplas{FFFFFF} y le entregas una a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero ha encontrado un {f21111}par de manoplas{FFFFFF} y te entregó una.");
			DarArma(playerid,1);
			DarArma(Companero[playerid],1);
	    }
	    case 6:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado una billetera con {f21111}$20.000{FFFFFF} y le diste la mitad a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero encontró una billetera con {f21111}$20.000{FFFFFF}, y te dio la mitad.");
			DarDinero(playerid,10000);
			DarDinero(Companero[playerid],10000);
	    }
	    case 9:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado {f21111}50 medicamentos{FFFFFF} y le diste la mitad a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {f21111}50 medicamentos{FFFFFF} y te dio la mitad.");
	        PLAYER_INFO[playerid][pCrack] += 25;
	        PLAYER_INFO[Companero[playerid]][pCrack] += 25;
	    }
	    case 12:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado {f21111}12 diamantes{FFFFFF} y le diste la mitad a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {f21111}12 diamantes{FFFFFF} y te dio la mitad.");
	        PLAYER_INFO[playerid][Moneda] += 6;
	        PLAYER_INFO[Companero[playerid]][Moneda] += 6;
	    }
	    case 15:
	    {
	        SendClientMessage(playerid,-1,"Has encontrado {00FF00}50gr de marihuana{FFFFFF} y le diste la mitad a tu compañero.");
	        SendClientMessage(Companero[playerid],-1,"Tu compañero encontró {F00000}50gr de marihuana{FFFFFF} y te dio la mitad.");
	        PLAYER_INFO[playerid][pMarihuana] += 25;
	        PLAYER_INFO[Companero[playerid]][pMarihuana] += 25;
	    }
	}
	TimerRecoleccion[playerid] = 0;
	SendClientMessage(playerid, -1, "Sube al camión de basura para continuar.");
	recogiendo[playerid] = 0;
	PBasura[playerid]++;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	if(RecorridoBasu[playerid] == 1)
	{
		switch(PBasura[playerid])
		{
			case 2: {	SetPlayerCheckpoint(Companero[playerid], 1548.8938,-1874.5441,13.3828, 5.0);
						PuntoBaX[Companero[playerid]] = 1548.8938; PuntoBaY[Companero[playerid]] = -1874.5441; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 3: {	SetPlayerCheckpoint(Companero[playerid], 2084.0916,-1908.8611,13.3828,5.0);
						PuntoBaX[Companero[playerid]] = 2084.0916; PuntoBaY[Companero[playerid]] = -1908.8611; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 4: {	SetPlayerCheckpoint(Companero[playerid], 2218.6541,-1793.9825,13.1953,5.0);
						PuntoBaX[Companero[playerid]] = 2218.6541; PuntoBaY[Companero[playerid]] = -1793.9825; PuntoBaZ[Companero[playerid]] = 13.1953; PuntoBaA[Companero[playerid]] = 5.0; }
			case 5: {	SetPlayerCheckpoint(Companero[playerid], 2115.4761,-1613.1133,13.3904,5.0);
						PuntoBaX[Companero[playerid]] = 2115.4761; PuntoBaY[Companero[playerid]] = -1613.1133; PuntoBaZ[Companero[playerid]] = 13.3904; PuntoBaA[Companero[playerid]] = 5.0; }
			case 6: {	SetPlayerCheckpoint(Companero[playerid], 1999.2738,-1679.7145,13.3828,5.0);
						PuntoBaX[Companero[playerid]] = 1999.2738; PuntoBaY[Companero[playerid]] = -1679.7145; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 7: {	SetPlayerCheckpoint(Companero[playerid], 1765.4800,-1729.7675,13.3828,5.0);
						PuntoBaX[Companero[playerid]] = 1765.4800; PuntoBaY[Companero[playerid]] = -1729.7675; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 8: {	SetPlayerCheckpoint(Companero[playerid], 1738.8538,-1595.5604,13.3814,5.0);
						PuntoBaX[Companero[playerid]] = 1738.8538; PuntoBaY[Companero[playerid]] = -1595.5604; PuntoBaZ[Companero[playerid]] = 13.3814; PuntoBaA[Companero[playerid]] = 5.0; }
			case 9: {	SetPlayerCheckpoint(Companero[playerid], 1393.0277,-1587.4966,13.3564,5.0);
						PuntoBaX[Companero[playerid]] = 1393.0277; PuntoBaY[Companero[playerid]] = -1587.4966; PuntoBaZ[Companero[playerid]] = 13.3564; PuntoBaA[Companero[playerid]] = 5.0; }
			case 10: {	SetPlayerCheckpoint(Companero[playerid],1360.2289,-1162.8208,23.7095,5.0);
						PuntoBaX[Companero[playerid]] = 1360.2289; PuntoBaY[Companero[playerid]] = -1162.8208; PuntoBaZ[Companero[playerid]] = 23.7095; PuntoBaA[Companero[playerid]] = 5.0; }
			case 11: {	SetPlayerCheckpoint(Companero[playerid],1098.3059,-1139.8910,23.6563,5.0);
						PuntoBaX[Companero[playerid]] = 1098.3059; PuntoBaY[Companero[playerid]] = -1139.8910; PuntoBaZ[Companero[playerid]] = 23.6563; PuntoBaA[Companero[playerid]] = 5.0; }
			case 12: {	SetPlayerCheckpoint(Companero[playerid],1051.4209,-1304.8677,13.3828,5.0);
						PuntoBaX[Companero[playerid]] = 1051.4209; PuntoBaY[Companero[playerid]] = -1304.8677; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 13: {	SetPlayerCheckpoint(Companero[playerid],679.4622,-1317.1431,13.5095,5.0);
						PuntoBaX[Companero[playerid]] = 679.4622; PuntoBaY[Companero[playerid]] = -1317.1431; PuntoBaZ[Companero[playerid]] = 13.5095; PuntoBaA[Companero[playerid]] = 5.0; }
			case 14: {	SetPlayerCheckpoint(Companero[playerid],487.7305,-1280.6522,15.5305,5.0);
						PuntoBaX[Companero[playerid]] = 487.7305; PuntoBaY[Companero[playerid]] = -1280.6522; PuntoBaZ[Companero[playerid]] = 15.5305; PuntoBaA[Companero[playerid]] = 5.0; }
			case 15: {	SetPlayerCheckpoint(Companero[playerid],344.1947,-1374.5900,14.2268,5.0);
						PuntoBaX[Companero[playerid]] = 344.1947; PuntoBaY[Companero[playerid]] = -1374.5900; PuntoBaZ[Companero[playerid]] = 14.2268; PuntoBaA[Companero[playerid]] = 5.0; }
			case 16: {	SetPlayerCheckpoint(Companero[playerid],195.3670,-1736.5179,4.3181,5.0);
						PuntoBaX[Companero[playerid]] = 195.3670; PuntoBaY[Companero[playerid]] = -1736.5179; PuntoBaZ[Companero[playerid]] = 4.3181; PuntoBaA[Companero[playerid]] = 5.0; }
			case 17: {	SetPlayerCheckpoint(Companero[playerid],388.9255,-1775.0706,5.3994,5.0);
						PuntoBaX[Companero[playerid]] = 388.9255; PuntoBaY[Companero[playerid]] = -1775.0706; PuntoBaZ[Companero[playerid]] = 5.3994; PuntoBaA[Companero[playerid]] = 5.0; }
			case 18: {	SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0);
						PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
		}
	}
	else if(RecorridoBasu[playerid] == 2)
	{
		switch(PBasura[playerid])
		{
			case 2: {	SetPlayerCheckpoint(Companero[playerid], -349.6644,-757.6539,29.0136, 5.0);
			    		PuntoBaX[Companero[playerid]] = -349.6644; PuntoBaY[Companero[playerid]] = -757.6539; PuntoBaZ[Companero[playerid]] = 29.0136; PuntoBaA[Companero[playerid]] = 5.0; }
			case 3: {	SetPlayerCheckpoint(Companero[playerid],-428.8095,-436.5871,16.6492,5.0);
			            PuntoBaX[Companero[playerid]] = -428.8095; PuntoBaY[Companero[playerid]] = -436.5871; PuntoBaZ[Companero[playerid]] = 16.6492; PuntoBaA[Companero[playerid]] = 5.0; }
			case 4: {	SetPlayerCheckpoint(Companero[playerid],-917.4271,-450.9999,27.6603,5.0);
			            PuntoBaX[Companero[playerid]] = -917.4271; PuntoBaY[Companero[playerid]] = -450.9999; PuntoBaZ[Companero[playerid]] = 27.6603; PuntoBaA[Companero[playerid]] = 5.0; }
			case 5: {	SetPlayerCheckpoint(Companero[playerid],-1904.0535,-572.3555,24.1474,5.0);
			            PuntoBaX[Companero[playerid]] = -1904.0535; PuntoBaY[Companero[playerid]] = -572.3555; PuntoBaZ[Companero[playerid]] = 24.1474; PuntoBaA[Companero[playerid]] = 5.0; }
			case 6: {	SetPlayerCheckpoint(Companero[playerid],-2248.4912,-124.0376,34.8783,5.0);
			            PuntoBaX[Companero[playerid]] = -2248.4912; PuntoBaY[Companero[playerid]] = -124.0376; PuntoBaZ[Companero[playerid]] = 34.8783; PuntoBaA[Companero[playerid]] = 5.0; }
			case 7: {	SetPlayerCheckpoint(Companero[playerid],-2248.7205,83.8178,34.8784,5.0);
			            PuntoBaX[Companero[playerid]] = -2248.7205; PuntoBaY[Companero[playerid]] = 83.8178; PuntoBaZ[Companero[playerid]] = 34.8784; PuntoBaA[Companero[playerid]] = 5.0; }
			case 8: {	SetPlayerCheckpoint(Companero[playerid],-2167.4629,204.8546,34.8776,5.0);
			            PuntoBaX[Companero[playerid]] = -2167.4629; PuntoBaY[Companero[playerid]] = 204.8546; PuntoBaZ[Companero[playerid]] = 34.8776; PuntoBaA[Companero[playerid]] = 5.0; }
			case 9: {	SetPlayerCheckpoint(Companero[playerid],-2033.6031,316.9929,34.7233,5.0);
			            PuntoBaX[Companero[playerid]] = -2033.6031; PuntoBaY[Companero[playerid]] = 316.9929; PuntoBaZ[Companero[playerid]] = 34.7233; PuntoBaA[Companero[playerid]] = 5.0; }
			case 10: {	SetPlayerCheckpoint(Companero[playerid],-2010.0227,137.4623,27.2469,5.0);
			            PuntoBaX[Companero[playerid]] = -2010.0227; PuntoBaY[Companero[playerid]] = 137.4623; PuntoBaZ[Companero[playerid]] = 27.2469; PuntoBaA[Companero[playerid]] = 5.0; }
			case 11: {	SetPlayerCheckpoint(Companero[playerid],-1813.6909,-119.8742,5.2043,5.0);
			            PuntoBaX[Companero[playerid]] = -1813.6909; PuntoBaY[Companero[playerid]] = -119.8742; PuntoBaZ[Companero[playerid]] = 5.2043; PuntoBaA[Companero[playerid]] = 5.0; }
			case 12: {	SetPlayerCheckpoint(Companero[playerid],-1822.1787,-559.9365,15.9207,5.0);
			            PuntoBaX[Companero[playerid]] = -1822.1787; PuntoBaY[Companero[playerid]] = -559.9365; PuntoBaZ[Companero[playerid]] = 15.9207; PuntoBaA[Companero[playerid]] = 5.0; }
			case 13: {	SetPlayerCheckpoint(Companero[playerid],-817.4674,-1018.3693,83.3079,5.0);
			            PuntoBaX[Companero[playerid]] = -817.4674; PuntoBaY[Companero[playerid]] = -1018.3693; PuntoBaZ[Companero[playerid]] = 83.3079; PuntoBaA[Companero[playerid]] = 5.0; }
			case 14: {	SetPlayerCheckpoint(Companero[playerid],-43.7590,-1519.9025,1.5263,5.0);
			            PuntoBaX[Companero[playerid]] = -43.7590; PuntoBaY[Companero[playerid]] = -1519.9025; PuntoBaZ[Companero[playerid]] = 1.5263; PuntoBaA[Companero[playerid]] = 5.0; }
			case 15: {	SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0);
			            PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
		}
	}
	else if(RecorridoBasu[playerid] == 3)
	{
		switch(PBasura[playerid])
		{
			case 2: {	SetPlayerCheckpoint(Companero[playerid], 350.3483,-1273.5121,53.7532, 5.0);
			            PuntoBaX[Companero[playerid]] = 350.3483; PuntoBaY[Companero[playerid]] = -1273.5121; PuntoBaZ[Companero[playerid]] = 53.7532; PuntoBaA[Companero[playerid]] = 5.0; }
			case 3: {	SetPlayerCheckpoint(Companero[playerid], 680.5216,-1060.3474,49.4870, 5.0);
			            PuntoBaX[Companero[playerid]] = 680.5216; PuntoBaY[Companero[playerid]] = -1060.3474; PuntoBaZ[Companero[playerid]] = 49.4870; PuntoBaA[Companero[playerid]] = 5.0; }
			case 4: {	SetPlayerCheckpoint(Companero[playerid], 873.2125,-863.1124,77.5146, 5.0);
			            PuntoBaX[Companero[playerid]] = 873.2125; PuntoBaY[Companero[playerid]] = -863.1124; PuntoBaZ[Companero[playerid]] = 77.5146; PuntoBaA[Companero[playerid]] = 5.0; }
			case 5: {	SetPlayerCheckpoint(Companero[playerid], 1079.9196,-774.5426,107.9675, 5.0);
			            PuntoBaX[Companero[playerid]] = 1079.9196; PuntoBaY[Companero[playerid]] = -774.5426; PuntoBaZ[Companero[playerid]] = 107.9675; PuntoBaA[Companero[playerid]] = 5.0; }
			case 6: {	SetPlayerCheckpoint(Companero[playerid], 918.6940,-680.4443,117.0033, 5.0);
			            PuntoBaX[Companero[playerid]] = 918.6940; PuntoBaY[Companero[playerid]] = -680.4443; PuntoBaZ[Companero[playerid]] = 117.0033; PuntoBaA[Companero[playerid]] = 5.0; }
			case 7: {	SetPlayerCheckpoint(Companero[playerid], 810.9399,-792.6181,68.5974, 5.0);
			            PuntoBaX[Companero[playerid]] = 810.9399; PuntoBaY[Companero[playerid]] = -792.6181; PuntoBaZ[Companero[playerid]] = 68.5974; PuntoBaA[Companero[playerid]] = 5.0; }
			case 8: {	SetPlayerCheckpoint(Companero[playerid], 272.8895,-1100.2932,81.7537, 5.0);
			            PuntoBaX[Companero[playerid]] = 272.8895; PuntoBaY[Companero[playerid]] = -1100.2932; PuntoBaZ[Companero[playerid]] = 81.7537; PuntoBaA[Companero[playerid]] = 5.0; }
			case 9: {	SetPlayerCheckpoint(Companero[playerid], 339.2604,-1189.8682,76.4328, 5.0);
			            PuntoBaX[Companero[playerid]] = 339.2604; PuntoBaY[Companero[playerid]] = -1189.8682; PuntoBaZ[Companero[playerid]] = 76.4328; PuntoBaA[Companero[playerid]] = 5.0; }
			case 10: {	SetPlayerCheckpoint(Companero[playerid], 549.9263,-1156.9595,54.1546, 5.0);
			            PuntoBaX[Companero[playerid]] = 549.9263; PuntoBaY[Companero[playerid]] = -1156.9595; PuntoBaZ[Companero[playerid]] = 54.1546; PuntoBaA[Companero[playerid]] = 5.0; }
			case 11: {	SetPlayerCheckpoint(Companero[playerid], 326.4816,-1192.4799,76.1984, 5.0);
			            PuntoBaX[Companero[playerid]] = 326.4816; PuntoBaY[Companero[playerid]] = -1192.4799; PuntoBaZ[Companero[playerid]] = 76.1984; PuntoBaA[Companero[playerid]] = 5.0; }
			case 12: {	SetPlayerCheckpoint(Companero[playerid], 179.2384,-1389.3564,47.9640, 5.0);
			            PuntoBaX[Companero[playerid]] = 179.2384; PuntoBaY[Companero[playerid]] = -1389.3564; PuntoBaZ[Companero[playerid]] = 47.9640; PuntoBaA[Companero[playerid]] = 5.0; }
			case 13: {	SetPlayerCheckpoint(Companero[playerid], -55.1223,-1594.4856,2.7740, 5.0);
			            PuntoBaX[Companero[playerid]] = -55.1223; PuntoBaY[Companero[playerid]] = -1594.4856; PuntoBaZ[Companero[playerid]] = 2.7740; PuntoBaA[Companero[playerid]] = 5.0; }
			case 14: {	SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0);
			            PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
		}
	}
	else if(RecorridoBasu[playerid] == 4)
	{
		switch(PBasura[playerid])
		{
			case 2: {	SetPlayerCheckpoint(Companero[playerid], 715.6998,-1119.7213,17.9918, 5.0);
			            PuntoBaX[Companero[playerid]] = 715.6998; PuntoBaY[Companero[playerid]] = -1119.7213; PuntoBaZ[Companero[playerid]] = 17.9918; PuntoBaA[Companero[playerid]] = 5.0; }
			case 3: {	SetPlayerCheckpoint(Companero[playerid], 1105.8407,-958.8027,42.3986, 5.0);
			            PuntoBaX[Companero[playerid]] = 1105.8407; PuntoBaY[Companero[playerid]] = -958.8027; PuntoBaZ[Companero[playerid]] = 42.3986; PuntoBaA[Companero[playerid]] = 5.0; }
			case 4: {	SetPlayerCheckpoint(Companero[playerid], 1260.1581,-1106.3085,25.0804, 5.0);
			            PuntoBaX[Companero[playerid]] = 1260.1581; PuntoBaY[Companero[playerid]] = -1106.3085; PuntoBaZ[Companero[playerid]] = 25.0804; PuntoBaA[Companero[playerid]] = 5.0; }
			case 5: {	SetPlayerCheckpoint(Companero[playerid], 1193.4933,-1498.0582,13.3828, 5.0);
			            PuntoBaX[Companero[playerid]] = 1193.4933; PuntoBaY[Companero[playerid]] = -1498.0582; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 6: {	SetPlayerCheckpoint(Companero[playerid], 1295.2137,-1839.4456,13.3828, 5.0);
			            PuntoBaX[Companero[playerid]] = 1295.2137; PuntoBaY[Companero[playerid]] = -1839.4456; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 7: {	SetPlayerCheckpoint(Companero[playerid], 1039.8508,-1670.3042,13.3828, 5.0);
			            PuntoBaX[Companero[playerid]] = 1039.8508; PuntoBaY[Companero[playerid]] = -1670.3042; PuntoBaZ[Companero[playerid]] = 13.3828; PuntoBaA[Companero[playerid]] = 5.0; }
			case 8: {	SetPlayerCheckpoint(Companero[playerid], 932.7011,-1486.6115,13.3750, 5.0);
			            PuntoBaX[Companero[playerid]] = 932.7011; PuntoBaY[Companero[playerid]] = -1486.6115; PuntoBaZ[Companero[playerid]] = 13.3750; PuntoBaA[Companero[playerid]] = 5.0; }
			case 9: {	SetPlayerCheckpoint(Companero[playerid], 855.2783,-1392.5234,13.3664, 5.0);
			            PuntoBaX[Companero[playerid]] = 855.2783; PuntoBaY[Companero[playerid]] = -1392.5234; PuntoBaZ[Companero[playerid]] = 13.3664; PuntoBaA[Companero[playerid]] = 5.0; }
			case 10: {	SetPlayerCheckpoint(Companero[playerid], 483.1931,-1499.0760,20.3036, 5.0);
			            PuntoBaX[Companero[playerid]] = 483.1931; PuntoBaY[Companero[playerid]] = -1499.0760; PuntoBaZ[Companero[playerid]] = 20.3036; PuntoBaA[Companero[playerid]] = 5.0; }
			case 11: {	SetPlayerCheckpoint(Companero[playerid], 656.1319,-1675.2115,14.2370, 5.0);
			            PuntoBaX[Companero[playerid]] = 656.1319; PuntoBaY[Companero[playerid]] = -1675.2115; PuntoBaZ[Companero[playerid]] = 14.2370; PuntoBaA[Companero[playerid]] = 5.0; }
			case 12: {	SetPlayerCheckpoint(Companero[playerid], 807.8727,-1757.3798,13.3872, 5.0);
			            PuntoBaX[Companero[playerid]] = 807.8727; PuntoBaY[Companero[playerid]] = -1757.3798; PuntoBaZ[Companero[playerid]] = 13.3872; PuntoBaA[Companero[playerid]] = 5.0; }
			case 13: {	SetPlayerCheckpoint(Companero[playerid], 107.0301,-1530.0708,6.4494, 5.0);
			            PuntoBaX[Companero[playerid]] = 107.0301; PuntoBaY[Companero[playerid]] = -1530.0708; PuntoBaZ[Companero[playerid]] = 6.4494; PuntoBaA[Companero[playerid]] = 5.0; }
			case 14: {	SetPlayerCheckpoint(Companero[playerid],-135.9441,-1564.9911,6.7356,5.0);
			            PuntoBaX[Companero[playerid]] = -135.9441; PuntoBaY[Companero[playerid]] = -1564.9911; PuntoBaZ[Companero[playerid]] = 6.7356; PuntoBaA[Companero[playerid]] = 5.0; }
		}
	}
}
Revivir(revivido)
{
    FabricaMedica[revivido] = 0;
    PLAYER_TIMES[revivido][TIMER_VIDA] = gettime() + 3;
	ColorJugadorDefault(revivido);
    LlamadaMedicos[revivido] = 0;
	TextDrawHideForPlayer(revivido, Sangre);
	TextDrawHideForPlayer(revivido, NewPlayer[2]);
    TextDrawHideForPlayer(revivido, NewPlayer[0]);
	PLAYER_INFO[revivido][Agonizando] = 0;
	TogglePlayerControllable(revivido,1);
	Descongelar(revivido);
	suicidio[revivido] = 0;
	TimerMalherido[revivido] = 0;
	ClearAnimations(revivido);
	PLAYER_INFO[revivido][Agonizando] = 0;
	Muriendo[revivido] = 0;
	Esposando[revivido] = 0;
	PLAYER_TEMP[revivido][VariableCaido] = 0;
	DescongelarCBUG(revivido);
	SetPlayerHealthEx(revivido, 100.0);
	ClearAnimations(revivido);
	ApplyAnimation(revivido, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return 1;
}
GetPlayerID(const playername[])
{
 	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(strcmp(PLAYER_INFO[i][Nickname],playername,true)==0) return i;
		}
	}
	return -1;
}
SetPosVeh(vehicleid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
	SetVehiclePosEx(vehicleid, X, Y, Z);
	SetVehicleZAngle(vehicleid, A);
	SetVehiclePassengersInteriorEx(vehicleid, interiorid);
	SetVehiclePassengersVWEx(vehicleid, worldid);
	return 1;
}

ExpulsarJugador(playerid, const string[])
{
	printf("%s(%d) - (%s)", PLAYER_INFO[playerid][Nickname],playerid,string);
	defer KickFix(playerid);
	return 1;
}

IsVehicleInArea(vehicleid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    if(x >= minx && x <= maxx && y >= miny && y <= maxy) return 1;
    return 0;
}
PlayerConectado(playerid)
{
	if(playerid == INVALID_PLAYER_ID) return 1;
	if(playerid < 0 || playerid > MAX_PLAYERS) return 1;
	if(!IsPlayerConnected(playerid)) return 0;
	if(JugadorLogeado[playerid] == 1) return 1;
	return 0;
}
MensajeEx(playerid, color, const form[], {Float, _}: ...)
{
    #pragma unused form
    static tmp[145];
    new t1 = playerid,t2 = color;
    const n4 = -4, n16 = -16, size = sizeof tmp;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16
    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}
AbrirPuertasCamionero(playerid)
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
		case 456:
		{
            GLOBAL_VEHICLES[GetPlayerVehicleID(playerid)][gb_vehicle_PARAMS_BOOT] = 1;
            UpdateVehicleParams(GetPlayerVehicleID(playerid));
		}
		case 609:
		{
            GetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, door3, door4);
			SetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, 1, 1);
		}
	}
	return 1;
}
CerrarPuertasCamionero(playerid)
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
		case 456:
		{
            GLOBAL_VEHICLES[GetPlayerVehicleID(playerid)][gb_vehicle_PARAMS_BOOT] = 0;
            UpdateVehicleParams(GetPlayerVehicleID(playerid));
		}
		case 609:
		{
            GetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, door3, door4);
			SetVehicleParamsCarDoors(GetPlayerVehicleID(playerid), door1, door2, 0, 0);
		}
	}
	return 1;
}
ReportCrimen(playerid,report)
{
	foreach(new i : Player)
	{
	    if(PLAYER_INFO[i][pFaccion] == 1 && PLAYER_INFO[i][pDuty] == 1 && PLAYER_INFO[i][pSonidos] == 1) PlayCrimeReportForPlayer(i,playerid,report);
	    else if(PLAYER_INFO[i][pFaccion] == 2 && PLAYER_INFO[i][mDuty] == 1 && PLAYER_INFO[i][pSonidos] == 1) PlayCrimeReportForPlayer(i,playerid,report);
	}
	return 1;
}
GuardarPosicionMuerte(x)
{
	new Query[256];
    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `DeathX`='%f',`DeathY`='%f', `DeathZ`='%f' WHERE `Username`='%e'", DeathX[x],DeathY[x],DeathZ[x],PLAYER_INFO[x][Nickname]);
	mysql_pquery(handle_db, Query);
	return 1;
}
public AplicarAlarma(vehicleid)
{
    GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 1;
    UpdateVehicleParams(vehicleid);
	return 1;
}
IsCorrectMail(const mail[])
{
	new len = strlen(mail), bool:find[2], w;
 	if(!(6 < len < 129)) return 0;
  	for(new l; l < len; l++)
  	{
   		if(mail[l] == '.') find[0] = true;
     	if(mail[l] == '@')
      	{
       		if(find[1]) return 0;
         	find[1] = true;
          	w = l;
           	if(w > 64) return 0;
       	}
        if(!(mail[l] >= 'A' && mail[l] <= 'Z' || mail[l] >= 'a' && mail[l] <= 'z' || mail[l] >= '0' && mail[l] <= '9' || mail[l] == '.' || mail[l] == '-' || mail[l] == '_' || mail[l] == '@')) return 0;
   	}
    if(len - w > 65) return 0;
    if(!find[0] || !find[1]) return 0;
    return 1;
}

TimeConvert(seconds)
{
	new tmp[16];
	new minutes = floatround(seconds/60);
	seconds -= minutes*60;
	format(tmp, sizeof(tmp), "%dm %ds", minutes, seconds);
	return tmp;
}

FormatTimeleft(segundos)
{
    new time[200];
    new minutos,Horas,dias,semanas, meses, yeras;

    if(segundos > 59)	{ 	minutos = segundos / 60;	segundos = segundos - (minutos * 60);	}
    if(minutos > 59)	{	Horas = minutos / 60;		minutos = minutos - (Horas * 60);		}
    if(Horas > 23)		{	dias = Horas / 24; 			Horas = Horas - (dias * 24);			}
    if(dias > 7)		{	semanas = (dias / 7); 		dias = dias - (semanas * 7);			}
    if(semanas >= 4) 	{	meses = floatround(semanas / 4.345); semanas = semanas - floatround(meses * 4.345);						}
	if(meses > 12)      {   yeras = (meses / 12); 		meses = meses - (yeras * 12);   		}

	if(yeras > 0) format(time,sizeof(time),"%d año(s) %d mes(es)",yeras, meses);
	else if(meses > 0) format(time,sizeof(time),"%d mes(es)", meses);
    else if(dias > 0) format(time,sizeof(time),"%dd",dias);
    else if(Horas > 0) format(time,sizeof(time),"%dh",Horas);
    else if(minutos > 0) format(time,sizeof(time),"%dm",minutos);
    else format(time,sizeof(time),"%ds",segundos);
    return time;
}

TimeConvertEx(segundos)
{
    new time[200];
    new minutos,Horas,dias;
    if(segundos > 59)	{ 	minutos = segundos / 60;	segundos = segundos - (minutos * 60);	}
    if(minutos > 59)	{	Horas = minutos / 60;		minutos = minutos - (Horas * 60);		}
    if(Horas > 23)		{	dias = Horas / 24; 			Horas = Horas - (dias * 24);			}
    
    if(dias > 0) format(time,sizeof(time),"{FF0000}%dd %dh %dm %ds {FFFFFF}",dias,Horas,minutos,segundos);
    else if(Horas > 0) format(time,sizeof(time),"{FF0000}%dh %dm %ds {FFFFFF}",Horas,minutos,segundos);
    else if(minutos > 0) format(time,sizeof(time),"{FF0000}%dm %ds{FFFFFF}",minutos,segundos);
    else format(time,sizeof(time),"{FF0000}%d{FFFFFF} segundos",segundos);
    return time;
}

PagarCosechador(playerid)
{
    new TypePay = random(3),string[128],object[64],Medicina = random(10);
    new coco = 369 + random(150),Objetox = random(20);
    Cosechas[playerid][ProgresoCosecha] = 0;
    switch(Cosechas[playerid][CosechaLugar])
    {
        case 1:
        {
        	switch(TypePay)
			{
				case 0:
				{
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d",coco);
				    SendClientMessage(playerid,-1,string);
					HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
				case 1:
				{
				    switch(Objetox)
				    {
				        case 0: { format(object,sizeof(object),"un cuchillo"); DarArma(playerid, 4); }
				        case 1: { format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
				        case 2: { format(object,sizeof(object),"un cuchillo"); DarArma(playerid, 4); }
				        default:{ format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                    }
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d {FFFFFF}y {f21111}%s",coco,object);
					SendClientMessage(playerid,-1,string);
					HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
				case 2:
				{
				    switch(Medicina)
				    {
				        case 0: { format(object,sizeof(object),"2g de crack"); PLAYER_INFO[playerid][pCrack] += 2; }
				        case 1: { format(object,sizeof(object),"2 medicamentos"); PLAYER_INFO[playerid][pRemedios] += 2; }
				        default:{ format(object,sizeof(object),"2 medicamentos"); PLAYER_INFO[playerid][pRemedios] += 2; }
                    }
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d {FFFFFF}y {f21111}%s",coco,object);
		  			SendClientMessage(playerid,-1,string);
		  			HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
			}
        }
 		case 2:
		{
            switch(TypePay)
			{
				case 0:
				{
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d",coco);
				    SendClientMessage(playerid,-1,string);
					HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
				case 1:
				{
				    switch(Objetox)
				    {
				        case 0: { format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
				        case 1: { format(object,sizeof(object),"una pala"); DarArma(playerid, 6); }
				        default:{ format(object,sizeof(object),"un ramo de flores"); DarArma(playerid, 14); }
                    }
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d {FFFFFF}y {f21111}%s",coco,object);
					SendClientMessage(playerid,-1,string);
					HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
				case 2:
				{
				    switch(Medicina)
				    {
				        case 0: { format(object,sizeof(object),"2g de crack"); PLAYER_INFO[playerid][pCrack] += 2; }
				        case 1: { format(object,sizeof(object),"2 medicamentos"); PLAYER_INFO[playerid][pRemedios] += 2; }
				        default:{ format(object,sizeof(object),"2 medicamentos"); PLAYER_INFO[playerid][pRemedios] += 2; }
                    }
					format(string,sizeof(string),"{f21111}¡Excelente cosecha!{FFFFFF} Tus ganancias son {f21111}$%d {FFFFFF}y {f21111}%s",coco,object);
		  			SendClientMessage(playerid,-1,string);
		  			HidePlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
				    DarDinero(playerid,coco);
				    SetTimerEx("RespawnearV",2000,false,"d",GetPlayerVehicleID(playerid));
				    Cosechas[playerid][CosechaLugar] = 0;
				    Cosechas[playerid][ProgresoCosecha] = 0;
				    Cosechas[playerid][RutaCosecha] = 0;
				}
			}
		}
	}
	RemovePlayerFromVehicle(playerid);
	DisablePlayerRaceCheckpoint(playerid);
    return 1;
}

MensajeBaulSacar(playerid,a)
{
	if(a == 1210 ||a == 1000 || a == 1001 || a == 1002 || a == 1429 || a == 1518 || a == 2912 || a == 2190 || a == 1788 || a == 1790 || a == 2028 || a == 2226 || a == 1650 || a == 10004 || a == 9003 || a == 10000 || a == 10001 || a == 10002 || a == 10003 || a == 9003)
    {
        AccionesRol(playerid, "toma un objeto de su maletero.", 20);
    	Objeto[playerid] = a;
		switch(a)
		{
		    case 1000:  SetPlayerAttachedObject(playerid, 7, 2060,  6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
		    case 1001:  SetPlayerAttachedObject(playerid, 7, 3800,  6, 0.262000,0.070999,0.021000,106.599998,-1.999999,171.599975,0.372999,0.239999,0.166000);
		    case 1002:  SetPlayerAttachedObject(playerid, 7, 2900,  6, 0.256000,0.074999,0.019000,94.400001,0.000000,1.300018,0.376999,0.207000,0.164999);
		    case 1429:  SetPlayerAttachedObject(playerid, 7, 1429,  5, -0.045800, 0.189297, 0.213481, 276.266876, 0.722662, 119.390830, 0.825105, 0.976897, 0.840149 );
		    case 1518:  SetPlayerAttachedObject(playerid, 7, 1518,  5, -0.035699, 0.228443, 0.209540, 278.555969, 357.488067, 106.670646, 0.932163, 0.899836, 0.902104 );
		    case 2912:  SetPlayerAttachedObject(playerid, 7, 2912,  5, -0.143977, 0.171898, -0.158107, 8.848129, 16.818716, 3.184455, 0.555940, 0.397590, 1.000000 );
		    case 2190:  SetPlayerAttachedObject(playerid, 7, 2190,  5, -0.358281, -0.002825, 0.023657, 285.520538, 355.671569, 107.623764, 1.000000, 1.000000, 1.000000 );
		    case 1788:  SetPlayerAttachedObject(playerid, 7, 1788,  5, 0.004669, 0.026491, 0.180251, 283.267181, 347.590423, 108.920188, 1.000000, 1.000000, 1.000000 );
		    case 1790:  SetPlayerAttachedObject(playerid, 7, 1790,  5, 0.036196, 0.060064, 0.137536, 281.493682, 354.646545, 110.527542, 1.000000, 1.000000, 1.000000 );
		    case 2028:  SetPlayerAttachedObject(playerid, 7, 2028,  5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 );
		    case 2226:  SetPlayerAttachedObject(playerid, 7, 2226,  5, -0.025814, 0.044218, 0.205650, 283.869171, 351.121704, 2.281757, 1.000000, 1.000000, 1.000000 );
		    case 1650:  SetPlayerAttachedObject(playerid, 7, 1650,  5, 0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000);
		    case 10004: SetPlayerAttachedObject(playerid, 7, 19571, 6, 0.263000,0.039999,-0.141999,116.299987,-76.799858,136.799835,0.800998,1.016000,0.866998);
		    case 9003:  SetPlayerAttachedObject(playerid, 7, 19468, 5, 0.126999,-0.089000,0.127998,101.199981,-164.499847,82.999900,1.032001,0.972000,1.002997);
		    case 10000: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
		    case 10001: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
		    case 10002: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
		    case 10003: SetPlayerAttachedObject(playerid, 7, 2969,  6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
    		case 1210:  SetPlayerAttachedObject(playerid, 7, 1210,  6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
		}
		if(a == 1518 || a == 10000 || a == 10001 || a == 10002 || a == 10003 || a == 1429 || a == 2912 || a == 2190 || a == 1788 || a == 1790 || a == 2028) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}
	else if(a == 1650) {
		AccionesRol(playerid, "toma un objeto de su maletero.", 20);
		SetPlayerAttachedObject(playerid,7,1650,5,0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000);
		Bidon[playerid] = 1;
    }
	else {
	    new string[200];
		format(string, sizeof(string), "%s saca un/a %s del maletero del vehículo.", PLAYER_INFO[playerid][Nickname], ObjetosMaletero(a));
	    ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
        //AccionesRol(playerid, "toma un arma de su maletero.", 20);
        DarArma(playerid,a);
	}
	return 1;
}
MensajeBaulGuardar(playerid,a)
{
    new string[200];
	if(a > 0 && a <= 43)
	{
		format(string, sizeof(string), "%s guarda un/a %s en el maletero del vehículo.", PLAYER_INFO[playerid][Nickname], ObjetosMaletero(a));
		ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		QuitarArma(playerid,a);
		Objeto[playerid] = 0;
    }
    else if(a == 1650)
    {
        AccionesRol(playerid, "guarda un Bidon de gasolina en el maletero del vehículo.", 20);
		RemovePlayerAttachedObject(playerid,7);
		Bidon[playerid] = 0;
		Objeto[playerid] = 0;
    }
    else
    {
        AccionesRol(playerid, "guarda un objeto en el maletero del vehículo.", 20);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid,7);
		Objeto[playerid] = 0;
    }
    return 1;
}
MarcadoTransportistaGPS(playerid,Float:x,Float:y,Float:z, Float:range = 7.0)
{
    SetPlayerCheckpoint(playerid,x,y,z,range);
	PuntoTraX[playerid] = x;
	PuntoTraY[playerid] = y;
	PuntoTraZ[playerid] = z;
	return 1;
}
MarcadoTraileroGPS(playerid,Float:x,Float:y,Float:z, Float:range = 7.0)
{
    SetPlayerCheckpoint(playerid,x,y,z,range);
	PuntoTraileroX[playerid] = x;
	PuntoTraileroY[playerid] = y;
	PuntoTraileroZ[playerid] = z;
	return 1;
}
MarcadoCamioneroGPS(playerid,Float:x,Float:y,Float:z, Float:range = 7.0)
{
    SetPlayerCheckpoint(playerid,x,y,z,range);
	PuntoCX[playerid] = x;
	PuntoCY[playerid] = y;
	PuntoCZ[playerid] = z;
	return 1;
}
CamioneroFallado(e,vehicleid)
{
    SendClientMessage(e,-1,"Fallaste en tu trabajo de camionero, no se te pagará nada.");
    CamionCargado[vehicleid] = 0;
    SetTimerEx("RespawnearV",2000,false,"d",vehicleid);
    CamionID[e] = INVALID_PLAYER_ID;
    CargandoC[e] = 0;
    PLAYER_TEMP[e][pt_Camionero] = false;
}
Congelar(id)
{
    TogglePlayerControllable(id, 0);
	SetPVarInt(id, "IsFrozen", 0);
}

stock RestarVida(playerid,Float:cantidad)
{
	new Float:resta = cantidad-PLAYER_INFO[playerid][j_ARMOUR];
	if(PLAYER_INFO[playerid][j_ARMOUR] > cantidad)
	{
		GivePlayerArmour(playerid, -cantidad);
	}
	else if(PLAYER_INFO[playerid][j_ARMOUR] <= cantidad)
	{
		SetPlayerArmourEx(playerid, 0);
		GivePlayerArmour(playerid, -resta);
	}
	else GivePlayerHealth(playerid, -cantidad);
}

Enfermedades(playerid)
{
	new enfermedad[60];
    switch(PLAYER_INFO[playerid][pEnfermedad])
	{
		case 1: { enfermedad = "Herida de bala"; }
		case 2: { enfermedad = "Múltiples heridas de bala"; }
		case 3: { enfermedad = "Fracturas Graves"; }
		case 4: { enfermedad = "Fracturas leves"; }
		case 5: { enfermedad = "Herida abierta de sangre"; }
		case 6: { enfermedad = "Hematomas"; }
		case 7: { enfermedad = "Hematomas y huesos fracturados"; }
		case 8: { enfermedad = "Hemorragia cerebral"; }
		case 9: { enfermedad = "Quemaduras"; }
		case 10: { enfermedad = "Daños severos"; }
	}
	return enfermedad;
}

forward BorrarMochilas();
public BorrarMochilas()
{
	for(new i; i < MAX_DROPS_BP; i++)
	{
		if(DropBackPack[i] == INVALID_STREAMER_ID) continue;
		if(((gettime() - TimeDrop[i])/60) >= 5)
		{
			DELETE_SQL_BP(Streamer_GetIntData(STREAMER_TYPE_OBJECT, DropBackPack[i], E_STREAMER_EXTRA_ID));
			CLEAR_DROP(i);
		}
	}
}

public Logeado(playerid)
{
	if(PLAYER_INFO[playerid][vModelo] > 0 || PLAYER_INFO[playerid][vModelo2] > 0 || PLAYER_INFO[playerid][vModelo3] > 0 || PLAYER_INFO[playerid][vModelo4] > 0) SetTimerEx("Autos",1000,false,"d",playerid);
	new Query[200];
	if(Jail[playerid] == 1)	Encerrando(playerid);
	else
	{
		NoTeleportHack(playerid);
		GetPlayerPos(playerid,PosTP[playerid][0],PosTP[playerid][1],PosTP[playerid][2]);
		SetPlayerPosEx(playerid,PosTP[playerid][0],PosTP[playerid][1],PosTP[playerid][2]);
	}
	DarDineroLogin(playerid);
	mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Online`='1' WHERE `Username`='%e'",PLAYER_INFO[playerid][Nickname]);
	mysql_tquery(handle_db, Query);
	return 1;
}
public Logeado2(playerid)
{
	PrimerSpawn[playerid] = 1;
}
public CorreoInvalido(playerid)
{
    if(cache_num_rows() != 0)
	{
	    KillTimer(LCHAT[playerid]);
	    SendClientMessage(playerid, -1, "Ya hay una cuenta registrada con ese email.");
		ExpulsarJugador(playerid,"Correo ya en uso.");
	}
	else
	{
		new pQuery[256];
		mysql_format(handle_db, pQuery, sizeof(pQuery), "SELECT * FROM `usuarios` WHERE `Username` = '%e'", PLAYER_INFO[playerid][Nickname]);
	 	mysql_pquery(handle_db, pQuery, "OnPlayerRegister", "d", playerid);
	}
	return 1;
}
public DestroyDynamicObjectEx(&objeto)
{
	if(IsValidDynamicObject(objeto)) DestroyDynamicObject(objeto);
	objeto = INVALID_STREAMER_ID;
	return 1;
}

public StopAudioStream(playerid)
{
    StopAudioStreamForPlayer(playerid);
}
public kicktimer(playerid)
{
	return Kick(playerid);
}
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    #if DEBUG_GM == 1
	printf("(OnUnoccupiedVehicleUpdate) vehicleid: %d | playerid: %d | passenger_seat: %d | new_x: %f | new_y: %f | new_z: %f | vel_x: %f | vel_y: %f | vel_z: %f", vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
	#endif
	if(IsVehicleOccupied(vehicleid)) return 1;
	new Float:vehx, Float:vehy, Float:vehz;
  	GetVehiclePos(vehicleid, vehx, vehy, vehz);
  	if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 5)
 	{
  		SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
    	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
  		return 0;
   	}
   	new Float:PlayerSpeedDistance;
 	PlayerSpeedDistance = floatmul(floatsqroot(floatadd(floatadd(floatpower(vel_x, 2), floatpower(vel_y, 2)), floatpower(vel_z, 2))), 170.0);
  	new spe = floatround(PlayerSpeedDistance * 1);
  	if(spe > 5 && passenger_seat > 0)
	{
 		SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
   		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
     	return 0;
	}
	if(passenger_seat == 0)
	{
		if(spe > 25)
 		{
   			SetVehiclePosEx(vehicleid, vehx, vehy, vehz);
 	    	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
        	return 0;
   		}
	}
    return 1;
}
public TAUDIO(playerid)
{
	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/ye5niqxzrvzufpw/LoginBZ.mp3");
}
public TimerLogin(playerid)
{
    ExpulsarJugador(playerid,"Tiempo para logear sobrepasado");
}
public ReanimarMedico(playerid,ID)
{
	new intento,string[128];
    switch(PLAYER_INFO[playerid][pNivelMedico])
	{
		case 1: intento = random(8);
		case 2: intento = random(7);
		case 3: intento = random(6);
		case 4: intento = random(5);
		default: intento = random(4);
	}
	if(IsValidDynamicMapIcon(mapIconMedico[playerid][ID])) DestroyDynamicMapIcon(mapIconMedico[playerid][ID]);
    RemovePlayerMapIcon(playerid, ID);
	switch(intento)
	{
	    case 0:
		{
			PLAYER_INFO[ID][Agonizando] = 0;
			Muriendo[ID] = 0;
			Esposando[ID] = 0;
			TogglePlayerControllable(ID,1);
			SetPVarInt(ID, "IsFrozen", 1);
			SetPlayerHealthEx(ID, 100.0);
			ClearAnimations(ID);
			ApplyAnimation(ID, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
			format(string, sizeof(string), "%s logró reanimar a %s en el lugar.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[ID][Nickname]);
			ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		}
		default:
		{
   			SetPlayerHealthEx(ID, 100.0);
  			Reanimado[ID] = 1;
			Paciente[playerid] = ID;
			PLAYER_INFO[ID][Agonizando] = 1;
			Muriendo[ID] = 0;
			Esposando[ID] = 0;
			OcultarAnim(playerid);
			MedicoReanimo[ID] = playerid;
  		}
	}
	TimerMalherido[ID] = 0;
}
public RutaCosechador(playerid)
{
    switch(Cosechas[playerid][CosechaLugar])
	{
		case 1: //Flint Range
		{
			switch(Cosechas[playerid][RutaCosecha])
			{
				case 1:
				{
				    switch(Cosechas[playerid][ProgresoCosecha])
					{
					    case 0: SetPlayerRaceCheckpoint(playerid, 0, -331.2785,-1557.1898,16.3701, -245.1280,-1555.2452,3.4091, 7.0);
						case 1: SetPlayerRaceCheckpoint(playerid, 0, -245.1280,-1555.2452,3.4091, -217.4126,-1480.3319,7.7711, 7.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 0, -217.4126,-1480.3319,7.7711, -322.8756,-1471.4065,13.1665, 7.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 0, -322.8756,-1471.4065,13.1665, -332.7359,-1518.3053,14.9885, 7.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 0, -332.7359,-1518.3053,14.9885, -229.3911,-1515.4718,7.0683, 7.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 0, -229.3911,-1515.4718,7.0683, -213.3386,-1422.6776,3.6795, 7.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 0, -213.3386,-1422.6776,3.6795, -169.1533,-1413.0715,3.0359, 7.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 0, -169.1533,-1413.0715,3.0359, -185.6943,-1352.6555,4.3742, 7.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 0, -185.6943,-1352.6555,4.3742, -245.3476,-1316.0076,10.4294, 7.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 0, -245.3476,-1316.0076,10.4294, -223.3364,-1372.3151,7.7097, 7.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 0, -223.3364,-1372.3151,7.7097, -301.3120,-1426.9681,14.2198, 7.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 0, -301.3120,-1426.9681,14.2198, -322.2830,-1324.9767,9.3733, 7.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 0, -322.2830,-1324.9767,9.3733, -223.2709,-1372.1542,7.6970, 7.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 0, -223.2709,-1372.1542,7.6970, -303.8472,-1514.6864,10.5905, 7.0);
						case 14: SetPlayerRaceCheckpoint(playerid, 0, -303.8472,-1514.6864,10.5905, -330.5511,-1552.3337,15.9343, 7.0);
						case 15: SetPlayerRaceCheckpoint(playerid, 0, -330.5511,-1552.3337,15.9343, -244.5476,-1555.4554,3.4246, 7.0);
						case 16: SetPlayerRaceCheckpoint(playerid, 0, -244.5476,-1555.4554,3.4246, -217.1465,-1481.8033,7.8521, 7.0);
						case 17: SetPlayerRaceCheckpoint(playerid, 0, -217.1465,-1481.8033,7.8521, -323.0541,-1471.5936,13.2113, 7.0);
						case 18: SetPlayerRaceCheckpoint(playerid, 0, -323.0541,-1471.5936,13.2113, -332.5766,-1517.5343,14.9429, 7.0);
						case 19: SetPlayerRaceCheckpoint(playerid, 0, -332.5766,-1517.5343,14.9429, -366.9734,-1462.9573,25.7266, 7.0);
						case 20: SetPlayerRaceCheckpoint(playerid, 1, -366.9734,-1462.9573,25.7266, -366.9734,-1462.9573,25.7266, 7.0);
                    }
                }
				case 2:
				{
                    switch(Cosechas[playerid][ProgresoCosecha])
					{
						case 0: SetPlayerRaceCheckpoint(playerid, 0, -365.5525,-1352.8912,21.1969, -347.8346,-1270.9780,26.3603, 7.0);
						case 1: SetPlayerRaceCheckpoint(playerid, 0, -347.8346,-1270.9780,26.3603, -436.4909,-1285.9847,35.3527, 7.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 0, -436.4909,-1285.9847,35.3527, -524.2065,-1388.1093,14.0612, 7.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 0, -524.2065,-1388.1093,14.0612, -533.2181,-1422.3663,12.4132, 7.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 0, -533.2181,-1422.3663,12.4132, -555.1927,-1335.8824,21.0239, 7.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 0, -555.1927,-1335.8824,21.0239, -475.5691,-1335.3695,28.9320, 7.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 0, -475.5691,-1335.3695,28.9320, -370.0000,-1339.2062,22.9786, 7.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 0, -370.0000,-1339.2062,22.9786, -385.4833,-1382.4688,23.0875, 7.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 0, -385.4833,-1382.4688,23.0875, -524.1917,-1388.2031,14.0580, 7.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 0, -524.1917,-1388.2031,14.0580, -579.2998,-1319.4611,22.5672, 7.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 0, -579.2998,-1319.4611,22.5672, -577.1034,-1419.1190,12.9226, 7.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 0, -577.1034,-1419.1190,12.9226, -402.1465,-1353.3757,24.4278, 7.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 0, -402.1465,-1353.3757,24.4278, -418.2456,-1294.0625,31.6570, 7.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 0, -418.2456,-1294.0625,31.6570, -537.5991,-1326.7606,18.8563, 7.0);
						case 14: SetPlayerRaceCheckpoint(playerid, 0, -537.5991,-1326.7606,18.8563, -519.6217,-1414.4735,13.1769, 7.0);
						case 15: SetPlayerRaceCheckpoint(playerid, 1, -519.6217,-1414.4735,13.1769, -519.6217,-1414.4735,13.1769, 7.0);
                    }
				}
			}
		}
		case 2: //Blueberry
		{
			switch(Cosechas[playerid][RutaCosecha])
			{
				case 1:
				{
					switch(Cosechas[playerid][ProgresoCosecha])
					{
						case 0: SetPlayerRaceCheckpoint(playerid, 0, -126.2398,58.0982,3.1172, -220.0446,94.3392,2.4021, 7.0);
						case 1: SetPlayerRaceCheckpoint(playerid, 0, -220.0446,94.3392,2.4021, -272.4693,-44.4520,2.7906, 7.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 0, -272.4693,-44.4520,2.7906, -197.2084,-79.3804,3.1172, 7.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 0, -197.2084,-79.3804,3.1172, -158.4449,-24.6361,3.0463, 7.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 0, -158.4449,-24.6361,3.0463, -246.2974,26.1492,2.3419, 7.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 0, -246.2974,26.1492,2.3419, -179.2646,79.8465,3.0452, 7.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 0, -179.2646,79.8465,3.0452, -189.9071,-0.9972,3.0371, 7.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 0, -189.9071,-0.9972,3.0371, -217.7651,-79.0095,3.0434, 7.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 0, -217.7651,-79.0095,3.0434, -244.6129,-34.8416,3.0441, 7.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 0, -244.6129,-34.8416,3.0441, -122.0727,101.0684,3.0454, 7.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 0, -122.0727,101.0684,3.0454, -106.7489,144.0846,3.0485, 7.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 0, -106.7489,144.0846,3.0485, -173.6293,165.7723,7.3298, 7.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 0, -173.6293,165.7723,7.3298, -274.3358,-55.1750,3.0505, 7.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 0, -274.3358,-55.1750,3.0505, -40.9733,88.9567,3.0512, 7.0);
						case 14: SetPlayerRaceCheckpoint(playerid, 0, -40.9733,88.9567,3.0512, -40.9733,88.9567,3.0512, 7.0);
                    }
				}
				case 2:
				{
                    switch(Cosechas[playerid][ProgresoCosecha])
					{
						case 0: SetPlayerRaceCheckpoint(playerid, 0, 21.7380,60.7267,3.0485, 64.6343,-30.3969,0.7852, 7.0);
						case 1: SetPlayerRaceCheckpoint(playerid, 0, 64.6343,-30.3969,0.7852, 51.5721,-95.6284,0.5472, 7.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 0, 51.5721,-95.6284,0.5472, -40.4740,-106.9275,3.0461, 7.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 0, -40.4740,-106.9275,3.0461, -10.2124,-9.5856,3.0462, 7.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 0, -10.2124,-9.5856,3.0462, 45.8793,39.9411,2.0257, 7.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 0, 45.8793,39.9411,2.0257, 70.4207,2.5197,0.6218, 7.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 0, 70.4207,2.5197,0.6218, 18.8934,-83.4595,1.6948, 7.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 0, 18.8934,-83.4595,1.6948, 22.0990,60.9488,3.0427, 7.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 0, 22.0990,60.9488,3.0427, 64.8705,-31.4464,0.7353, 7.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 0, 64.8705,-31.4464,0.7353, 50.4737,-95.3511,0.5446, 7.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 0, 50.4737,-95.3511,0.5446, -39.7749,-106.4593,3.0474, 7.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 0, -39.7749,-106.4593,3.0474, -10.2871,-9.6325,3.0445, 7.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 0, -10.2871,-9.6325,3.0445, 45.2227,38.4053,2.1206, 7.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 0,45.2227,38.4053,2.1206, -40.5061,91.5295,3.0462, 7.0);
						case 14: SetPlayerRaceCheckpoint(playerid, 1, -40.5061,91.5295,3.0462, -40.5061,91.5295,3.0462, 7.0);
                    }
				}
			}
		}
    }
}
public CosechasPoints(playerid)
{
	switch(Cosechas[playerid][CosechaLugar])
	{
		case 1: //hacia SF
		{
			switch(Cosechas[playerid][RutaCosecha])
			{
				case 1:
				{
					Cosechas[playerid][ProgresoCosecha] = 0;
					RutaCosechador(playerid);
				}
				case 2:
				{
					Cosechas[playerid][ProgresoCosecha] = 0;
					RutaCosechador(playerid);
				}
			}
		}
		case 2: //Blueberry
		{
			switch(Cosechas[playerid][RutaCosecha])
			{
				case 1:
				{
					Cosechas[playerid][ProgresoCosecha] = 0;
					RutaCosechador(playerid);
				}
				case 2:
				{
					Cosechas[playerid][ProgresoCosecha] = 0;
					RutaCosechador(playerid);
				}
			}
		}
    }
}

MostrarBoxLogeo(playerid)
{
    foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && i != playerid && PLAYER_INFO[playerid][pFaccion] == PLAYER_INFO[i][pFaccion] && PLAYER_INFO[i][pAlerta] == 1)
		{
		    PlayerTextDrawSetString(i,PlayerTextdrawInfo[i][NotiConnect][1], PLAYER_INFO[playerid][Nickname]);
			PlayerTextDrawSetPreviewModel(i,PlayerTextdrawInfo[i][NotiConnect][2], PLAYER_INFO[playerid][pRopa]);
            PlayerTextDrawSetPreviewRot(i,PlayerTextdrawInfo[i][NotiConnect][2], 0.000000, 0.000000, 0.000000, 1.000000);

	        PlayerPlaySoundEx(i, 1085, 0.0, 0.0, 0.0);
	        PlayerTextDrawShow(i,PlayerTextdrawInfo[i][NotiConnect][0]);
	        PlayerTextDrawShow(i,PlayerTextdrawInfo[i][NotiConnect][1]);
	        PlayerTextDrawShow(i,PlayerTextdrawInfo[i][NotiConnect][2]);
	       	PlayerTextDrawShow(i,PlayerTextdrawInfo[i][NotiConnect][3]);
	        SetTimerEx("AdiosTextConectado", 5000,false, "i", i);
		}
	}
	return 1;
}

funcion AdiosTextConectado(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdrawInfo[playerid][NotiConnect][0]);
	PlayerTextDrawHide(playerid, PlayerTextdrawInfo[playerid][NotiConnect][1]);
	PlayerTextDrawHide(playerid, PlayerTextdrawInfo[playerid][NotiConnect][2]);
	PlayerTextDrawHide(playerid, PlayerTextdrawInfo[playerid][NotiConnect][3]);
 	return 1;
}
PosicionGPS(playerid,Float:x,Float:y,Float:z,Float:range)
{
    SendClientMessage(playerid, -1, "Se ha marcado en el mapa un {FF0000}punto rojo{FFFFFF} en la ubicación seleccionada.");
    PlayerPlaySoundEx(playerid,1053,0.0,0.0,0.0);
    SetPlayerCheckpoint(playerid, x,y,z, range);
    TieneGPSActivo[playerid] = 1;
	return 1;
}
AutoOcupado(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i,vehicleid))
	    {
	        return 1;
	    }
	}
	return 0;
}
EstaEnAutoVent4(vehicleid,playerid)
{
	foreach(new i : Player)
    {
    	if(IsPlayerInVehicle(i, vehicleid))
        {
            SendClientMessage(playerid,-1,"Encontramos una persona dentro del vehículo, no podemos llevarlo a la concesionaria.");
            SendClientMessage(playerid,-1,"Llama a la policía si crees que tu vehículo ha sido robado.");
			return 0;
        }
   	}
	return 1;
}

stock SetHabilityWeaponJob(playerid,nivel_armero)
{
    if(PLAYER_INFO[playerid][pNivelArmero] == nivel_armero && PLAYER_INFO[playerid][pExpArmero] < 49)
	{
		if(PLAYER_INFO[playerid][pVIP] >= 2)
        {
            new puntos = random(3);
            switch(puntos)
            {
                case 0:{ PLAYER_INFO[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
                case 1:{ PLAYER_INFO[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
                case 2:{ PLAYER_INFO[playerid][pExpArmero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +2 puntos."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpArmero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad en la fabricación de armas aumentada +1 punto."); }
	}
	else if(PLAYER_INFO[playerid][pNivelArmero] == nivel_armero && PLAYER_INFO[playerid][pExpArmero] >= 49)
	{
		PLAYER_INFO[playerid][pNivelArmero]++;
		PLAYER_INFO[playerid][pExpArmero] = 0;
		SendClientMessage(playerid,-1,"Has aumentado tu nivel de armero, ahora puedes crear otras armas");
	}
	return 1;
}

StringPing(playerid)
{
	new Ping[100];
	new ping = GetPlayerPing(playerid);
	if(ping >= 0 && ping < 150) format(Ping, sizeof(Ping), "{46e800}%d{FFFFFF}",ping);
	if(ping >= 150 && ping < 200) format(Ping, sizeof(Ping), "{00cbf7}%d{FFFFFF}",ping);
	if(ping >= 200 && ping < 250) format(Ping, sizeof(Ping), "{E0F600}%d{FFFFFF}",ping);
	if(ping >= 250 && ping < 300) format(Ping, sizeof(Ping), "{f7e300}%d{FFFFFF}",ping);
	if(ping >= 300) format(Ping, sizeof(Ping), "{f74000}%d{FFFFFF}",ping);
	return Ping;
}

PlayerName(playerid)
{
    new nombre[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nombre, sizeof(nombre));
    return nombre;
}
EnviarCarcel(playerid)
{
    if(EstaDomiciliaria[playerid] == 1) return EnvioDomiciliaria(playerid);
	DarRopa(playerid);
	CeldaJugador[playerid] = 1;
	SetPlayerPosEx(playerid, 227.3367,109.3470,999.0156);
	SetPlayerInterior(playerid, 10);
	SetPlayerVirtualWorld(playerid, 1);
	QuitarArmas(playerid);
	CargarMapeosEx(playerid);
	return 1;
}
LoadVehicles(playerid)
{
	new Query[256];
	for(new i = 0; i < 4; i++)
	{
	    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM p_vehicles WHERE Slot = '%d' AND Propietario = '%d'",i+1,PLAYER_INFO[playerid][pID]);
    	mysql_tquery(handle_db, Query, "L_Vehicles", "ii",i+1,playerid);
	}
}
CargarMapeosEx(playerid, time = 3, mostrar = 1)
{
    NoTeleportHack(playerid);
	TogglePlayerControllable(playerid, 0);
	if(mostrar == 1) GameTextForPlayer(playerid, "~r~Cargando...~n~~w~Espera por favor", time, 4);
	SetTimerEx("DesCargarMapeosEx", time*1000+500, false, "i", playerid);
	SetPVarInt(playerid, "IsFrozen", 0);
	return 1;
}
VerTiempos(playerid,id)
{
	if(Jail[id] == 1)
	{
		new string[256];
		if(PLAYER_INFO[id][pTiempoCarcel] < 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%ds", PLAYER_INFO[id][pTiempoCarcel]);
		else if(PLAYER_INFO[id][pTiempoCarcel] >= 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%dm %ds", PLAYER_INFO[id][pTiempoCarcel]/60,PLAYER_INFO[id][pTiempoCarcel]%(60));
		SendClientMessage(playerid,-1,string);
	}
	else if(PLAYER_INFO[id][pTiempoJail] > 0)
	{
		new string[256];
		if(PLAYER_INFO[id][pTiempoJail] < 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%ds", PLAYER_INFO[id][pTiempoJail]);
		else if(PLAYER_INFO[id][pTiempoJail] >= 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%dm %ds", PLAYER_INFO[id][pTiempoJail]/60, PLAYER_INFO[id][pTiempoJail]%(60));
		SendClientMessage(playerid,-1,string);
	}
	return 1;
}
VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}
ColocarCombate(playerid)
{
	if(EnCombate[playerid] == 0)
	{
		TimerCombate[playerid] = SetTimerEx("TextoCombate",800,true,"d",playerid);
		EnCombate[playerid] = 1;
		PLAYER_TIMES[playerid][TiempoCombate] = 40;
	}
	else if(EnCombate[playerid] == 1) PLAYER_TIMES[playerid][TiempoCombate] = 40;
}
ObtenerEstadoSalud(playerid)
{
	if(PLAYER_INFO[playerid][j_HEALTH] > 0 && PLAYER_INFO[playerid][j_HEALTH] < 11) PLAYER_INFO[playerid][pEnfermedad] = 10;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 10 && PLAYER_INFO[playerid][j_HEALTH] < 21) PLAYER_INFO[playerid][pEnfermedad] = 1;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 20 && PLAYER_INFO[playerid][j_HEALTH] < 31) PLAYER_INFO[playerid][pEnfermedad] = 3;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 30 && PLAYER_INFO[playerid][j_HEALTH] < 41) PLAYER_INFO[playerid][pEnfermedad] = 2;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 40 && PLAYER_INFO[playerid][j_HEALTH] < 51) PLAYER_INFO[playerid][pEnfermedad] = 5;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 50 && PLAYER_INFO[playerid][j_HEALTH] < 61) PLAYER_INFO[playerid][pEnfermedad] = 8;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 60 && PLAYER_INFO[playerid][j_HEALTH] < 71) PLAYER_INFO[playerid][pEnfermedad] = 7;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 70 && PLAYER_INFO[playerid][j_HEALTH] < 81) PLAYER_INFO[playerid][pEnfermedad] = 6;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 80 && PLAYER_INFO[playerid][j_HEALTH] < 91) PLAYER_INFO[playerid][pEnfermedad] = 9;
	else if(PLAYER_INFO[playerid][j_HEALTH] > 90 && PLAYER_INFO[playerid][j_HEALTH] < 100) PLAYER_INFO[playerid][pEnfermedad] = 4;
	else PLAYER_INFO[playerid][pEnfermedad] = 4;
	return 1;
}
SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid, congelar = 1)
{
	NoTeleportHack(playerid);

	if(interiorid > 0) GetPlayerPos(playerid, PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z]), CargarMapeosEx(playerid);

	SetPlayerPosEx(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, A);
	SetPlayerInterior(playerid, interiorid);
	SetPlayerVirtualWorld(playerid, worldid);
	if(congelar == 1) CargarMapeosEx(playerid);

	if(interiorid == 0) GetPlayerPos(playerid, PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z]);
	return 1;
}
SetPosEntrar(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid, tienda = 0)
{
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
	if(interiorid > 0) GetPlayerPos(playerid, PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z]);
	if(tienda == 1)
    NoTeleportHack(playerid);
	CargarMapeosEx(playerid);
	SetPlayerPosEx(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, A);
	SetPlayerInterior(playerid, interiorid);
	SetPlayerVirtualWorld(playerid, worldid);
	if(interiorid == 0) GetPlayerPos(playerid, PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z]);
	return 1;
}
MensajeAdmin(color, const string[],level)
{
	foreach(new i : Player)
	{
		if(PLAYER_INFO[i][pAdmin] >= level && VerAdmin[i] == 1) SendClientMessage(i, color, string);
	}
	return 1;
}
ApareceHospital(playerid)
{
	SetPlayerHealthEx(playerid, 4.0);
	if(PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1)
	{
		QuitarArmas(playerid);
		SetPlayerArmourEx(playerid,0.0);
	}
	FabricaMedica[playerid] = 0;
	DarRopa(playerid);
	DarArmas(playerid);
	HospitalMasCercano(playerid);
	LlamadaMedicos[playerid] = 0;
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid, 0);
	PLAYER_INFO[playerid][Agonizando] = 0;
	Esposando[playerid] = 0;
	PLAYER_TEMP[playerid][VariableCaido] = 0;
	Muriendo[playerid] = 0;
	TogglePlayerControllable(playerid,0);
	SetPVarInt(playerid, "IsFrozen", 0);
	EnCombate[playerid] = 0;
 	TextDrawHideForPlayer(playerid, Sangre);
 	TextDrawHideForPlayer(playerid, NewPlayer[2]);
 	TextDrawHideForPlayer(playerid, NewPlayer[0]);
	SendClientMessage(playerid, -1,"Fuiste trasladado al hospital y los médicos pudieron reanimarte");
	TimerMalherido[playerid] = 0;
	PLAYER_INFO[playerid][pSed] = 1;
	PLAYER_INFO[playerid][pHambre] = 1;
	BarraHambre(playerid);
	BarraSed(playerid);
	SetTimerEx("CurarON",1000,false,"d",playerid);
	return 1;
}

LimpiarLog(lineas)
{
 	foreach(new i : Player)
	{
		if(PLAYER_INFO[i][pAdmin] < 1)
		{
		    for(new e=0; e<lineas; e++) SendClientMessage(i, -1, "");
			SendClientMessage(i, 0xAA3333AA, "El log del chat fue borrado.");
		}
	}
	return 1;
}
LimpiarChat(playerid, lines, color)
{
	if(IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++) SendClientMessage(playerid,color," ");
	}
	return 1;
}

BarraSed(playerid)
{
	if(PLAYER_INFO[playerid][pBarras] == 1)
	{
		BarrasJugador[playerid][0] = CreatePlayerProgressBar(playerid, 2.000000, 443.000000, 53.000000, 4.000000, 278579711, 100);
		SetPlayerProgressBarValue(playerid, BarrasJugador[playerid][0], PLAYER_INFO[playerid][pSed]);
		SetPlayerProgressBarMaxValue(playerid, BarrasJugador[playerid][0], 100);
		ShowPlayerProgressBar(playerid, BarrasJugador[playerid][0]);
		UpdatePlayerProgressBar(playerid, BarrasJugador[playerid][0]);

		return 1;
	}
    else if(PLAYER_INFO[playerid][pBarras] == 0)
	{
		HidePlayerProgressBar(playerid, BarrasJugador[playerid][0]);
		DestroyPlayerProgressBar(playerid, BarrasJugador[playerid][0]);
		return 1;
	}
	return 1;
}
BarraHambre(playerid)
{
	if(PLAYER_INFO[playerid][pBarras] == 1)
	{
		BarrasJugador[playerid][1] = CreatePlayerProgressBar(playerid, 57.000000, 443.000000, 56.500000, 4.000000, -764862721, 100);
		SetPlayerProgressBarValue(playerid, BarrasJugador[playerid][1], PLAYER_INFO[playerid][pHambre]);
		SetPlayerProgressBarMaxValue(playerid, BarrasJugador[playerid][1], 100);
		ShowPlayerProgressBar(playerid, BarrasJugador[playerid][1]);
		UpdatePlayerProgressBar(playerid, BarrasJugador[playerid][1]);
		return 1;
	}
	else if(PLAYER_INFO[playerid][pBarras] == 0)
	{
		HidePlayerProgressBar(playerid, BarrasJugador[playerid][1]);
		DestroyPlayerProgressBar(playerid, BarrasJugador[playerid][1]);
		return 1;
	}
	return 1;
}
IsPlayerNearVehicle(playerid,vehicleid)
{
    new Float:X, Float:Y, Float:Z;
	GetVehiclePos(vehicleid, X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid, 1.0, X, Y, Z))
	{
		new Float:x1,Float:y1,Float:z1;
		GetPlayerPos(playerid,x1,y1,z1);
		SetPlayerPosEx(playerid,x1,y1,z1+1);
	}
}

SetVehiclePassengersInteriorEx(vehicleid, interior_id)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
			{
    			PLAYER_TIMES[i][TIMER_SURFING] = gettime() + 3;
				SetPlayerInterior(i, interior_id);
			}
        }
    }
    return LinkVehicleToInterior(vehicleid, interior_id);
}
SetVehiclePassengersVWEx(vehicleid, vw_id)
{
    foreach(new i : Player)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerInVehicle(i, vehicleid))
			{
    			PLAYER_TIMES[i][TIMER_SURFING] = gettime() + 3;
				SetPlayerVirtualWorld(i, vw_id);
			}
        }
    }
    return SetVehicleVirtualWorldEx(vehicleid, vw_id);
}
CreatePlayerVehicle(playerid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, precio, monedas, idmensaje)
{
    new mensaje[10];
	new day, month, year, Query[1200];
	getdate(day,month,year);
	if(PLAYER_INFO[playerid][vModelo] == 0)
	{

	    mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `p_vehicles` (Modelo,X,Y,Z,A,Color1,Color2,Vida,Precio,vMoneda,Propietario,Slot) VALUES ('%d','%f','%f','%f','%f','%d','%d','1000.0','%d','%d','%d','1')", modelid,x,y,z,angle,color1,color2,precio,monedas,PLAYER_INFO[playerid][pID]);
		mysql_query(handle_db, Query, true);

		PLAYER_INFO[playerid][vID1] = cache_insert_id();
		PLAYER_INFO[playerid][vModelo] = modelid;
		PLAYER_INFO[playerid][pOX] = x;
		PLAYER_INFO[playerid][pOY] = y;
		PLAYER_INFO[playerid][pOZ] = z;
		PLAYER_INFO[playerid][pOA] = angle;
		PLAYER_INFO[playerid][vColor1] = color1;
		PLAYER_INFO[playerid][vColor2] = color2;
		PLAYER_INFO[playerid][vPrecio] = precio;
		PLAYER_INFO[playerid][vMonedaa] = monedas;
		bloqueado[autos[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro] = 0;
		PLAYER_INFO[playerid][vAAlarma] = 0;
		//

		alarma[autos[playerid]] = 0;
 		autos[playerid] = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
 		ROBO_COCHE[autos[playerid]][EsRobo] = 0;
  		format(mensaje, 10,""SERVER_COIN"RP %d", autos[playerid]);
		PLAYER_INFO[playerid][vpatente] = mensaje;
 		SetVehicleNumberPlate(autos[playerid], PLAYER_INFO[playerid][vpatente]);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE p_vehicles SET `Patente`='%e',`EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='0',`O_VW`='0' WHERE `Propietario`='%d' AND Slot = '1'",mensaje, x,y,z,angle,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);

		VehicleFuel[autos[playerid]] = CombustibleCoche(GetVehicleModel(autos[playerid]));
		PLAYER_INFO[playerid][vGas] = CombustibleCoche(GetVehicleModel(autos[playerid]));
		//
		MSG_COMPROVEH(playerid);
		if(!mayPlayerSpawnVehicle(playerid))
		{
 			if(autos[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos[playerid]),autosSpawned[playerid][0] = false;
		}else 	autosSpawned[playerid][0] = true;

		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo2] == 0)
	{
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `p_vehicles` (Modelo,X,Y,Z,A,Color1,Color2,Vida,Precio,vMoneda,Propietario,Slot) VALUES ('%d','%f','%f','%f','%f','%d','%d','1000.0','%d','%d','%d','2')", modelid,x,y,z,angle,color1,color2,precio,monedas,PLAYER_INFO[playerid][pID]);
		mysql_query(handle_db, Query, true);

		PLAYER_INFO[playerid][vID2] = cache_insert_id();
		PLAYER_INFO[playerid][vModelo2] = modelid;
		PLAYER_INFO[playerid][pOX2] = x;
		PLAYER_INFO[playerid][pOY2] = y;
		PLAYER_INFO[playerid][pOZ2] = z;
		PLAYER_INFO[playerid][pOA2] = angle;
		PLAYER_INFO[playerid][v2Color1] = color1;
		PLAYER_INFO[playerid][v2Color2] = color2;
		PLAYER_INFO[playerid][v2Precio] = precio;
		PLAYER_INFO[playerid][v2Monedaa] = monedas;
		bloqueado[autos2[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro2] = 0;
		PLAYER_INFO[playerid][vAAlarma2] = 0;
		alarma[autos2[playerid]] = 0;
        autos2[playerid] = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
        ROBO_COCHE[autos2[playerid]][EsRobo] = 0;
        format(mensaje, 10,""SERVER_COIN"RP %d", autos2[playerid]);
		PLAYER_INFO[playerid][v2patente] = mensaje;
        SetVehicleNumberPlate(autos2[playerid], PLAYER_INFO[playerid][v2patente]);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Patente`='%e',`EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='0',`O_VW`='0' WHERE `Propietario`='%d' AND Slot = '2'",mensaje, x,y,z,angle,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		VehicleFuel[autos2[playerid]] = CombustibleCoche(GetVehicleModel(autos2[playerid]));
		PLAYER_INFO[playerid][v2Gas] = CombustibleCoche(GetVehicleModel(autos2[playerid]));
		MSG_COMPROVEH(playerid);
		if(!mayPlayerSpawnVehicle(playerid))
		{
 			if(autos2[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos2[playerid]),autosSpawned[playerid][1] = false;
		}else 	autosSpawned[playerid][1] = true;
		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo3] == 0)
	{
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `p_vehicles` (Modelo,X,Y,Z,A,Color1,Color2,Vida,Precio,vMoneda,Propietario,Slot) VALUES ('%d','%f','%f','%f','%f','%d','%d','1000.0','%d','%d','%d','3')", modelid,x,y,z,angle,color1,color2,precio,monedas,PLAYER_INFO[playerid][pID]);
		mysql_query(handle_db, Query, true);

		PLAYER_INFO[playerid][vID3] = cache_insert_id();
		PLAYER_INFO[playerid][vModelo3] = modelid;
		PLAYER_INFO[playerid][pOX3] = x;
		PLAYER_INFO[playerid][pOY3] = y;
		PLAYER_INFO[playerid][pOZ3] = z;
		PLAYER_INFO[playerid][pOA3] = angle;
		PLAYER_INFO[playerid][v3Color1] = color1;
		PLAYER_INFO[playerid][v3Color2] = color2;
		PLAYER_INFO[playerid][v3Precio] = precio;
		PLAYER_INFO[playerid][v3Monedaa] = monedas;
		bloqueado[autos3[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro3] = 0;
		PLAYER_INFO[playerid][vAAlarma3] = 0;
		alarma[autos3[playerid]] = 0;
        autos3[playerid] = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
        ROBO_COCHE[autos3[playerid]][EsRobo] = 0;
        format(mensaje, 10,""SERVER_COIN"RP %d", autos3[playerid]);
		PLAYER_INFO[playerid][v3patente] = mensaje;
        SetVehicleNumberPlate(autos3[playerid], PLAYER_INFO[playerid][v3patente]);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Patente`='%e',`EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='0',`O_VW`='0' WHERE `Propietario`='%d' AND Slot = '3'",mensaje, x,y,z,angle,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		VehicleFuel[autos3[playerid]] = CombustibleCoche(GetVehicleModel(autos3[playerid]));
		PLAYER_INFO[playerid][v3Gas] = CombustibleCoche(GetVehicleModel(autos3[playerid]));
	    MSG_COMPROVEH(playerid);
		if(!mayPlayerSpawnVehicle(playerid))
		{
 			if(autos3[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos3[playerid]),autosSpawned[playerid][2] = false;
		}else 	autosSpawned[playerid][2] = true;

		return 1;
	}
	else if(PLAYER_INFO[playerid][vModelo4] == 0)
	{
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `p_vehicles` (Modelo,X,Y,Z,A,Color1,Color2,Vida,Precio,vMoneda,Propietario,Slot) VALUES ('%d','%f','%f','%f','%f','%d','%d','1000.0','%d','%d','%d','4')", modelid,x,y,z,angle,color1,color2,precio,monedas,PLAYER_INFO[playerid][pID]);
		mysql_query(handle_db, Query, true);

		PLAYER_INFO[playerid][vID4] = cache_insert_id();
		PLAYER_INFO[playerid][vModelo4] = modelid;
		PLAYER_INFO[playerid][pOX4] = x;
		PLAYER_INFO[playerid][pOY4] = y;
		PLAYER_INFO[playerid][pOZ4] = z;
		PLAYER_INFO[playerid][pOA4] = angle;
		PLAYER_INFO[playerid][v4Color1] = color1;
		PLAYER_INFO[playerid][v4Color2] = color2;
		PLAYER_INFO[playerid][v4Precio] = precio;
		PLAYER_INFO[playerid][v4Monedaa] = monedas;
		bloqueado[autos4[playerid]] = 0;
		PLAYER_INFO[playerid][vSeguro4] = 0;
		PLAYER_INFO[playerid][vAAlarma4] = 0;
		alarma[autos4[playerid]] = 0;
        autos4[playerid] = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
        ROBO_COCHE[autos4[playerid]][EsRobo] = 0;
        format(mensaje, 10,""SERVER_COIN"RP %d", autos4[playerid]);
		PLAYER_INFO[playerid][v4patente] = mensaje;
        SetVehicleNumberPlate(autos4[playerid], PLAYER_INFO[playerid][v4patente]);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Patente`='%e', `EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='0',`O_VW`='0' WHERE `Propietario`='%d' AND Slot = '4'",mensaje, x,y,z,angle,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		VehicleFuel[autos4[playerid]] = CombustibleCoche(GetVehicleModel(autos4[playerid]));
		PLAYER_INFO[playerid][v4Gas] = CombustibleCoche(GetVehicleModel(autos4[playerid]));
		MSG_COMPROVEH(playerid);
		if(!mayPlayerSpawnVehicle(playerid))
		{
			if(autos4[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos4[playerid]),autosSpawned[playerid][3] = false;
		}else 	autosSpawned[playerid][3] = true;

		return 1;
	}
	else SendClientMessage(idmensaje, -1, "No puedes tener más vehiculos.");
	return 1;
}

mayPlayerSpawnVehicle(playerid)
{
	new count;
	if(autosSpawned[playerid][0]) count++;
	if(autosSpawned[playerid][1]) count++;
	if(autosSpawned[playerid][2]) count++;
	if(autosSpawned[playerid][3]) count++;
	if(count >= 2) return 0;
	return 1;
}

stock SendReportToQue(reportfrom, reportadoid, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;
	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(REPORT_INFO[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(REPORT_INFO[newid][Report], report, 0, strlen(report), 250);
        REPORT_INFO[newid][ReportadoID] = reportadoid;
        REPORT_INFO[newid][ReportFrom] = reportfrom;
        REPORT_INFO[newid][HasBeenUsed] = 1;
        REPORT_INFO[newid][BeingUsed] = 1;
        REPORT_INFO[newid][TiempoReport] = gettime();
		for(new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i) && PLAYER_INFO[i][pAdmin] > 2 && VerAdmin[i] == 1)
			{
        		new string[255];
                if(PLAYER_INFO[reportfrom][pVIP] > 2) format(string, sizeof(string), "#%i Jugador VIP %s (ID:{FFFFFF} %i{DBED15} | Nivel: %d) Reporto a %s (ID:{FFFFFF} %i{DBED15} | Nivel: %d)", newid, NombreJugador(reportfrom), reportfrom, PLAYER_INFO[reportfrom][pNivel], NombreJugador(reportadoid), reportadoid, PLAYER_INFO[reportadoid][pNivel]),SendClientMessageEx(i,0xDBED15FF,string);
                else format(string, sizeof(string), "#%i Jugador %s (ID:{FFFFFF} %i{DBED15} | Nivel: %d) Reporto a %s (ID:{FFFFFF} %i{DBED15} | Nivel: %d)", newid, NombreJugador(reportfrom), reportfrom, PLAYER_INFO[reportfrom][pNivel], NombreJugador(reportadoid), reportadoid, PLAYER_INFO[reportadoid][pNivel]),SendClientMessageEx(i,0xDBED15FF,string);
    	    	format(string, sizeof(string), "Razón: {FF3300}%s", (report)),SendClientMessageEx(i,0xDBED15FF,string);
			}
		}
    }
    else ClearReports(),SendReportToQue(reportfrom, reportadoid, report);
	return 1;
}

procesoOferta(armaOfertada, precio, idOfertador, aQuien)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(idOfertador,x,y,z);
	if(!IsPlayerInRangeOfPoint(aQuien, 5.0, x,y,z)) return SendClientMessage(idOfertador,-1,"No estas cerca de este jugador");
	armaofertada[aQuien] = armaOfertada;
	dineropedido[aQuien] = precio;
	ofertador[aQuien] = idOfertador;
	if(idTimerOfertaPerdida[aQuien] != -1)
	{
		KillTimer(idTimerOfertaPerdida[aQuien]);
		idTimerOfertaPerdida[aQuien] = -1;
	}
	idTimerOfertaPerdida[aQuien] = SetTimerEx("OfertaPerdida", 60000, false, "d", aQuien);
	PLAYER_TIMES[idOfertador][TiempoVenta] = gettime() + 60;
	if(idTimerTiempoVenta[idOfertador] != -1)
	{
		KillTimer(idTimerTiempoVenta[idOfertador]);
		idTimerTiempoVenta[idOfertador] = -1;
	}
	idTimerTiempoVenta[idOfertador] = SetTimerEx("TiempoVender", 60000, false, "d", idOfertador);
	return 1;
}
GetNewIDReport()
{
    for(new i = 1; i < MAX_REPORTS; i++)
	{
    	if(REPORT_INFO[i][r_ID] == 0)
    	{
    	    return i;
		}
	}
	return 0;
}
RegistrarReporte(playerid, report_playerid, const text[256])
{
	new string[40 + (24 *2) + 256], ID_REPORT = -1;
    ID_REPORT = GetNewIDReport();
    if(ID_REPORT == -1)
    {
        for(new i = 1; i < MAX_REPORTS; i++)
		{
		    if(REPORT_INFO[i][r_ESTADO] == 1)
		    {
				REPORT_INFO[i][r_ID] = 0;
			}
		}
		return RegistrarReporte(playerid, report_playerid, text);
    }
	else
	{
		format(string, sizeof(string), "%s(%d) reporto al jugador %s(%d)",PLAYER_INFO[playerid][Nickname], playerid, PLAYER_INFO[report_playerid][Nickname],report_playerid);
	    MensajeAdmin(COLOR_CHEAT, string, 2);

	    format(string, sizeof(string), "Razón: %s",text);
	    MensajeAdmin(COLOR_CHEAT, string, 2);

		REPORT_INFO[ID_REPORT][r_ID] = ID_REPORT;
		REPORT_INFO[ID_REPORT][r_ESTADO] = 1;
		REPORT_INFO[ID_REPORT][r_PLAYERID] = playerid;
		REPORT_INFO[ID_REPORT][r_REPORT_PLAYERID] = report_playerid;
		REPORT_INFO[ID_REPORT][r_TEXT] = text;
		PLAYER_TIMES[playerid][p_TIME_REPORT] = gettime() + 60;
	}
	return 1;
}
DarPosicionHeladera(p)
{
	if(PropInfo[p][pTipo] == 1)
	{
	    switch(PropInfo[p][pInterior])
	    {
	        case 1:
	        {
	            PropInfo[p][pHeladeraX] = 240.6087;
	            PropInfo[p][pHeladeraY] = 1195.1021;
	            PropInfo[p][pHeladeraZ] = 1080.2578;

	            PropInfo[p][pRoperoX] = 232.7087;
	            PropInfo[p][pRoperoY] = 1211.9266;
	            PropInfo[p][pRoperoZ] = 1084.3838;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 2:
	        {
	            PropInfo[p][pHeladeraX] = 2315.2896;
	            PropInfo[p][pHeladeraY] = -1007.9119;
	            PropInfo[p][pHeladeraZ] = 1050.2109;

	            PropInfo[p][pRoperoX] = 2316.1682;
	            PropInfo[p][pRoperoY] = -1010.6525;
	            PropInfo[p][pRoperoZ] = 1054.7188;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 3:
	        {
	            PropInfo[p][pHeladeraX] = 2334.3918;
	            PropInfo[p][pHeladeraY] = -1068.3335;
	            PropInfo[p][pHeladeraZ] = 1049.0234;

	            PropInfo[p][pRoperoX] = 2334.7236;
	            PropInfo[p][pRoperoY] = -1073.7806;
	            PropInfo[p][pRoperoZ] = 1049.0234;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 4:
	        {
	            PropInfo[p][pHeladeraX] = 2182.2820;
	            PropInfo[p][pHeladeraY] = -1201.3693;
	            PropInfo[p][pHeladeraZ] = 1049.0308;

	            PropInfo[p][pRoperoX] = 2194.8635;
	            PropInfo[p][pRoperoY] = -1210.7710;
	            PropInfo[p][pRoperoZ] = 1049.0234;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 5:
	        {
	            PropInfo[p][pHeladeraX] = 2314.4543;
	            PropInfo[p][pHeladeraY] = -1212.2015;
	            PropInfo[p][pHeladeraZ] = 1049.0234;

	            PropInfo[p][pRoperoX] = 2319.6328;
	            PropInfo[p][pRoperoY] = -1212.8752;
	            PropInfo[p][pRoperoZ] = 1049.0234;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 6:
	        {
	            PropInfo[p][pHeladeraX] = 2373.8438;
	            PropInfo[p][pHeladeraY] = -1135.4618;
	            PropInfo[p][pHeladeraZ] = 1050.8750;

	            PropInfo[p][pRoperoX] = 2363.7671;
	            PropInfo[p][pRoperoY] = -1127.4540;
	            PropInfo[p][pRoperoZ] = 1050.8826;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 7:
	        {
	            PropInfo[p][pHeladeraX] = 2277.6765;
	            PropInfo[p][pHeladeraY] = -1134.2250;
	            PropInfo[p][pHeladeraZ] = 1050.8984;

	            PropInfo[p][pRoperoX] = 2286.2429;
	            PropInfo[p][pRoperoY] = -1137.8119;
	            PropInfo[p][pRoperoZ] = 1050.8984;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 8:
	        {
	            PropInfo[p][pHeladeraX] = 2498.1443;
	            PropInfo[p][pHeladeraY] = -1711.3541;
	            PropInfo[p][pHeladeraZ] = 1014.7422;

	            PropInfo[p][pRoperoX] = 2492.3171;
	            PropInfo[p][pRoperoY] = -1708.5667;
	            PropInfo[p][pRoperoZ] = 1018.3368;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 9:
	        {
	            PropInfo[p][pHeladeraX] = 231.6045;
	            PropInfo[p][pHeladeraY] = 1243.9056;
	            PropInfo[p][pHeladeraZ] = 1082.1406;

	            PropInfo[p][pRoperoX] = 225.0578;
	            PropInfo[p][pRoperoY] = 1248.5391;
	            PropInfo[p][pRoperoZ] = 1082.1406;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 10:
	        {
	            PropInfo[p][pHeladeraX] = 226.4834;
	            PropInfo[p][pHeladeraY] = 1287.9227;
	            PropInfo[p][pHeladeraZ] = 1082.1406;

	            PropInfo[p][pRoperoX] = 233.7389;
	            PropInfo[p][pRoperoY] = 1291.2286;
	            PropInfo[p][pRoperoZ] = 1082.1406;

                PropInfo[p][pLugarHeladera] = 24;
                PropInfo[p][pLugarRopero] = 20;
	        }
	        case 11:
	        {
	            PropInfo[p][pHeladeraX] = 243.4800;
	            PropInfo[p][pHeladeraY] = 1021.4285;
	            PropInfo[p][pHeladeraZ] = 1084.0129;

	            PropInfo[p][pRoperoX] = 236.0156;
	            PropInfo[p][pRoperoY] = 1032.3390;
	            PropInfo[p][pRoperoZ] = 1088.3125;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 24;
	        }
	        case 12:
	        {
	            PropInfo[p][pHeladeraX] = 300.0292;
	            PropInfo[p][pHeladeraY] = 1486.6417;
	            PropInfo[p][pHeladeraZ] = 1080.2578;

	            PropInfo[p][pRoperoX] = 300.1356;
	            PropInfo[p][pRoperoY] = 1471.3264;
	            PropInfo[p][pRoperoZ] = 1080.2578;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 13:
	        {
	            PropInfo[p][pHeladeraX] = 325.7386;
	            PropInfo[p][pHeladeraY] = 1478.6791;
	            PropInfo[p][pHeladeraZ] = 1084.4446;

	            PropInfo[p][pRoperoX] = 327.8060;
	            PropInfo[p][pRoperoY] = 1488.6558;
	            PropInfo[p][pRoperoZ] = 1084.6858;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 14:
	        {
	            PropInfo[p][pHeladeraX] = 378.8145;
	            PropInfo[p][pHeladeraY] = 1458.4629;
	            PropInfo[p][pHeladeraZ] = 1080.1875;

	            PropInfo[p][pRoperoX] = 380.6929;
	            PropInfo[p][pRoperoY] = 1472.8866;
	            PropInfo[p][pRoperoZ] = 1080.1875;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 15:
	        {
	            PropInfo[p][pHeladeraX] = 364.6002;
	            PropInfo[p][pHeladeraY] = 1428.4363;
	            PropInfo[p][pHeladeraZ] = 1081.3359;

	            PropInfo[p][pRoperoX] = 360.1048;
	            PropInfo[p][pRoperoY] = 1418.1925;
	            PropInfo[p][pRoperoZ] = 1081.3281;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 16:
	        {
	            PropInfo[p][pHeladeraX] = 494.4734;
	            PropInfo[p][pHeladeraY] = 1406.9779;
	            PropInfo[p][pHeladeraZ] = 1080.2578;

	            PropInfo[p][pRoperoX] = 486.9271;
	            PropInfo[p][pRoperoY] = 1414.3024;
	            PropInfo[p][pRoperoZ] = 1084.4160;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 17:
	        {
	            PropInfo[p][pHeladeraX] = 441.7853;
	            PropInfo[p][pHeladeraY] = 1406.7727;
	            PropInfo[p][pHeladeraZ] = 1084.3120;

	            PropInfo[p][pRoperoX] = 456.7776;
	            PropInfo[p][pRoperoY] = 1406.5548;
	            PropInfo[p][pRoperoZ] = 1084.3080;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 18:
	        {
	            PropInfo[p][pHeladeraX] = 266.9625;
	            PropInfo[p][pHeladeraY] = 1294.9094;
	            PropInfo[p][pHeladeraZ] = 1080.2578;

	            PropInfo[p][pRoperoX] = 260.4753;
	            PropInfo[p][pRoperoY] = 1293.0789;
	            PropInfo[p][pRoperoZ] = 1080.2578;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 19:
	        {
	            PropInfo[p][pHeladeraX] = 228.3452;
	            PropInfo[p][pHeladeraY] = 1157.6827;
	            PropInfo[p][pHeladeraZ] = 1082.6094;

	            PropInfo[p][pRoperoX] = 220.2945;
	            PropInfo[p][pRoperoY] = 1149.0428;
	            PropInfo[p][pRoperoZ] = 1082.6094;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 20:
	        {
	            PropInfo[p][pHeladeraX] = 22.4300;
	            PropInfo[p][pHeladeraY] = 1347.2555;
	            PropInfo[p][pHeladeraZ] = 1084.3750;

	            PropInfo[p][pRoperoX] = 31.3994;
	            PropInfo[p][pRoperoY] = 1345.5010;
	            PropInfo[p][pRoperoZ] = 1088.8750;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 21:
	        {
	            PropInfo[p][pHeladeraX] = -266.6378;
	            PropInfo[p][pHeladeraY] = 1451.4071;
	            PropInfo[p][pHeladeraZ] = 1084.3745;

	            PropInfo[p][pRoperoX] = -274.8148;
	            PropInfo[p][pRoperoY] = 1446.9792;
	            PropInfo[p][pRoperoZ] = 1088.8672;

                PropInfo[p][pLugarHeladera] = 24;
                PropInfo[p][pLugarRopero] = 20;
	        }
	        case 22:
	        {
	            PropInfo[p][pHeladeraX] = 31.4377;
	            PropInfo[p][pHeladeraY] = 1404.4353;
	            PropInfo[p][pHeladeraZ] = 1084.4297;

	            PropInfo[p][pRoperoX] = 26.3300;
	            PropInfo[p][pRoperoY] = 1414.8411;
	            PropInfo[p][pRoperoZ] = 1084.4297;

                PropInfo[p][pLugarHeladera] = 24;
                PropInfo[p][pLugarRopero] = 20;
	        }
	        case 23:
	        {
	            PropInfo[p][pHeladeraX] = 147.4858;
	            PropInfo[p][pHeladeraY] = 1383.1149;
	            PropInfo[p][pHeladeraZ] = 1083.8594;

	            PropInfo[p][pRoperoX] = 151.4808;
	            PropInfo[p][pRoperoY] = 1387.0924;
	            PropInfo[p][pRoperoZ] = 1088.3672;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 24;
	        }
	        case 24:
	        {
	            PropInfo[p][pHeladeraX] = 223.4673;
	            PropInfo[p][pHeladeraY] = 1079.7946;
	            PropInfo[p][pHeladeraZ] = 1084.1979;

	            PropInfo[p][pRoperoX] = 238.2854;
	            PropInfo[p][pRoperoY] = 1082.9908;
	            PropInfo[p][pRoperoZ] = 1084.1875;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 24;
	        }
	        case 25:
	        {
	            PropInfo[p][pHeladeraX] = -57.9440;
	            PropInfo[p][pHeladeraY] = 1366.2247;
	            PropInfo[p][pHeladeraZ] = 1080.2109;

	            PropInfo[p][pRoperoX] = -70.4076;
	            PropInfo[p][pRoperoY] = 1357.8486;
	            PropInfo[p][pRoperoZ] = 1080.2109;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 26:
	        {
	            PropInfo[p][pHeladeraX] = -290.5264;
	            PropInfo[p][pHeladeraY] = 1480.1294;
	            PropInfo[p][pHeladeraZ] = 1084.3750;

	            PropInfo[p][pRoperoX] = -296.5676;
	            PropInfo[p][pRoperoY] = 1474.6875;
	            PropInfo[p][pRoperoZ] = 1088.8750;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 27:
	        {
	            PropInfo[p][pHeladeraX] = -46.0470;
	            PropInfo[p][pHeladeraY] = 1398.3417;
	            PropInfo[p][pHeladeraZ] = 1084.4297;

	            PropInfo[p][pRoperoX] = -42.7718;
	            PropInfo[p][pRoperoY] = 1412.7611;
	            PropInfo[p][pRoperoZ] = 1084.4297;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 28:
	        {
	            PropInfo[p][pHeladeraX] = 78.2833;
	            PropInfo[p][pHeladeraY] = 1338.3760;
	            PropInfo[p][pHeladeraZ] = 1083.8672;

	            PropInfo[p][pRoperoX] = 92.7948;
	            PropInfo[p][pRoperoY] = 1332.7618;
	            PropInfo[p][pRoperoZ] = 1088.3595;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 29:
	        {
	            PropInfo[p][pHeladeraX] = 259.9944;
	            PropInfo[p][pHeladeraY] = 1249.3361;
	            PropInfo[p][pHeladeraZ] = 1084.2578;

	            PropInfo[p][pRoperoX] = 257.0948;
	            PropInfo[p][pRoperoY] = 1243.6552;
	            PropInfo[p][pRoperoZ] = 1084.2578;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 30:
	        {
	            PropInfo[p][pHeladeraX] = 2449.5256;
	            PropInfo[p][pHeladeraY] = -1685.9985;
	            PropInfo[p][pHeladeraZ] = 1013.5078;

	            PropInfo[p][pRoperoX] = 2462.0654;
	            PropInfo[p][pRoperoY] = -1699.1202;
	            PropInfo[p][pRoperoZ] = 1013.5078;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 31:
	        {
	            PropInfo[p][pHeladeraX] = 2817.4475;
	            PropInfo[p][pHeladeraY] = -1173.2578;
	            PropInfo[p][pHeladeraZ] = 1025.5703;

	            PropInfo[p][pRoperoX] = 2810.4717;
	            PropInfo[p][pRoperoY] = -1161.3860;
	            PropInfo[p][pRoperoZ] = 1029.1719;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 32:
	        {
	            PropInfo[p][pHeladeraX] = 331.9549;
	            PropInfo[p][pHeladeraY] = 1119.5458;
	            PropInfo[p][pHeladeraZ] = 1083.8903;

	            PropInfo[p][pRoperoX] = 310.7163;
	            PropInfo[p][pRoperoY] = 1119.6621;
	            PropInfo[p][pRoperoZ] = 1083.8828;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 33:
	        {
	            PropInfo[p][pHeladeraX] = 2334.1038;
	            PropInfo[p][pHeladeraY] = -1143.9227;
	            PropInfo[p][pHeladeraZ] = 1050.7031;

	            PropInfo[p][pRoperoX] = 2316.4282;
	            PropInfo[p][pRoperoY] = -1144.3564;
	            PropInfo[p][pRoperoZ] = 1054.3047;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 24;
	        }
	        case 34:
	        {
	            PropInfo[p][pHeladeraX] = 2265.0903;
	            PropInfo[p][pHeladeraY] = -1141.6536;
	            PropInfo[p][pHeladeraZ] = 1050.6328;

	            PropInfo[p][pRoperoX] = 2270.1960;
	            PropInfo[p][pRoperoY] = -1133.6097;
	            PropInfo[p][pRoperoZ] = 1050.6328;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 35:
	        {
	            PropInfo[p][pHeladeraX] = -2158.5508;
	            PropInfo[p][pHeladeraY] = 640.5544;
	            PropInfo[p][pHeladeraZ] = 1057.5861;

	            PropInfo[p][pRoperoX] = -2170.4807;
	            PropInfo[p][pRoperoY] = 646.8701;
	            PropInfo[p][pRoperoZ] = 1057.5938;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 36:
	        {
	            PropInfo[p][pHeladeraX] = 414.0121;
	            PropInfo[p][pHeladeraY] = 2537.5400;
	            PropInfo[p][pHeladeraZ] = 10.0077;

	            PropInfo[p][pRoperoX] = 413.1199;
	            PropInfo[p][pRoperoY] = 2536.6013;
	            PropInfo[p][pRoperoZ] = 10.0000;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	        case 37:
	        {
	            PropInfo[p][pHeladeraX] = 1275.3596;
	            PropInfo[p][pHeladeraY] = -821.8875;
	            PropInfo[p][pHeladeraZ] = 1085.6328;

	            PropInfo[p][pRoperoX] = 1271.5107;
	            PropInfo[p][pRoperoY] = -822.3544;
	            PropInfo[p][pRoperoZ] = 1089.9375;

	            PropInfo[p][pLugarRopero] = 24;
	            PropInfo[p][pLugarHeladera] = 30;
	        }
	        case 38:
	        {
	            PropInfo[p][pHeladeraX] = 2556.3142;
	            PropInfo[p][pHeladeraY] = -1297.3783;
	            PropInfo[p][pHeladeraZ] = 1060.9844;

	            PropInfo[p][pRoperoX] = 2576.5298;
	            PropInfo[p][pRoperoY] = -1280.4081;
	            PropInfo[p][pRoperoZ] = 1065.3672;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 30;
	        }
	        case 42:
	        {
	            PropInfo[p][pHeladeraX] = 2248.2996;
	            PropInfo[p][pHeladeraY] = -1213.5907;
	            PropInfo[p][pHeladeraZ] = 1049.0234;

	            PropInfo[p][pRoperoX] = 2262.7876;
	            PropInfo[p][pRoperoY] = -1216.7347;
	            PropInfo[p][pRoperoZ] = 1049.0234;

	            PropInfo[p][pLugarHeladera] = 24;
	            PropInfo[p][pLugarRopero] = 20;
	        }
	    }
	}
	else if(PropInfo[p][pTipo] == 3)
	{
	    PropInfo[p][pHeladeraX] = -791.4077;
	    PropInfo[p][pHeladeraY] = 508.3234;
	    PropInfo[p][pHeladeraZ] = 1367.3672;

     	PropInfo[p][pRoperoX] = -778.0544;
      	PropInfo[p][pRoperoY] = 496.4131;
       	PropInfo[p][pRoperoZ] = 1368.5304;

	    PropInfo[p][pLugarHeladera] = 240;
	    PropInfo[p][pLugarRopero] = 20;
	}
	else if(PropInfo[p][pTipo] == 2)
	{
		PropInfo[p][pHeladeraX] = 0;
	    PropInfo[p][pHeladeraY] = 0;
	    PropInfo[p][pHeladeraZ] = 0;

     	PropInfo[p][pRoperoX] = 1471.5107;
      	PropInfo[p][pRoperoY] = 563.7426;
       	PropInfo[p][pRoperoZ] = 1000.9959;

	    PropInfo[p][pLugarHeladera] = 24;
	    PropInfo[p][pLugarRopero] = 20;
	}
	else if(PropInfo[p][pTipo] == 4)
    {
        PropInfo[p][pHeladeraX] = 1436.5482;
        PropInfo[p][pHeladeraY] = 595.6918;
        PropInfo[p][pHeladeraZ] = 1000.9760;

        PropInfo[p][pRoperoX] = 1437.5388;
        PropInfo[p][pRoperoY] = 600.6093;
        PropInfo[p][pRoperoZ] = 1000.9760;

        PropInfo[p][pLugarHeladera] = 20;
        PropInfo[p][pLugarRopero] = 20;
    }
	if(PropInfo[p][pHeladeraX] != 0.0 && PropInfo[p][pHeladeraY] != 0.0 && PropInfo[p][pHeladeraZ] != 0.0)
	{
		PropInfo[p][pLabel3] = CreateDynamic3DTextLabel("{3399FF}Heladera\n{FFFFFF}Pulsa {FFFF04}'Y'{FFFFFF} para ver el interior\no\n{FFFF04}/heladera guardar objeto",COLOR_WHITE,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[p][pVW],PropInfo[p][pInteriorID],-1,100.0);
	}
	return 1;
}
AccionesRol(playerid, const params[], rango = 20)
{
	new string[200];
	format(string, sizeof(string), "%s %s", PLAYER_INFO[playerid][Nickname], params);
	ProxDetector(rango, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}
Float: player_get_speed(playerid)
{
	new Float: Floats[3];
	GetVehicleVelocity(GetPlayerVehicleID(playerid), Floats[0], Floats[1], Floats[2]);
	return floatsqroot(Floats[0] * Floats[0] + Floats[1] * Floats[1] + Floats[2] * Floats[2]) * 180;
}

EnvioDomiciliaria(playerid)
{
	for(new p = 0; p < MAX_PROPIEDADES; p++)
	{
		if(PropInfo[p][pEnUso] == 1)
		{
			if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
			{
				SendClientMessage(playerid, -1, "Pagaste {04D616}3800${FFFFFF} por la prisión domiciliaria.");
				SetPlayerPosEx(playerid,PropInfo[p][pPosXS],PropInfo[p][pPosYS],PropInfo[p][pPosZS]);
				SetPlayerFacingAngle(playerid,PropInfo[p][pPosAS]);
				SetPlayerInterior(playerid,PropInfo[p][pInteriorID]);
				SetPlayerVirtualWorld(playerid,PropInfo[p][pVW]);
				CargarMapeosEx(playerid);
				EstaDomiciliaria[playerid] = 1;
				PLAYER_INFO[playerid][pTipoCarcel] = 10;
				QuitarDinero(playerid, 3800);
				return 1;
			}
		}
	}
	return 1;
}

MostrarBotiquin(playerid)
{
	if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Solo los médicos tienen la llave del botiquín.");
	{
		if(GetPlayerSkin(playerid) == 274 || GetPlayerSkin(playerid) == 275 || GetPlayerSkin(playerid) == 276 || GetPlayerSkin(playerid) == 308)
		{
		    new string[375];
			format(string,sizeof(string),"Pinzas, vendas, jeringa con anestesia\nPinzas, vendas, jeringa con morfina\nAntiinflamatorios y yeso\nAntiinflamatorios\nHilo, aguja, vendas y suero fisiológico\nAntiinflamatorios y Hielo\nAntiinflamatorios, hielo y yeso\nBisturí, escalpelo, hilo, aguja y jeringa con morfina\nHielo, vendas y jeringa con morfina\nHielo y vendas\nYeso, vendas, morfina y antiinflamatorios");
			ShowPlayerDialog(playerid,BOTIQUIN,DIALOG_STYLE_LIST,"Botiquín médico",string,"Agarrar","Cerrar");
		}
  	}
  	return 1;
}
ShowConfig(playerid)
{
	new string[500], ANAME[32],AOPTIONS[32];
	if(PLAYER_INFO[playerid][pAdmin] > 2)
	{
	    ANAME = "\nLog Administrativo.\t";
		format(AOPTIONS,sizeof(AOPTIONS),"%s",GetYesOrNoConfig(VerAdmin[playerid]));
	}
 	format(string, sizeof(string), "Opción\tEstado actual\nMostrar canal de dudas.\t%s\nMostrar muteos, sanciones y baneos.\t%s\nReproducir sonidos especiales y de radios.\t%s\nMostrar alertas de conexión.\t%s\nAparecer en la guía telefónica. \t%s\nMostrar barras de hambre y sed.\t%s\nMostrar velocímetro y medidor de combustible.\t%s%s%s",GetYesOrNoConfig(CanalDudas[playerid]),GetYesOrNoConfig(PLAYER_INFO[playerid][pMuteos]),GetYesOrNoConfig(PLAYER_INFO[playerid][pSonidos]),GetYesOrNoConfig(PLAYER_INFO[playerid][pAlerta]),GetYesOrNoConfig(PLAYER_INFO[playerid][pGuia]),GetYesOrNoConfig(PLAYER_INFO[playerid][pBarras]),GetYesOrNoConfig(PLAYER_INFO[playerid][pVelocimetro]),ANAME,AOPTIONS);
	ShowPlayerDialog(playerid, DCONFIG, DIALOG_STYLE_TABLIST_HEADERS, "Opciones de configuración", string, "Cambiar", "Cerrar");
	return 1;
}
Bailarinas(id)
{
	new BailarinasTexto[70];
	switch(id) {
	    case 1:{
		if(Bailarina1 == 0) BailarinasTexto = "{faafff}Gatúbela{FFFFFF}";
		else BailarinasTexto = "{EB0000}Gatúbela{FFFFFF}";
		}
	    case 2:{
		if(Bailarina2 == 0) BailarinasTexto = "{faafff}Bailarina Ardiente{FFFFFF}";
		else BailarinasTexto = "{EB0000}Bailarina Ardiente{FFFFFF}";
		}
	    case 3:{
		if(Bailarina3 == 0) BailarinasTexto = "{faafff}Gordita Sensual{FFFFFF}";
		else BailarinasTexto = "{EB0000}Gordita Sensual{FFFFFF}";
		}
	    case 4:{
		if(Bailarina4 == 0) BailarinasTexto = "{faafff}Poli-Bailarina{FFFFFF}";
		else BailarinasTexto = "{EB0000}Poli-Bailarina{FFFFFF}";
		}
	    case 5:{
		if(Bailarina5 == 0) BailarinasTexto = "{faafff}Colegiala{FFFFFF}";
		else BailarinasTexto = "{EB0000}Colegiala{FFFFFF}";
		}
	    case 6:{
		if(Bailarina6 == 0) BailarinasTexto = "{faafff}Chocolatita{FFFFFF}";
		else BailarinasTexto = "{EB0000}Chocolatita{FFFFFF}";
		}
    }
	return BailarinasTexto;
}
GetContenido(i) {
    new strongs[64];
    switch(CamionCargado[i]) {
        case 0:	format(strongs, sizeof(strongs), "Ninguno");
		case 1:	format(strongs, sizeof(strongs), "Productos 24/7");
		case 2:	format(strongs, sizeof(strongs), "Ropa");
		case 3:	format(strongs, sizeof(strongs), "Drogas");
		case 4:	format(strongs, sizeof(strongs), "Armas");
        default: strcat(strongs, "Ninguno");
    }
    return strongs;
}
AfinidadNivel(playerid,id)
{
	new NombreFinal[50];
	switch(id)
	{
	    case 1:{
			if(PLAYER_INFO[playerid][pAfinidad1] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 45 && PLAYER_INFO[playerid][pAfinidad1] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
	    case 2:{
			if(PLAYER_INFO[playerid][pAfinidad2] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 45 && PLAYER_INFO[playerid][pAfinidad2] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
	    case 3:{
			if(PLAYER_INFO[playerid][pAfinidad3] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 45 && PLAYER_INFO[playerid][pAfinidad3] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
	    case 4:{
			if(PLAYER_INFO[playerid][pAfinidad4] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 45 && PLAYER_INFO[playerid][pAfinidad4] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
	    case 5:{
			if(PLAYER_INFO[playerid][pAfinidad5] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 45 && PLAYER_INFO[playerid][pAfinidad5] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
	    case 6:{
			if(PLAYER_INFO[playerid][pAfinidad6] < 45) format(NombreFinal, sizeof(NombreFinal), "{FFFFFF}Baja{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 45 && PLAYER_INFO[playerid][pAfinidad6] < 78) NombreFinal = "{FFFFFF}Media{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 78) NombreFinal = "{FFFFFF}Alta{FFFFFF}";
		}
    }
	return NombreFinal;
}
AfinidadPrecio(playerid,id)
{
	new NombreFinal[50];
	switch(id)
	{
	    case 1:{
			if(PLAYER_INFO[playerid][pAfinidad1] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$5000{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 45 && PLAYER_INFO[playerid][pAfinidad1] < 78) NombreFinal = "{f21111}$4000{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 78) NombreFinal = "{f21111}$1000{FFFFFF}";
		}
	    case 2:{
			if(PLAYER_INFO[playerid][pAfinidad2] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$5000{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 45 && PLAYER_INFO[playerid][pAfinidad2] < 78) NombreFinal = "{f21111}$4000{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 78) NombreFinal = "{f21111}$1000{FFFFFF}";
		}
	    case 3:{
			if(PLAYER_INFO[playerid][pAfinidad3] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$3000{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 45 && PLAYER_INFO[playerid][pAfinidad3] < 78) NombreFinal = "{f21111}$1500{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 78) NombreFinal = "{f21111}$100{FFFFFF}";
		}
	    case 4:{
			if(PLAYER_INFO[playerid][pAfinidad4] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$4500{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 45 && PLAYER_INFO[playerid][pAfinidad4] < 78) NombreFinal = "{f21111}$4000{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 78) NombreFinal = "{f21111}$800{FFFFFF}";
		}
	    case 5:{
			if(PLAYER_INFO[playerid][pAfinidad5] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$5000{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 45 && PLAYER_INFO[playerid][pAfinidad5] < 78) NombreFinal = "{f21111}$4000{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 78) NombreFinal = "{f21111}$1000{FFFFFF}";
		}
	    case 6:{
			if(PLAYER_INFO[playerid][pAfinidad6] < 45) format(NombreFinal, sizeof(NombreFinal), "{f21111}$4000{FFFFFF}");
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 45 && PLAYER_INFO[playerid][pAfinidad6] < 78) NombreFinal = "{f21111}$4000{FFFFFF}";
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 78) NombreFinal = "{f21111}$600{FFFFFF}";
		}
    }
	return NombreFinal;
}
AfinidadCobro(playerid,id)
{
	new dinero;
	switch(id)
	{
	    case 1:{
			if(PLAYER_INFO[playerid][pAfinidad1] < 45) dinero = 5000;
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 45 && PLAYER_INFO[playerid][pAfinidad1] < 78) dinero = 4000;
	        if(PLAYER_INFO[playerid][pAfinidad1] >= 78) dinero = 1000;
		}
	    case 2:{
			if(PLAYER_INFO[playerid][pAfinidad2] < 45) dinero = 5000;
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 45 && PLAYER_INFO[playerid][pAfinidad2] < 78) dinero = 4000;
	        if(PLAYER_INFO[playerid][pAfinidad2] >= 78) dinero = 1000;
		}
	    case 3:{
			if(PLAYER_INFO[playerid][pAfinidad3] < 45) dinero = 3000;
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 45 && PLAYER_INFO[playerid][pAfinidad3] < 78) dinero = 1500;
	        if(PLAYER_INFO[playerid][pAfinidad3] >= 78) dinero = 100;
		}
	    case 4:{
			if(PLAYER_INFO[playerid][pAfinidad4] < 45) dinero = 4500;
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 45 && PLAYER_INFO[playerid][pAfinidad4] < 78) dinero = 4000;
	        if(PLAYER_INFO[playerid][pAfinidad4] >= 78) dinero = 800;
		}
	    case 5:{
			if(PLAYER_INFO[playerid][pAfinidad5] < 45) dinero = 5000;
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 45 && PLAYER_INFO[playerid][pAfinidad5] < 78) dinero = 4000;
	        if(PLAYER_INFO[playerid][pAfinidad5] >= 78) dinero = 1000;
		}
	    case 6:{
			if(PLAYER_INFO[playerid][pAfinidad6] < 45) dinero = 5000;
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 45 && PLAYER_INFO[playerid][pAfinidad6] < 78) dinero = 4000;
	        if(PLAYER_INFO[playerid][pAfinidad6] >= 78) dinero = 600;
		}
    }
	return dinero;
}
DatosFrecuencia(dato)
{
	new respuesta[13];
    if(dato == 0) format(respuesta, sizeof(respuesta), "Libre");
    if(dato == 1) format(respuesta, sizeof(respuesta), "1 Persona");
    if(dato > 1) format(respuesta, sizeof(respuesta), "%d Personas", dato);
    return respuesta;
}
LimpiarFrecuencia(playerid)
{
	if(Frecuencia[playerid] > 0) AccionesRol(playerid,"ha cambiado la frecuencia de su radio comunicador.", 20);
	else AccionesRol(playerid,"enciende su radio y cambia de frecuencia.", 20);
	switch(Frecuencia[playerid])
	{
	    case 1: frecuencias[1] -= 1;
	    case 2: frecuencias[2] -= 1;
	    case 3: frecuencias[3] -= 1;
	    case 4: frecuencias[4] -= 1;
	    case 5: frecuencias[5] -= 1;
	    case 6: frecuencias[6] -= 1;
	    case 7: frecuencias[7] -= 1;
	    case 8: frecuencias[8] -= 1;
	}
}
MostrarFrecuencias(playerid)
{
	new string[512];
    for(new p = 1; p < 9; p++)
	{
		format(string,sizeof(string),"%s{737373}#%d:{FFFFFF} %s.\n", string, p, DatosFrecuencia(frecuencias[p]));
	}
	ShowPlayerDialog(playerid, DIALOGO_FRECUENCIAS, DIALOG_STYLE_LIST, "Frecuencias", string, "Cambiar","Cancelar");
	return true;
}
AsignarTrabajo(playerid,trabajo,id)
{
	if(id == 0) { PLAYER_INFO[playerid][pTrabajo] = trabajo;   }
	else if(id == 1) { PLAYER_INFO[playerid][pTrabajo2] = trabajo; }
	SendClientMessage(playerid, COLOR_WHITE, "¡Felicitaciones! Conseguiste un nuevo trabajo.");
	PlayerPlaySoundEx(playerid,1055,0.0,0.0,0.0);
	return true;
}
YaTiene2Jobs(playerid)
{
	new string[200];
	SendClientMessage(playerid,-1,"Ya tienes 2 trabajos, renuncia a uno.");
	format(string, sizeof(string), "Escribe {FFFF04}/dejar trabajo %d{FFFFFF} para dejar el trabajo de %s", PLAYER_INFO[playerid][pTrabajo],NombreTrabajo(PLAYER_INFO[playerid][pTrabajo]));
	return SendClientMessage(playerid,-1,string);
}
MostrarMenuBailarinas(playerid)
{
	new mensaje[600];
	format(mensaje,sizeof(mensaje),"Bailarina\tAfinidad\tCosto\n");
	for(new i = 0; i < 6; i++)
	{
	    format(mensaje,sizeof(mensaje),"%s%s\t%s\t%s\n",mensaje,Bailarinas(i+1),AfinidadNivel(playerid,i+1),AfinidadPrecio(playerid,i+1));
	}
	ShowPlayerDialog(playerid, DCLUB, DIALOG_STYLE_TABLIST_HEADERS,"Entrar a la sala privada con...", mensaje, "Entrar", "Cancelar");
	return 1;
}
MostrarHeladera(playerid)
{
    if(GetPlayerVirtualWorld(playerid) != 0)
	{
		for(new p; p < MAX_PROPIEDADES; p++)
		{
			if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
			{
				if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
				{
					new heladera[100],heladera2[500],heladera3[550];
					AccionesRol(playerid,"abre la heladera.", 20);
					new total = PropInfo[p][pSprunk] + PropInfo[p][pVino] + PropInfo[p][pCerveza] + PropInfo[p][pPizzas] + PropInfo[p][pAquarius];
					format(heladera,sizeof(heladera),"{FFFFFF}Heladera    [Lugares: %d/%d]",total,PropInfo[p][pLugarHeladera]);
					if(total == 0)
					{
						format(heladera2,sizeof(heladera2),"La heladera está vacía.");
						strcat(heladera3,heladera2);
					}
					else if(total > 0)
					{
						if(PropInfo[p][pCerveza] > 0) format(heladera3,sizeof(heladera3),"{FFFFFF}Botella de cerveza {f21111}x%d\n", PropInfo[p][pCerveza]);
						if(PropInfo[p][pVino] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Botella de vino {f21111}x%d\n", heladera3, PropInfo[p][pVino]);
						if(PropInfo[p][pSprunk] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Vasos de sprunk {f21111}x%d\n", heladera3, PropInfo[p][pSprunk]);
						if(PropInfo[p][pAquarius] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Botella de aquarius {f21111}x%d", heladera3, PropInfo[p][pAquarius]);
						if(PropInfo[p][pPizzas] > 0) format(heladera3,sizeof(heladera3),"%s{FFFFFF}Porción de pizza {f21111}x%d", heladera3, PropInfo[p][pPizzas]);
					}
					ShowPlayerDialog(playerid,INVENTARIO,DIALOG_STYLE_MSGBOX,heladera,heladera3,"Cerrar","");
				}
			}
		}
	}
	return 1;
}
MostrarEstanteria(playerid)
{
	for(new c; c < MAX_PROPIEDADES; c++)
	{
		if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
		{
			new total = EspacioRopero(c),ropero[40],ropero2[1000],ropero3[1200];
			format(ropero,sizeof(ropero),"{FFFFFF}Estantería    [Lugares: %d/%d]",total,PropInfo[c][pLugarRopero]);
			if(total > 0)
			{
				format(ropero2,sizeof(ropero2),"Armas:\n");
				strcat(ropero3,ropero2);
				new cosas;
				if(PropInfo[c][pManopla] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Manopla {f21111}x%d {f21111}||",PropInfo[c][pManopla]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pPaloDeGolf] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Palo-de-Golf {f21111}x%d {f21111}||",PropInfo[c][pPaloDeGolf]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pCuchillo] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Cuchillo {f21111}x%d {f21111}||",PropInfo[c][pCuchillo]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pBateDeBeisbol] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Bate-de-Beisbol {f21111}x%d {f21111}||",PropInfo[c][pBateDeBeisbol]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pPala] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Pala {f21111}x%d {f21111}||",PropInfo[c][pPala]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pPaloDeBillar] > 0)
				{
					format(ropero2,sizeof(ropero2)," {FFFFFF}Palo-de-Billar {f21111}x%d {f21111}||",PropInfo[c][pPaloDeBillar]);
					strcat(ropero3,ropero2);
					cosas ++;
				}
				if(PropInfo[c][pKatana] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Katana {f21111}x%d {f21111}||",PropInfo[c][pKatana]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pConsoladorRosa] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Consolador-Rosa {f21111}x%d {f21111}||",PropInfo[c][pConsoladorRosa]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pVibradorBlanco] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Vibrador-Blanco {f21111}x%d {f21111}||",PropInfo[c][pVibradorBlanco]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pGranVibradorBlanco] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Gran-Vibrador-Blanco {f21111}x%d {f21111}||",PropInfo[c][pGranVibradorBlanco]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pVibradorPlateado] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Vibrador-Plateado {f21111}x%d {f21111}||",PropInfo[c][pVibradorPlateado]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pFlores] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Flores {f21111}x%d {f21111}||",PropInfo[c][pFlores]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pBaston] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Baston {f21111}x%d {f21111}||",PropInfo[c][pBaston]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][p9mm] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}9mm {f21111}x%d {f21111}||",PropInfo[c][p9mm]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][p9mmSilenciada] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}9mm-silenciada {f21111}x%d {f21111}||",PropInfo[c][p9mmSilenciada]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pDesertEagle] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Desert-Eagle {f21111}x%d {f21111}||",PropInfo[c][pDesertEagle]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pEscopetaNormal] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Escopeta-Normal {f21111}x%d {f21111}||",PropInfo[c][pEscopetaNormal]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pEscopetaDeCombate] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Escopeta-de-Combate {f21111}x%d {f21111}||",PropInfo[c][pEscopetaDeCombate]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pMP5] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}MP5 {f21111}x%d {f21111}||",PropInfo[c][pMP5]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pAK47] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}AK-47 {f21111}x%d {f21111}||",PropInfo[c][pAK47]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pM4] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}M4 {f21111}x%d {f21111}||",PropInfo[c][pM4]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pRifle] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Rifle {f21111}x%d {f21111}||",PropInfo[c][pRifle]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pGranada] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Granada {f21111}x%d {f21111}||",PropInfo[c][pGranada]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pCamara] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2)," {FFFFFF}Camara {f21111}x%d {f21111}||",PropInfo[c][pCamara]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pMedicamentos] > 0 || PropInfo[c][pCrack] > 0 || PropInfo[c][pMarihuana] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2),"\n\n");
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pMarihuana] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2),"\n{FFFFFF}Marihuana: {FF3300}%dg",PropInfo[c][pMarihuana]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pCrack] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2),"\n{FFFFFF}Crack: {FF3300}%dg",PropInfo[c][pCrack]);
					strcat(ropero3,ropero2);
				}
				if(PropInfo[c][pMedicamentos] > 0)
				{
					if(cosas >= 2)
					{
						cosas = 0;
						format(ropero2,sizeof(ropero),"\n");
						strcat(ropero3,ropero2);
					}
					cosas ++;
					format(ropero2,sizeof(ropero2),"\n{FFFFFF}Medicamentos: {f21111}%d",PropInfo[c][pMedicamentos]);
					strcat(ropero3,ropero2);
				}
			}
			else
			{
				format(ropero2,sizeof(ropero2),"La estantería está vacía");
				strcat(ropero3,ropero2);
			}
			ShowPlayerDialog(playerid,INVENTARIO,DIALOG_STYLE_MSGBOX,ropero,ropero3,"Cerrar","");
		}
	}
	return 1;
}
EstaEnP(playerid,id,Float:rang)
{
	new Float:Pos[3];
	GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
	if(IsPlayerInRangeOfPoint(playerid,rang,Pos[0],Pos[1],Pos[2])) return 1;
	return 0;
}
GuardarPropiedad(c)
{
	#if DEBUG_GM == 1
    printf("GuardarPropiedad: %d", c);
    #endif
	new query[1000];
	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `EnVentaPor`='%d',`EnVenta`='%d',`Precio`='%d',`Nivel`='%d',`Ganancias`='%d' WHERE `ID`='%d'",	PropInfo[c][pEnVentaPor],	PropInfo[c][pEnVenta],	PropInfo[c][pPrecio],	PropInfo[c][pNivel],	PropInfo[c][pGanancias],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `PosX`='%f',`PosY`='%f',`PosZ`='%f', PosA= '%f',`PosXS`='%f',`PosYS`='%f',`PosZS`='%f' WHERE `ID`='%d'",	PropInfo[c][pPosX],	PropInfo[c][pPosY],	PropInfo[c][pPosZ],	PropInfo[c][pPosA], PropInfo[c][pPosXS],	PropInfo[c][pPosYS],	PropInfo[c][pPosZS],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `PosAS`='%f',`EnUso`='%d',`Tipo`='%d',`Interior`='%d',`InteriorID`='%d',`Abierta`='%d' WHERE `ID`='%d'",	PropInfo[c][pPosAS],	PropInfo[c][pEnUso],	PropInfo[c][pTipo],	PropInfo[c][pInterior],	PropInfo[c][pInteriorID],	PropInfo[c][pAbierta],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `Sprunk`='%d',`Cerveza`='%d',`Aquarius`='%d',`Pizzas`='%d',`Vino`='%d',`Baston`='%d',`Baston`='%d' WHERE `ID`='%d'",	PropInfo[c][pSprunk],	PropInfo[c][pCerveza],	PropInfo[c][pAquarius],	PropInfo[c][pPizzas],	PropInfo[c][pVino],	PropInfo[c][pBaston],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `AK47`='%d',`M4`='%d',`EscopetaNormal`='%d',`EscopetaDeCombate`='%d',`MP5`='%d',`9mm`='%d',`9mmSilenciada`='%d',`PaloDeBillar`='%d' WHERE`ID`='%d'",	PropInfo[c][pAK47],	PropInfo[c][pM4],	PropInfo[c][pEscopetaNormal],	PropInfo[c][pEscopetaDeCombate],	PropInfo[c][pMP5],	PropInfo[c][p9mm],	PropInfo[c][p9mmSilenciada],	PropInfo[c][pPaloDeBillar],	PropInfo[c][pID]);
    mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `DesertEagle`='%d',`Rifle`='%d',`Granada`='%d',`Manopla`='%d',`Cuchillo`='%d',`Katana`='%d',`Crack`='%d',`Medicamentos`='%d',`Marihuana`='%d',`GranVibradorBlanco`='%d' WHERE `ID`='%d'",	PropInfo[c][pDesertEagle],	PropInfo[c][pRifle],	PropInfo[c][pGranada],	PropInfo[c][pManopla],	PropInfo[c][pCuchillo],	PropInfo[c][pKatana],	PropInfo[c][pCrack],	PropInfo[c][pMedicamentos], 	PropInfo[c][pMarihuana],	PropInfo[c][pGranVibradorBlanco],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);

	mysql_format(handle_db, query,sizeof(query),"UPDATE `propiedades` SET `Camara`='%d',`Flores`='%d',`Pala`='%d',`BateDeBeisbol`='%d',`PaloDeGolf`='%d',`ConsoladorRosa`='%d',`VibradorBlanco`='%d',`VibradorPlateado`='%d' WHERE `ID`='%d'",	PropInfo[c][pCamara],	PropInfo[c][pFlores],	PropInfo[c][pPala],	PropInfo[c][pBateDeBeisbol],	PropInfo[c][pPaloDeGolf],	PropInfo[c][pConsoladorRosa],	PropInfo[c][pVibradorBlanco],	PropInfo[c][pVibradorPlateado],	PropInfo[c][pID]);
	mysql_tquery(handle_db, query);
	return true;
}

stock LoadNPCs()
{
	ConnectNPC("Marcelo","Marcelo");
	ConnectNPC("MrBeast","MrBeast");
	ConnectNPC("Alejandro","Alejandro");
	ConnectNPC("HippePepe","HippePepe");
	ConnectNPC("Jorge","Jorge");
	ConnectNPC("Ignacio","Ignacio");
	ConnectNPC("Hugo","Hugo");
	ConnectNPC("Mao","Mao");
	ConnectNPC("Brayan","Brayan");
	npctoggle = 1;
	return 1;
}

stock CasaDesocupada()
{
	for(new p = 0; p < MAX_PROPIEDADES; p++)
	{
	    if(PropInfo[p][pEnUso] == 0 && p != 0) return p;
	}
	return -1;
}
stock DarInteriorCasa(c,interior)
{
	new Interior, Float:Pos2[3],Query[200];
	switch(interior)
	{
		case 1:
		{
			Pos2[0] = 235.3099;
			Pos2[1] = 1186.6809;
			Pos2[2] = 1080.2578;
			Interior = 3;
		}
		case 2:
		{
			Pos2[0] = 2317.6685;
			Pos2[1] = -1026.7620;
			Pos2[2] = 1050.2178;
			Interior = 9;
		}
		case 3:
		{
			Pos2[0] = 2333.2153;
			Pos2[1] = -1077.3358;
			Pos2[2] = 1049.0234;
			Interior = 6;
		}
		case 4:
		{
			Pos2[0] = 2196.85;
			Pos2[1] = -1204.25;
			Pos2[2] = 1049.02;
			Interior = 6;
		}
		case 5:
		{
			Pos2[0] = 2308.77;
			Pos2[1] = -1212.94;
			Pos2[2] = 1049.02;
			Interior = 6;
		}
		case 6:
		{
			Pos2[0] = 2365.4602;
			Pos2[1] = -1135.5823;
			Pos2[2] = 1050.8826;
			Interior = 8;
		}
		case 7:
		{
			Pos2[0] = 2283.04;
			Pos2[1] = -1140.28;
			Pos2[2] = 1050.90;
			Interior = 11;
		}
		case 8:
		{
			Pos2[0] = 2496.0586;
			Pos2[1] = -1692.0869;
			Pos2[2] = 1014.7422;
			Interior = 3;
		}
		case 9:
		{
			Pos2[0] = 226.7886;
			Pos2[1] = 1239.8962;
			Pos2[2] = 1082.1406;
			Interior = 2;
		}
		case 10:
		{
			Pos2[0] = 223.0915;
			Pos2[1] = 1287.0846;
			Pos2[2] = 1082.1406;
			Interior = 1;
		}
		case 11:
		{
			Pos2[0] = 225.7592;
			Pos2[1] = 1021.4461;
			Pos2[2] = 1084.0177;
			Interior = 7;
		}
		case 12:
		{
			Pos2[0] = 295.04;
			Pos2[1] = 1472.26;
			Pos2[2] = 1080.26;
			Interior = 15;
		}
		case 13:
		{
			Pos2[0] = 328.0828;
			Pos2[1] = 1477.7327;
			Pos2[2] = 1084.4375;
			Interior = 15;
		}
		case 14:
		{
			Pos2[0] = 387.2211;
			Pos2[1] = 1471.6251;
			Pos2[2] = 1080.1949;
			Interior = 15;
		}
		case 15:
		{
			Pos2[0] = 377.0259;
			Pos2[1] = 1417.4404;
			Pos2[2] = 1081.3281;
			Interior = 15;
		}
		case 16:
		{
			Pos2[0] = 491.0412;
			Pos2[1] = 1398.5021;
			Pos2[2] = 1080.2578;
			Interior = 2;
		}
		case 17:
		{
			Pos2[0] = 446.9309;
			Pos2[1] = 1397.0626;
			Pos2[2] = 1084.3047;
			Interior = 2;
		}
		case 18:
		{
			Pos2[0] = 261.2726;
			Pos2[1] = 1284.3112;
			Pos2[2] = 1080.2578;
			Interior = 4;
		}
		case 19:
		{
			Pos2[0] = 221.8109;
			Pos2[1] = 1140.1986;
			Pos2[2] = 1082.6094;
			Interior = 4;
		}
		case 20:
		{
			Pos2[0] = 23.8471;
			Pos2[1] = 1340.1683;
			Pos2[2] = 1084.3750;
			Interior = 10;
		}
		case 21:
		{
			Pos2[0] = -260.4884;
			Pos2[1] = 1456.5424;
			Pos2[2] = 1084.3672;
			Interior = 4;
		}
		case 22:
		{
			Pos2[0] = 22.9034;
			Pos2[1] = 1403.3380;
			Pos2[2] = 1084.4370;
			Interior = 5;
		}
		case 23:
		{
			Pos2[0] = 140.1393;
			Pos2[1] = 1365.9347;
			Pos2[2] = 1083.8594;
			Interior = 5;
		}
		case 24:
		{
			Pos2[0] = 234.0749;
			Pos2[1] = 1063.7300;
			Pos2[2] = 1084.2123;
			Interior = 6;
		}
		case 25:
		{
			Pos2[0] = -68.9326;
			Pos2[1] = 1351.2013;
			Pos2[2] = 1080.2109;
			Interior = 6;
		}
		case 26:
		{
			Pos2[0] = -283.4381;
			Pos2[1] = 1471.1987;
			Pos2[2] = 1084.3750;
			Interior = 15;
		}
		case 27:
		{
			Pos2[0] = -42.59;
			Pos2[1] = 1405.47;
			Pos2[2] = 1084.43;
			Interior = 8;
		}
		case 28:
		{
			Pos2[0] = 83.1256;
			Pos2[1] = 1322.2806;
			Pos2[2] = 1083.8662;
			Interior = 9;
		}
		case 29:
		{
			Pos2[0] = 260.85;
			Pos2[1] = 1237.24;
			Pos2[2] = 1084.26;
			Interior = 9;
		}
		case 30:
		{
			Pos2[0] = 2468.84;
			Pos2[1] = -1698.24;
			Pos2[2] = 1013.51;
			Interior = 2;
		}
		case 31:
		{
			Pos2[0] = 2807.8662;
			Pos2[1] = -1174.7537;
			Pos2[2] = 1025.5703;
			Interior = 8;
		}
		case 32:
		{
			Pos2[0] = 318.4255;
			Pos2[1] = 1114.4877;
			Pos2[2] = 1083.8828;
			Interior = 5;
		}
		case 33:
		{
			Pos2[0] = 2324.5017;
			Pos2[1] = -1149.5309;
			Pos2[2] = 1050.7101;
			Interior = 12;
		}
		case 34:
		{
			Pos2[0] = 2259.38;
			Pos2[1] = -1135.77;
			Pos2[2] = 1050.64;
			Interior = 10;
		}
		case 35:
		{
			Pos2[0] = -2170.4675;
			Pos2[1] = 639.4775;
			Pos2[2] = 1052.3750;
			Interior = 1;
		}
		case 36:
		{
			Pos2[0] = 422.5716;
			Pos2[1] = 2536.6816;
			Pos2[2] = 10.0000;
			Interior = 10;
		}
		case 37:
		{
			Pos2[0] = 1260.8397;
			Pos2[1] = -785.4880;
			Pos2[2] = 1091.9063;
			Interior = 5;
		}
		case 38:
		{
			Pos2[0] = 2548.7993;
			Pos2[1] = -1294.6368;
			Pos2[2] = 1060.9844;
			Interior = 2;
		}
		case 40:
		{
			Pos2[0] = 1454.7249;
			Pos2[1] = 551.5430;
			Pos2[2] = 1000.9959;
			Interior = 10;
		}
		case 41:
		{
			Pos2[0] = -794.7611;
			Pos2[1] = 508.3545;
			Pos2[2] = 1371.7490;
			Interior = 1;
		}
		case 42:
		{
			Pos2[0] = 2270.38;
			Pos2[1] = -1210.35;
			Pos2[2] = 1047.56;
			Interior = 10;
		}
		case 43:
		{
			Pos2[0] = 1425.9178;
			Pos2[1] = 599.6864;
			Pos2[2] = 1000.9683;
			Interior = 1;
		}
		case 158:
		{
			Pos2[0] = 243.5093;
			Pos2[1] = -1851.5255;
			Pos2[2] = 3333.9329;
			Interior = 2;
		}
		case 200:
		{
			Pos2[0] = 1094.8260;
			Pos2[1] = -812.7463;
			Pos2[2] =  107.4822;
			Interior = 1;
		}
		default: return print("[ERROR]: Se creo una casa con ID inválida.");
	}
	PropInfo[c][pPosXS] = Pos2[0];
	PropInfo[c][pPosYS] = Pos2[1];
	PropInfo[c][pPosZS] = Pos2[2];
	PropInfo[c][pInteriorID] = Interior;
	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `InteriorID`='%d',`PosXS`='%f',`PosYS`='%f',`PosZS`='%f' WHERE `ID`='%d'",
	Interior,Pos2[0],Pos2[1],Pos2[2],PropInfo[c][pID]);
	mysql_tquery(handle_db, Query,"","");
	return true;
}
SiRoperoTiene(c,objeto)
{
    if(objeto == 1 && PropInfo[c][pManopla] > 0) return 1;
	else if(objeto == 2 && PropInfo[c][pPaloDeGolf] > 0) return 1;
	else if(objeto == 4 && PropInfo[c][pCuchillo] > 0) return 1;
	else if(objeto == 5 && PropInfo[c][pBateDeBeisbol] > 0) return 1;
	else if(objeto == 6 && PropInfo[c][pPala] > 0) return 1;
	else if(objeto == 7 && PropInfo[c][pPaloDeBillar] > 0) return 1;
	else if(objeto == 8 && PropInfo[c][pKatana] > 0) return 1;
	else if(objeto == 10 && PropInfo[c][pConsoladorRosa] > 0) return 1;
	else if(objeto == 11 && PropInfo[c][pVibradorBlanco] > 0) return 1;
	else if(objeto == 12 && PropInfo[c][pGranVibradorBlanco] > 0) return 1;
	else if(objeto == 13 && PropInfo[c][pVibradorPlateado] > 0) return 1;
	else if(objeto == 14 && PropInfo[c][pFlores] > 0) return 1;
	else if(objeto == 15 && PropInfo[c][pBaston] > 0) return 1;
	else if(objeto == 16 && PropInfo[c][pGranada] > 0) return 1;
	else if(objeto == 22 && PropInfo[c][p9mm] > 0) return 1;
	else if(objeto == 23 && PropInfo[c][p9mmSilenciada] > 0) return 1;
	else if(objeto == 24 && PropInfo[c][pDesertEagle] > 0) return 1;
	else if(objeto == 25 && PropInfo[c][pEscopetaNormal] > 0) return 1;
	else if(objeto == 27 && PropInfo[c][pEscopetaDeCombate] > 0) return 1;
	else if(objeto == 29 && PropInfo[c][pMP5] > 0) return 1;
	else if(objeto == 31 && PropInfo[c][pM4] > 0) return 1;
	else if(objeto == 30 && PropInfo[c][pAK47] > 0) return 1;
	else if(objeto == 33 && PropInfo[c][pRifle] > 0) return 1;
	else if(objeto == 43 && PropInfo[c][pCamara] > 0) return 1;
	return 0;
}
EspacioRopero(c)
{
	new total =
	PropInfo[c][pAK47] +
	PropInfo[c][pM4] +
	PropInfo[c][pEscopetaNormal] +
	PropInfo[c][pEscopetaDeCombate] +
	PropInfo[c][pMP5] +
	PropInfo[c][p9mm] +
	PropInfo[c][p9mmSilenciada] +
	PropInfo[c][pDesertEagle] +
	PropInfo[c][pRifle] +
	PropInfo[c][pGranada] +
	PropInfo[c][pManopla] +
	PropInfo[c][pCuchillo] +
	PropInfo[c][pKatana] +
	PropInfo[c][pPala] +
	PropInfo[c][pCamara] +
	PropInfo[c][pBateDeBeisbol] +
	PropInfo[c][pPaloDeGolf] +
	PropInfo[c][pPaloDeBillar] +
	PropInfo[c][pConsoladorRosa] +
	PropInfo[c][pVibradorBlanco] +
	PropInfo[c][pGranVibradorBlanco] +
	PropInfo[c][pVibradorPlateado] +
	PropInfo[c][pBaston] +
	PropInfo[c][pFlores]
	;
	return total;
}

SendRadioMessagePatrulla(member, color, const string[])
{
    if(member == 1)
	{
		foreach(new i : Player)
		{
			if(PLAYER_INFO[i][pDuty] == 1 && IsPlayerInAnyVehicle(i))
			{
			    if(!SAPD(GetPlayerVehicleID(i))) continue;
				SendClientMessage(i, color, string);
			}
		}
	}
}
//
stock SendRadioMessagePatrullam(member, color, const string[])
{
    if(member == 1)
	{
		foreach(new i : Player)
		{
			if(PLAYER_INFO[i][mDuty] == 1 && IsPlayerInAnyVehicle(i))
			{
			    if(!MILI(GetPlayerVehicleID(i))) continue;
				SendClientMessage(i, color, string);
			}
		}
	}
}
//
SendRadioMessage(member, color, const string[], id = INVALID_PLAYER_ID)
{
	if(member == 0) return 1;

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_INFO[i][pFaccion] == member) && (EstadoRadio[i] == 1) && (i != id) && (PLAYER_INFO[i][pRadio] == 1))
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

SendRadioPoliceMessage(color, const string[], id = INVALID_PLAYER_ID, frecuencia = 0)
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(frecuencia > 0 && PLAYER_INFO[i][pFaccion] == 1)//a los que tengan frecuencia
		    {
				if((PLAYER_INFO[i][pDuty] == 1) && (Frecuencia[i] == frecuencia) && (EstadoRadio[i] == 1) && (i != id) && (PLAYER_INFO[i][pRadio] == 1))
				{
					SendClientMessage(i, color, string);
				}
			}
			else if(frecuencia == 0 && PLAYER_INFO[i][pFaccion] == 1) // para todos
		    {
				if((PLAYER_INFO[i][pDuty] == 1) && (EstadoRadio[i] == 1) && (i != id) && (PLAYER_INFO[i][pRadio] == 1))
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}
//
SendRadioMilitarMessage(color, const string[], id = INVALID_PLAYER_ID, frecuencia = 0)
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(frecuencia > 0 && PLAYER_INFO[i][pFaccion] == 2)//a los que tengan frecuencia
		    {
				if((PLAYER_INFO[i][mDuty] == 1) && (Frecuencia[i] == frecuencia) && (EstadoRadio[i] == 1) && (i != id) && (PLAYER_INFO[i][pRadio] == 1))
				{
					SendClientMessage(i, color, string);
				}
			}
			else if(frecuencia == 0 && PLAYER_INFO[i][pFaccion] == 2) // para todos
		    {
				if((PLAYER_INFO[i][mDuty] == 1) && (EstadoRadio[i] == 1) && (i != id) && (PLAYER_INFO[i][pRadio] == 1))
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}
//
DarArma(playerid, weaponid)
{
    PLAYER_TIMES[playerid][TIMER_WEAPONS] = gettime() + 3;
    
	PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(weaponid)] = weaponid;
	GivePlayerWeapon(playerid, weaponid, 999999);
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

CancelarCriminal(playerid)
{
	if(TieneEncargo[playerid] > 0)
	{
		for(new e=1; e<MAX_ENCARGOS; e++)
		{
			if(e == TieneEncargo[playerid])
			{
				Encargo[e][MisionActiva] = 0;
				Encargo[e][ObjetivoTake] = 0;
				Encargo[e][Bajas] = 0;
				CriminalAceptado[e] = 0;
				Encargo[e][Tiene9mm] = 0;
				Encargo[e][IdCriminal] = INVALID_PLAYER_ID;
				Encargo[e][IdColega] = INVALID_PLAYER_ID;
    			foreach(new u : Player)
				{
					if(TieneEncargo[u] == e)
					{
						SendClientMessage(u, -1, "Tu colega se ha marchado, no puedes seguir con el encargo.");
						TieneEncargo[u] = 0;
						CriminalAceptado[u] = 0;
						TomoEncargo[u] = 0;
						DisablePlayerRaceCheckpoint(u);
						if(IsValidActor(Encargo[e][Actor1])) DestroyActor(Encargo[e][Actor1]);
						if(IsValidActor(Encargo[e][Objetivo])) DestroyActor(Encargo[e][Objetivo]);
						if(IsValidActor(Encargo[e][Actor2])) DestroyActor(Encargo[e][Actor2]);
					}
				}
			}
		}
	}
	return 1;
}
FinTiempoCriminal(e)
{
	if(Encargo[e][SegundosMision] == 0)
	{
		Encargo[e][MisionActiva] = 0;
		Encargo[e][ObjetivoTake] = 0;
		Encargo[e][Bajas] = 0;
		Encargo[e][Tiene9mm] = 0;
		Encargo[e][IdCriminal] = INVALID_PLAYER_ID;
		Encargo[e][IdColega] = INVALID_PLAYER_ID;
		foreach(new u : Player)
		{
			if(TieneEncargo[u] == e)
			{
				if(CriminalAceptado[u] == 0)
                {
                    SendClientMessage(u, -1, "Tardaste demasiado en conseguir un colega, {FF0303}el encargo ha sido cancelado");
                }
                else
                {
                    SendClientMessage(u, -1, "Tardaron demasiado, {FF0303}el objetivo se ha ido");
                }
				TieneEncargo[u] = 0;
				TomoEncargo[u] = 0;
				DisablePlayerRaceCheckpoint(u);
				if(IsValidActor(Encargo[e][Actor1])) DestroyActor(Encargo[e][Actor1]);
				if(IsValidActor(Encargo[e][Objetivo])) DestroyActor(Encargo[e][Objetivo]);
				if(IsValidActor(Encargo[e][Actor2])) DestroyActor(Encargo[e][Actor2]);
			}
		}
	}
	return 1;
}
FinMisionCriminal(e)
{
	new item[200],GananciaFinal;
	switch(e)
	{
		case 1: {	GananciaFinal=2000;}
		case 2: {	GananciaFinal=2500;}
		case 3: {	GananciaFinal=2200;}
		case 4: {	GananciaFinal=3000;}
		case 5: {	GananciaFinal=2800;}
	}
	format(item,sizeof(item),"\n{FFFFFF}Pago inicial: {F7A40A}$%d",	GananciaFinal);
	if(PLAYER_INFO[Encargo[e][IdCriminal]][j_ARMAS][GetWeaponSlot(23)] == 23)
	{
		format(item,sizeof(item),"%s\n{FFFFFF}Ganancia por entregar el arma del delito: {4CF000}$2000",item);
		QuitarArma(Encargo[e][IdCriminal],23);
		GananciaFinal += 2000;
	}
	if(Encargo[e][Bajas] > 0)
	{
		format(item,sizeof(item),"%s\n{FFFFFF}Descuento por bajas innecesarias: {FF0808}$500",item);
		GananciaFinal -= 500;
	}
	format(item,sizeof(item),"%s\n{FFFFFF}Ganancia final: {4CF000}$%d",item,GananciaFinal);
	foreach(new u : Player)
	{
		if(TieneEncargo[u] == e)
		{
			new Ganancias[200];
			ShowPlayerDialog(u,INFOLADRON,DIALOG_STYLE_MSGBOX,"{49C410}Encargo finalizado{FFFFFF}",item,"Aceptar","");
			TieneEncargo[u] = 0;
			TomoEncargo[u] = 0;
			CriminalAceptado[u] = 0;
			DisablePlayerRaceCheckpoint(u);
			SetPlayerWantedLevel(u, 0);
			SetPlayerWantedLevel(u, 0);
			DarDinero(u, GananciaFinal);
			format(Ganancias, sizeof(Ganancias), "{f21111}¡Buen Trabajo!{FFFFFF} Tus ganancias son: {f21111}$%d",GananciaFinal);
			SendClientMessage(u, -1, Ganancias);
		}
	}
	SendClientMessage(Encargo[e][IdCriminal],0x2d8cecFF,"Habilidad de criminal aumentada +1 punto.");
	SendClientMessage(Encargo[e][IdColega],0x2d8cecFF,"Habilidad de criminal aumentada +1 punto.");
	Encargo[e][MisionActiva] = 0;
	Encargo[e][ObjetivoTake] = 0;
	Encargo[e][Bajas] = 0;
	Encargo[e][Tiene9mm] = 0;
	Encargo[e][IdCriminal] = INVALID_PLAYER_ID;
	Encargo[e][IdColega] = INVALID_PLAYER_ID;
	return 1;
}
CountPlayerWeapons(playerid)
{
	new weapons;
	for(new i = 0; i < 13; i++) if(PLAYER_INFO[playerid][j_ARMAS][i] != 0) weapons ++;
	return weapons;
}

DarArmas(playerid)
{
    PLAYER_TIMES[playerid][TIMER_WEAPONS] = gettime() + 3;
    
    SetPlayerArmedWeapon(playerid, 0);
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 13; i++)
	{
		if(PLAYER_INFO[playerid][j_ARMAS][i] != 0)
		{
			GivePlayerWeapon(playerid, PLAYER_INFO[playerid][j_ARMAS][i], 999999999);
		}
	}
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

Habilidad(ID,playerid)
{
	new item[900];
	format(item,sizeof(item),"{FFFFFF}Trabajo de {febf00}Camionero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",				PLAYER_INFO[ID][pNivelCamionero],		PLAYER_INFO[ID][pExpCamionero]);
	format(item,sizeof(item),"%s\nTrabajo de {ff0000}Fabricante de armas{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,	PLAYER_INFO[ID][pNivelArmero],			PLAYER_INFO[ID][pExpArmero]);
	format(item,sizeof(item),"%s\nTrabajo de {00d8ff}Mecánico{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,				PLAYER_INFO[ID][pNivelMecanico],			PLAYER_INFO[ID][pExpMecanico]);
	format(item,sizeof(item),"%s\nTrabajo de {6c5109}Basurero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,				PLAYER_INFO[ID][pNivelBasurero],			PLAYER_INFO[ID][pExpBasurero]);
	format(item,sizeof(item),"%s\nTrabajo de {662aff}Transportista{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,		PLAYER_INFO[ID][pNivelTransportista],	PLAYER_INFO[ID][pExpTransportista]);
	format(item,sizeof(item),"%s\nTrabajo de {2945d4}Ladrón{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,				PLAYER_INFO[ID][pNivelLadron],			PLAYER_INFO[ID][pExpLadron]);
	format(item,sizeof(item),"%s\nTrabajo de {ff4e00}Médico{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,				PLAYER_INFO[ID][pNivelMedico],		PLAYER_INFO[ID][pExpMedico]);
	format(item,sizeof(item),"%s\nTrabajo de {ffff04}Trailero{FFFFFF} (Nivel: %d | Progreso %d/50)\n",item,				PLAYER_INFO[ID][pNivelTrailero],		PLAYER_INFO[ID][pExpTrailero]);
	ShowPlayerDialog(playerid,INFOLADRON,DIALOG_STYLE_MSGBOX,"Habilidades",item,"Cerrar","");
	return 1;
}
EnviarSMS(playerid, numero, const text[])
{
	new anio, mes, dia, hora, minuto, segundo;
	getdate(anio, mes, dia);
	gettime(hora, minuto, segundo);
	if(PLAYER_INFO[playerid][pNumero] == numero) return SendClientMessage(playerid,-1,"No puedes autoenviarte un SMS.");
 	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PLAYER_INFO[i][pNumero] == numero && numero != 0)
		{
			if(TelefonoEstado[i] == 1 || PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "El mensaje {FF3300}no se pudo entregar{FFFFFF}, comprueba que el número sea el correcto.");
			 	SendClientMessage(playerid, COLOR_WHITE, "Si el número está bien, probablemente el teléfono esté apagado.");
			 	return 1;
			}
			new sms[128];
			format(sms,sizeof(sms),"(( SMS de %s [%d])): %s",PLAYER_INFO[playerid][Nickname], PLAYER_INFO[playerid][pNumero], text);
			SendClientMessage(i, COLOR_DORADO, sms);
			SendClientMessage(playerid, COLOR_DORADO, "Mensaje enviado con éxito.");
			GameTextForPlayer(playerid, "~r~-15$", 5000, 1);
			QuitarDinero(playerid, 15);
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);
			QuitarDinero(playerid, 15);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "El mensaje {FF4202}no se pudo entregar{FFFFFF}, comprueba que el número sea el correcto.");
	SendClientMessage(playerid, COLOR_WHITE, "Si el número está bien, probablemente el teléfono esté apagado.");
	return 1;
}
Inventario(ID,targetid)
{
	new string[800];
	if(PLAYER_INFO[ID][Moneda] > 0)	format(string, sizeof(string),"{FFFFFF}"SERVER_COIN": {f21111}%d\n", PLAYER_INFO[ID][Moneda]);
	format(string, sizeof(string),"%s{FFFFFF}Dinero: {f21111}$%d",string, PLAYER_INFO[ID][pDinero]);
	if(PLAYER_INFO[ID][pNumero] > 0)	format(string, sizeof(string),"%s\n{FFFFFF}Teléfono móvil.",string);
	if(PLAYER_INFO[ID][pAgenda] == 1)format(string, sizeof(string),"%s\n{FFFFFF}Guía telefónica.",string);
	if(PLAYER_INFO[ID][pGPS] == 1) format(string, sizeof(string),"%s\n{FFFFFF}GPS",string);
	if(PLAYER_INFO[ID][pPatines] == 1) format(string, sizeof(string),"%s\n{FFFFFF}Patines.",string);
	if(BackPack[ID][bDBID] > 0) format(string, sizeof(string),"%s\n{FFFFFF}Mochila.",string);
	if(CountPlayerToys(ID) > 0)
	{
	    format(string, sizeof string, "%s\n{FFFFFF}Accesorios: %d/%d",string,CountPlayerToys(ID), MAX_PLAYER_TOYS);
	}
	if(PLAYER_INFO[ID][pRadio] == 1)	format(string, sizeof(string),"%s\n{FFFFFF}Radio comunicador.",string);
	if(PLAYER_INFO[ID][pRemedios] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Medicamentos: {f21111}%d",string,PLAYER_INFO[ID][pRemedios]);
	if(PLAYER_INFO[ID][pCrack] > 0)		format(string, sizeof(string),"%s\n{FFFFFF}Crack: {f21111}%dg",string,PLAYER_INFO[ID][pCrack]);
	if(PLAYER_INFO[ID][pHeroina] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Heroina: {f21111}%d",string,PLAYER_INFO[ID][pHeroina]);
	if(PLAYER_INFO[ID][pCocaina] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Cocaina: {f21111}%d",string,PLAYER_INFO[ID][pCocaina]);
	if(PLAYER_INFO[ID][pPerico] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Perico: {f21111}%d",string,PLAYER_INFO[ID][pPerico]);
	if(PLAYER_INFO[ID][pPreper] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Preper: {f21111}%d",string,PLAYER_INFO[ID][pPreper]);
	if(PLAYER_INFO[ID][pGino] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}Gino: {f21111}%d",string,PLAYER_INFO[ID][pGino]);
	if(PLAYER_INFO[ID][pRootCoins] > 0) 	format(string, sizeof(string),"%s\n{FFFFFF}RootCoins: {f21111}%d",string,PLAYER_INFO[ID][pRootCoins]);
	if(PLAYER_INFO[ID][pMarihuana] > 0)	format(string, sizeof(string),"%s\n{FFFFFF}Marihuana: {f21111}%dg",string,PLAYER_INFO[ID][pMarihuana]);
	if(PLAYER_INFO[ID][Repuestos] > 0)	format(string, sizeof(string),"%s\n{FFFFFF}Repuestos: {f21111}%d/200",string,PLAYER_INFO[ID][Repuestos]);
	if(PLAYER_INFO[ID][pMateriales] > 0)	format(string, sizeof(string),"%s\n{FFFFFF}Piezas de armas: {f21111}%d",string,PLAYER_INFO[ID][pMateriales]);
	if(PLAYER_INFO[ID][piezas] > 0)			format(string, sizeof(string),"%s\n{FFFFFF}Materiales: {f21111}%d",string,PLAYER_INFO[ID][piezas]);
	if(PLAYER_INFO[ID][pDuty] == 1 && CountPlayerWeapons(ID) > 0)
	{
	    format(string, sizeof(string),"%s\n{FFFFFF}Armas {ffffff}( %d )",string, CountPlayerWeapons(ID));
		for(new i = 0; i < 13; i++)
		{
			if(PLAYER_INFO[ID][j_ARMAS][i] != 0) format(string, sizeof string, "%s\n  {f21111}-%s",string, GetNameObjeto(PLAYER_INFO[ID][j_ARMAS][i]));
		}

	}
	else if(CountPlayerWeapons(ID) > 0)
	{
		format(string, sizeof(string),"%s\n{f21111}Armas {ffffff}( %d )",string, CountPlayerWeapons(ID));
		for(new i = 0; i < 13; i++)
		{
			if(PLAYER_INFO[ID][j_ARMAS][i] != 0) format(string, sizeof string, "%s\n  {FF3300}-%s",string, GetNameObjeto(PLAYER_INFO[ID][j_ARMAS][i]));
		}
	}
	if(PLAYER_INFO[ID][pMartillo] > 0 || PLAYER_INFO[ID][pDestornillador] > 0 || PLAYER_INFO[ID][pBarreta] > 0||PLAYER_INFO[ID][pBalde] > 0)
	{
		format(string, sizeof(string),"%s\n\n{FFFFFF}Herramientas: %s%s%s%s{f21111} ",string, NombreHerramienta[PLAYER_INFO[ID][pMartillo]],NombreHerramienta[PLAYER_INFO[ID][pDestornillador]],NombreHerramienta[PLAYER_INFO[ID][pBarreta]],NombreHerramienta[PLAYER_INFO[ID][pBalde]]);
	}
	ShowPlayerDialog(targetid, INVENTARIO, DIALOG_STYLE_MSGBOX,"{f21111}Inventario",string,"Cerrar","");
	return 1;
}
ShowStats(targetid, showid)
{
    if(IsPlayerConnected(targetid))
	{
	    new string[1000], banda = PLAYER_INFO[targetid][pFaccion];
		format(string, sizeof(string),"{FFFFFF}Nombre: {00E1FF}%s {FFFFFF}| Nivel: {FDB600}%d {FFFFFF}| Reputacion: {59FF00}%d/%d {FFFFFF}|\n",PLAYER_INFO[targetid][Nickname],PLAYER_INFO[targetid][pNivel],PLAYER_INFO[targetid][pExperiencia],PLAYER_INFO[targetid][ExperienciaTotal]);
		if(PLAYER_INFO[targetid][pVIP] < 2) format(string, sizeof(string),"%s{FFFFFF}| Trabajo primario: {FFB500}%s {FFFFFF}| Trabajo secundario: %s |\n\n",string, NombreTrabajo(PLAYER_INFO[targetid][pTrabajo]), NombreTrabajo(PLAYER_INFO[targetid][pTrabajo2]));
		else format(string, sizeof(string),"%s{FFFFFF}| Trabajo primario: {FFB500}%s {FFFFFF}| Trabajo secundario: {FFB500}%s{FFFFFF} |\n\n",string, NombreTrabajo(PLAYER_INFO[targetid][pTrabajo]), NombreTrabajo(PLAYER_INFO[targetid][pTrabajo2]));
        if(PLAYER_INFO[targetid][pVIP] > 0) format(string, sizeof(string),"| Membresía VIP %d válida hasta %02d/%02d/%02d",PLAYER_INFO[targetid][pVIP], PLAYER_INFO[targetid][findia],PLAYER_INFO[targetid][finmes],PLAYER_INFO[targetid][finano]);
		if(PLAYER_INFO[targetid][pFaccion] > 0)
		{
		    new cuentaterris;
		    for(new t = 0; t != MAX_T; t ++)
			{
				if(TERRITORIOS_INFO[t][Territorio_Valido] && TERRITORIOS_INFO[t][Territorio_BandaID] != 0)
				{
					if(TERRITORIOS_INFO[t][Territorio_BandaID] == PLAYER_INFO[targetid][pFaccion]) cuentaterris++;
				}
			}
			format(string, sizeof(string), "%s{FFFFFF}| Integrante de: {2B8FFF}%s {FFFFFF}- Rango: {2B8FFF}%s {FFFFFF}- Territorios dominados: {FFFF00}%d {FFFFFF}|\n",string,BandasInfo[banda][BNombre],RangoBanda(banda, PLAYER_INFO[targetid][pRango]),cuentaterris);
        }
		if(PLAYER_INFO[targetid][vModelo] > 0 || PLAYER_INFO[targetid][vModelo2] > 0 || PLAYER_INFO[targetid][vModelo3] > 0 || PLAYER_INFO[targetid][vModelo4] > 0)
		{
		    format(string, sizeof(string),"%sVehículos de este jugador\n",string);
			if(PLAYER_INFO[targetid][vModelo] > 0) format(string, sizeof(string), "%sModelo: {FF5454}%s{FFFFFF} | Patente: {FF9C19}%s {FFFFFF}\n", string, NombreAuto[GetVehicleModel(autos[targetid])-400], PLAYER_INFO[targetid][vpatente]);
			if(PLAYER_INFO[targetid][vModelo2] > 0) format(string, sizeof(string), "%sModelo: {FF5454}%s{FFFFFF} | Patente: {FF9C19}%s {FFFFFF}\n", string, NombreAuto[GetVehicleModel(autos2[targetid])-400], PLAYER_INFO[targetid][v2patente]);
			if(PLAYER_INFO[targetid][vModelo3] > 0) format(string, sizeof(string), "%sModelo: {FF5454}%s{FFFFFF} | Patente: {FF9C19}%s {FFFFFF}\n", string, NombreAuto[GetVehicleModel(autos3[targetid])-400], PLAYER_INFO[targetid][v3patente]);
			if(PLAYER_INFO[targetid][vModelo4] > 0) format(string, sizeof(string), "%sModelo: {FF5454}%s{FFFFFF} | Patente: {FF9C19}%s {FFFFFF}\n", string, NombreAuto[GetVehicleModel(autos4[targetid])-400], PLAYER_INFO[targetid][v4patente]);
        }
        ShowPlayerDialog(showid, INVENTARIO, DIALOG_STYLE_MSGBOX,"Estadísticas",string,"Cerrar","");
	}
    return 1;
}
IsSeatTaken(vehicleid, seatid)
{
    foreach(new i : Player)
    {
        if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return 1;
    }
    return 0;
}
IsNumeric(const str[])
{
	for(new i, len = strlen(str); i < len; i++)
	{
		if(!('0' <= str[i] <= '9')) return false;
	}
	return true;
}
NombreBanco(playerid)
{
	new string[24];
	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 3)    {
        format(string,sizeof(string),"Banco central de Los Santos");
	}
	else if(GetPlayerVirtualWorld(playerid) == 7 && GetPlayerInterior(playerid) == 3)    {
        format(string,sizeof(string),"Banco plaza");
	}
	else if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 0)    {
        format(string,sizeof(string),"Banco central de San Fierro");
	}
	else if(GetPlayerVirtualWorld(playerid) == 6 && GetPlayerInterior(playerid) == 3)    {
        format(string,sizeof(string),"Banco central de Las Venturas");
	}
	else format(string,sizeof(string),"Banco central de Los Santos");
	return string;
}
HospitalCercano(playerid)
{
	new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
	HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
	HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
	HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
	HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
	MedicoCP2[playerid] = 1;
	if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF)
	{
		MedicoCP[playerid] = SetPlayerCheckpoint(playerid,1191.43,-1326.39,13.40,5.0);
	}
	else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF)
	{
		MedicoCP[playerid] = SetPlayerCheckpoint(playerid, 2030.36,-1419.79,16.99,5.0);
	}
	else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF)
	{
		MedicoCP[playerid] = SetPlayerCheckpoint(playerid,1605.58,1830.17,10.82,5.0);
	}
	else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV)
	{
		MedicoCP[playerid] = SetPlayerCheckpoint(playerid,-2662.87,631.44,14.45,5.0);
	}
}
HospitalMasCercano(playerid)
{
	new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
    NoTeleportHack(playerid);
	HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
	HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
	HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
	HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
	switch(PLAYER_INFO[playerid][pSocioHP])
	{
		case 0:
	    {
	        if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF) // HP Central
			{
				SetPlayerPosEx(playerid, 1172.79,-1321.24,15.40);
				SetPlayerCameraPos(playerid,1206.4226, -1291.1536, 32.5757);
				SetPlayerCameraLookAt(playerid,1205.6591, -1291.8055, 32.5408);
			}
			else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF) // HP Groove
			{
				SetPlayerPosEx(playerid,2036.8506,-1403.4642,17.2841);
                SetPlayerCameraPos(playerid, 2024.3646, -1435.4784, 30.9798);
                SetPlayerCameraLookAt(playerid, 2024.6460, -1434.5137, 30.5048);
			}
			else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV) // HP San Fierro
			{
				SetPlayerPosEx(playerid,-2638.0701,636.5035,14.4531);
                SetPlayerCameraPos(playerid, -2554.3657, 558.7826, 72.4722);
                SetPlayerCameraLookAt(playerid, -2555.0823, 559.4846, 72.1473);
			}
			else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF) // HP Las Venturas
			{
				SetPlayerPosEx(playerid,1598.6957,1816.0245,10.8203);
				SetPlayerCameraPos(playerid, 1558.6453, 1728.8574, 12.6747);
				SetPlayerCameraLookAt(playerid, 1559.2050, 1729.6805, 12.8645);
			}
	    }
		case 1: // LS Central
		{
			SetPlayerPosEx(playerid, 1172.79,-1321.24,15.40);
			SetPlayerCameraPos(playerid,1216.6165,-1284.9585,23.7114);
			SetPlayerCameraLookAt(playerid,1178.9612,-1324.9348,14.1459);
		}
		case 2: // LS Groove
		{
			SetPlayerPosEx(playerid,2036.8506,-1403.4642,17.2841);
			SetPlayerCameraPos(playerid,1956.5846,-1463.3260,46.8506);
			SetPlayerCameraLookAt(playerid,2036.8506,-1403.4642,17.2841);
		}
		case 3: // SF
		{
			SetPlayerPosEx(playerid,-2638.0701,636.5035,14.4531);
			SetPlayerCameraPos(playerid,-2542.7778,552.2639,74.6866);
			SetPlayerCameraLookAt(playerid,-2638.0701,636.5035,14.4531);
		}
		case 4: // LV
		{
   			SetPlayerPosEx(playerid,1598.6957,1816.0245,10.8203);
			SetPlayerCameraPos(playerid, 1558.6453, 1728.8574, 12.6747);
			SetPlayerCameraLookAt(playerid, 1559.2050, 1729.6805, 12.8645);
		}
	}
}

PosTunningCercano(playerid)
{
	new Float:distance = 99999.0,Float:tmp_distance,ID = -1;

    for(new i = 0; i < sizeof PointVehicleTunnin; i++)
    {
        tmp_distance = GetPlayerDistanceFromPoint(playerid, PointVehicleTunnin[i][0], PointVehicleTunnin[i][1], PointVehicleTunnin[i][2]);
        if(tmp_distance < distance)
        {
            distance = tmp_distance;
            ID = i;
        }
    }
	return ID;
}

ConceCercano(playerid)
{
	new Float:distance = 99999.0,Float:tmp_distance,ID = -1;

    for(new i = 0; i < sizeof Concesionaria_Spawn_Positions; i++)
    {
        tmp_distance = GetPlayerDistanceFromPoint(playerid, Concesionaria_Spawn_Positions[i][0], Concesionaria_Spawn_Positions[i][1], Concesionaria_Spawn_Positions[i][2]);
        if(tmp_distance < distance)
        {
            distance = tmp_distance;
            ID = i;
        }
    }
	return ID;
}

Respawnear(autoid)
{
	if(IsValidVehicle(autoid))
	{
		MotorAuto[autoid] = 0;
		SetVehicleToRespawn(autoid);
	}
	return 1;
}

PagoCamionero(playerid, nivel, carga)
{
	if(RoboTienda[playerid] == 1)
	{
	    SendClientMessage(playerid,-1,"Nos llegó un informe de que {FF0000}asaltaste una tienda{FFFFFF} durante tu trabajo, ahora {FF0000}no se te pagará.");
	    return 1;
	}
	switch(nivel)
	{
		case 1:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$2.500");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$2.500");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 2500);
					PLAYER_INFO[playerid][pCrack] += 2;
					PLAYER_INFO[playerid][pRemedios] += 4;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$2.500{FFFFFF} + {f21111}4 {FFFFFF}medicamentos {FFFFFF}y {FF3300}2g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 2500);
					PLAYER_INFO[playerid][pMateriales] += 2;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$2.500{FFFFFF} y {FF3300}2 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 2:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 3500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$3.500");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 3500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$3.500");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 3500);
					PLAYER_INFO[playerid][pCrack] += 3;
					PLAYER_INFO[playerid][pRemedios] += 6;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$3.500{FFFFFF} + {f21111}6 {FFFFFF}medicamentos {FFFFFF}y {FF3300}3g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 3500);
					PLAYER_INFO[playerid][pMateriales] += 5;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$3.500{FFFFFF} y {FF3300}5 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 3:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 5000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$5.000");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 5000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$5.000");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 5000);
					PLAYER_INFO[playerid][pCrack] += 4;
					PLAYER_INFO[playerid][pRemedios] += 8;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$5.000{FFFFFF} + {f21111}8 {FFFFFF}medicamentos {FFFFFF}y {FF3300}4g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 5000);
					PLAYER_INFO[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$5.000{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 4:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 6000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$6.000");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 6000);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$6.000");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 6000);
					PLAYER_INFO[playerid][pCrack] += 5;
					PLAYER_INFO[playerid][pRemedios] += 10;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$6.000{FFFFFF} + {f21111}10 {FFFFFF}medicamentos {FFFFFF}y {FF3300}5g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 6000);
					PLAYER_INFO[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$6.000{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		case 5:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 7500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$7.500");
				}
				case 2:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 7500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$7.500");
				}
				case 3:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 7500);
					PLAYER_INFO[playerid][pCrack] += 6;
					PLAYER_INFO[playerid][pRemedios] += 12;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$7.500{FFFFFF} + {f21111}12 {FFFFFF}medicamentos {FFFFFF}y {FF3300}6g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio(playerid, PLAYER_INFO[playerid][pNivelCamionero]);
					DarDinero(playerid, 7500);
					PLAYER_INFO[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$7.500{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
		default:
		{
			switch(carga)
			{
				case 1:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$2.500");
				}
				case 2:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					SendClientMessage(playerid, -1, "¡Excelente entrega! Tus ganancias son: {f21111}$2.500");
				}
				case 3:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					PLAYER_INFO[playerid][pCrack] += 6;
					PLAYER_INFO[playerid][pRemedios] += 12;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$2.500{FFFFFF} + {f21111}12 {FFFFFF}medicamentos {FFFFFF}y {FF3300}6g{FFFFFF} de Crack.");
				}
				case 4:
				{
					DarHabilidadCamio2(playerid);
					DarDinero(playerid, 2500);
					PLAYER_INFO[playerid][pMateriales] += 7;
					SendClientMessage(playerid, -1, "{f21111}¡Excelente entrega!{FFFFFF} Tus ganancias son: {f21111}$2.500{FFFFFF} y {FF3300}7 piezas{FFFFFF} para crear armas.");
				}
			}
		}
	}
	return 1;
}

QuitarArmas(playerid)
{
    PLAYER_TIMES[playerid][TIMER_WEAPONS] = gettime() + 3;
    SetPlayerArmedWeapon(playerid, 0);
    ResetPlayerWeapons(playerid);
    
	for(new i = 0; i < 13; i++) PLAYER_INFO[playerid][j_ARMAS][i] = 0;
	return 1;
}


QuitarArma(playerid, weaponid)
{
    PLAYER_TIMES[playerid][TIMER_WEAPONS] = gettime() + 3;
    
	SetPlayerArmedWeapon(playerid, 0);
	ResetPlayerWeapons(playerid);
	PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(weaponid)] = 0;
    DarArmas(playerid);
	return 1;
}

CalcularNivel(playerid)
{
	switch(PLAYER_INFO[playerid][pNivel])
	{
		case 1: { PLAYER_INFO[playerid][ExperienciaTotal] = 7; PLAYER_INFO[playerid][PrecioNivel] = 980; }
		case 2: { PLAYER_INFO[playerid][ExperienciaTotal] = 12; PLAYER_INFO[playerid][PrecioNivel] = 3240; }
		case 3: { PLAYER_INFO[playerid][ExperienciaTotal] = 19; PLAYER_INFO[playerid][PrecioNivel] = 7600; }
		case 4: { PLAYER_INFO[playerid][ExperienciaTotal] = 31; PLAYER_INFO[playerid][PrecioNivel] = 16430; }
		case 5: { PLAYER_INFO[playerid][ExperienciaTotal] = 52; PLAYER_INFO[playerid][PrecioNivel] = 34320; }
		case 6: { PLAYER_INFO[playerid][ExperienciaTotal] = 86; PLAYER_INFO[playerid][PrecioNivel] = 67940; }
		case 7: { PLAYER_INFO[playerid][ExperienciaTotal] = 143; PLAYER_INFO[playerid][PrecioNivel] = 131560; }
		case 8: { PLAYER_INFO[playerid][ExperienciaTotal] = 239; PLAYER_INFO[playerid][PrecioNivel] = 250950; }
		case 9: { PLAYER_INFO[playerid][ExperienciaTotal] = 397; PLAYER_INFO[playerid][PrecioNivel] = 468460; }
		case 10: { PLAYER_INFO[playerid][ExperienciaTotal] = 662; PLAYER_INFO[playerid][PrecioNivel] = 867220;}
		case 11: { PLAYER_INFO[playerid][ExperienciaTotal] = 1103; PLAYER_INFO[playerid][PrecioNivel] = 1588320; }
		case 12: { PLAYER_INFO[playerid][ExperienciaTotal] = 1838; PLAYER_INFO[playerid][PrecioNivel] = 2885660; }
		case 13: { PLAYER_INFO[playerid][ExperienciaTotal] = 3063; PLAYER_INFO[playerid][PrecioNivel] = 5207100; }
		case 14: { PLAYER_INFO[playerid][ExperienciaTotal] = 5105; PLAYER_INFO[playerid][PrecioNivel] = 9342150; }
		case 15: { PLAYER_INFO[playerid][ExperienciaTotal] = 8508; PLAYER_INFO[playerid][PrecioNivel] = 16675680; }
		case 16: { PLAYER_INFO[playerid][ExperienciaTotal] = 14179; PLAYER_INFO[playerid][PrecioNivel] = 29634110; }
		case 17: { PLAYER_INFO[playerid][ExperienciaTotal] = 23632; PLAYER_INFO[playerid][PrecioNivel] = 47212254; }
	}
}
GuardarCuenta(playerid)
{
    if(GetPlayerScore(playerid) == 0) return 1;
	if(JugadorLogeado[playerid] == 1)
	{
	    SavePlayerToys(playerid);
	    ALM_BackPack(playerid);
		new Float:x,Float:y,Float:z,Float:z_a,Float:VidaV;
		new Float:x2,Float:y2,Float:z2,Float:z_a2,Float:VidaV2;
		new Float:x3,Float:y3,Float:z3,Float:z_a3,Float:VidaV3;
		new Float:x4,Float:y4,Float:z4,Float:z_a4,Float:VidaV4;
		new inte, vw;
		new day,month,year, Query[2700];
		getdate(day,month,year);
		if(autos[playerid] > 0)
		{
			GetVehicleDamageStatus(autos[playerid], PLAYER_INFO[playerid][VE1], PLAYER_INFO[playerid][VE2], PLAYER_INFO[playerid][VE3], PLAYER_INFO[playerid][VE4]);
			PLAYER_INFO[playerid][vGas] = VehicleFuel[autos[playerid]];
			GetVehicleHealth(autos[playerid], VidaV);
			GetVehiclePos(autos[playerid], x,y,z);
			PLAYER_INFO[playerid][vX] = x;
			PLAYER_INFO[playerid][vY] = y;
			PLAYER_INFO[playerid][vZ] = z;
			GetVehicleZAngle(autos[playerid], z_a);
			PLAYER_INFO[playerid][vA] = z_a;
			PLAYER_INFO[playerid][pVidaV] = VidaV;
			inte = GetVehicleInterior(autos[playerid]); vw = GetVehicleVirtualWorld(autos[playerid]);
			PLAYER_INFO[playerid][vinterior] = inte;
			PLAYER_INFO[playerid][vvw] = vw;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='1'",PLAYER_INFO[playerid][VE1], PLAYER_INFO[playerid][VE2], PLAYER_INFO[playerid][VE3], PLAYER_INFO[playerid][VE4],PLAYER_INFO[playerid][vGas],PLAYER_INFO[playerid][pVidaV],PLAYER_INFO[playerid][vX],PLAYER_INFO[playerid][vY],PLAYER_INFO[playerid][vZ],PLAYER_INFO[playerid][vA],PLAYER_INFO[playerid][vinterior],PLAYER_INFO[playerid][vvw],PLAYER_INFO[playerid][pID]);
            mysql_tquery(handle_db, Query);
		}
		if(autos2[playerid] > 0)
		{
			GetVehicleDamageStatus(autos2[playerid], PLAYER_INFO[playerid][V2E1], PLAYER_INFO[playerid][V2E2], PLAYER_INFO[playerid][V2E3], PLAYER_INFO[playerid][V2E4]);
			PLAYER_INFO[playerid][v2Gas] = VehicleFuel[autos2[playerid]];
			GetVehicleHealth(autos2[playerid], VidaV2);
			GetVehiclePos(autos2[playerid], x2,y2,z2);
			PLAYER_INFO[playerid][v2X] = x2;
			PLAYER_INFO[playerid][v2Y] = y2;
			PLAYER_INFO[playerid][v2Z] = z2;
			GetVehicleZAngle(autos2[playerid], z_a2);
			PLAYER_INFO[playerid][v2A] = z_a2;
			PLAYER_INFO[playerid][pVidaV2] = VidaV2;
			inte = GetVehicleInterior(autos2[playerid]); vw = GetVehicleVirtualWorld(autos2[playerid]);
			PLAYER_INFO[playerid][v2interior] = inte;
			PLAYER_INFO[playerid][v2vw] = vw;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='2'",PLAYER_INFO[playerid][V2E1], PLAYER_INFO[playerid][V2E2], PLAYER_INFO[playerid][V2E3], PLAYER_INFO[playerid][V2E4],PLAYER_INFO[playerid][v2Gas],PLAYER_INFO[playerid][pVidaV2],PLAYER_INFO[playerid][v2X],PLAYER_INFO[playerid][v2Y],PLAYER_INFO[playerid][v2Z],PLAYER_INFO[playerid][v2A],PLAYER_INFO[playerid][v2interior],PLAYER_INFO[playerid][v2vw],PLAYER_INFO[playerid][pID]);
            mysql_tquery(handle_db, Query);
		}
		if(autos3[playerid] > 0)
		{
			GetVehicleDamageStatus(autos3[playerid], PLAYER_INFO[playerid][V3E1], PLAYER_INFO[playerid][V3E2], PLAYER_INFO[playerid][V3E3], PLAYER_INFO[playerid][V3E4]);
			PLAYER_INFO[playerid][v3Gas] = VehicleFuel[autos3[playerid]];
			GetVehicleHealth(autos3[playerid], VidaV3);
			GetVehiclePos(autos3[playerid], x3,y3,z3);
			PLAYER_INFO[playerid][v3X] = x3;
			PLAYER_INFO[playerid][v3Y] = y3;
			PLAYER_INFO[playerid][v3Z] = z3;
			GetVehicleZAngle(autos3[playerid], z_a3);
			PLAYER_INFO[playerid][v3A] = z_a3;
			PLAYER_INFO[playerid][pVidaV3] = VidaV3;
			inte = GetVehicleInterior(autos3[playerid]); vw = GetVehicleVirtualWorld(autos3[playerid]);
			PLAYER_INFO[playerid][v3interior] = inte;
			PLAYER_INFO[playerid][v3vw] = vw;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='3'",PLAYER_INFO[playerid][V3E1], PLAYER_INFO[playerid][V3E2], PLAYER_INFO[playerid][V3E3], PLAYER_INFO[playerid][V3E4],PLAYER_INFO[playerid][v3Gas],PLAYER_INFO[playerid][pVidaV3],PLAYER_INFO[playerid][v3X],PLAYER_INFO[playerid][v3Y],PLAYER_INFO[playerid][v3Z],PLAYER_INFO[playerid][v3A],PLAYER_INFO[playerid][v3interior],PLAYER_INFO[playerid][v3vw],PLAYER_INFO[playerid][pID]);
            mysql_tquery(handle_db, Query);
		}
		if(autos4[playerid] > 0)
		{
			GetVehicleDamageStatus(autos3[playerid], PLAYER_INFO[playerid][V4E1], PLAYER_INFO[playerid][V4E2], PLAYER_INFO[playerid][V4E3], PLAYER_INFO[playerid][V4E4]);
			PLAYER_INFO[playerid][v4Gas] = VehicleFuel[autos4[playerid]];
			GetVehicleHealth(autos4[playerid], VidaV4);
			GetVehiclePos(autos4[playerid], x4,y4,z4);
			PLAYER_INFO[playerid][v4X] = x4;
			PLAYER_INFO[playerid][v4Y] = y4;
			PLAYER_INFO[playerid][v4Z] = z4;
			GetVehicleZAngle(autos4[playerid], z_a4);
			PLAYER_INFO[playerid][v4A] = z_a4;
			PLAYER_INFO[playerid][pVidaV4] = VidaV4;
			inte = GetVehicleInterior(autos4[playerid]); vw = GetVehicleVirtualWorld(autos4[playerid]);
			PLAYER_INFO[playerid][v4interior] = inte;
			PLAYER_INFO[playerid][v4vw] = vw;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='4'",PLAYER_INFO[playerid][V4E1], PLAYER_INFO[playerid][V4E2], PLAYER_INFO[playerid][V4E3], PLAYER_INFO[playerid][V4E4],PLAYER_INFO[playerid][v4Gas],PLAYER_INFO[playerid][pVidaV4],PLAYER_INFO[playerid][v4X],PLAYER_INFO[playerid][v4Y],PLAYER_INFO[playerid][v4Z],PLAYER_INFO[playerid][v4A],PLAYER_INFO[playerid][v4interior],PLAYER_INFO[playerid][v4vw],PLAYER_INFO[playerid][pID]);
            mysql_tquery(handle_db, Query);
		}
		GetPlayerName(playerid, PLAYER_INFO[playerid][Nickname], 24);
		if(PLAYER_INFO[playerid][pDinero] < 0) { PLAYER_INFO[playerid][pDinero] = 0; }
		if(PLAYER_INFO[playerid][pBanco] < 0) { PLAYER_INFO[playerid][pBanco] = 0; }
		PLAYER_INFO[playerid][pInterior] = GetPlayerInterior(playerid);
		PLAYER_INFO[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, PLAYER_INFO[playerid][@X], PLAYER_INFO[playerid][@Y], PLAYER_INFO[playerid][@Z]);
		GetPlayerFacingAngle(playerid,  PLAYER_INFO[playerid][@A]);
	    
		new hour,minute,second,baneo[64];
		gettime(hour, minute, second);
		format(PLAYER_INFO[playerid][jConexion], 90, "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minute,second);
		format(baneo,sizeof(baneo),"%02d/%02d/%02d",year,month,day);

  		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET`Vida`='%f', `Chaleco`='%f', `Admin`='%d', `Nivel`='%d', `Money`='%d',`GPS`='%d',`Radio`='%d',`Sexo`='%d',`Numero`='%d',`Guia`='%d',`Sonidos`='%d',`Muteos`='%d',`Barras`='%d',`Alerta`='%d',`Velocimetro`='%d',`Interior`='%d',`MundoVirtual`='%d',`NivelArmero`='%d',`ExpArmero`='%d' WHERE `Username`='%s'",PLAYER_INFO[playerid][j_HEALTH], PLAYER_INFO[playerid][j_ARMOUR],PLAYER_INFO[playerid][pAdmin],PLAYER_INFO[playerid][pNivel],PLAYER_INFO[playerid][pDinero],PLAYER_INFO[playerid][pGPS],PLAYER_INFO[playerid][pRadio],PLAYER_INFO[playerid][pSexo],PLAYER_INFO[playerid][pNumero],PLAYER_INFO[playerid][pGuia],PLAYER_INFO[playerid][pSonidos],PLAYER_INFO[playerid][pMuteos],PLAYER_INFO[playerid][pBarras],PLAYER_INFO[playerid][pAlerta],PLAYER_INFO[playerid][pVelocimetro],PLAYER_INFO[playerid][pInterior],PLAYER_INFO[playerid][pMundoVirtual],PLAYER_INFO[playerid][pNivelArmero],PLAYER_INFO[playerid][pExpArmero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `TiempoJail`='%d',Sanciones='%d',`posX`='%f', `posY`='%f', `posZ`='%f',`posA`='%f',`Agonizando`='%d',`Trabajo`='%d',`Faccion`='%d',`NivelLadron`='%d',`NivelMecanico`='%d',`ExpMecanico`='%d',`NivelTransportista`='%d',`ExpTransportista`='%d', `TipoCarcel`='%d', `SocioHP`='%d',`Hambre`='%d',`LicenciaVuelo`='%d' WHERE `Username`='%s'", PLAYER_INFO[playerid][pTiempoJail],PLAYER_INFO[playerid][sancionado],PLAYER_INFO[playerid][@X], PLAYER_INFO[playerid][@Y], PLAYER_INFO[playerid][@Z],PLAYER_INFO[playerid][@A],PLAYER_INFO[playerid][Agonizando],PLAYER_INFO[playerid][pTrabajo],PLAYER_INFO[playerid][pFaccion],PLAYER_INFO[playerid][pNivelLadron],PLAYER_INFO[playerid][pNivelMecanico],PLAYER_INFO[playerid][pExpMecanico],PLAYER_INFO[playerid][pNivelTransportista],PLAYER_INFO[playerid][pExpTransportista],PLAYER_INFO[playerid][pTipoCarcel],PLAYER_INFO[playerid][pSocioHP], PLAYER_INFO[playerid][pHambre], PLAYER_INFO[playerid][pLicenciaVuelo],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Fecha_Ban`='%e',`Banco`='%d',`CasaID1`='%d',`CasaID2`='%d',`CasaID3`='%d',`CasaID4`='%d',`EstacionamientoID`='%d',`Estacionado1`='%d',`Estacionado2`='%d',`Estacionado3`='%d',`Estacionado4`='%d',`EnEstacionamiento`='%d',`Moneda`='%d',`EnCasa`='%d',`EnRopero`='%d',`EnGarage`='%d',`TiempoPD`='%d' WHERE `Username`='%s'",baneo,PLAYER_INFO[playerid][pBanco],PLAYER_INFO[playerid][CasaID][0],PLAYER_INFO[playerid][CasaID][1],PLAYER_INFO[playerid][CasaID][2],PLAYER_INFO[playerid][CasaID][3],PLAYER_INFO[playerid][EstacionamientoID],PLAYER_INFO[playerid][vEstacionado1],PLAYER_INFO[playerid][vEstacionado2],PLAYER_INFO[playerid][vEstacionado3],PLAYER_INFO[playerid][vEstacionado4],PLAYER_INFO[playerid][pEnEstacionamiento],PLAYER_INFO[playerid][Moneda],PLAYER_INFO[playerid][EnCasa],PLAYER_INFO[playerid][EnRopero],PLAYER_INFO[playerid][EnGarage],PLAYER_INFO[playerid][TiempoPD],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Cargos`='%d',`SkinTrabajo`='%d',`Duty`='%d',`MILITAR`='%d',`WP0`='%d',`WP1`='%d',`WP2`='%d',`WP3`='%d',`WP4`='%d',`WP5`='%d',`WP6`='%d',`WP7`='%d',`WP8`='%d',`WP9`='%d',`WP10`='%d',`WP11`='%d',`WP12`='%d',`Experiencia`='%d',`TiempoCarcelS`='%d' WHERE `Username`='%s'", PLAYER_INFO[playerid][pCargos],PLAYER_INFO[playerid][pModelo],PLAYER_INFO[playerid][pDuty],PLAYER_INFO[playerid][mDuty],PLAYER_INFO[playerid][j_ARMAS][0],PLAYER_INFO[playerid][j_ARMAS][1],PLAYER_INFO[playerid][j_ARMAS][2],PLAYER_INFO[playerid][j_ARMAS][3],PLAYER_INFO[playerid][j_ARMAS][4],PLAYER_INFO[playerid][j_ARMAS][5],PLAYER_INFO[playerid][j_ARMAS][6],PLAYER_INFO[playerid][j_ARMAS][7],PLAYER_INFO[playerid][j_ARMAS][8],PLAYER_INFO[playerid][j_ARMAS][9],PLAYER_INFO[playerid][j_ARMAS][10],PLAYER_INFO[playerid][j_ARMAS][11],PLAYER_INFO[playerid][j_ARMAS][12],PLAYER_INFO[playerid][pExperiencia],PLAYER_INFO[playerid][pTiempoCarcel],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Conexion`='%e',`Sed`='%d',`RopaBasu`='%d',`RopaMedi`='%d',`RopaMeca`='%d',`Martillo`='%d',`Destornillador`='%d',`Barreta`='%d',`Balde`='%d', `Patines`='%d',`TieneEmisora`='%d',`NombreEmisora`='%s'  WHERE `Username`='%s'", PLAYER_INFO[playerid][jConexion],PLAYER_INFO[playerid][pSed], RopaBasu[playerid], RopaMedi[playerid], RopaMeca[playerid], PLAYER_INFO[playerid][pMartillo], PLAYER_INFO[playerid][pDestornillador], PLAYER_INFO[playerid][pBarreta], PLAYER_INFO[playerid][pBalde],PLAYER_INFO[playerid][pPatines],Emisoras[playerid][TieneEmisora],Emisoras[playerid][NombreEmisora],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `ExpCamionero`='%d',`Agenda`='%d',`Cocaina`='%d',`Heroina`='%d',`Preper`='%d',`Gino`='%d',`RootCoins`='%d',`Crack`='%d',`Medicamentos`='%d',`Marihuana`='%d',`Trabajo2`='%d',`VIP`='%d',`Rango`='%d',`Repuestos`='%d',`TiempoDuda`='%d',`TiempoAnuncio`='%d', `TiempoPD`='%d', `arrestado`='%d', `horasjugadas`='%d' WHERE `Username`='%s'", PLAYER_INFO[playerid][pExpCamionero],PLAYER_INFO[playerid][pAgenda],PLAYER_INFO[playerid][pCocaina],PLAYER_INFO[playerid][pPerico],PLAYER_INFO[playerid][pPreper],PLAYER_INFO[playerid][pPreper],PLAYER_INFO[playerid][pHeroina],PLAYER_INFO[playerid][pRootCoins],PLAYER_INFO[playerid][pCrack], PLAYER_INFO[playerid][pRemedios],PLAYER_INFO[playerid][pMarihuana],PLAYER_INFO[playerid][pTrabajo2],PLAYER_INFO[playerid][pVIP],PLAYER_INFO[playerid][pRango],PLAYER_INFO[playerid][Repuestos],PLAYER_TIMES[playerid][TiempoDuda],PLAYER_TIMES[playerid][TiempoAnuncio] - gettime(),PLAYER_INFO[playerid][TiempoPD], PLAYER_INFO[playerid][arrestado], PLAYER_INFO[playerid][horasjugadas],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Afinidad1`='%d',`Afinidad2`='%d',`Afinidad3`='%d',`Afinidad4`='%d',`Afinidad5`='%d',`Afinidad6`='%d',`Materiales`='%d',`NivelCamionero`='%d',`NivelBasurero`='%d',`ExpBasurero`='%d' WHERE `Username`='%s'", PLAYER_INFO[playerid][pAfinidad1],PLAYER_INFO[playerid][pAfinidad2],PLAYER_INFO[playerid][pAfinidad3],PLAYER_INFO[playerid][pAfinidad4],PLAYER_INFO[playerid][pAfinidad5],PLAYER_INFO[playerid][pAfinidad6],PLAYER_INFO[playerid][pMateriales],PLAYER_INFO[playerid][pNivelCamionero],PLAYER_INFO[playerid][pNivelBasurero],PLAYER_INFO[playerid][pExpBasurero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `TiempoOffline`='%d',`BaneosHechos`='%d', `BaneosDia`='%d', `XE`='%f',`YE`='%f',`ZE`='%f',`NivelMedico`='%d',`ExpMedico`='%d' WHERE `Username`='%s'",gettime(), PLAYER_INFO[playerid][BaneosD],PLAYER_INFO[playerid][BaneosD2],PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z],PLAYER_INFO[playerid][pNivelMedico],PLAYER_INFO[playerid][pExpMedico],PLAYER_INFO[playerid][Nickname]);
        mysql_query(handle_db, Query, true);
		mysql_format(handle_db,Query,sizeof(Query),"UPDATE `usuarios` SET `Skin`='%d',`Estacionado1`='%d',`Estacionado2`='%d',`Estacionado3`='%d',`Estacionado4`='%d',`ExpLadron`='%d',`EntradaX`='%f',`EntradaY`='%f',`EntradaZ`='%f', `BackPack`='%d', `NivelTrailero`='%d',`ExpTrailero`='%d' WHERE `Username`='%s'",PLAYER_INFO[playerid][pRopa], PLAYER_INFO[playerid][vEstacionado1],PLAYER_INFO[playerid][vEstacionado2],PLAYER_INFO[playerid][vEstacionado3],PLAYER_INFO[playerid][vEstacionado4],PLAYER_INFO[playerid][pExpLadron],PLAYER_INFO[playerid][jPosE_x],PLAYER_INFO[playerid][jPosE_y],PLAYER_INFO[playerid][jPosE_z], BackPack[playerid][bDBID], PLAYER_INFO[playerid][pNivelTrailero],PLAYER_INFO[playerid][pExpTrailero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
	}
	return 1;
}


SacarObjeto(playerid,objeto)
{
	switch(objeto)
	{
	    case 1000..10004:
	    {
	        Objeto[playerid] = 0;
            RemovePlayerAttachedObject(playerid,7);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	    }
	}
}

DarVino(playerid, cantidad = 5)
{
	TieneVino[playerid] = cantidad;
    SetPlayerAttachedObject(playerid,7,1509,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
}

DarCerveza(playerid, cantidad = 5)
{
    TieneCerveza[playerid] = cantidad;
    SetPlayerAttachedObject(playerid,7,1486,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
}

DarCajaPizza(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, 7, 19571, 6, 0.263000,0.039999,-0.141999,116.299987,-76.799858,136.799835,0.800998,1.016000,0.866998);
	Objeto[playerid] = 10004;
}

DarSprunk(playerid, cantidad = 5)
{
    TieneSprunk[playerid] = cantidad;
	SetPlayerAttachedObject(playerid, 7, 1546, 6, 0.034999, 0.022999, -0.003000, 0.000000, -8.099999, 0.000000, 0.879999, 0.880999, 0.736999);
}

DarAquarius(playerid, cantidad = 5)
{
    TieneAquariu[playerid] = cantidad;
    SetPlayerAttachedObject(playerid, 7, 19570, 6, 0.069999, 0.027000, -0.156000, 0.000000, 0.000000, 0.000000, 0.436999, 0.570999, 0.883999);
}

DarPizza(playerid)
{
    TienePizza[playerid] = 5;
    SetPlayerAttachedObject(playerid, 7, 2702, 6, 0.107999, 0.034000, 0.000000, -14.500009, -7.500002, -80.099967, 0.957000, 0.880999, 0.856000);
}

GetWeaponSlot(weaponid)
{
	new slot;
	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

SiTieneArma(playerid, weaponid)
{
    if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(weaponid)] == weaponid) return 1;
	return 0;
}

ObtenerVehiculo(playerid, const placa[])
{
	new count;
    foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(!IsPlayerNPC(i))
			{
				if(strcmp(placa, PLAYER_INFO[i][vpatente], true) == 0 || strcmp(placa, PLAYER_INFO[i][v2patente], true) == 0 || strcmp(placa, PLAYER_INFO[i][v3patente], true) == 0 || strcmp(placa, PLAYER_INFO[i][v4patente], true) == 0)
				{
				    new autoids;
			    	if(strcmp(placa, PLAYER_INFO[i][vpatente],  true) == 0) { autoids = autos[i];  }
					else if(strcmp(placa, PLAYER_INFO[i][v2patente], true) == 0) { autoids = autos2[i]; }
					else if(strcmp(placa, PLAYER_INFO[i][v3patente], true) == 0) { autoids = autos3[i]; }
					else if(strcmp(placa, PLAYER_INFO[i][v4patente], true) == 0) { autoids = autos4[i]; }
    	       		AutoBuscado[playerid] = autoids;
					format(PatenteBuscada[playerid], 10, placa);
					JugadorBuscado[playerid] = i;
					count = 1;
				}
			}
  		}
	}
	if(count == 0) SendClientMessage(playerid, -1, "La patente solicitada no se encuentra en la base de datos de la policía de San Andreas.");
	return 1;
}
randomString(strDest[], strLen = 15)
{
	while(strLen--)
	strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}
IsVehicleOccupied(carid)
{
    foreach(new i : Player)
    {
        if(IsPlayerInVehicle(i,carid))
        {
            return 1;
        }
    }
	return 0;
}
Numeros(number, const separator[] = ".")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);
	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}
	return output;
}
GetVehicleTopSpeed(vehicleid)
{
    new model = GetVehicleModel(vehicleid);
    if (model)
    {
        return s_TopSpeed[(model - 400)];
    }
    return 0;
}
IsVehicleInRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    return range >= GetVehicleDistanceFromPoint(vehicleid, x,y,z);
}
CombustibleCoche(modelo)
{
    new Gaso;
    switch(modelo)
    {
        case 571:     Gaso = 50;
        case 441:     Gaso = 50;
        case 521:     Gaso = 60;
        case 522:     Gaso = 60;
        case 581:     Gaso = 60;
        case 468:     Gaso = 60;
        case 462:     Gaso = 60;
        case 471:     Gaso = 60;
        case 461:     Gaso = 60;
        case 586:     Gaso = 60;
        case 457:     Gaso = 60;
        case 523:     Gaso = 60;
        case 568:     Gaso = 70;
        case 463:     Gaso = 70;
        case 424:     Gaso = 70;
        case 439:     Gaso = 80;
        case 411:     Gaso = 100;
        case 442:     Gaso = 80;
        case 434:     Gaso = 80;
        case 539:     Gaso = 80;
        case 492:     Gaso = 85;
        case 477:     Gaso = 85;
        case 529:     Gaso = 85;
        case 415:     Gaso = 85;
        case 545:     Gaso = 85;
        case 436:     Gaso = 85;
        case 516:     Gaso = 90;
        case 480:     Gaso = 90;
        case 420:     Gaso = 90;
        case 603:     Gaso = 90;
        case 451:     Gaso = 90;
        case 506:     Gaso = 90;
        case 496:     Gaso = 90;
        case 500:     Gaso = 90;
        case 565:     Gaso = 90;
        case 589:     Gaso = 90;
        case 602:     Gaso = 90;
        case 491:     Gaso = 90;
        case 566:     Gaso = 90;
        case 445:     Gaso = 90;
        case 533:     Gaso = 90;
        case 517:     Gaso = 90;
        case 542:     Gaso = 90;
        case 526:     Gaso = 90;
        case 527:     Gaso = 90;
        case 494:     Gaso = 90;
        case 502:     Gaso = 90;
        case 503:     Gaso = 90;
        case 504:     Gaso = 90;
        case 507:     Gaso = 90;
        case 585:     Gaso = 90;
        case 600:     Gaso = 90;
        case 562:     Gaso = 90;
        case 559:     Gaso = 90;
        case 541:     Gaso = 90;
        case 405:     Gaso = 90;
        case 546:     Gaso = 90;
        case 547:     Gaso = 90;
        case 550:     Gaso = 90;
        case 558:     Gaso = 90;
        case 401:     Gaso = 90;
        case 421:     Gaso = 90;
        case 402:     Gaso = 90;
        case 555:     Gaso = 90;
        case 410:     Gaso = 90;
        case 419:     Gaso = 90;
        case 429:     Gaso = 90;
        case 540:     Gaso = 90;
        case 518:     Gaso = 95;
        case 580:     Gaso = 95;
        case 587:     Gaso = 95;
        case 549:     Gaso = 95;
        case 426:     Gaso = 95;
        case 438:     Gaso = 100;
        case 553:     Gaso = 100;
        case 575:     Gaso = 100;
        case 416:     Gaso = 100;
        case 596:     Gaso = 100;
        case 597:     Gaso = 100;
        case 598:     Gaso = 100;
        case 561:     Gaso = 100;
        case 567:     Gaso = 100;
        case 534:     Gaso = 100;
        case 536:     Gaso = 100;
        case 560:     Gaso = 100;
        case 551:     Gaso = 100;
        case 412:     Gaso = 100;
        case 479:     Gaso = 100;
        case 466:     Gaso = 100;
        case 467:     Gaso = 100;
        case 404:     Gaso = 100;
        case 604:     Gaso = 100;
        case 474:     Gaso = 100;
        case 475:	  Gaso = 100;
        case 458:     Gaso = 100;
        case 453:     Gaso = 100;
        case 595:     Gaso = 100;
        case 446:     Gaso = 100;
        case 493:     Gaso = 100;
        case 452:     Gaso = 100;
        case 473:     Gaso = 100;
        case 576:     Gaso = 100;
        case 454:     Gaso = 100;
        case 484:     Gaso = 100;
        case 543:     Gaso = 110;
        case 556:     Gaso = 110;
        case 557:     Gaso = 110;
        case 444:     Gaso = 110;
        case 535:     Gaso = 110;
        case 605:     Gaso = 110;
        case 418:     Gaso = 110;
        case 409:     Gaso = 110;
        case 495:     Gaso = 120;
        case 525:     Gaso = 120;
        case 588:     Gaso = 120;
        case 552:     Gaso = 120;
        case 582:     Gaso = 120;
        case 489:     Gaso = 120;
        case 478:     Gaso = 120;
        case 579:     Gaso = 120;
        case 554:     Gaso = 120;
        case 423:     Gaso = 120;
        case 422:     Gaso = 120;
        case 483:     Gaso = 120;
        case 593:     Gaso = 120;
        case 440:     Gaso = 130;
        case 400:     Gaso = 130;
        case 499:     Gaso = 140;
        case 413:     Gaso = 140;
        case 609:     Gaso = 140;
        case 482:     Gaso = 140;
        case 459:     Gaso = 140;
        case 601:     Gaso = 140;
        case 414:     Gaso = 150;
        case 563:     Gaso = 150;
        case 486:     Gaso = 160;
        case 470:     Gaso = 170;
        case 578:     Gaso = 180;
        case 524:     Gaso = 200;
        case 456:     Gaso = 200;
        case 487:     Gaso = 200;
        case 497:     Gaso = 200;
        case 408:     Gaso = 210;
        case 443:     Gaso = 210;
        case 403:     Gaso = 210;
        case 515:     Gaso = 220;
        case 514:     Gaso = 220;
        case 431:     Gaso = 220;
        case 437:     Gaso = 220;
        case 532:     Gaso = 220;
        case 455:     Gaso = 230;
        case 508:     Gaso = 160;
        default:      Gaso = 120;
    }
    return Gaso;
}
VelocidadMaxAuto(modelo)
{
	new Gaso;
	switch(modelo)
	{
	    case 476:     Gaso = 170; // Yankee
		case 571:     Gaso = 143; // Kart
		case 521:     Gaso = 175; // FCR-900
		case 522:     Gaso = 180; // NRG-500
		case 581:     Gaso = 146; // BF-400
		case 468:     Gaso = 138; // Sanchez
		case 462:     Gaso = 108; // Faggio
		case 471:     Gaso = 106; // Quad
		case 461:     Gaso = 153; // PCJ-600
		case 586:     Gaso = 138; // Wayfarer
		case 457:     Gaso = 91;  // Cabbie
		case 523:	  Gaso = 120; // HPV-1000
		case 568:     Gaso = 141; // Bandito
		case 424:     Gaso = 130; // BF. Injection
		case 439:     Gaso = 162; // Stallion
		case 442:     Gaso = 134; // Romero
		case 434:     Gaso = 160; // Hotknife
		case 492:     Gaso = 135; // GreenWood
		case 529:     Gaso = 143; // Willard
		case 436:     Gaso = 143; // Previon
		case 516:     Gaso = 151; // Nebula
		case 420:     Gaso = 139; // Taxi
		case 451: 	  Gaso = 200; // Turismo
		case 496:  	  Gaso = 156; // Blista Compact
		case 500:     Gaso = 135; // Mesa
		case 560:     Gaso = 162; // Sultan
		case 551:     Gaso = 151; // Merit
		case 412:     Gaso = 162; // Voodo
		case 479:     Gaso = 134; // Regina
		case 466:     Gaso = 141; // Glendale
		case 467:     Gaso = 135; // Oceanic
		case 604:     Gaso = 141; // Glendale Chocado
		case 474:     Gaso = 143; // Hermes
		case 458:     Gaso = 151; // Solair
		case 453:     Gaso = 54;  // Reefer
		case 595:     Gaso = 95;  // Launch
		case 446:     Gaso = 225; // Squalo
		case 493:     Gaso = 150; // Jetmax
		case 452:     Gaso = 141; // Speeder
		case 473:     Gaso = 102; // Dinghy
		case 576:     Gaso = 151; // Tornado
		case 454:     Gaso = 125; // Tropic
		case 484:     Gaso = 57;  // Marquis
		case 543:     Gaso = 145; // Sadler
		case 605:     Gaso = 145; // SadlerShit
		case 418:     Gaso = 111; // Moonbeam
		case 495:     Gaso = 169; // Sandking
		case 588:     Gaso = 103; // Mobile HotDog
		case 579:     Gaso = 151; // Huntley
		case 423:     Gaso = 95;  // Mr. Whoopee
		case 422:     Gaso = 134; // BobCat
		case 483:     Gaso = 118; // Camper
		case 593:     Gaso = 220; // Dodo
		case 440:     Gaso = 131; // Rumpo
		case 408:     Gaso = 170; // Trashmasher
		case 443:     Gaso = 121; // Packer
		case 403:     Gaso = 106; // Linerunner
		case 515:     Gaso = 137; // RoadTrain
		case 514:     Gaso = 116; // Tanker
		case 532:     Gaso = 110; // Combine Harvest
		case 431:     Gaso = 125; // Bus
		case 437:     Gaso = 151; // Coach
		case 455:     Gaso = 151; // Flatbed
		case 524:     Gaso = 125; // Cement Truck
		case 487:     Gaso = 181; // Maverick
		case 470:     Gaso = 151; // Patriot
		case 459:     Gaso = 131; // Rc Van
		case 499:     Gaso = 118; // Benson
		case 413:     Gaso = 106; // Pony
		case 566:     Gaso = 154; // Tahoma
		case 445:     Gaso = 157; // Admiral
		case 533:     Gaso = 160; // Feltzer
		case 517:     Gaso = 151; // Majestic
		case 542:     Gaso = 158; // Clover
		case 526:     Gaso = 151; // Fortune
		case 527:     Gaso = 143; // Cadrona
		case 494:     Gaso = 206; // Hotring
		case 502:     Gaso = 206; // Hotring Racer A
		case 503:     Gaso = 206; // Hotring Racer B
		case 504:     Gaso = 166; // Bloodring Banger
		case 507:     Gaso = 159; // Elegant
		case 585:     Gaso = 147; // Emperor
		case 600:     Gaso = 145; // Picador
		case 562:     Gaso = 171; // Elegy
		case 559:     Gaso = 171; // Jester
		case 541:     Gaso = 195; // Bullet
		case 405:     Gaso = 157; // Sentinel
		case 546:     Gaso = 143; // Intruder
		case 547:     Gaso = 137; // Primo
		case 550:     Gaso = 139; // Sunrise
		case 558:     Gaso = 150; // Uranus
		case 401:     Gaso = 141; // Bravura
		case 421:     Gaso = 147; // Washington
		case 402:     Gaso = 179; // Buffalo
		case 555:     Gaso = 152; // Windsor
		case 410:     Gaso = 124; // Manana
		case 419:     Gaso = 143; // Esperanto
		case 540:     Gaso = 143; // Vicent
		case 518:     Gaso = 158; // Buccaneer
		case 587:     Gaso = 158; // Euros
		case 549:     Gaso = 147; // Tampa
		case 426:     Gaso = 166; // Premier
		case 438:     Gaso = 137; // Cabbie
		case 575:     Gaso = 151; // BroadWay
		case 596:     Gaso = 180; // PATRULLA LSPD
		case 580:     Gaso = 147; // Stafford
		case 416:     Gaso = 147; // Ambulancia
		case 429:	  Gaso = 193; // Banshee
		case 561:     Gaso = 148; // Stratum
		case 567:     Gaso = 166; // Savanna
		case 534:     Gaso = 162; // Remington
		case 480: 	  Gaso = 177; // Comet
		case 415:	  Gaso = 184; // Cheetah
		case 463: 	  Gaso = 178; // Freeway
		case 506:     Gaso = 172; // SuperGT
		case 411:     Gaso = 221; // Infernus
		case 475:	  Gaso = 166; // Sabre
		case 545:	  Gaso = 141; // Hustler
		case 477:	  Gaso = 179; // ZR-350
		case 603: 	  Gaso = 164; // Phoenix
		case 536:     Gaso = 166; // Blade
		case 404:     Gaso = 127; // Perenniel
		case 535:     Gaso = 152; // Slamvan
		case 409:     Gaso = 151; // Stretch
		case 565:     Gaso = 158; // Flash
		case 489:     Gaso = 134; // Rancher
		case 478:     Gaso = 113; // Walton
		case 554:     Gaso = 138; // Yosemite
		case 491:     Gaso = 143; // Virgo
		case 400:     Gaso = 151; // Landstalker
		case 589: 	  Gaso = 156; // Club
		case 578:     Gaso = 125; // DFT-30
		case 414:     Gaso = 101; // Mule
		case 482:     Gaso = 150; // Burrito
		case 602:     Gaso = 180; // Alpha
		case 556:     Gaso = 110; // Monster A
		case 597:     Gaso = 180; // SFPD
		case 598:     Gaso = 180; // LVPD
		case 557:     Gaso = 110; // Monster B
		case 525:     Gaso = 150; // Towtruck
		case 553:     Gaso = 180; // Nevada
		case 444:     Gaso = 110; // Monster (a secas)
		case 552:     Gaso = 150; // Utility Van
		case 441:	  Gaso = 75;  // RC Bandit
		case 539:	  Gaso = 140; // Vortex
		case 582:     Gaso = 140; // Newsvan
		case 609:     Gaso = 140; // Boxville
		case 601:     Gaso = 110; // S.W.A.T Van
		case 563:     Gaso = 160; // Raindance
		case 486:     Gaso = 90;  // Dozer
		case 456:     Gaso = 105; // Yankee
		case 497:     Gaso = 181; // PolMav
		case 508:     Gaso = 140; // Journey
		default:      Gaso = 180; // Resto de vehículos no listados.
    }
	return Gaso;
}
GetWeaponNameEx(weaponid)
{
	new wname[35];
	switch (weaponid)
	{
		case 0: wname = "Vacío";
		case 1: wname = "Manopla";
		case 2: wname = "Palo de golf";
		case 3: wname = "Palo de policia";
		case 4: wname = "Cuchillo";
		case 5: wname = "Bate de beisbol";
		case 6: wname = "Pala";
		case 7: wname = "Palo de billar";
		case 8: wname = "Katana";
		case 9: wname = "Motosierra";
		case 10: wname = "Consolador rosa";
		case 11: wname = "Vibrador blanco";
		case 12: wname = "Gran vibrador blanco";
		case 13: wname = "Vibrador plateado";
		case 14: wname = "Ramo de flores";
		case 15: wname = "Baston";
		case 16: wname = "Granada";
		case 17: wname = "Gas Lacrimógeno";
		case 18: wname = "Molotov";
		case 22: wname = "9mm";
		case 23: wname = "9mm con silenciador";
		case 24: wname = "Desert Eagle";
		case 25: wname = "Escopeta";
		case 26: wname = "Sawn Off";
		case 27: wname = "Escopeta de combate";
		case 28: wname = "UZI";
		case 29: wname = "MP5";
		case 30: wname = "AK-47";
		case 31: wname = "M4";
		case 32: wname = "TEC-9";
		case 33: wname = "Rifle";
		case 34: wname = "Sniper";
		case 35: wname = "Lanzacohetes";
		case 36: wname = "Bazooka";
		case 37: wname = "Lanzallamas";
		case 38: wname = "Minigun";
		case 39: wname = "Bomba";
		case 40: wname = "Detonador";
		case 41: wname = "Spray";
		case 42: wname = "Extintor De Incendios";
		case 43: wname = "Camara";
		case 44: wname = "Lentes de visión nocturna";
		case 45: wname = "Gafas termicas";
		case 46: wname = "Paracaídas";
		case 1000: wname="Cerveza x6 unidades";
		case 1001: wname="Vino x6 unidades";
		case 1002: wname="Sprunk x4 unidades";
		case 1429: wname="Tv Antigua";
		case 1518: wname="Tv Moderna";
		case 2912: wname="Caja de Madera";
		case 2190: wname="Computadora";
		case 1788: wname="Videocasetera";
		case 1790: wname="Bluray";
		case 2028: wname="Consola de juegos";
		case 2226: wname="Radio";
		case 1650: wname="Bidón de gasolina";
		case 9003: wname="Balde con agua";
		case 10000: wname="Caja de aquarius de 12 unidades";
        case 10001: wname="Caja de vino de 12 unidades";
        case 10002: wname="Caja de cerveza de 12 unidades";
        case 10003: wname="Caja de sprunk de 12 unidades";
		case 10004: wname="Pizza completa";
		case 2702: wname="Pizza";
	}
	return wname;
}
ObjetosMaletero(id)
{
    new wname[35];
	switch (id)
	{
	    case 1: wname= "Manopla";
	    case 2: wname= "Palo de golf";
	    case 4: wname= "Cuchillo";
	    case 5: wname= "Bate de beisbol";
	    case 6: wname= "Pala";
	    case 7: wname= "Palo de Billar";
	    case 8: wname= "Katana";
	    case 10: wname= "Consolador rosa";
	    case 11: wname= "Vibrador blanco";
	    case 12: wname= "Gran vibrador blanco";
	    case 13: wname= "Vibrador plateado";
	    case 14: wname= "Ramo de flores";
	    case 15: wname= "Baston";
	    case 16: wname= "Granada";
	    case 22: wname= "9mm";
	    case 23: wname= "9mm silenciada";
	    case 24: wname= "Desert Eagle";
	    case 25: wname= "Escopeta";
	    case 27: wname= "Escopeta de combate";
	    case 29: wname= "Mp5";
	    case 30: wname= "Ak-47";
	    case 31: wname= "M4";
	    case 33: wname= "Rifle";
	    case 43: wname= "Cámara";
    	case 1650: wname="Bidon de combustible";
    }
	return wname;
}
DarRopa(playerid)
{
	if(PLAYER_INFO[playerid][pRopa] == 0)
	{
	    switch(PLAYER_INFO[playerid][pSexo])
		{
		    case 0: PLAYER_INFO[playerid][pRopa] = 26, PLAYER_INFO[playerid][pSexo] = 1;
			case 1: PLAYER_INFO[playerid][pRopa] = 26;
			case 2: PLAYER_INFO[playerid][pRopa] = 11;
		}
		SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
	}
	///Verificación de estado duty

	if(PLAYER_INFO[playerid][mDuty] == 1)
	{
	    if(PLAYER_INFO[playerid][suspendido] == 0)
		{
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pModelo]);
			SetPlayerColor(playerid,COLOR_GREEN3);
		}
		else
		{
			SetPlayerColor(playerid,COLORCARGO0);
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			PLAYER_INFO[playerid][mDuty] = 0;
			if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(3)] == 3) QuitarArma(playerid, 3);
			DarArmas(playerid);
		}
		if(GetPlayerSkin(playerid) == 0)
		{
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pModelo]);
			SetPlayerColor(playerid,COLOR_GREEN3);
		}
		return 1;
	}
   	//Identificar si es duty de pd
	if(PLAYER_INFO[playerid][pDuty] == 1)
	{
	    if(PLAYER_INFO[playerid][suspendido] == 0)
		{
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pModelo]);
			SetPlayerColor(playerid,TEAM_BLUE_COLOR);
		}
		else
		{
			SetPlayerColor(playerid,COLORCARGO0);
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			PLAYER_INFO[playerid][pDuty] = 0;
			if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(3)] == 3) QuitarArma(playerid, 3);
			DarArmas(playerid);
		}
		if(GetPlayerSkin(playerid) == 0)
		{
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pModelo]);
			SetPlayerColor(playerid,TEAM_BLUE_COLOR);
		}
		return 1;
	}
 	else if(RopaMeca[playerid] == 1)
	{
	    switch(PLAYER_INFO[playerid][pSexo])
		{
			case 1: SetPlayerSkin(playerid, 50);
			default:
			{
			    RemovePlayerAttachedObject(playerid, 8);
			    RemovePlayerAttachedObject(playerid, 9);
				SetPlayerSkin(playerid, 309);
				SetPlayerAttachedObject(playerid,8,19773,1,0.227999,0.077000,0.090000,87.700004,57.700054,109.999763,1.165000,0.429000,0.433999);
				SetPlayerAttachedObject(playerid,9,19627,1,0.243999,0.108997,0.082998,108.500007,147.200057,149.900009,0.595997,0.907997,1.306998);
			}
		}
		if(GetPlayerSkin(playerid) == 0)
		{
		    switch(PLAYER_INFO[playerid][pSexo])
			{
				case 1: SetPlayerSkin(playerid, 50);
				default:
				{
				    RemovePlayerAttachedObject(playerid, 8);
				    RemovePlayerAttachedObject(playerid, 9);
					SetPlayerSkin(playerid, 309);
					SetPlayerAttachedObject(playerid,8,19773,1,0.227999,0.077000,0.090000,87.700004,57.700054,109.999763,1.165000,0.429000,0.433999);
					SetPlayerAttachedObject(playerid,9,19627,1,0.243999,0.108997,0.082998,108.500007,147.200057,149.900009,0.595997,0.907997,1.306998);
				}
			}
		}
	}
	else if(RopaMedi[playerid] > 0)
	{
		SetPlayerSkin(playerid, PLAYER_INFO[playerid][pModelo]);
		if(GetPlayerSkin(playerid) == 0)
		{
		    RopaMedi[playerid] = 1;
			switch(PLAYER_INFO[playerid][pSexo])
			{
				case 2: PLAYER_INFO[playerid][pModelo] =  308, SetPlayerSkin(playerid,308);
				default: PLAYER_INFO[playerid][pModelo] =  276, SetPlayerSkin(playerid,276);
			}
		}
	}
	else if(RopaBasu[playerid] == 1)
	{
	    RopaBasu[playerid] = 0;
	    RopaMedi[playerid] = 0;
	    SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
	}
	else SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
	DarPrendas(playerid);
	return 1;
}

ExpTrans(playerid)
{
    PLAYER_TEMP[playerid][pt_Transportista] = false;
    if(RoboTienda[playerid] == 1)
	{
	    SendClientMessage(playerid,-1,"Nos llegó un informe de que {FF0000}asaltaste una tienda{FFFFFF} durante tu trabajo, ahora {FF0000}no se te pagará.");
	    return 1;
	}
	if(PLAYER_INFO[playerid][pExpTransportista] < 49)
	{
		if(PLAYER_INFO[playerid][pVIP] > 0)
		{
            new pago = random(3);
            switch(pago)
            {
                case 0: { PLAYER_INFO[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
                case 1: { PLAYER_INFO[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
                case 2: { PLAYER_INFO[playerid][pExpTransportista]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +2 puntos."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpTransportista]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de transportista aumentada +1 punto."); }
	}
	else if(PLAYER_INFO[playerid][pExpTransportista] >= 49) {
		if(PLAYER_INFO[playerid][pNivelTransportista] == 6) return SendClientMessage(playerid,-1,"{f21111}Llegaste al nivel máximo actual de transportista.");
		PLAYER_INFO[playerid][pNivelTransportista]++;
		PLAYER_INFO[playerid][pExpTransportista] = 0;
		SendClientMessage(playerid,-1,"{f21111}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de transportista.");
	}
	return true;
}

ExpTrailero(playerid)
{
    PLAYER_TEMP[playerid][pt_Trailero] = false;
    if(RoboTienda[playerid] == 1)
	{
	    SendClientMessage(playerid,-1,"Nos llegó un informe de que {FF0000}asaltaste una tienda{FFFFFF} durante tu trabajo, ahora {FF0000}no se te pagará.");
	    return 1;
	}
	if(PLAYER_INFO[playerid][pExpTrailero] < 49)
	{
	    if(PLAYER_INFO[playerid][pVIP] > 0)
		{
            new pago = random(3);
            switch(pago)
            {
                case 0: { PLAYER_INFO[playerid][pExpTrailero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de trailero aumentada +1 punto."); }
                case 1: { PLAYER_INFO[playerid][pExpTrailero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de trailero aumentada +1 punto."); }
                case 2: { PLAYER_INFO[playerid][pExpTrailero]+= 2; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de trailero aumentada +2 puntos."); }
            }
        }
        else { PLAYER_INFO[playerid][pExpTrailero]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de trailero aumentada +1 punto."); }
	}
	else if(PLAYER_INFO[playerid][pExpTrailero] >= 49) {
		if(PLAYER_INFO[playerid][pNivelTrailero] == 6) return SendClientMessage(playerid,-1,"{f21111}Llegaste al nivel máximo actual de trailero.");
		PLAYER_INFO[playerid][pNivelTrailero]++;
		PLAYER_INFO[playerid][pExpTrailero] = 0;
		SendClientMessage(playerid,-1,"{f21111}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de trailero.");
	}
	return true;
}

GetPolicesOn()
{
	new count;
	foreach(new i : Player)
	{
	    if(!IsPlayerNPC(i))
		{
			if(PLAYER_INFO[i][pDuty] > 0) count ++;
		}
	}
	return count;
}
NoTeleportHack(playerid)
{
	PLAYER_TIMES[playerid][Entrando] = gettime() + 3;
	return 1;
}
QuitarConsumibles(playerid)
{
    TieneSprunk[playerid] = 0;
    TieneVino[playerid] = 0;
    TieneCerveza[playerid] = 0;
    TienePizza[playerid] = 0;
    TieneAquariu[playerid] = 0;
    TienePorro[playerid] = 0;
    return 1;
}
CancelarRobo(playerid,actor)
{
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		if(RoboTiendas[i][Actor] == actor)
		{
		    KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
			new id = RoboTiendas[i][rID];
			ApplyDynamicActorAnimation(actor,"RIOT","RIOT_FUKU", 4.000000, 0, 0, 0, 1, 0);
			RoboTiendas[id][RoboProceso] = 0;
		}
	}
	return 1;
}
GetPlayerArrestedPositions(playerid, &Float:x, &Float:y, &Float:z, &Float:a)
{
	if(IsPlayerInRangeOfPoint(playerid,10,-28.3834,-89.9474,1003.5469))
	{
		x = -28.5330;
		y = -88.5960;
		z = 1003.5469;
		a = 145.1751;
	}
	if(IsPlayerInRangeOfPoint(playerid,10,-28.6914,-185.8927,1007.7300))
	{
	    x = -28.6914;
	    y = -185.8927;
	    z = 1007.7300;
	    a = 229.6577;
	}
	if(IsPlayerInRangeOfPoint(playerid,20,370.4197,-123.0341,1001.4995))
	{
	    x = 370.4197;
	    y = -123.0341;
	    z = 1001.4995;
	    a = 188.7337;
	}
	return 1;
}
Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By milous22 (https://github.com/milous22)
{
	return floatsqroot(floatadd(floatadd(floatpower(floatsub(x1,x2),2),floatpower(floatsub(y1,y2),2)),floatpower(floatsub(z1,z2),2)));
}
PermiteRobar(playerid,id)
{
    if(PLAYER_INFO[playerid][pFaccion] == 1) return PLAYER_TEMP[playerid][PuedeRobar] = 0;
	if(GetPlayerInterior(playerid) == 0) return PLAYER_TEMP[playerid][PuedeRobar] = 0;
	if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico || PLAYER_INFO[playerid][pTrabajo] == T_Basurero || PLAYER_INFO[playerid][pTrabajo2] == T_Basurero)
	{
	    if(PLAYER_TIMES[playerid][TiempoMensajeRobar] - gettime() <= 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico) SendClientMessage(playerid,-1,"No puedes asaltar negocios siendo médico.");
			else if(PLAYER_INFO[playerid][pTrabajo] == T_Basurero || PLAYER_INFO[playerid][pTrabajo2] == T_Basurero) SendClientMessage(playerid,-1,"No puedes asaltar negocios siendo basurero.");
			PLAYER_TIMES[playerid][TiempoMensajeRobar] = gettime() + 2;
		}
		PLAYER_TEMP[playerid][PuedeRobar] = 0;
		KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
		return 0;
	}
	if(GetPlayerWantedLevel(playerid) > 0)
	{
	    if(PLAYER_TIMES[playerid][TiempoMensajeRobar] - gettime() <= 0)
		{
			SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} te está buscando, {FF0000}no puedes robar{FFFFFF} un negocio en este momento.");
            PLAYER_TIMES[playerid][TiempoMensajeRobar] = gettime() + 2;
		}
		PLAYER_TEMP[playerid][PuedeRobar] = 0;
		KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
		return 0;
	}
	if(UltimoRobado[playerid] == id)
	{
	    if(PLAYER_TIMES[playerid][TiempoMensajeRobar] - gettime() <= 0)
		{
			SendClientMessage(playerid,-1,"No puedes robar el {FF0000}mismo negocio{FFFFFF} seguidamente.");
            PLAYER_TIMES[playerid][TiempoMensajeRobar] = gettime() + 2;
		}
		PLAYER_TEMP[playerid][PuedeRobar] = 0;
		KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
		return 0;
	}
    new last = UltimoRobado[playerid];
    new Float:CordX = RoboTiendas[id][EntradaX];
	new Float:CordY = RoboTiendas[id][EntradaY];
	new Float:CordZ = RoboTiendas[id][EntradaZ];
	new Float:CordAX = RoboTiendas[last][EntradaX];
	new Float:CordAY = RoboTiendas[last][EntradaY];
	new Float:CordAZ = RoboTiendas[last][EntradaZ];
	new Float:dis = GetDistanceBetweenPoints(CordX,CordY,CordZ,CordAX,CordAY,CordAZ);
	if(dis < 250)
	{
	    if(UltimoRobado[playerid] != 0)
	    {
	    	if(PLAYER_TIMES[playerid][TiempoMensajeRobar] - gettime() <= 0)
			{
				SendClientMessage(playerid,-1,"No puedes robar un negocio {FF0000}tan cercano{FFFFFF} al de tu último robo.");
            	PLAYER_TIMES[playerid][TiempoMensajeRobar] = gettime() + 2;
			}
			PLAYER_TEMP[playerid][PuedeRobar] = 0;
			KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
			return 0;
		}
	}
 	return 1;
}

KickAntiCheat(playerid, type, arma, const razon[] = "Anti-Cheat")
{
    switch(type)
    {
        case 0:
        {
            foreach(new i : Player)
			{
				if(PlayerConectado(i) && PLAYER_INFO[i][pMuteos] == 1) SendClientMessageEx(i,-1, "El jugador {FFB000}%s(ID: %d){FFFFFF} fue expulsado por el anticheat razón: {FFB000}%s.", PLAYER_INFO[playerid][Nickname], playerid, razon);
        	}
        }
        case 1:
        {
			if(PLAYER_TIMES[playerid][TIMER_WEAPONS] > gettime()) return 1;

		    SetPlayerArmedWeapon(playerid, 0);
		    ResetPlayerWeapons(playerid);

			foreach(new i : Player)
			{
				if(PlayerConectado(i) && PLAYER_INFO[i][pMuteos] == 1) SendClientMessageEx(i,-1, "El jugador {FF3300}%s(ID: %d){FFFFFF} fue baneado por el anticheat. Razón: {FF3300}Cheat de armas{FFFFFF} (%d).", PLAYER_INFO[playerid][Nickname], playerid, arma);
			}
		}
	}
	ExpulsarJugador(playerid, razon);
	return 1;
}

CalcularCargos(playerid)
{
    new time;

    switch(PLAYER_INFO[playerid][pVIP])
	{
		case 3:
		{
			switch(PLAYER_INFO[playerid][pCargos])
			{
			    case 1: time = 2;
				case 2: time = 3;
				case 3: time = 5;
			    case 4: time = 6;
				case 5: time = 8;
				default: time = 10;
			}
		}
		default:
		{
		    switch(PLAYER_INFO[playerid][pCargos])
			{
			     	case 1: time = 3;
					case 2: time = 6;
					case 3: time = 9;
				    case 4: time = 12;
					case 5: time = 15;
					default: time = 20;
			}
		}
	}
	return time;
}
LimpiarCuenta(playerid)
{
	new reiniciar_cuenta2[E_TEMP_INFO]; PLAYER_TEMP[playerid] = reiniciar_cuenta2;
    new reiniciar_cuenta[jInfo]; PLAYER_INFO[playerid] = reiniciar_cuenta;
    new reiniciar_tiempos[Times]; PLAYER_TIMES[playerid] = reiniciar_tiempos;
    new reiniciar_toys[ptInfo]; for(new i = 0; i < MAX_PLAYER_TOYS; i++) PLAYER_TOYS[playerid][i] = reiniciar_toys;
    
    PLAYER_TEMP[playerid][LoroHabla] = false;
    PLAYER_INFO[playerid][pBarras] = 0;
    BarraHambre(playerid);
	BarraSed(playerid);
	COLOR_ARMA[playerid] = -1;
    BackPack[playerid][bDBID] = 0;
    PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
    PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_ID] = INVALID_OBJECT_ID;
	Emisoras[playerid][TieneEmisora] = 0;
	Emisoras[playerid][EmisoraID]= -1;
	format(Emisoras[playerid][NombreEmisora], 90, "Ninguno");
	format(Emisoras[playerid][URLEmisora], 120, "http://45.153.184.239:8080/listen.pls");
	MedicoReanimo[playerid] = INVALID_PLAYER_ID;
	CeldaJugador[playerid] = 0;
    KillTimer(TimerMedico[playerid]);
	KillTimer(TimerMeca[playerid]);
	KillTimer(TimerTaxista[playerid]);
    new nombrefaster[32];
	randomString(nombrefaster, 20);
    SetPlayerTeam(playerid, NO_TEAM);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, 0);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "", 0, 3);
	TiempoForzarCerradura[playerid] = 0;
	CasaForzada[playerid] = 0;
	for(new i = 0; i < 7; i++) DineroTirado[playerid][i] = 0;
    SexoOral[playerid] = INVALID_PLAYER_ID;
	KillTimer(PLAYER_TIMES[playerid][TimerChupar]);
	autosSpawned[playerid][0] = false;
	autosSpawned[playerid][1] = false;
	autosSpawned[playerid][2] = false;
	autosSpawned[playerid][3] = false;
	if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
	ContadorBaile[playerid] = 0;
	Paciente2[playerid] = INVALID_PLAYER_ID;
    ContadorCBug[playerid] = 0;
    Contador[playerid] = 0;
    TrailerJob[playerid] = 0;
    timerjob[playerid] = 0;
    timerjob2[playerid] = 0;
    trailervehicle[playerid] = 0;
    Verificado[playerid] = 0;
    Reportado[playerid][0] = INVALID_PLAYER_ID;
    Reportado[playerid][1] = INVALID_PLAYER_ID;
    Reportado[playerid][2] = INVALID_PLAYER_ID;
    Reportado[playerid][3] = INVALID_PLAYER_ID;
    Reportado[playerid][4] = INVALID_PLAYER_ID;
	KillTimer(PLAYER_TIMES[playerid][RemoveReportTimer][0]);
	KillTimer(PLAYER_TIMES[playerid][RemoveReportTimer][1]);
	KillTimer(PLAYER_TIMES[playerid][RemoveReportTimer][2]);
	KillTimer(PLAYER_TIMES[playerid][RemoveReportTimer][3]);
	KillTimer(PLAYER_TIMES[playerid][RemoveReportTimer][4]);
    KillTimer(PLAYER_TIMES[playerid][TimerRevisando]);
    QuitarConsumibles(playerid);
    SpecJugador[playerid] = INVALID_PLAYER_ID;
	KillTimer(PLAYER_TIMES[playerid][TiempoSacarClub]);
	KillTimer(PLAYER_TIMES[playerid][TiempoCargo]);
    RoboTienda[playerid] = 0;
    if(IsValidDynamicPickup(roboTiendasObjeto[playerid])) DestroyDynamicPickup(roboTiendasObjeto[playerid]);
	if(IsValidDynamic3DTextLabel(LabelRobo[playerid])) DestroyDynamic3DTextLabel(LabelRobo[playerid]);
	valortotal[playerid] = 0;
    format(PLAYER_TEMP[playerid][NAMES],10," ");
    _Select_Status[ playerid ] = false;
	KillTimer(Cargas[playerid]);
    alarma[autos[playerid]] = 0;
    alarma[autos2[playerid]] = 0;
    alarma[autos3[playerid]] = 0;
    alarma[autos4[playerid]] = 0;
    VirtualWorldAutos[playerid] = 0;
    suicidio[playerid] = 0;
    TowedCar[playerid][0] = 0;
    TowedCar[playerid][1] = 0;
    TowedCar[playerid][2] = 0;
    TowedCar[playerid][3] = 0;
    TimerReparar[playerid] = 0;
    TimerRevisar[playerid] = 0;
    TimerRecoleccion[playerid] = 0;
    TimerDescargarCamion[playerid] = 0;
    TimerDescargarTrailer[playerid] = 0;
    TimerCamionero[playerid] = 0;
    ViajeAvion[playerid] = 0;
    TimerBasurero[playerid] = 0;
    //
   	PLAYER_INFO[playerid][mDuty] = 0;
	//
    TimerCargarCamion[playerid] = 0;
	TimerMalherido[playerid] = 0;
	TimerCombustible[playerid] = 0;
    VerAdmin[playerid] = 1;
    LogeoCorrecto[playerid] = 0;
    BaldeAgua[playerid] = 0;
    RecienDuda[playerid] = 0;
	LoggedYet[playerid] = 0;
    TipoCargo[playerid] = 0;
	ValueTimerBugH[playerid] = 1;
	Cosechas[playerid][CosechaLugar] = 0;
	Cosechas[playerid][RutaCosecha] = 0;
	Cosechas[playerid][ProgresoCosecha] = 0;
    EventoBolo[playerid] = 0;
	Piso[playerid] = 0;
	Forzando[playerid] = 0;
    TieneGPSActivo[playerid] = 0;
    MensajeSinGasoEnviado[playerid] = 0;
	LlamadaTipo[playerid] = 0;
	SexoOral[playerid] = -1;
	precioofertax[playerid] = 0;
	CaidaTaxi[0][playerid] = 0;
    CaidaTaxi[1][playerid] = 0;
	CaidaTaxi[2][playerid] = 0;
	MinutoLlamada[playerid] = 0;
	YoLlame[playerid] = 0;
    CriminalAceptado[playerid] = 0;
	TieneEncargo[playerid] = 0;
	Colega[playerid] = INVALID_PLAYER_ID;
	Invito[playerid] = INVALID_PLAYER_ID;
	Invitador[playerid] = INVALID_PLAYER_ID;
	Criminal[playerid] = INVALID_PLAYER_ID;
	TomoEncargo[playerid] = 0;
	EstaDomiciliaria[playerid] = 0;
	PermisoSalon[playerid] = false;
	Boleto[playerid] = false;
	Escuchando[playerid] = true;
	TienePorro[playerid] = 0;
	TieneSprunk[playerid] = 0;
	TieneAquariu[playerid] = 0;
	TienePizza[playerid] = 0;
	TieneVino[playerid] = 0;
	Frecuencia[playerid] = 0;
	TieneCerveza[playerid] = 0;
	NombresOcultos[playerid] = 0;
	Boletos[playerid] = 0;
	EstaEnBus[playerid] = 0;
	tipogrua[playerid] = 0;
	VWTemporal[playerid] = 0;
	PuntoCX[playerid] = 0;
	PuntoCY[playerid] = 0;
	PuntoCZ[playerid] = 0;
	PuntoBaX[playerid] = 0;
	PuntoBaY[playerid] = 0;
	PuntoBaZ[playerid] = 0;
	PuntoBaA[playerid] = 0;
	PuntoTraX[playerid] = 0;
	PuntoTraY[playerid] = 0;
	PuntoTraZ[playerid] = 0;
	PuntoTraileroX[playerid] = 0;
	PuntoTraileroY[playerid] = 0;
	PuntoTraileroZ[playerid] = 0;
	RopaBasu[playerid] = 0;
	RopaMedi[playerid] = 0;
	RopaMeca[playerid] = 0;
	NoQuitar[playerid] = 0;
	CagoSeguro[playerid] = 0;
	CargosRobar[playerid] = 0;
	autos[playerid] = 0;
	autos2[playerid] = 0;
 	autos3[playerid] = 0;
	autos4[playerid] = 0;
	EnLlamada[playerid] = 0;
	EnLlamada911[playerid] = -1;
	HCalculo[playerid] = 0;
	CColocado[playerid] = 0;
	EnCombate[playerid] = 0;
	Transportistas[playerid][Ruta] = 0;
	Avisos[playerid] = 0;
	AutoBuscado[playerid] = 0;
	Objeto[playerid] = 0;
	MRepuestos[playerid] = 0;
	MConductor[playerid] = 0;
	LlamadaMeca[playerid] = 0;
	Monto[playerid] = 0;
	EnTaxi[playerid] = 0;
	LlamadaTaxi[playerid] = 0;
	Localizando[playerid] = 0;
	CargandoC[playerid] = 0;
	recogiendo[playerid] = 0;
	RecorridoBasu[playerid] = 0;
	PBasura[playerid] = 0;
	Muriendo[playerid] = 0;
	Bidon[playerid] = 0;
	Jail[playerid] = 0;
	San[playerid] = 0;
	EnPatrulla[playerid] = 0;
	BajandoV[playerid] = 1;
	CanalDudas[playerid] = 1;
	CanalAnuncios[playerid] = 1;
	Ficha[playerid] = 0;
	Manejando[playerid] = 0;
	AvisosAuto[playerid] = 0;
	Carga[playerid] = 0;
	Mats1[playerid] = 0;
	Mats2[playerid] = 0;
	Mats3[playerid] = 0;
	tviaje[playerid] = 0;
	DudaOff[playerid] = 0;
	Curando[playerid] = 0;
	Esposando[playerid] = 0;
	MedicoCP2[playerid] = 0;
	Reanimado[playerid] = 0;
	PrimerSpawn[playerid] = 0;
	armaofertada[playerid] = 0;
	dineropedido[playerid] = 0;
	PacienteAmbu[playerid] = 0;
 	JugadorLogeado[playerid] = 0;
	MarcadoMedicos[playerid] = 0;
	LlamadaMedicos[playerid] = 0;
	TelefonoEstado[playerid] = 0;
	EstadoRadio[playerid] = 1;
	CamionID[playerid] = INVALID_VEHICLE_ID;
	Paciente[playerid] = INVALID_PLAYER_ID;
	GuardaEspalda[playerid] = INVALID_PLAYER_ID;
	Deposito[playerid] = INVALID_PLAYER_ID;
	ofertador[playerid] = INVALID_PLAYER_ID;
	ofertador[playerid] = INVALID_PLAYER_ID;
	Agresor[playerid] = INVALID_PLAYER_ID;
	LeOfreci[playerid] = INVALID_PLAYER_ID;
	VerBaul[playerid] = INVALID_PLAYER_ID;
	EnAuto[playerid] = INVALID_VEHICLE_ID;
	reportar[playerid] = INVALID_PLAYER_ID;
	Taxista[playerid] = INVALID_PLAYER_ID;
	Pasajero[playerid] = INVALID_PLAYER_ID;
	Mecanico[playerid] = INVALID_PLAYER_ID;
	Oficial[playerid] = INVALID_PLAYER_ID;
	Companero[playerid] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "TempName", 0);
	KillTimer(TM[playerid]);
	KillTimer(LCHAT[playerid]);
	KillTimer(CLlamada[playerid]);
	KillTimer(llamadasonido1[playerid]);
	KillTimer(llamadasonido2[playerid]);
	KillTimer(asdtren[playerid]);
	KillTimer(asd[playerid]);
	PLAYER_TEMP[playerid][pt_Transportista] = false;
	PLAYER_TEMP[playerid][pt_Trailero] = false;
	format(PLAYER_INFO[playerid][Nickname],128,"%s",nombrefaster);
	PLAYER_INFO[playerid][BaneosD2] = gettime();
    format(PLAYER_INFO[playerid][ContraTemporal], 128, "ABC#DASES");
	PLAYER_INFO[playerid][pAdmin] = 0;
	PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
	PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;

	SetPlayerColor(playerid, COLOR_WHITE);
	SetPlayerWantedLevel(playerid, 0);
	DisablePlayerCheckpoint(playerid);
	QuitarArmas(playerid);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, 0);
	
	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Camionero], 10.0);
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], 10.0);
	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 20.0);
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha], 0.00);
	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][ReparandoBar], 10.0);
	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Revisar], 5.0);
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][ReparandoBar], 10.0);
	SetPlayerProgressBarValue(playerid,Progressbar[playerid][BarraConquista], 0);
	SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][BarraConquista], 300);
	return 1;
}
ExpMedico(playerid)
{
	switch(PLAYER_INFO[playerid][pNivelMedico])
	{
		case 1:
		{
			if(PLAYER_INFO[playerid][pExpMedico] < 49)
			{
				if(PLAYER_INFO[playerid][pVIP] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
			}
			else if(PLAYER_INFO[playerid][pExpMedico] >= 49)
			{
				PLAYER_INFO[playerid][pNivelMedico]++;
				PLAYER_INFO[playerid][pExpMedico] = 0;
				SendClientMessage(playerid,-1,"{f21111}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
			}
		}
		case 2:
		{
			if(PLAYER_INFO[playerid][pExpMedico] < 49)
			{
				if(PLAYER_INFO[playerid][pVIP] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
			}
			else if(PLAYER_INFO[playerid][pExpMedico] >= 49)
			{
				PLAYER_INFO[playerid][pNivelMedico]++;
				PLAYER_INFO[playerid][pExpMedico] = 0;
				SendClientMessage(playerid,-1,"{f21111}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
			}
		}
		case 3:
		{
			if(PLAYER_INFO[playerid][pExpMedico] < 49)
			{
				if(PLAYER_INFO[playerid][pVIP] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
			}
			else if(PLAYER_INFO[playerid][pExpMedico] >= 49)
			{
				PLAYER_INFO[playerid][pNivelMedico]++;
				PLAYER_INFO[playerid][pExpMedico] = 0;
				SendClientMessage(playerid,-1,"{f21111}¡Felicitaciones!{FFFFFF} Aumentaste un nivel en el trabajo de médico.");
			}
		}
		case 4:
		{
			if(PLAYER_INFO[playerid][pExpMedico] < 49)
			{
				if(PLAYER_INFO[playerid][pVIP] > 0)
                {
                    new pago = random(3);
                    switch(pago)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste ningun punto de habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 puntos."); }
                    }
                }
                else
                {
                    new pago2 = random(3);
                    switch(pago2)
                    {
                        case 0: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                        case 1:{ PLAYER_INFO[playerid][pExpMedico]++; SendClientMessage(playerid,0x2d8cecFF,"Habilidad de médico aumentada +1 punto."); }
                        case 2: SendClientMessage(playerid,-1,"Esta vez no ganaste puntos de habilidad, consigue membresía VIP para aumentar las posibiliades de ganar habilidad.");
                    }
                }
			}
			else if(PLAYER_INFO[playerid][pExpMedico] >= 49)
			{
				SendClientMessage(playerid,0x00CC00FF,"Llegaste al nivel máximo como médico.");
			}
		}
	}
}

EnComisaria(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,10.0,1564.5568,-1694.7732,5.8906)) { return 1; }         // LSPD
	else if(IsPlayerInRangeOfPoint(playerid,10.0,-1589.4796,706.9417,-5.6748)) { return 1; }	// SFPD
	else if(IsPlayerInRangeOfPoint(playerid,10.0,2281.4912,2429.3406,3.2734)) { return 1; }     // LVPD
	else if(IsPlayerInRangeOfPoint(playerid,10.0,-1679.5967,705.8658,30.7528)) { return 1; }    // SFPD (H)
	else if(IsPlayerInRangeOfPoint(playerid,10.0,2291.7383,2451.4404,10.8203)) { return 1; }    // LVPD ARRIBA
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -196.7497,2738.0884,62.6875)) { return 1; }   // Entregar SAEM
	return 0;
}

Armado(playerid)
{
    for(new i = 0; i < 13; i++)
	{
		if(PLAYER_INFO[playerid][j_ARMAS][i] != 0)
		{
			return 1;
		}
	}
	return 0;
}
Armados(playerid)
{
	if(PLAYER_INFO[playerid][j_ARMAS][0] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][2] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][3] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][4] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][5] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][6] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][7] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][8] > 0) { return 1; }
	else if(PLAYER_INFO[playerid][j_ARMAS][9] > 0) { return 1; }
	return 0;
}
stock ArmadoP(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		if(GetPlayerWeapon(playerid) == 25) { return 1; }
		else if(GetPlayerWeapon(playerid) == 27) { return 1; }
		else if(GetPlayerWeapon(playerid) == 29) { return 1; }
		else if(GetPlayerWeapon(playerid) == 30) { return 1; }
		else if(GetPlayerWeapon(playerid) == 31) { return 1; }
		else if(GetPlayerWeapon(playerid) == 33) { return 1; }
		else if(GetPlayerWeapon(playerid) == 16) { return 1; }
		else if(GetPlayerWeapon(playerid) == 38) { return 1; }
		else if(GetPlayerWeapon(playerid) == 26) { return 1; }
	}
	return 0;
}
EnAscensor(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,10.8428)) { Piso[playerid] = 1; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,15.1228)) { Piso[playerid] = 2; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,19.4428)) { Piso[playerid] = 3; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,23.7228)) { Piso[playerid] = 4; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,28.0428)) { Piso[playerid] = 5; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,32.3428)) { Piso[playerid] = 6; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,36.6228)) { Piso[playerid] = 7; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,40.9428)) { Piso[playerid] = 8; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,45.2228)) { Piso[playerid] = 9; return 1;}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2117.8958,2415.0769,49.5428)) { Piso[playerid] = 10; return 1;}
	return 0;
}

RangoPolicia(playerid)
{
	new rango[20];
    if (PLAYER_INFO[playerid][pRango] == 8) format(rango, sizeof(rango), "Comisario");
    if (PLAYER_INFO[playerid][pRango] == 7) format(rango, sizeof(rango), "Inspector");
    if (PLAYER_INFO[playerid][pRango] == 6) format(rango, sizeof(rango), "Capitán");
    if (PLAYER_INFO[playerid][pRango] == 5) format(rango, sizeof(rango), "Teniente");
    if (PLAYER_INFO[playerid][pRango] == 4) format(rango, sizeof(rango), "Sargento");
    if (PLAYER_INFO[playerid][pRango] == 3) format(rango, sizeof(rango), "Cabo");
    if (PLAYER_INFO[playerid][pRango] == 2) format(rango, sizeof(rango), "Oficial");
    if (PLAYER_INFO[playerid][pRango] == 1) format(rango, sizeof(rango), "Cadete");
    return rango;
}
//
RangoMilitar(playerid)
{
	new rango[20];
    if (PLAYER_INFO[playerid][pRango] == 8) format(rango, sizeof(rango), "General");
    if (PLAYER_INFO[playerid][pRango] == 7) format(rango, sizeof(rango), "Coronel");
    if (PLAYER_INFO[playerid][pRango] == 6) format(rango, sizeof(rango), "Mayor");
    if (PLAYER_INFO[playerid][pRango] == 5) format(rango, sizeof(rango), "Capitan");
    if (PLAYER_INFO[playerid][pRango] == 4) format(rango, sizeof(rango), "Teniente");
    if (PLAYER_INFO[playerid][pRango] == 3) format(rango, sizeof(rango), "Oficial");
    if (PLAYER_INFO[playerid][pRango] == 2) format(rango, sizeof(rango), "Soldado");
    if (PLAYER_INFO[playerid][pRango] == 1) format(rango, sizeof(rango), "Recluta");
    return rango;
}
//
EnVerMapa(playerid)
{
	for(new i = 0; i < sizeof(VerMapasPositions);i++)
	if(IsPlayerInRangeOfPoint(playerid,2.0, VerMapasPositions[i][0], VerMapasPositions[i][1], VerMapasPositions[i][2])) return 1;
	return 0;
}
EnEntregarse(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 240.4520,112.8195,1003.2188)) { return 1; }        // Entregarse Interiores
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 235.2946,166.3358,1003.0300)) { return 1; }    // Entregarse Interiores
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1560.4916,-1693.5004,5.8906)) { return 1; }   // Entregar LS
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.6255,-1693.5498,5.8906)) { return 1; }   // Entregar LS
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1590.2043,707.8610,-5.2422)) { return 1; }   // Entregar SF
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1589.9172,716.4757,-5.2422)) { return 1; }   // Entregar SF
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2291.9436,2451.4192,10.8203)) { return 1; }   // Entregar LV
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2291.8071,2468.6799,10.8203)) { return 1; }   // Entregar LV
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -196.7497,2738.0884,62.6875)) { return 1; }   // Entregar SAEM
	return 0;
}
EnSexShop(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 7.0, -103.9013,-22.6749,1000.7188)) { return 1; }
	return 0;
}
EnBaldes(playerid)
{
	for(new i = 0; i < sizeof(LlenarBaldePos);i++)
	if(IsPlayerInRangeOfPoint(playerid,2.0, LlenarBaldePos[i][0], LlenarBaldePos[i][1], LlenarBaldePos[i][2])) return 1;
	return 0;
}
EnGasolinera(playerid)
{
	for(new i = 0; i < sizeof(GasolineraPositions);i++)
	if(IsPlayerInRangeOfPoint(playerid,15.0, GasolineraPositions[i][0], GasolineraPositions[i][1], GasolineraPositions[i][2])) return 1;
	return 0;
}
EnCajero(playerid)
{
	for(new i = 0; i < sizeof(OperacionesPositions);i++)
	if(IsPlayerInRangeOfPoint(playerid,2.0, OperacionesPositions[i][0], OperacionesPositions[i][1], OperacionesPositions[i][2])) return 1;
	return 0;
}
CheckArma(playerid,id)
{
	if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(id)] == id) return 1;
	return 0;
}
public CargarPuertas()
{
    new Query[128];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `doors`");
	mysql_tquery(handle_db, Query, "LoadDoor");
}
public LoadDoor()
{
    new count,count2;
	cache_get_result_count(count);
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p = 0;
		cache_get_value_name(i, "ID", content);	p = strval(content); DoorInfo[p][dID] = strval(content);
		if(p > 0)
		{
		    new type,pickup;
		    cache_get_value_name(i, "Type", content);  			type = strval(content);
			cache_get_value_name(i, "Pickup", content); 		pickup = strval(content);
			cache_get_value_name(i, "Nombre", content);  		format(DoorInfo[p][dName],64,"%s",content);
			cache_get_value_name(i, "X", content);  			DoorInfo[p][dExitX] = floatstr(content);
			cache_get_value_name(i, "Y", content);  			DoorInfo[p][dExitY] = floatstr(content);
			cache_get_value_name(i, "Z", content);  			DoorInfo[p][dExitZ] = floatstr(content);
			cache_get_value_name(i, "Propietario", content);  	format(DoorInfo[p][dOwner],MAX_PLAYER_NAME,content);
			new string[256];
			switch(type)
			{
			    case 1: format(string,sizeof(string),"{FFFFFF}Propiedad del Gobierno\n{f21111}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",DoorInfo[p][dName]);
			    case 2: format(string,sizeof(string),"{FFFFFF}Propiedad del Gobierno\n{f21111}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",DoorInfo[p][dName]);
			    case 3: format(string,sizeof(string),"{FFFFFF}Propiedad del Gobierno\n{f21111}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",DoorInfo[p][dName]);
			    case 4: format(string,sizeof(string),"{FFFFFF}Propiedad del Gobierno\n{f21111}%s\n\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para ingresar.",DoorInfo[p][dName]);
			}
			if(type > 0 && type < 5) if(!IsValidDynamic3DTextLabel(DoorInfo[p][dLabel])) DoorInfo[p][dLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[p][dExitX], DoorInfo[p][dExitY], DoorInfo[p][dExitZ]+0.75, 23, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			if(!IsValidDynamicPickup(DoorInfo[p][dPickup])) DoorInfo[p][dPickup] = CreateDynamicPickup(pickup, 23, DoorInfo[p][dExitX], DoorInfo[p][dExitY], DoorInfo[p][dExitZ], 0, 0, -1, 70.0);
            count2++;
		}
	}
	printf("[PUERTAS DINAMICAS]: %d", count2);
    return 1;
}
EsconderVelocimetro(playerid)
{
	PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][0]);
	PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][1]);
	PlayerTextDrawHide(playerid, F_0[playerid]);
	PlayerTextDrawHide(playerid, F_1[playerid]);
	PlayerTextDrawHide(playerid, F_2[playerid]);
	PlayerTextDrawHide(playerid, FUELICON[playerid]);
	PlayerTextDrawHide(playerid, H_0[playerid]);
	PlayerTextDrawHide(playerid, S_1[playerid]);
	PlayerTextDrawHide(playerid, S_2[playerid]);
	PlayerTextDrawHide(playerid, SPEEDICON[playerid]);
	
	KillTimer(Bajando[playerid]);

	return 1;
}
MostrarVelocimetro(playerid)
{
	new Float: fCurrentSpeed, szSpeed[64];
	fCurrentSpeed = player_get_speed(playerid);
	fVehSpeed[playerid] = fCurrentSpeed;
	iVehicle[playerid] = GetPlayerVehicleID(playerid);
	new autoid = GetPlayerVehicleID(playerid);
	if(BICI(autoid)) return 1;
	new modelo = GetVehicleModel(autoid);
	new vehiclefuel = CombustibleCoche(modelo);
	format(szSpeed, sizeof(szSpeed),"%d/%d L",VehicleFuel[iVehicle[playerid]],vehiclefuel);
	PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][1], szSpeed);
	format(szSpeed, sizeof(szSpeed),"%.0f KM/H", fCurrentSpeed);
	PlayerTextDrawSetString(playerid, ContadorVelocimetro[playerid][0], szSpeed);
	PlayerTextDrawShow(playerid, ContadorVelocimetro[playerid][0]);
	PlayerTextDrawShow(playerid, ContadorVelocimetro[playerid][1]);
	PlayerTextDrawShow(playerid, F_0[playerid]);
	PlayerTextDrawShow(playerid, F_1[playerid]);
	PlayerTextDrawShow(playerid, F_2[playerid]);
	PlayerTextDrawShow(playerid, FUELICON[playerid]);
	PlayerTextDrawShow(playerid, H_0[playerid]);
	PlayerTextDrawShow(playerid, S_1[playerid]);
	PlayerTextDrawShow(playerid, S_2[playerid]);
	PlayerTextDrawShow(playerid, SPEEDICON[playerid]);
	Manejando[playerid] = 1;

	return 1;
}
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

LoopingAnim(playerid, const animlib[], const animnamex[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animnamex, Speed, looping, lockx, locky, lockz, lp);
}
EnBotiquin(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7440,-1353.4617,-10.7922)) { return 1; } //Botiquin LS
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1235.0582,-821.8716,1164.2759)) { return 1; }  //GANTONLS
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,-2720.8923,647.0943,1385.6534)) { return 1; } //SF
    return 0;
}
EstaHospital(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 70.0,1157.3018,-1345.9318,-10.7849)) { return 1; }  //LS
	else if(IsPlayerInRangeOfPoint(playerid, 70.0,-2712.8232,618.8465,1385.6534)) { return 1; }  //SF
	else if(IsPlayerInRangeOfPoint(playerid, 70.0,1238.9851,-823.2172,1164.2759)) { return 1; }  //GANTON / LV
    return 0;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	new DB_Query[256];
	if(listid == Helrp)
	{
		if(response)
		{
		    if(modelid == 447) modelid = 469;
         	CreatePlayerVehicle(playerid, modelid, 2049.0789,-2494.9685,13.2971,88.7253, 0, 0, 80, 1, playerid);
			PLAYER_INFO[playerid][Moneda] -= 80;
		}
		else callcmd::tienda(playerid);
		return 1;
	}
    if(listid == Motosrp)
	{
		if(response)
		{
		    new rand = random(sizeof(EstacionamientoMSpawn));
            CreatePlayerVehicle(playerid, modelid, EstacionamientoMSpawn[rand][0], EstacionamientoMSpawn[rand][1], EstacionamientoMSpawn[rand][2], EstacionamientoMSpawn[rand][3], 0, 0, 35, 1,playerid);
      		PLAYER_INFO[playerid][Moneda] -= 35;
   		}
		else callcmd::tienda(playerid);
		return 1;
	}
    if(listid == vehrp)
	{
		if(response)
		{
		    new rand = random(sizeof(EstacionamientoMSpawn));
            CreatePlayerVehicle(playerid, modelid, EstacionamientoMSpawn[rand][0], EstacionamientoMSpawn[rand][1], EstacionamientoMSpawn[rand][2] + 3, EstacionamientoMSpawn[rand][3], 0, 0, 40, 1,playerid);
   			PLAYER_INFO[playerid][Moneda] -= 40;
		}
		else callcmd::tienda(playerid);
		return 1;
	}
	if(listid == barp)
	{
		if(response)
		{
          	CreatePlayerVehicle(playerid, modelid, 725.6589,-1647.4690,-0.6774,178.9338, 0, 0, 30, 1,playerid);
			PLAYER_INFO[playerid][Moneda] -= 30;
		}
		else callcmd::tienda(playerid);
		return 1;
	}
	if(listid == Prendas || listid == PrendasVIP)
	{
		if(response)
		{
		    new VALID_MODEL = -1;
		    if(CountPlayerToys(playerid) >= MAX_PLAYER_TOYS) return SendClientMessage(playerid,-1,"No puedes tener más accesorios.");
			if(PLAYER_INFO[playerid][Moneda] < 25) return SendClientMessage(playerid,-1,"Comprar una prenda cuesta {FF3300}25{FFFFFF} "SERVER_COIN".");

			for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
    		{
        		if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == modelid) return SendClientMessageEx(playerid, -1,"Ya tienes un(a) {DEED15}%s{FFFFFF}.",GetNameObjeto(modelid));
        	}
        	for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
		    {
		        if(OBJETOS_INFO[i][obj_ID] == modelid)
				{
					VALID_MODEL = i;
					break;
				}
			}
			if(VALID_MODEL == -1)
			{
			    printf("--ACTUALIZAR 'OBJETOS_INFO' | %d |",modelid);
				return SendClientMessage(playerid,-1,"{FF6347}El objeto no esta disponible, contacta con un administrador.");
			}
			SendClientMessage(playerid, -1,"Acabas de comprar un objeto. Escribe {FFFF04}/accesorios{FFFFFF} para ver el menu disponible.");
			GivePlayerToy(playerid, modelid);
			PLAYER_INFO[playerid][Moneda] -= 25;
		}
		return 1;
	}
    if(listid == RopaHombre)
	{
		if(response)
		{
			PLAYER_INFO[playerid][pRopa] = modelid;
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PLAYER_INFO[playerid][Nickname]);
			mysql_pquery(handle_db, DB_Query);
			SendClientMessage(playerid,-1,"Has comprado una nueva, con un precio de {f21111}$1500");
			QuitarDinero(playerid, 1500);
		}
		return 1;
	}
    if(listid == RopaMujer)
	{
		if(response)
		{
			PLAYER_INFO[playerid][pRopa] = modelid;
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PLAYER_INFO[playerid][Nickname]);
			mysql_pquery(handle_db, DB_Query);
			SendClientMessage(playerid,-1,"Has comprado una nueva, con un precio de {f21111}$1500");
			QuitarDinero(playerid, 1500);
		}
		return 1;
	}
    if(listid == RopaHombreEZ)
	{
		if(response)
		{
			PLAYER_INFO[playerid][pRopa] = modelid;
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PLAYER_INFO[playerid][Nickname]);
			mysql_pquery(handle_db, DB_Query);
			PLAYER_INFO[playerid][Moneda] -= 5;
			SendClientMessage(playerid,-1,"Has comprado una nueva {BBE2FF}ropa{FFFFFF} por {f21111}5 "SERVER_COIN"");
		}
		return 1;
	}
    if(listid == RopaMujerEZ)
	{
		if(response)
		{
			PLAYER_INFO[playerid][pRopa] = modelid;
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%s'",modelid,PLAYER_INFO[playerid][Nickname]);
			mysql_pquery(handle_db, DB_Query);
			PLAYER_INFO[playerid][Moneda] -= 5;
			SendClientMessage(playerid,-1,"Has comprado una nueva {BBE2FF}ropa{FFFFFF} por {f21111}5 "SERVER_COIN"");
		}
		return 1;
	}
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{

	if(extraid == TUNINGSHOP)
	{
		if(response) AgregarTuning(playerid, modelid);
		else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	}
	return 1;
}

stock AgregarTuning(playerid, modelid)
{

	new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
	if(slot == -1)
	{
		SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
		ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		return 1;
	}
	if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
	{
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 2 {FFFFFF}pueden tener hasta %d objetos en vehículos {FFFFFF}.", MAX_OBJETOS);
		return 1;
	}
	if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
	{
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
		return 1;
	}

	QuitarDinero(playerid, 100);
	new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ slot ] = temp_VEHICLE_OBJECTS;
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_VALID] = true;
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ID] = 0;
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_MODELID] = modelid;
	format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_NAME], 32, "Nuevo Objeto");
	VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ATTACHED] = true;
	RegisterNewVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot);
	UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot);

	SetVehicleHealth(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 1000.0);
	RepairVehicle(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
    KillTimer(PLAYER_TIMES[playerid][t_TIME_TUNING]);
    PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
    EditVehicleObject(playerid, PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot);
	new tunning_id = PosTunningCercano(playerid), vehicleid = GetPlayerVehicleID(playerid);
	SetVehiclePosEx(vehicleid, PointVehicleTunnin[tunning_id][0],PointVehicleTunnin[tunning_id][1],PointVehicleTunnin[tunning_id][2]);
	SetVehicleZAngle(vehicleid, PointVehicleTunnin[tunning_id][3]);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 0);
	return 1;
}


public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    #if DEBUG_GM == 1
    	printf("(OnPlayerClickMap) PlayerID: %d", playerid);
	#endif

	if(PLAYER_INFO[playerid][pAdmin] > 2 && AdminDuty[playerid] >= 1)
 	{
 	    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 3;
		if(GetPlayerState(playerid) == 2) return SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ);
		else SetPlayerPosEx(playerid, fX, fY, fZ);
	}
	return 1;
}
public MostrarBoxMedico(playerid)
{
    FabricaMedica[playerid] = 0;
    new string[512],string2[256], string3[256], string4[256];
    new medicos = GetMedicalWorking();
    if(medicos < 1) { format(string3,sizeof(string3),"\n{f21111}- {FFFFFF}Solicitar servicio médico\tUn médico irá a buscarte\t{f21111}No{FFFFFF}"); }
    else { format(string3,sizeof(string3),"\n{f21111}- {FFFFFF}Solicitar servicio médico\tUn médico irá a buscarte {FFFB00}(%d en servicio){FFFFFF}\t{f21111}No{FFFFFF}",medicos); }
	format(string4,sizeof(string4),"\n{52b4be}-{FFFFFF} Ir al hospital\tTranslado directo al hospital\t{EB0000}Si{FFFFFF}");
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
  		if(!FABRICAS_INFO[ID][f_VALID]) continue;
  		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
  		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][10] == 0) continue;
  		
        format(string2,sizeof(string2),"\n{f21111}- {FFFFFF}Atención clandestina\tTranslado directo a tu fábrica\t\t{f21111}No{FFFFFF}");
	}
	
	format(string,sizeof(string),"Acción\tDetalles\tPérdida de armas\n%s%s%s",string3,string4,string2);
	ShowPlayerDialog(playerid, MMEDICO, DIALOG_STYLE_TABLIST_HEADERS, "Necesitas atención médica, selecciona una opción.", string, "Aceptar","Cancelar");
	PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
	return 1;
}
public DestruirDineroColegiala(dinero)
{
	DestroyDynamicObject(DineroColegiala[dinero]);
	return 1;
}
public RutraTransportista(playerid)
{
    tcarga[playerid] = SetTimerEx("RutaTransportista",1000,true,"d",playerid);
    TimerCargarCamion[playerid] = 10;
    TogglePlayerControllable(playerid, 0);
    SetPVarInt(playerid, "IsFrozen", 0);
    DisablePlayerCheckpoint(playerid);
    return 1;
}
public MandarMensajeTransportistas(playerid)
{
    new randomNumberTransport;
    switch(PLAYER_INFO[playerid][pNivelTransportista])
    {
        case 1: randomNumberTransport = 2; case 2: randomNumberTransport = 4;
        case 3: randomNumberTransport = 6; case 4: randomNumberTransport = 8;
        case 5: randomNumberTransport = 10; case 6: randomNumberTransport = 12;
        default: randomNumberTransport = 12;
    }
    new punto = random(randomNumberTransport);
    switch(punto) {
        case 0: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Hunter Quarry?"); Transportistas[playerid][Ruta] = 1; }
        case 1: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de sprunk de Montgomery?"); Transportistas[playerid][Ruta] = 2; }
        case 2: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Hunter Quarry?"); Transportistas[playerid][Ruta] = 3; }
        case 3: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la maderera de Angel Pine?"); Transportistas[playerid][Ruta] = 4; }
        case 4: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la distribuidora de Sprunk de Whitewood Estates?"); Transportistas[playerid][Ruta] = 5; }
        case 5: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Esplanade North?"); Transportistas[playerid][Ruta] = 6; }
        case 6: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la cantera de Bone County?"); Transportistas[playerid][Ruta] = 7; }
        case 7: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de transformadores de Bayside?"); Transportistas[playerid][Ruta] = 8; }
        case 8: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Bayside?"); Transportistas[playerid][Ruta] = 9; }
        case 9: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón de Bayside?"); Transportistas[playerid][Ruta] = 10; }
        case 10: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a un galpón ferroviario de Sobell Rail Yards?"); Transportistas[playerid][Ruta] = 11; }
        case 11: { SendClientMessage(playerid,COLOR_DORADO,"Empresa de transporte(por celular): Hola, ¿podría ir a buscar una carga a la fabrica de importaciones de Blue Berry?"); Transportistas[playerid][Ruta] = 12; }
    }
    PLAYER_INFO[playerid][Mobile] = 2540;
    if(PLAYER_INFO[playerid][Agonizando] == 0) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}
public RutaTransportista(playerid)
{
    if(Cargando2[playerid] <= 10)
    {
        Cargando2[playerid]++;
        if(Cargando2[playerid] == 10) {
            TimerCargarCamion[playerid] = 0;
            new vehicleid = GetPlayerVehicleID(playerid);
            if(!IsPlayerInAnyVehicle(playerid)) return 1;
            if(DFT(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                TogglePlayerControllable(playerid, 1);
                SetPVarInt(playerid, "IsFrozen", 1);
                KillTimer(tcarga[playerid]);
                Cargando2[playerid] = 0;
                switch(Transportistas[playerid][Ruta])  {
                    case 1: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(758,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(758,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.6750000,-0.1500000,-0.3000000,-2.7000000,2.7000000,-24.3000060);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), 0.7500000,-3.7500010,-0.3000000,-2.7000000,2.7000000,-24.3000060);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Market");
                        MarcadoTransportistaGPS(playerid,1251.0417,-1258.1145,13.1514,7.0);
                    }
                    case 2: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto3] = CreateDynamicObject(955,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0750000,1.1250000,0.0000000,0.0000000,0.0000000,0.0000000);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), -0.0750000,-1.5750000,0.0000000,-0.0000010,0.0000000,18.8999990);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto3], GetPlayerVehicleID(playerid), -0.0750000,-4.1250010,0.0000000,-0.0000010,0.0000000,-0.0000020);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en la distribuidora de Sprunk de Whitewood Estates");
                        MarcadoTransportistaGPS(playerid,1048.7633,2111.3118,10.8203,7.0);
                    }
                    case 3: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3502,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-2.4000000,1.3500000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Doherty");
                        MarcadoTransportistaGPS(playerid,-2097.1208,208.2063,35.3177,7.0);
                    }
                    case 4: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(684,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(684,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.4162200,-1.6781400,0.0417000,180.0000000,178.0000000,0.0000000);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), 0.3304200,-1.6368600,0.0417000,0.0000000,4.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el aserradero de Flint Country");
                        MarcadoTransportistaGPS(playerid,-267.1364,-2151.0940,28.8347,7.0);
                    }
                    case 5: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2934,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0150000,-1.2660000,1.1910000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el puerto de Easter Basin");
                        MarcadoTransportistaGPS(playerid,-1733.7360,184.4388,3.5547,7.0);
                    }
                    case 6: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(934,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0916400,-0.7947100,1.0587000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el deposito ferroviario de Sobell Rail Yards");
                        MarcadoTransportistaGPS(playerid,2811.3918,1654.1230,10.8203,7.0);
                    }
                    case 7: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3502,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-2.4000000,1.3500000,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en la obra de construcción de Starfish Casino");
                        MarcadoTransportistaGPS(playerid,2415.1252,1893.7064,6.0156,7.0);
                    }
                    case 8: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3273,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0711300,-1.5323400,-0.2663500,0.0000000,0.0000000,0.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en la central eléctrica de Bone Country");
                        MarcadoTransportistaGPS(playerid,789.2708,2028.4414,6.7109,7.0);
                    }
                    case 9: {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2785,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-1.2750000,0.5999990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el casino Caligula de Caligula's Palace");
                        MarcadoTransportistaGPS(playerid,2316.5032,1733.3368,10.8203,7.0);
                    }
                    case 10:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(2785,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.0000000,-1.2750000,0.5999990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el depósito de The Four Dragons Casino");
                        MarcadoTransportistaGPS(playerid,1905.8856,958.5278,10.8203,7.0);
                    }
                    case 11:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(3585,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), -0.0167000,-1.7397000,1.3390000,0.0000000,0.0000000,90.0000000);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el puerto de Ocean Docks");
                        MarcadoTransportistaGPS(playerid,2609.3381,-2202.1799,13.5469,7.0);
                    }
                    case 12:    {
                        Transportistas[playerid][Objeto1] = CreateDynamicObject(1348,0,0,-1000,0,0,0);
                        Transportistas[playerid][Objeto2] = CreateDynamicObject(1348,0,0,-1000,0,0,0);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto1], GetPlayerVehicleID(playerid), 0.5249990,-2.1000000,0.4499990,-0.0000010,0.0000000,89.0999830);
                        AttachDynamicObjectToVehicle(Transportistas[playerid][Objeto2], GetPlayerVehicleID(playerid), -0.5249990,-2.1000000,0.4499990,-0.0000010,0.0000000,89.0999830);
                        SendClientMessage(playerid,-1,"El camión fue {f21111}cargado correctamente{FFFFFF}, entrega la carga en el hospital de Las Venturas Airport");
                        MarcadoTransportistaGPS(playerid,1607.8633,1718.3813,10.8203,7.0);
                    }
                }
                tviaje[playerid] = 2;
            }
        }
    }
    return 1;
}
public RemoveReport(playerid,id)
{
	Reportado[playerid][id] = INVALID_PLAYER_ID;
}

public TextoMrBeast(playerid)
{
	new texto = random(7);
	switch(texto)
	{
		case 0: SetPlayerChatBubble(playerid, "Bienvenido a RootZone!!.", COLOR_WHITE, 30.0, 5000);
		case 1: SetPlayerChatBubble(playerid, "Toma una bicicleta.", COLOR_WHITE, 30.0, 5000);
		case 2: SetPlayerChatBubble(playerid, "Cuantas personas tan lindas!!", COLOR_WHITE, 30.0, 5000);
		case 3: SetPlayerChatBubble(playerid, "Uff que facha te traes amigo", COLOR_WHITE, 30.0, 5000);
		case 4: SetPlayerChatBubble(playerid, "Que cara de mierda te traes", COLOR_WHITE, 30.0, 5000);
		case 5: SetPlayerChatBubble(playerid, "Anda cara verga vete ya coño!!.", COLOR_WHITE, 30.0, 5000);
		case 6: SetPlayerChatBubble(playerid, "Disfruta del servidor!!.", COLOR_WHITE, 30.0, 5000);
	}
	return 1;
}
public TextoMarcelo(playerid)
{
	new texto = random(7);
	switch(texto)
	{
		case 0: SetPlayerChatBubble(playerid, "No puede pasar, personal autorizado solamente.", COLOR_WHITE, 30.0, 5000);
		case 1: SetPlayerChatBubble(playerid, "Fuego a discreción, disparar a matar.", COLOR_WHITE, 30.0, 5000);
		case 2: SetPlayerChatBubble(playerid, "Si no se va en este momento, tendré que llevarlo al calabozo.", COLOR_WHITE, 30.0, 5000);
		case 3: SetPlayerChatBubble(playerid, "¡Salga de aquí ahora mismo!", COLOR_WHITE, 30.0, 5000);
		case 4: SetPlayerChatBubble(playerid, "Largo, ¡vete!", COLOR_WHITE, 30.0, 5000);
		case 5: SetPlayerChatBubble(playerid, "Señor, salga de aquí.", COLOR_WHITE, 30.0, 5000);
		case 6: SetPlayerChatBubble(playerid, "Puede pasar.", COLOR_WHITE, 30.0, 5000);
	}
	return 1;
}
public TextoBrayan(playerid)
{
	new texto = random(7);
	switch(texto)
	{
		case 0: SetPlayerChatBubble(playerid, "Andate noma pibe.", COLOR_WHITE, 30.0, 5000);
		case 1: SetPlayerChatBubble(playerid, "Cuidado no vallas a ser kana.", COLOR_WHITE, 30.0, 5000);
		case 2: SetPlayerChatBubble(playerid, "Shhh pibe toma.", COLOR_WHITE, 30.0, 5000);
		case 3: SetPlayerChatBubble(playerid, "Dale veni gato", COLOR_WHITE, 30.0, 5000);
		case 4: SetPlayerChatBubble(playerid, "Viva RootZone pa", COLOR_WHITE, 30.0, 5000);
		case 5: SetPlayerChatBubble(playerid, "Busco novia.", COLOR_WHITE, 30.0, 5000);
		case 6: SetPlayerChatBubble(playerid, "Mama tengo hambre!!.", COLOR_WHITE, 30.0, 5000);
	}
	return 1;
}

public CurandoHospital(playerid)
{
	if(ValueTimerBugH[playerid] == 0)
	{
		if(PLAYER_INFO[playerid][j_HEALTH] < 100)
		{
			GivePlayerHealth(playerid, 2.0);
			
			if(GetPlayerAnimationIndex(playerid) != 695) ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0,1);
		}
		else
		{
			new Float:Angle;
			if(PLAYER_INFO[playerid][j_HEALTH] > 100) SetPlayerHealthEx(playerid, 100);
			HCalculo[playerid] = 0;
			GetPlayerFacingAngle(playerid, Angle);
			SetPlayerFacingAngle(playerid, Angle + 180);
			
			ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",3.00,0,0,0,0,0,1);

			ValueTimerBugH[playerid] = 1;
			KillTimer(HCurando[playerid]);
			
			switch(FabricaMedica[playerid])
			{
				case 0:
				{
					KillTimer(HCurando[playerid]);
					SendClientMessage(playerid,-1,"Ya te has recuperado completamente, puedes ir a tu casa.");
					switch(PLAYER_INFO[playerid][enHospital])
					{
						case 1: {
							CamillaLS[PLAYER_INFO[playerid][pCama]-1] = 0;
							PLAYER_INFO[playerid][pCama] = 0;
						}
						case 2: {
							CamillaSF[PLAYER_INFO[playerid][pCama]-1] = 0;
							PLAYER_INFO[playerid][pCama] = 0;
						}
						case 3: {
							CamillaLV[PLAYER_INFO[playerid][pCama]-1] = 0;
							PLAYER_INFO[playerid][pCama] = 0;
						}
						case 4: {
							CamillaGA[PLAYER_INFO[playerid][pCama]-1] = 0;
							PLAYER_INFO[playerid][pCama] = 0;
						}
					}
					PLAYER_INFO[playerid][pCama] = 0;
				}
				case 1:
				{
				    if(IsValidDynamicActor(FABRICAS_INFO[FabricaMedicaID[playerid]][f_ACTORES][10]))
					{
					    SetDynamicActorPos(FABRICAS_INFO[FabricaMedicaID[playerid]][f_ACTORES][10], -2022.5638,215.6430,1035.8162);
						SetDynamicActorFacingAngle(FABRICAS_INFO[FabricaMedicaID[playerid]][f_ACTORES][10], 302.6615);
                        ApplyDynamicActorAnimation(FABRICAS_INFO[FabricaMedicaID[playerid]][f_ACTORES][10], "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
					}
					SendClientMessage(playerid,-1,"Tu recuperación fue un éxito, puedes volver a trabajar.");
					FabricaMedicaID[playerid] = 0;
					FabricaMedica[playerid] = 0;
				}
			}
		}
	}
	return 0;
}
forward CheckSobeit(playerid);
public CheckSobeit(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.8)
    {
        TogglePlayerControllable(playerid, 1);
        new string[128];
        new DNSME[MAX_PLAYER_NAME];GetPlayerName(playerid, DNSME, sizeof DNSME);
        format(string, sizeof string, "%s Se conectó con Sobeit y fue kickeado.", DNSME);
        MensajeAdmin(COLOR_GREY, string, 3);
        new String[1000];
        format(String, sizeof(String), "{FF0000}Usted logueo con S0B31T.\n{FF0000}# {FFFFFF} Anti-S0B31T {FF0000} RZ:RP.\n{FF0000}discord.gg/DcZmpwU45q");
        ShowPlayerDialog(playerid, INVENTARIO, DIALOG_STYLE_MSGBOX, "{FF0000}# {FFFFFF}Root Zone Roleplay", String, "Ok", "Sair");
        Kick(playerid);
    }
    else
    {
        TogglePlayerControllable(playerid, 1);
    }
    return 1;
}
public DescongelarCBUG(playerid)
{
	TogglePlayerControllable(playerid,1);
	SetPVarInt(playerid, "IsFrozen", 1);
}
public MostrarLuegoDe(playerid)
{
	TextDrawShowForPlayer(playerid, LuegoDe);
	TextDrawShowForPlayer(playerid, Completonegro);
	SetTimerEx("OcultarLuegoDe",3000,false,"d",playerid);
	return 1;
}
LlevarClubPrivada(playerid,club)
{
	if(EnClub[playerid] == 0)
	{

		NoTeleportHack(playerid);
		EnClub[playerid] = club;
		SetPlayerVirtualWorld(playerid,playerid+999);
		SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219);
		SetPlayerFacingAngle(playerid,143.2940);
		SetPlayerInterior(playerid,2);
		ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1,0);
		return 1;
	}
	return true;
}
public LlevarClub(playerid,club)
{
	if(EnClub[playerid] == 0)
	{

		NoTeleportHack(playerid);
		EnClub[playerid] = club;
		SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219);
		SetPlayerFacingAngle(playerid,143.2940);
		SetPlayerInterior(playerid,2);
		ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1,0);
		return 1;
	}
	return 1;
}
public ProstitutaJugador(playerid)
{
	new elactor,laafinidad;
	if(EnClub[playerid] > 0)
	{

		switch(EnClub[playerid])
		{

			case 1: elactor = Stripx[2],laafinidad = PLAYER_INFO[playerid][pAfinidad1];
			case 2: elactor = Stripx[8],laafinidad = PLAYER_INFO[playerid][pAfinidad2];
			case 3: elactor = Stripx[4],laafinidad = PLAYER_INFO[playerid][pAfinidad3];
			case 4: elactor = Stripx[9],laafinidad = PLAYER_INFO[playerid][pAfinidad4];
			case 5: elactor = Stripx[7],laafinidad = PLAYER_INFO[playerid][pAfinidad5];
			case 6: elactor = Stripx[3],laafinidad = PLAYER_INFO[playerid][pAfinidad6];
		}
		if(laafinidad < 45) //Baja
		{

			ContadorBaile[playerid] ++;
			switch(ContadorBaile[playerid])
			{

				case 1: SetActorVirtualWorld(elactor,GetPlayerVirtualWorld(playerid)),ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 4: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 7: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 12: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 15: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 20: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 23: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 28: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 31: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 36: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 39: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 43: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 48: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 51: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 56: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 59: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 63: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 68: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 71: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 76: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 79: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 81: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 86: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 89: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 91: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 96: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 99: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 101: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
				case 106: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,5,1,1,0);
				case 111: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,5,1,1,0);
			}
			switch(ContadorBaile[playerid])
			{

				case 1: SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219),ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,0,0,0,segundos(2),0);
				case 2..112: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 113:
				{

					if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
					SacarClub(playerid);
					KillTimer(PLAYER_TIMES[playerid][TiempoSacarClub]);
					ContadorBaile[playerid] = 0;
					return 1;
				}
			}
		}
		else if(laafinidad >= 45) //ALTA
		{

			ContadorBaile[playerid] ++;
			switch(ContadorBaile[playerid])
			{

				case 1: SetActorVirtualWorld(elactor,GetPlayerVirtualWorld(playerid)),ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
				case 4: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,4,1,1,0);
				case 8: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
				case 12: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
				case 16: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
				case 20: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
				case 24: ApplyActorAnimation(elactor, "STRIP","strip_G",4.1,1,0,4,1,0);
				case 28: ApplyActorAnimation(elactor, "STRIP","STR_Loop_A",4.1,1,0,4,1,0);
				case 31:
				{

					if(!IsValidDynamicObject(Dildo[playerid])) Dildo[playerid] = CreateDynamicObject(322, 1204.274048, 17.332500, 1000.546997, 30.000000, 0.000000, 0.000000, GetPlayerVirtualWorld(playerid), -1);
					ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
					Streamer_Update(playerid,0);
				} //ATTACH DILDO
				case 32: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_START_W",3.9,1,0,5,3500,0);
				case 35..46: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
				case 47: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
				case 50..61: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
				case 62: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
				case 65..76: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
				case 77: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
				case 80..91: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
				case 92: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
				case 95..106: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_LOOP_W",4.1,1,0,0,1,0);
				case 107: ApplyActorAnimation(elactor, "BLOWJOBZ", "BJ_COUCH_END_W",4.1,0,0,5,1,0);
			}
			switch(ContadorBaile[playerid])
			{

				case 1: SetPlayerPosEx(playerid,1204.0209,16.9452,1000.9219),ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,0,0,0,segundos(2),0);
				case 2..46: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 47: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
				case 50..61: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 62: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
				case 64..76: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 77: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
				case 80..91: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 92: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.8,0,0,0,0,segundos(4),0);
				case 95..106: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,0,0,segundos(1),0,0);
				case 107:ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",3.5,0,0,0,0,segundos(10),0);
				case 113:
				{

					if(IsValidDynamicObject(Dildo[playerid])) DestroyDynamicObject(Dildo[playerid]);
					SacarClub(playerid);
					KillTimer(PLAYER_TIMES[playerid][TiempoSacarClub]);
					ContadorBaile[playerid] = 0;
					return 1;
				}
			}
		}
		PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
	}
	return true;
}
SacarClubLogeado(playerid)
{
	NoTeleportHack(playerid);
	SetPlayerPosEx(playerid,1204.8300,12.6649,1000.9219);
	SetPlayerFacingAngle(playerid,143.0000);
	SetPlayerInterior(playerid,2);
	SetPlayerVirtualWorld(playerid,5);
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	EnClub[playerid] = 0;
	return true;
}
public SacarClub(playerid)
{
	if(EnClub[playerid] > 0)
	{

		new elactor,elactor2;
		switch(EnClub[playerid])
		{

			case 1: elactor2 = Strips[2];
			case 2: elactor2 = Strips[8];
			case 3: elactor2 = Strips[4];
			case 4: elactor2 = Strips[9];
			case 5: elactor2 = Strips[7];
			case 6: elactor2 = Strips[3];
		}
		switch(EnClub[playerid])
		{

			case 1: elactor = Stripx[2];
			case 2: elactor = Stripx[8];
			case 3: elactor = Stripx[4];
			case 4: elactor = Stripx[9];
			case 5: elactor = Stripx[7];
			case 6: elactor = Stripx[3];
		}
		LeaveDancer(EnClub[playerid]);
		ClearActorAnimations(elactor);
		SetActorVirtualWorld(elactor,9999);
		SetActorVirtualWorld(elactor2,5);
		NoTeleportHack(playerid);
		SetPlayerPosEx(playerid,1204.8300,12.6649,1000.9219);
		SetPlayerFacingAngle(playerid,143.0000);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,5);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		EnClub[playerid] = 0;
		return 1;
	}
	return 1;
}
public LeaveDancer(id)
{
	switch(id)
	{

		case 1: { SetActorVirtualWorld(Strips[2], 5),Bailarina1 = 0; }
		case 2:	{ SetActorVirtualWorld(Strips[8], 5),Bailarina2 = 0; }
		case 3:	{ SetActorVirtualWorld(Strips[4], 5),Bailarina3 = 0; }
		case 4: { SetActorVirtualWorld(Strips[4], 5),Bailarina4 = 0; }
		case 5:	{ SetActorVirtualWorld(Strips[7], 5),Bailarina5 = 0; }
		case 6:	{ SetActorVirtualWorld(Strips[3], 5),Bailarina6 = 0; }
	}
}
public OcultarLuegoDe(playerid)
{
	TextDrawHideForPlayer(playerid, LuegoDe);
	TextDrawHideForPlayer(playerid, Completonegro);
	return 1;
}
public pVomitar(playerid)
{
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
	PLAYER_INFO[playerid][pHambre] += 10;
	PLAYER_INFO[playerid][pSed] += 20;
	
	BarraHambre(playerid);
	BarraSed(playerid);
	return 1;
}
public MostrarAfinidad(playerid)
{
	TextDrawShowForPlayer(playerid, Cuadroputi);
	TextDrawShowForPlayer(playerid, Cuadroputi1);
	TextDrawShowForPlayer(playerid, PuticlubMedia);
	TextDrawShowForPlayer(playerid, PuticlubAlta);
	TextDrawShowForPlayer(playerid, FlechasArribaPuti);
	TextDrawShowForPlayer(playerid, FlechasArribaPuti2);
	PlayerTextDrawShow(playerid, LineasPutiNivel[playerid]);
	PlayerTextDrawShow(playerid, AfinidadconX[playerid]);
	return 1;
}
public OcultarAfinidad(playerid)
{
	TextDrawHideForPlayer(playerid, Cuadroputi);
	TextDrawHideForPlayer(playerid, Cuadroputi1);
	PlayerTextDrawHide(playerid, AfinidadconX[playerid]);
	PlayerTextDrawHide(playerid, LineasPutiNivel[playerid]);
	TextDrawHideForPlayer(playerid, PuticlubMedia);
	TextDrawHideForPlayer(playerid, PuticlubAlta);
	TextDrawHideForPlayer(playerid, FlechasArribaPuti);
	TextDrawHideForPlayer(playerid, FlechasArribaPuti2);
	return 1;
}
public MoverAvion()
{
	MoveObject(avion[0], 172.6095, -2180.5474, 1954.9325, 12.0);
	MoveObject(avion[1], 172.6095, -2180.5474, 1954.9325, 12.0);
	return 1;
}
public Revisado(playerid,id)
{
	new var;
	new Float:CPos[3],Float:CPos2[3],Float:CPos3[3],Float:CPos4[3], string[200];
	GetVehiclePos(autos[id], CPos[0],CPos[1],CPos[2]);
	GetVehiclePos(autos2[id], CPos2[0],CPos2[1],CPos2[2]);
	GetVehiclePos(autos3[id], CPos3[0],CPos3[1],CPos3[2]);
	GetVehiclePos(autos4[id], CPos4[0],CPos4[1],CPos4[2]);
	if(IsPlayerInRangeOfPoint(playerid, 4.0,CPos[0],CPos[1],CPos[2])) var = autos[id];
	else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos2[0],CPos2[1],CPos2[2])) var = autos2[id];
	else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos3[0],CPos3[1],CPos3[2])) var = autos3[id];
	else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos4[0],CPos4[1],CPos4[2])) var = autos4[id];
	else
	{

		TimerRevisar[playerid] = 0;
		HidePlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
		KillTimer(PLAYER_TIMES[playerid][TimerRevisando]);
		SendClientMessage(playerid, -1, "Tienes que estar más cerca del baúl.");
		return 1;
	}
	if(PLAYER_TIMES[playerid][RevisadoTime] > 5)
	{

		HidePlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
		KillTimer(PLAYER_TIMES[playerid][TimerRevisando]);
		PLAYER_TIMES[playerid][RevisadoTime] = 0;
		TimerRevisar[playerid] = 0;
		if(Baul[var] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			VerBaul[playerid] = id;
			new counter = 4,contador = 1;
			if(BAUL6(var)) counter = 6;
			if(BAUL8(var)) counter = 8;
			if(MOTO(var)) counter = 0;
			if(PLAYER_INFO[VerBaul[playerid]][pVIP] == 1 && !MOTO(var)) counter += 1;
			if(PLAYER_INFO[VerBaul[playerid]][pVIP] >= 2 && !MOTO(var)) counter += 2;
			
			counter = counter/2;
			for(new i = 1; i <= counter; i++)
			{

				format(string, sizeof(string), "Lugar {009AFF}%d{FFFFFF}: %s {f21111}| Lugar {009AFF}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[var][contador]),contador+1,GetWeaponNameEx(EspacioBaul[var][contador+1]));
				SendClientMessage(playerid,-1,string);
				contador += 2;
			}
			SendClientMessage(playerid,0xAFAFAFFF,string);
		}
		else return SendClientMessage(playerid,-1,"Han cerrado el baul del vehículo");
	}
	else
	{

		KillTimer(PLAYER_TIMES[playerid][TimerRevisando]);
		PLAYER_TIMES[playerid][TimerRevisando] = SetTimerEx("Revisado",1000,false,"dd",playerid,id);
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Revisar],PLAYER_TIMES[playerid][RevisadoTime]);
		ShowPlayerProgressBar(playerid,Progressbar[playerid][Revisar]);
		PLAYER_TIMES[playerid][RevisadoTime] ++;
	}
	return 1;
}
public QuitarReporte(playerid)
{
	if(reportar[playerid] != INVALID_PLAYER_ID)
	{
		reportar[playerid] = INVALID_PLAYER_ID;
	}
}
public CerrarPuerta()
{
	EscaparLabel[0] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2396.0605,-14.3567,36.0650,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta = 0;
	MoveDynamicObject(PuertasRobo[0], -2277.5667, -9.4666, 37.2482, 100.0, 0.0000, 0.0000, 269.1064);
}
public CerrarPuerta2()
{
	EscaparLabel[4] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,932.2437,1975.8787,11.6227,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta2 = 0;
	MoveDynamicObject(PuertasRobo[1], 931.28186, 1974.06372, 10.61430, 100.0,   0.00000, 0.00000, 0.00000);
}
public CerrarPuerta3()
{
	EscaparLabel[1] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2396.0010,-13.0565,35.3486,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta3 = 0;
	MoveDynamicObject(PuertasRobo[2],  -2395.2427, -15.0817, 34.9091, 100.0,  0.00000, 0.00000, 90.3030);
}
public CerrarPuerta4()
{
	EscaparLabel[2] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,2373.7302,-1136.8610,30.0583,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta4 = 0;
	MoveDynamicObject(PuertasRobo[3], 2373.0024, -1138.5510, 29.0312, 100.0, 0.0000, 0.0000, 0.0000);
}
public CerrarPuerta5()
{
	EscaparLabel[5] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2729.9800,-50.8513,7.0453,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta5 = 0;
	MoveDynamicObject(PuertasRobo[4], -2728.5708, -50.4009, 6.0173, 100.0, 0.0000, 0.0000, 269.9401);
}
public CerrarPuerta6()
{
	EscaparLabel[6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2729.9695,-155.6657,7.2174,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta6 = 0;
	MoveDynamicObject(PuertasRobo[5],-2728.5442, -155.0267, 6.2020, 100.0, 0.0000, 0.0000, 269.8600);
}
public CerrarPuerta7()
{
	EscaparLabel[8] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1762.7701,-2098.9631,13.9989,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C7
	CasaAbierta7 = 0;
	MoveDynamicObject(PuertasRobo[6],1762.12488, -2100.72290, 12.96590, 100.0, 0.00000, 0.00000, 0.00000);
}
public CerrarPuerta8()
{
	EscaparLabel[7] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,2485.8972,-1997.1792,14.0414,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta8 = 0;
	MoveDynamicObject(PuertasRobo[7],2485.149902, -1997.630005, 13.030000, 100.0, 0.0000, 0.0000,0.00000);
}
public CerrarPuerta9()
{
	EscaparLabel[9] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1841.8738,770.7863,11.5959,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C9
	CasaAbierta9 = 0;
	MoveDynamicObject(PuertasRobo[8],1844.1000, 770.1200, 10.4400, 100.0, 0.0000, 0.0000, 90.0000);
}
public CerrarPuerta10()
{
	EscaparLabel[3] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-1449.7598,2647.9287,56.5345,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CasaAbierta10 = 0;
	MoveDynamicObject(PuertasRobo[9],-1449.19824, 2647.20459, 55.48900, 100.0,  0.00000, 0.00000, 90.00000);
}
public CerrarPuerta11()
{
	EscaparLabel[10] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1344.4647,2612.5925,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C11
	CasaAbierta11 = 0;
	MoveDynamicObject(PuertasRobo[10],1343.9200, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 0.0000);
}
public CerrarPuerta12()
{
	EscaparLabel[11] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1666.9180,2612.6965,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C12
	CasaAbierta12 = 0;
	MoveDynamicObject(PuertasRobo[11],1666.2400, 2610.7400, 10.4000, 100.0, 0.0000, 0.0000, 0.0000);
}
public ColgarLlamada(playerid)
{
	if(PLAYER_INFO[playerid][MobileSub] == 2540)
	{
		Mobile2[playerid] = 0;
		SendClientMessage(playerid,-1,"Colgaron la llamada.");
		finllamada(playerid);
	}
}
public CurarON(playerid)
{
	Curando[playerid] = 1;
}
public CargarCasa1()
{
	if(!IsValidDynamicObject(ObjetoRobo[0])) ObjetoRobo[0] = CreateDynamicObject(1429, -2280.60376, -14.82680, 38.03000,   0.00000, 0.00000, 70.61990);
	if(!IsValidDynamicObject(ObjetoRobo[1])) ObjetoRobo[1] = CreateDynamicObject(1518, -2280.63721, -16.44526, 38.05420,   0.00000, 0.00000, 120.36000);
	if(!IsValidDynamicObject(ObjetoRobo[2])) ObjetoRobo[2] = CreateDynamicObject(2912, -2278.36792, -14.86620, 37.29990,   0.00000, 0.00000, -1.62000);
	if(!IsValidDynamicObject(ObjetoRobo[3])) ObjetoRobo[3] = CreateDynamicObject(2190, -2280.72827, -15.26394, 37.77455,   0.00000, 0.00000, 50.69999);
	if(!IsValidDynamicObject(ObjetoRobo[4])) ObjetoRobo[4] = CreateDynamicObject(1788, -2280.53418, -16.19723, 37.44304,   0.00000, 0.00000, -49.37999);
	if(!IsValidDynamicObject(ObjetoRobo[5])) ObjetoRobo[5] = CreateDynamicObject(1790, -2280.39893, -14.92786, 37.45214,   0.00000, 0.00000, 88.37997);
	if(!IsValidDynamicObject(ObjetoRobo[6])) ObjetoRobo[6] = CreateDynamicObject(2028, -2278.22900, -16.77450, 37.40304,   0.00000, 0.00000, 0.00000);
	Forzada1 = 0;
}
public CargarCasa2()
{
	if(!IsValidDynamicObject(ObjetoRobo[7])) ObjetoRobo[7] = CreateDynamicObject(1429, 942.56305, 1976.67395, 11.34690,   0.00000, 0.00000, -62.10000);
	if(!IsValidDynamicObject(ObjetoRobo[8])) ObjetoRobo[8] = CreateDynamicObject(1518, 942.44531, 1974.96301, 11.42232,   0.00000, 0.00000, -112.56001);
	if(!IsValidDynamicObject(ObjetoRobo[9])) ObjetoRobo[9] = CreateDynamicObject(2912, 939.79364, 1974.82947, 10.62529,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[10])) ObjetoRobo[10] = CreateDynamicObject(1788, 942.32104, 1976.73279, 10.83022,   0.00000, 0.00000, -85.32000);
	if(!IsValidDynamicObject(ObjetoRobo[11])) ObjetoRobo[11] = CreateDynamicObject(1790, 942.38721, 1975.06116, 10.73031,   0.00000, 0.00000, -90.17999);
	if(!IsValidDynamicObject(ObjetoRobo[12])) ObjetoRobo[12] = CreateDynamicObject(2028, 940.09308, 1977.05005, 10.82510,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[13])) ObjetoRobo[13] = CreateDynamicObject(2190, 939.99139, 1977.32190, 11.11951,   0.00000, 0.00000, 0.00000);
	Forzada2 = 0;
}
public CargarCasa3()
{
	if(!IsValidDynamicObject(ObjetoRobo[14])) ObjetoRobo[14] = CreateDynamicObject(1429, -2394.2876, -19.4195, 36.0900,   0.00000, 0.00000, 180.00000);
	if(!IsValidDynamicObject(ObjetoRobo[15])) ObjetoRobo[15] = CreateDynamicObject(1518, -2397.3396, -16.3303, 36.9830,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[16])) ObjetoRobo[16] = CreateDynamicObject(2912, -2395.1929, -19.5658, 34.9895,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[17])) ObjetoRobo[17] = CreateDynamicObject(2190, -2396.2659, -16.0642, 36.6930,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[18])) ObjetoRobo[18] = CreateDynamicObject(1788, -2396.7344, -16.3155, 35.9279,   0.00000, 0.00000, 180.00000);
	if(!IsValidDynamicObject(ObjetoRobo[19])) ObjetoRobo[19] = CreateDynamicObject(2028, -2397.2722, -16.2995, 35.4529,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[20])) ObjetoRobo[20] = CreateDynamicObject(1790, -2396.1167, -16.3145, 35.4559,   0.00000, 0.00000, 180.00000);
	Forzada3 = 0;
}
public CargarCasa4()
{
	if(!IsValidDynamicObject(ObjetoRobo[21])) ObjetoRobo[21] = CreateDynamicObject(1429, 2368.61401, -1131.40259, 30.97320,   0.00000, 0.00000, 160.32001);
	if(!IsValidDynamicObject(ObjetoRobo[22])) ObjetoRobo[22] = CreateDynamicObject(1518, 2370.30200, -1131.43127, 30.97320,   0.00000, 0.00000, 201.35999);
	if(!IsValidDynamicObject(ObjetoRobo[23])) ObjetoRobo[23] = CreateDynamicObject(2912, 2370.40674, -1129.14221, 28.96821,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[24])) ObjetoRobo[24] = CreateDynamicObject(2190, 2369.12378, -1131.64221, 30.68020,   0.00000, 0.00000, 164.82001);
	if(!IsValidDynamicObject(ObjetoRobo[25])) ObjetoRobo[25] = CreateDynamicObject(1788, 2368.51880, -1131.42798, 29.94000,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[26])) ObjetoRobo[26] = CreateDynamicObject(2028, 2370.12720, -1131.46106, 29.94000,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[27])) ObjetoRobo[27] = CreateDynamicObject(1790, 2369.39893, -1131.51331, 29.46600,   0.00000, 0.00000, 0.00000);
	Forzada4 = 0;
}
public CargarCasa5()
{
	if(!IsValidDynamicObject(ObjetoRobo[28])) ObjetoRobo[28] = CreateDynamicObject(1429, -2730.06982, -59.74450, 7.20490,   0.00000, 0.00000, 196.14000);
	if(!IsValidDynamicObject(ObjetoRobo[29])) ObjetoRobo[29] = CreateDynamicObject(1518, -2731.72534, -59.64209, 7.20490,   0.00000, 0.00000, 178.20003);
	if(!IsValidDynamicObject(ObjetoRobo[30])) ObjetoRobo[30] = CreateDynamicObject(2912, -2731.85327, -57.35418, 6.03176,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[31])) ObjetoRobo[31] = CreateDynamicObject(2190, -2731.16846, -59.89901, 6.93235,   0.00000, 0.00000, 174.30002);
	if(!IsValidDynamicObject(ObjetoRobo[32])) ObjetoRobo[32] = CreateDynamicObject(1788, -2730.06030, -59.85120, 6.16510,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[33])) ObjetoRobo[33] = CreateDynamicObject(2028, -2730.97656, -59.74975, 6.60280,   0.00000, 0.00000, -2.40000);
	if(!IsValidDynamicObject(ObjetoRobo[34])) ObjetoRobo[34] = CreateDynamicObject(1790, -2731.64380, -59.69650, 6.16510,   0.00000, 0.00000, -5.64000);
	Forzada5 = 0;
}
public CargarCasa6()
{
	if(!IsValidDynamicObject(ObjetoRobo[35])) ObjetoRobo[35] = CreateDynamicObject(1429, -2731.07056, -164.54240, 7.68000,   0.00000, 0.00000, 196.80000);
	if(!IsValidDynamicObject(ObjetoRobo[36])) ObjetoRobo[36] = CreateDynamicObject(1518, -2732.74170, -164.46756, 7.68000,   0.00000, 0.00000, 164.58005);
	if(!IsValidDynamicObject(ObjetoRobo[37])) ObjetoRobo[37] = CreateDynamicObject(2912, -2733.24390, -163.87219, 6.20990,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[38])) ObjetoRobo[38] = CreateDynamicObject(2190, -2732.13647, -164.68983, 7.42307,   0.00000, 0.00000, 182.57997);
	if(!IsValidDynamicObject(ObjetoRobo[39])) ObjetoRobo[39] = CreateDynamicObject(1788, -2731.10449, -164.46933, 7.08504,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[40])) ObjetoRobo[40] = CreateDynamicObject(2028, -2731.81323, -164.44690, 6.67120,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[41])) ObjetoRobo[41] = CreateDynamicObject(1790, -2732.57373, -164.33932, 7.12180,   0.00000, 0.00000, 0.00000);
	Forzada6 = 0;
}
public CargarCasa7()
{
	if(!IsValidDynamicObject(ObjetoRobo[42])) ObjetoRobo[42] = CreateDynamicObject(1429, 1758.10046, -2094.56860, 14.84190,   0.00000, 0.00000, 181.00000);
	if(!IsValidDynamicObject(ObjetoRobo[43])) ObjetoRobo[43] = CreateDynamicObject(1518, 1757.27979, -2094.54028, 14.86940,   0.00000, 0.00000, 185.00000);
	if(!IsValidDynamicObject(ObjetoRobo[44])) ObjetoRobo[44] = CreateDynamicObject(2912, 1756.40784, -2093.84546, 12.97720,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[45])) ObjetoRobo[45] = CreateDynamicObject(2190, 1756.16321, -2094.66846, 14.58550,   0.00000, 0.00000, 160.00000);
	if(!IsValidDynamicObject(ObjetoRobo[46])) ObjetoRobo[46] = CreateDynamicObject(1788, 1757.77637, -2094.57056, 14.23650,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[47])) ObjetoRobo[47] = CreateDynamicObject(2028, 1756.81677, -2094.56934, 14.25400,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[48])) ObjetoRobo[48] = CreateDynamicObject(1790, 1757.29041, -2094.61108, 13.80020,   0.00000, 0.00000, 0.00000);
	Forzada7 = 0;
}
public CargarCasa9()
{
	if(!IsValidDynamicObject(ObjetoRobo[49])) ObjetoRobo[49] = CreateDynamicObject(1429, 1841.54749, 768.94519, 12.49500,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[50])) ObjetoRobo[50] = CreateDynamicObject(1518, 1842.49048, 768.88428, 12.51880,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[51])) ObjetoRobo[51] = CreateDynamicObject(2912, 1843.43506, 768.10840, 10.54610,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[52])) ObjetoRobo[52] = CreateDynamicObject(2190, 1843.46643, 769.13379, 12.23620,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[53])) ObjetoRobo[53] = CreateDynamicObject(1788, 1842.00537, 768.90112, 11.88750,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[54])) ObjetoRobo[54] = CreateDynamicObject(2028, 1843.04565, 769.07501, 11.90490,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[55])) ObjetoRobo[55] = CreateDynamicObject(1790, 1842.38196, 769.15088, 11.42320,   0.00000, 0.00000, 0.00000);
	Forzada9 = 0;
}
public CargarCasa11()
{
	if(!IsValidDynamicObject(ObjetoRobo[56])) ObjetoRobo[56] = CreateDynamicObject(1429, 1355.97156, 2613.77515, 12.45300,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[57])) ObjetoRobo[57] = CreateDynamicObject(1518, 1356.83423, 2613.72314, 12.47980,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[58])) ObjetoRobo[58] = CreateDynamicObject(2912, 1354.72119, 2613.42578, 11.02990,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[59])) ObjetoRobo[59] = CreateDynamicObject(2190, 1357.78296, 2613.98975, 12.19500,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[60])) ObjetoRobo[60] = CreateDynamicObject(1788, 1356.28943, 2613.73511, 11.84600,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[61])) ObjetoRobo[61] = CreateDynamicObject(2028, 1357.32434, 2613.74854, 11.86400,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[62])) ObjetoRobo[62] = CreateDynamicObject(1790, 1356.62915, 2613.61646, 11.40970,   0.00000, 0.00000, 0.00000);
	Forzada11 = 0;
}
public CargarCasa12()
{
	if(!IsValidDynamicObject(ObjetoRobo[63])) ObjetoRobo[63] = CreateDynamicObject(1429, 1678.29834, 2613.74878, 12.45260,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[64])) ObjetoRobo[64] = CreateDynamicObject(1518, 1679.14563, 2613.73535, 12.48270,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[65])) ObjetoRobo[65] = CreateDynamicObject(2912, 1677.09839, 2613.43970, 11.03870,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[66])) ObjetoRobo[66] = CreateDynamicObject(2190, 1680.08850, 2613.91479, 12.19470,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[67])) ObjetoRobo[67] = CreateDynamicObject(1788, 1678.56201, 2613.76880, 11.84410,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[68])) ObjetoRobo[68] = CreateDynamicObject(2028, 1679.57751, 2613.75708, 11.86450,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[69])) ObjetoRobo[69] = CreateDynamicObject(1790, 1678.98792, 2613.76904, 11.41040,   0.00000, 0.00000, 0.00000);
	Forzada12 = 0;
}
public CargarCasa8()
{
	if(!IsValidDynamicObject(ObjetoRobo[70])) ObjetoRobo[70] = CreateDynamicObject(1429, 2479.80347, -1991.63013, 14.94380,   0.00000, 0.00000, 170.00000);
	if(!IsValidDynamicObject(ObjetoRobo[71])) ObjetoRobo[71] = CreateDynamicObject(1518, 2480.99023, -1991.63306, 14.96380,   0.00000, 0.00000, 180.00000);
	if(!IsValidDynamicObject(ObjetoRobo[72])) ObjetoRobo[72] = CreateDynamicObject(2912, 2480.36865, -1989.44714, 12.98640,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[73])) ObjetoRobo[73] = CreateDynamicObject(2190, 2481.31323, -1989.23254, 12.97840,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[74])) ObjetoRobo[74] = CreateDynamicObject(1788, 2481.37158, -1991.57483, 13.46180,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[75])) ObjetoRobo[75] = CreateDynamicObject(2028, 2480.21411, -1991.66187, 13.41110,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[76])) ObjetoRobo[76] = CreateDynamicObject(1790, 2480.85669, -1991.62415, 13.92380,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[77])) ObjetoRobo[77] = CreateDynamicObject(2226, 2480.38745, -1991.64294, 14.29180,   0.00000, 0.00000, 180.00000);
	Forzada8 = 0;
}
public CargarCasa10()
{
	if(!IsValidDynamicObject(ObjetoRobo[78])) ObjetoRobo[78] = CreateDynamicObject(1429, -1449.86682, 2645.77490, 56.87230,   0.00000, 0.00000, 8.10000);
	if(!IsValidDynamicObject(ObjetoRobo[79])) ObjetoRobo[79] = CreateDynamicObject(1518, -1448.15234, 2645.76807, 56.92000,   0.00000, 0.00000, -20.88000);
	if(!IsValidDynamicObject(ObjetoRobo[80])) ObjetoRobo[80] = CreateDynamicObject(2912, -1450.80640, 2642.91479, 55.52976,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[81])) ObjetoRobo[81] = CreateDynamicObject(2190, -1447.24390, 2643.42358, 56.43425,   0.00000, 0.00000, -115.86000);
	if(!IsValidDynamicObject(ObjetoRobo[82])) ObjetoRobo[82] = CreateDynamicObject(1788, -1448.96399, 2645.68677, 56.28100,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[83])) ObjetoRobo[83] = CreateDynamicObject(2028, -1449.89099, 2645.64771, 55.88598,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[84])) ObjetoRobo[84] = CreateDynamicObject(1790, -1448.14539, 2645.64087, 55.85600,   0.00000, 0.00000, 0.00000);
	if(!IsValidDynamicObject(ObjetoRobo[85])) ObjetoRobo[85] = CreateDynamicObject(2226, -1449.01904, 2645.76733, 56.64311,   0.00000, 0.00000, 0.00000);
	Forzada10 = 0;
}
public Reparando(playerid,reparaid,vehicleid,darexp)
{
	if(darexp == 0)
	{
		new msjadm[135];
		format(msjadm, sizeof(msjadm), "%s repara su vehículo (ID: %d - Nivel: %d).", PLAYER_INFO[playerid][Nickname], playerid, PLAYER_INFO[playerid][pNivel], PLAYER_INFO[playerid][horasjugadas]);
		MensajeAdmin(COLOR_CHEAT, msjadm, 3);
		SendClientMessage(playerid,-1,"Vehículo reparado.");
	}
	AceptoRepara[reparaid] = 0;
	SetVehicleHealth(vehicleid, 1000.0);
	if(AVION(vehicleid)) RepairVehicle(vehicleid);
	TimerReparar[playerid] = 0;
	TimerReparar[reparaid] = 0;
	LoopingAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	if(darexp == 0) SacarVehiculo(playerid);
	if(darexp == 1)
	{
		if(PLAYER_INFO[playerid][pExpMecanico] < 49)
		{
			if(PLAYER_INFO[playerid][pVIP] > 0)
			{
				new pago = random(3);
				switch(pago)
				{
					case 0,1:
					{
						PLAYER_INFO[playerid][pExpMecanico]++;
						SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +1 punto de habilidad.");
					}
					case 2:
					{
						PLAYER_INFO[playerid][pExpMecanico]+= 2;
						SendClientMessage(playerid,0x0080C2FF,"Has aumentado tu experiencia con +2 punto de habilidad.");
					}
				}
			}
		}
		else if(PLAYER_INFO[playerid][pExpMecanico] >= 49)
		{
			PLAYER_INFO[playerid][pExpMecanico] = 0;
			PLAYER_INFO[playerid][pNivelMecanico]++;
			SendClientMessage(playerid,0x0080C2FF,"Felicidades, Has aumentado tu nivel de mecánico.");
		}
	}
	Descongelar(playerid);
}
public Taximetro(playerid)
{
	new veh = GetPlayerVehicleID(playerid);
	if(TAXI(veh) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_INFO[playerid][pDinero] >= Ficha[Taxista[playerid]])
		{
			new cuenta,string[256];
			if(GetVehicleSpeed(veh) > 0)
			{
				cuenta = Monto[Taxista[playerid]]+Ficha[Taxista[playerid]];
				QuitarDinero(playerid, Ficha[Taxista[playerid]]);
				DarDinero(Taxista[playerid],Ficha[Taxista[playerid]]);
				Monto[Taxista[playerid]] = cuenta;
				format(string,256,"$%d",Monto[Taxista[playerid]]);
				PlayerTextDrawSetString(playerid, TAXIMET2[playerid], string);
				PlayerTextDrawSetString(playerid, TAXIMET2[Taxista[playerid]], string);
			}
		}
		else
		{
			SendClientMessage(playerid,-1,"Te has quedado sin dinero para pagar el taxi");
			SendClientMessage(Taxista[playerid],-1,"Tu pasajero se ha quedado sin dinero");
			RemovePlayerFromVehicle(playerid);
			KillTimer(TM[playerid]);
		}
	}
	else KillTimer(TM[playerid]);
}
public LlamadaCops(playerid)
{
	new string[200];
	SendClientMessage(playerid,-1,"{3399FF}[Central de policía]{FFFFFF} Romina: Hola, ya le transfiero con un oficial, aguarde un momento por favor.");
	format(string, 200,"{3399FF}[Central de policía]{FFFFFF} Romina: Hola, %s (%d) está llamando al 911.",PLAYER_INFO[playerid][Nickname], playerid);
	SendRadioPoliceMessage(-1, string);
	SendRadioPoliceMessage(-1,"Cualquier oficial disponible, por favor {FFFF04}/atender{FFFFFF} la llamada",INVALID_PLAYER_ID);
}
public LlamadaGrua(playerid)
{
	new string[340];
	SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Hola, ¿quieres utilizar nuestro servicio de grúas?.");
	format(string,sizeof(string),"{FFFFFF}El servicio de grúa sirve para recuperar el vehículo, en caso de que haya quedado\nen un lugar inaccesible.\nPor ejemplo: en el agua, dentro del estacionamiento de una propiedad, en una pileta, etc.\n\nNota: Los jugadores {40FF00}VIP{FFFFFF} tienen este servicio de manera gratuita.\n\n{FFEE00}¿Quieres utilizar este servicio?");
	ShowPlayerDialog(playerid, DIALOGO_GRUA, DIALOG_STYLE_MSGBOX, "Información sobre el servicio de grúa",string,"Si","No");
}
public ServicioGrua1(playerid)
{
	new stringo[256];
	SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: Perfecto, ¿a dónde quiere que llevemos su vehículo?.");
	if(BOTE(autos[playerid]) || BOTE(autos2[playerid]) || BOTE(autos3[playerid]) || BOTE(autos4[playerid])) format(stringo, 256, "Ultimo lugar estacionado\nEstacionamiento municipal\nEstacionamiento marítimo.");
	else format(stringo, 256, "Ultimo lugar estacionado\nEstacionamiento municipal\nEstacionamiento marítimo\nMi posición actual");
	ShowPlayerDialog(playerid, DIALOGO_GRUA3, DIALOG_STYLE_LIST,"¿Dónde quieres que enviemos tu vehículo?",stringo,"Aceptar","Cancelar");
}
public ServicioGrua2(playerid)
{
    if(autosSpawned[playerid][0] == false&&autosSpawned[playerid][1] == false&&autosSpawned[playerid][2] == false&&autosSpawned[playerid][3] == false)
    {
  		SendClientMessage(playerid, -1, "No tienes un auto spawneado usa /vehiculos");
  		FIN_SERVI(playerid);
    	return 1;
	}
  	PANEL_GRUA(playerid);
	SendClientMessage(playerid,-1,"{33CCFF}[Servicio de grúa]{FFFFFF} Angélica: ¿Podría decirme la matrícula?");
	return 1;
}
public MINUTOSG_BONER(playerid)
{

	new Float:POS_U[4];
 	GetPlayerPos(playerid,POS_U[0],POS_U[1],POS_U[2]);
	GetPlayerFacingAngle(playerid,POS_U[3]);
	new Float:posy,Float:posz, Float:sizex, Float:sizey, Float:sizez;
	GetVehicleModelInfo(GetVehicleModel(VEHICLE_GRUA[playerid]), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
	posy = POS_U[1] - (floatsqroot(sizey + sizey + sizey) * floatsin(-POS_U[3], degrees));
	posz = POS_U[2];
	if(GetVehicleModel(VEHICLE_GRUA[playerid]) == 515) posz = POS_U[2]+1.0;
	SetPosVeh(VEHICLE_GRUA[playerid],POS_U[0],posy,posz,POS_U[3],0,0);
	PlayAudioStreamForPlayer(playerid,"http://audio1.spanishdict.com/audio?lang=es&voice=Ximena&speed=27&text=hay%20esta%20tu%20carcacha%20marica");
	SendClientMessage(playerid, -1, "Grua: Su vehículo fue trasladado exitosamente.");

	return 1;
}
public DarGasolina(driver, autoid, petroleo)
{
    if(IsPlayerInVehicle(driver, autoid) && IsPlayerConnected(driver))
    {
		if(VehicleFuel[autoid] < petroleo)
		{
			VehicleFuel[autoid]++;
		}
		else if(VehicleFuel[autoid] >= petroleo)
		{
			VehicleFuel[autoid] = petroleo;
			KillTimer(llenado[autoid]);
			TogglePlayerControllable(driver, 1);
			SetPVarInt(driver, "IsFrozen", 1);
			TimerCombustible[driver] = 0;
			PLAYER_TIMES[driver][TiempoLlenar] = gettime();
		}
	}
	return 1;
}
public Maneja(playerid)
{
	Manejando[playerid] = 0;
}
public DArmas(playerid)
{
	DarArmas(playerid);
	return 1;
}
public LlamadaAceptada(playerid)
{
	EnLlamada[playerid] = 0;
	SendClientMessage(playerid, COLOR_DORADO, "Lo estan esperando, vaya con su camión en buenas condiciones.");
	PLAYER_TEMP[playerid][pt_Transportista] = true;
	switch(Transportistas[playerid][Ruta])
	{
		case 1: MarcadoTransportistaGPS(playerid,586.4625,856.0408,-42.9917,7.0); //Cantera Hunter Quarry - Rocas a Hospital LS.
		case 2: MarcadoTransportistaGPS(playerid,1335.5570,286.8253,19.5615,7.0); //Sprunk - Montgomery a Fabrica LV.
		case 3: MarcadoTransportistaGPS(playerid,684.1342,896.0093,-39.7265,7.0); //Tubo de cantera a Obra SF
		case 4: MarcadoTransportistaGPS(playerid,-2003.7317,-2413.3181,30.6250,7.0); //Maderera Angel Pine
		case 5: MarcadoTransportistaGPS(playerid,1023.9153,2110.9341,10.8203,7.0); //Contenedor Whitewood States a Camionero
		case 6: MarcadoTransportistaGPS(playerid,-1741.5210,1425.7820,7.1875,7.0); //Galpon Explanade North
		case 7: MarcadoTransportistaGPS(playerid,305.6055,887.2976,20.4063,7.0); //Cantera Bone Country a Obra LV
		case 8: MarcadoTransportistaGPS(playerid,-2458.4258,2292.2588,4.9844,7.0); //Transformadores Bayside
		case 9: MarcadoTransportistaGPS(playerid,-2473.1599,2303.7029,4.9844,7.0); //Maquinas de casino 1
		case 10: MarcadoTransportistaGPS(playerid,-2473.1599,2303.7029,4.9844,7.0); //Maquinas de casino 2
		case 11: MarcadoTransportistaGPS(playerid,2880.5110,1751.4082,10.8203,7.0); //Vagon a LS desde LV
		case 12: MarcadoTransportistaGPS(playerid,208.3321,-28.7516,1.5781,7.0); //Bidones BlueBerry a Aereopuerto LV
	}
	tviaje[playerid] = 1;
	PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
	SendClientMessage(playerid,-1,"Cortaron la comunicación.");
	RemovePlayerAttachedObject(playerid, 7);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	Mobile2[playerid] = 0;
}
public LlamadaCancelada(playerid)
{
	EnLlamada[playerid] = 0;
	SendClientMessage(playerid, COLOR_DORADO, "Le volveremos a llamar dentro de 2 horas. (5 minutos reales)");
	PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SendClientMessage(playerid,-1,"Cortaron la comunicación.");
	RemovePlayerAttachedObject(playerid, 7);
	Mobile2[playerid] = 0;
	PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
}
public OfertaPerdida(playerid)
{
	if(ofertador[playerid] != INVALID_PLAYER_ID)
	{
		ofertador[playerid] = INVALID_PLAYER_ID;
		GuardaEspalda[playerid] = INVALID_PLAYER_ID;
		LeOfreci[playerid] = INVALID_PLAYER_ID;
	}
	return 1;
}
public TiempoVender(playerid)
{
	PLAYER_TIMES[playerid][TiempoVenta] = gettime();
}
public Autos(playerid)
{
	if(!IsPlayerConnected(playerid))	return 1;
	if(JugadorLogeado[playerid] != 1)	return 1;
	if(PLAYER_INFO[playerid][vModelo]  > 0)	Auto1(playerid, 0),LoadMaletero(playerid,autos[playerid]);
	if(PLAYER_INFO[playerid][vModelo2] > 0)	Auto2(playerid, 0),LoadMaletero(playerid,autos2[playerid]);
	if(PLAYER_INFO[playerid][vModelo3] > 0)	Auto3(playerid, 0),LoadMaletero(playerid,autos3[playerid]);
	if(PLAYER_INFO[playerid][vModelo4] > 0)	Auto4(playerid, 0),LoadMaletero(playerid,autos4[playerid]);
	if(PLAYER_INFO[playerid][vID1] != 0)
	{
		new Query[256];
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID1], MAX_OBJETOS_USERS);
		mysql_tquery(handle_db, Query, "L_Objetos", "i",autos[playerid]);
 	}
	if(PLAYER_INFO[playerid][vID2] != 0)
	{
		new Query[256];
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID2], MAX_OBJETOS_USERS);
		mysql_tquery(handle_db, Query, "L_Objetos", "i",autos2[playerid]);
 	}
	if(PLAYER_INFO[playerid][vID3] != 0)
	{
		new Query[256];
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID3], MAX_OBJETOS_USERS);
		mysql_tquery(handle_db, Query, "L_Objetos", "i",autos3[playerid]);
 	}
 	if(PLAYER_INFO[playerid][vID4] != 0)
	{
		new Query[256];
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID4], MAX_OBJETOS_USERS);
		mysql_tquery(handle_db, Query, "L_Objetos", "i",autos4[playerid]);
 	}
	return 1;
}
public Auto1(playerid, tipo)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(JugadorLogeado[playerid] != 1) return 1;
	if(PLAYER_INFO[playerid][vModelo] == 447) PLAYER_INFO[playerid][vModelo] = 469;
	if(tipo == 0)
	{
		autos[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo],PLAYER_INFO[playerid][vX],PLAYER_INFO[playerid][vY],PLAYER_INFO[playerid][vZ],PLAYER_INFO[playerid][vA],PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][vColor2],-1,0);
		LinkVehicleToInterior(autos[playerid], PLAYER_INFO[playerid][vinterior]);
		SetVehicleVirtualWorldEx(autos[playerid], PLAYER_INFO[playerid][vvw]);
		SetVehicleHealth(autos[playerid], PLAYER_INFO[playerid][pVidaV]);
		IsPlayerNearVehicle(playerid,autos[playerid]);
		ROBO_COCHE[autos[playerid]][EsRobo] = 0;
	}
	if(tipo == 3)
	{
		if(TowedCar[playerid][0] == 0) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(autos[playerid]));
		if(autos[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos[playerid]);
		autos[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo],PLAYER_INFO[playerid][pOX],PLAYER_INFO[playerid][pOY],PLAYER_INFO[playerid][pOZ],PLAYER_INFO[playerid][pOA],PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][vColor2],-1,0);
		LinkVehicleToInterior(autos[playerid], PLAYER_INFO[playerid][vOinterior]);
		SetVehicleVirtualWorldEx(autos[playerid], PLAYER_INFO[playerid][vOvw]);
		ROBO_COCHE[autos[playerid]][EsRobo] = 0;
		SetVehicleHealth(autos[playerid], PLAYER_INFO[playerid][pVidaV]);
		TowedCar[playerid][0] = 0;
	}
	else if(tipo == 2 || tipo == 6 || tipo == 7 || tipo == 8 || tipo == 9 || tipo == 10)
	{
		new floor = 1, rand,estacionamientoid;
		switch(tipo)
		{
			case 2: estacionamientoid = 4;
			case 6: estacionamientoid = 6;
		}
		if(IsValidVehicle(autos[playerid])) DestroyVehicleEx(autos[playerid]);
		switch(tipo)
		{
			case 2: rand = random(sizeof(EstacionamientoCamionero));
			default: rand = random(sizeof(EstacionamientoNormal));
		}
		switch(tipo)
		{
			case 2:
			{
				new random1 = random(10);
				new Float:Altitud;
				switch(random1)
				{
					case 0: { floor = 1; Altitud = 10.7177; }
					case 1: { floor = 2; Altitud = 14.9808; }
					case 2: { floor = 3; Altitud = 19.3031; }
					case 3: { floor = 4; Altitud = 23.5820; }
					case 4: { floor = 5; Altitud = 27.8949; }
					case 5: { floor = 6; Altitud = 32.2014; }
					case 6: { floor = 7; Altitud = 36.4815; }
					case 7: { floor = 8; Altitud = 40.8009; }
					case 8: { floor = 9; Altitud = 45.0817; }
					case 9: { floor = 10; Altitud = 49.4005; }
					default: { floor = 1; Altitud = 10.7177; }
				}
				autos[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo],EstacionamientoCamionero[rand][0],EstacionamientoCamionero[rand][1],Altitud,EstacionamientoCamionero[rand][3],PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][vColor2],-1,0);
			}
			default: autos[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo],EstacionamientoNormal[rand][0],EstacionamientoNormal[rand][1],EstacionamientoNormal[rand][2],EstacionamientoNormal[rand][3],PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][vColor2],-1,0);
		}
		if(tipo == 2) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {f21111}Easter Basin Docks",	GetVehicleName(autos[playerid]),floor);
		if(tipo == 6) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el estacionamiento de {f21111}El castillo del diablo",	GetVehicleName(autos[playerid]));
		if(tipo == 5) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue trasladado al estacionamiento del Salón de Eventos.",				GetVehicleName(autos[playerid]));
		if(tipo != 6) LinkVehicleToInterior(autos[playerid], 1);
		else LinkVehicleToInterior(autos[playerid], 30);
		if(tipo == 2) SetVehicleVirtualWorldEx(autos[playerid], 4);
		else if(tipo == 6) SetVehicleVirtualWorldEx(autos[playerid], 6);
		else SetVehicleVirtualWorldEx(autos[playerid], tipo);
		SetVehicleHealth(autos[playerid], PLAYER_INFO[playerid][pVidaV]);
		PLAYER_INFO[playerid][vEstacionado1] = estacionamientoid;
		ROBO_COCHE[autos[playerid]][EsRobo] = 0;
	}
	format(PLAYER_INFO[playerid][vpatente], 10,""SERVER_COIN"RP %d", autos[playerid]);
	autosSpawned[playerid][0] = true;
	RELOAD_TD(playerid);
 	SetVehicleNumberPlate(autos[playerid], PLAYER_INFO[playerid][vpatente]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes0]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes1]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes2]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes3]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes4]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes5]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes6]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes7]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes8]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes9]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes10]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes11]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes12]);
	AddVehicleComponent(autos[playerid], PLAYER_INFO[playerid][vComponentes13]);
	//LoadMaletero(playerid,autos[playerid]);
	VehicleFuel[autos[playerid]] = PLAYER_INFO[playerid][vGas];
	UpdateVehicleDamageStatus(autos[playerid], PLAYER_INFO[playerid][VE1], PLAYER_INFO[playerid][VE2], PLAYER_INFO[playerid][VE3], PLAYER_INFO[playerid][VE4]);
	if(PLAYER_INFO[playerid][vPJ] >= 0) ChangeVehiclePaintjob(autos[playerid], PLAYER_INFO[playerid][vPJ]);
	if(PLAYER_INFO[playerid][vSeguro] == 1)
	{
		bloqueado[autos[playerid]] = 1;
		GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PLAYER_INFO[playerid][vSeguro] == 0)
	{
		bloqueado[autos[playerid]] = 0;
		GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	}
	if(PLAYER_INFO[playerid][vAlarma] == 1) alarma[autos[playerid]] = 1;
	else if(PLAYER_INFO[playerid][vAlarma] == 0) alarma[autos[playerid]] = 0;
	ChangeVehicleColor(autos[playerid], PLAYER_INFO[playerid][vColor1], PLAYER_INFO[playerid][vColor2]);
	Baul[autos[playerid]] = 0;
	MotorAuto[autos[playerid]] = 0;
	Balde[autos[playerid]] = 0;
	Luces[autos[playerid]] = 0;
	SetVehicleHealth(autos[playerid], 1000.0);
	RepairVehicle(autos[playerid]);
	if(IsValidVehicle(autos[playerid]) && PLAYER_INFO[playerid][vID1] != 0)
 	{
	  	new Query[256];
	  	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID1], MAX_OBJETOS_USERS);
	  	mysql_tquery(handle_db, Query, "L_Objetos", "i",autos[playerid]);
	}
	return 1;
}
public Auto2(playerid, tipo)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(JugadorLogeado[playerid] != 1) return 1;
	if(PLAYER_INFO[playerid][vModelo2] == 447) PLAYER_INFO[playerid][vModelo2] = 469;
	if(tipo == 0)
	{
		autos2[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo2],PLAYER_INFO[playerid][v2X],PLAYER_INFO[playerid][v2Y],PLAYER_INFO[playerid][v2Z],PLAYER_INFO[playerid][v2A],PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][v2Color2],-1,0);
		LinkVehicleToInterior(autos2[playerid], PLAYER_INFO[playerid][v2interior]);
		SetVehicleVirtualWorldEx(autos2[playerid], PLAYER_INFO[playerid][v2vw]);
		SetVehicleHealth(autos2[playerid], PLAYER_INFO[playerid][pVidaV2]);
		IsPlayerNearVehicle(playerid,autos2[playerid]);
		ROBO_COCHE[autos2[playerid]][EsRobo] = 0;
	}
	if(tipo == 3)
	{
		if(TowedCar[playerid][1] == 0) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(autos2[playerid]));
		if(autos2[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos2[playerid]);
		autos2[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo2],PLAYER_INFO[playerid][pOX2],PLAYER_INFO[playerid][pOY2],PLAYER_INFO[playerid][pOZ2],PLAYER_INFO[playerid][pOA2],PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][v2Color2],-1,0);
		LinkVehicleToInterior(autos2[playerid], PLAYER_INFO[playerid][v2Ointerior]);
		SetVehicleVirtualWorldEx(autos2[playerid], PLAYER_INFO[playerid][v2Ovw]);
		SetVehicleHealth(autos2[playerid], PLAYER_INFO[playerid][pVidaV2]);
		TowedCar[playerid][1] = 0;
		ROBO_COCHE[autos2[playerid]][EsRobo] = 0;
	}
	else if(tipo == 2 || tipo == 6 || tipo == 7 || tipo == 8 || tipo == 9 || tipo == 10)
	{
		new floor = 1,rand,estacionamientoid;
		switch(tipo)
		{
			case 2: estacionamientoid = 4;
			case 6: estacionamientoid = 6;
		}
		if(IsValidVehicle(autos2[playerid])) DestroyVehicleEx(autos2[playerid]);
		switch(tipo)
		{
			case 2: rand = random(sizeof(EstacionamientoCamionero));
			default: rand = random(sizeof(EstacionamientoNormal));
		}
		switch(tipo)
		{
			case 2:
			{
				new random1 = random(10);
				new Float:Altitud;
				switch(random1)
				{
					case 0: { floor = 1; Altitud = 10.7177; }
					case 1: { floor = 2; Altitud = 14.9808; }
					case 2: { floor = 3; Altitud = 19.3031; }
					case 3: { floor = 4; Altitud = 23.5820; }
					case 4: { floor = 5; Altitud = 27.8949; }
					case 5: { floor = 6; Altitud = 32.2014; }
					case 6: { floor = 7; Altitud = 36.4815; }
					case 7: { floor = 8; Altitud = 40.8009; }
					case 8: { floor = 9; Altitud = 45.0817; }
					case 9: { floor = 10; Altitud = 49.4005; }
					default: { floor = 1; Altitud = 10.7177; }
				}
				autos2[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo2],EstacionamientoCamionero[rand][0],EstacionamientoCamionero[rand][1],Altitud,EstacionamientoCamionero[rand][3],PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][v2Color2],-1,0);
			}
			default: autos2[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo2],EstacionamientoNormal[rand][0],EstacionamientoNormal[rand][1],EstacionamientoNormal[rand][2],EstacionamientoNormal[rand][3],PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][v2Color2],-1,0);
		}
		if(tipo == 2) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {f21111}Easter Basin Docks",	GetVehicleName(autos2[playerid]),floor);
		if(tipo == 6) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el estacionamiento de {f21111}El castillo del diablo",	GetVehicleName(autos2[playerid]));
		if(tipo == 5) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue trasladado al estacionamiento del Salón de Eventos.",				GetVehicleName(autos2[playerid]));
		if(tipo != 6) LinkVehicleToInterior(autos2[playerid], 1);
		else LinkVehicleToInterior(autos2[playerid], 30);
		if(tipo == 2) SetVehicleVirtualWorldEx(autos2[playerid], 4);
		else if(tipo == 6) SetVehicleVirtualWorldEx(autos2[playerid], 6);
		else SetVehicleVirtualWorldEx(autos2[playerid], tipo);
		SetVehicleHealth(autos2[playerid], PLAYER_INFO[playerid][pVidaV2]);
		PLAYER_INFO[playerid][vEstacionado2] = estacionamientoid;
		ROBO_COCHE[autos2[playerid]][EsRobo] = 0;
	}
	format(PLAYER_INFO[playerid][v2patente], 10,""SERVER_COIN"RP %d", autos2[playerid]);
	autosSpawned[playerid][1] = true;
	RELOAD_TD(playerid);
	SetVehicleNumberPlate(autos2[playerid], PLAYER_INFO[playerid][v2patente]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes0]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes1]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes2]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes3]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes4]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes5]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes6]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes7]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes8]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes9]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes10]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes11]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes12]);
	AddVehicleComponent(autos2[playerid], PLAYER_INFO[playerid][v2Componentes13]);
	//LoadMaletero(playerid,autos2[playerid]);
	VehicleFuel[autos2[playerid]] = PLAYER_INFO[playerid][v2Gas];
	UpdateVehicleDamageStatus(autos2[playerid], PLAYER_INFO[playerid][V2E1], PLAYER_INFO[playerid][V2E2], PLAYER_INFO[playerid][V2E3], PLAYER_INFO[playerid][V2E4]);
	if(PLAYER_INFO[playerid][vPJ2] >= 0)
	{
		ChangeVehiclePaintjob(autos2[playerid], PLAYER_INFO[playerid][vPJ2]);
	}
	if(PLAYER_INFO[playerid][vSeguro2] == 1)
	{
		bloqueado[autos2[playerid]] = 1;
		GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	}
	else if(PLAYER_INFO[playerid][vSeguro2] == 0)
	{
		bloqueado[autos2[playerid]] = 0;
		GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	}
	if(IsValidVehicle(autos2[playerid]) && PLAYER_INFO[playerid][vID2] != 0)
 	{
	  	new Query[256];
	  	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID2], MAX_OBJETOS_USERS);
	  	mysql_tquery(handle_db, Query, "L_Objetos", "i",autos2[playerid]);
	}
	if(PLAYER_INFO[playerid][v2Alarma] == 1) alarma[autos2[playerid]] = 1;
	else if(PLAYER_INFO[playerid][v2Alarma] == 0) alarma[autos2[playerid]] = 0;
	ChangeVehicleColor(autos2[playerid], PLAYER_INFO[playerid][v2Color1], PLAYER_INFO[playerid][v2Color2]);
	Baul[autos2[playerid]] = 0;
	MotorAuto[autos2[playerid]] = 0;
	Balde[autos2[playerid]] = 0;
	Luces[autos2[playerid]] = 0;
	SetVehicleHealth(autos2[playerid], 1000.0);
	RepairVehicle(autos2[playerid]);
	return 1;
}
public Auto3(playerid, tipo)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(JugadorLogeado[playerid] != 1) return 1;
	if(PLAYER_INFO[playerid][vModelo3] == 447) PLAYER_INFO[playerid][vModelo3] = 469;
	if(!autosSpawned[playerid][0] && !autosSpawned[playerid][1] || !autosSpawned[playerid][1] && !autosSpawned[playerid][3] || !autosSpawned[playerid][0] && !autosSpawned[playerid][3])
	{
		if(tipo == 0)
		{
			autos3[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo3],PLAYER_INFO[playerid][v3X],PLAYER_INFO[playerid][v3Y],PLAYER_INFO[playerid][v3Z],PLAYER_INFO[playerid][v3A],PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][v3Color2],-1,0);
			LinkVehicleToInterior(autos3[playerid], PLAYER_INFO[playerid][v3interior]);
			SetVehicleVirtualWorldEx(autos3[playerid], PLAYER_INFO[playerid][v3vw]);
			SetVehicleHealth(autos3[playerid], PLAYER_INFO[playerid][pVidaV3]);
			IsPlayerNearVehicle(playerid,autos3[playerid]);
			ROBO_COCHE[autos3[playerid]][EsRobo] = 0;
		}
		if(tipo == 3)
		{
			if(TowedCar[playerid][2] == 0) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(autos3[playerid]));
			if(autos3[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos3[playerid]);
			autos3[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo3],PLAYER_INFO[playerid][pOX3],PLAYER_INFO[playerid][pOY3],PLAYER_INFO[playerid][pOZ3],PLAYER_INFO[playerid][pOA3],PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][v3Color2],-1,0);
			LinkVehicleToInterior(autos3[playerid], PLAYER_INFO[playerid][v3Ointerior]);
			SetVehicleVirtualWorldEx(autos3[playerid], PLAYER_INFO[playerid][v3Ovw]);
			SetVehicleHealth(autos3[playerid], PLAYER_INFO[playerid][pVidaV3]);
			TowedCar[playerid][2] = 0;
			ROBO_COCHE[autos3[playerid]][EsRobo] = 0;
		}
		else if(tipo == 2 || tipo == 6 || tipo == 7 || tipo == 8 || tipo == 9 || tipo == 10)
		{
			new floor = 1,rand,estacionamientoid;
			switch(tipo)
			{
				case 2: estacionamientoid = 4;
				case 6: estacionamientoid = 6;
			}
			if(IsValidVehicle(autos3[playerid])) DestroyVehicleEx(autos3[playerid]);
			switch(tipo)
			{
				case 2: rand = random(sizeof(EstacionamientoCamionero));
				default: rand = random(sizeof(EstacionamientoNormal));
			}
			switch(tipo)
			{
				case 2:
				{
					new random1 = random(10);
					new Float:Altitud;
					switch(random1)
					{
						case 0: { floor = 1; Altitud = 10.7177; }
						case 1: { floor = 2; Altitud = 14.9808; }
						case 2: { floor = 3; Altitud = 19.3031; }
						case 3: { floor = 4; Altitud = 23.5820; }
						case 4: { floor = 5; Altitud = 27.8949; }
						case 5: { floor = 6; Altitud = 32.2014; }
						case 6: { floor = 7; Altitud = 36.4815; }
						case 7: { floor = 8; Altitud = 40.8009; }
						case 8: { floor = 9; Altitud = 45.0817; }
						case 9: { floor = 10; Altitud = 49.4005; }
						default: { floor = 1; Altitud = 10.7177; }
					}
					autos3[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo3],EstacionamientoCamionero[rand][0],EstacionamientoCamionero[rand][1],Altitud,EstacionamientoCamionero[rand][3],PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][v3Color2],-1,0);
				}
				default: autos3[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo3],EstacionamientoNormal[rand][0],EstacionamientoNormal[rand][1],EstacionamientoNormal[rand][2],EstacionamientoNormal[rand][3],PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][v3Color2],-1,0);
			}
			if(tipo == 2) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {f21111}Easter Basin Docks",	GetVehicleName(autos3[playerid]),floor);
			if(tipo == 6) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el estacionamiento de {f21111}El castillo del diablo",	GetVehicleName(autos3[playerid]));
			if(tipo == 5) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue trasladado al estacionamiento del Salón de Eventos.",				GetVehicleName(autos3[playerid]));
			if(tipo != 6) LinkVehicleToInterior(autos3[playerid], 1);
			else LinkVehicleToInterior(autos3[playerid], 30);
			if(tipo == 2) SetVehicleVirtualWorldEx(autos3[playerid], 4);
			else if(tipo == 6) SetVehicleVirtualWorldEx(autos3[playerid], 6);
			else SetVehicleVirtualWorldEx(autos3[playerid], tipo);
			SetVehicleHealth(autos3[playerid], PLAYER_INFO[playerid][pVidaV3]);
			PLAYER_INFO[playerid][vEstacionado3] = estacionamientoid;
			ROBO_COCHE[autos3[playerid]][EsRobo] = 0;
		}
		format(PLAYER_INFO[playerid][v3patente], 10,""SERVER_COIN"RP %d", autos3[playerid]);
		autosSpawned[playerid][2] = true;
		RELOAD_TD(playerid);
		SetVehicleNumberPlate(autos3[playerid], PLAYER_INFO[playerid][v3patente]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes0]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes1]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes2]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes3]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes4]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes5]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes6]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes7]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes8]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes9]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes10]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes11]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes12]);
		AddVehicleComponent(autos3[playerid], PLAYER_INFO[playerid][v3Componentes13]);
		VehicleFuel[autos3[playerid]] = PLAYER_INFO[playerid][v3Gas];
		UpdateVehicleDamageStatus(autos3[playerid], PLAYER_INFO[playerid][V3E1], PLAYER_INFO[playerid][V3E2], PLAYER_INFO[playerid][V3E3], PLAYER_INFO[playerid][V3E4]);
		if(PLAYER_INFO[playerid][vPJ3] >= 0) ChangeVehiclePaintjob(autos3[playerid], PLAYER_INFO[playerid][vPJ3]);
		if(PLAYER_INFO[playerid][vSeguro3] == 1)
		{
			bloqueado[autos3[playerid]] = 1;
			GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
		}
		else if(PLAYER_INFO[playerid][vSeguro3] == 0)
		{
			bloqueado[autos3[playerid]] = 0;
			GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
		}
		if(IsValidVehicle(autos3[playerid]) && PLAYER_INFO[playerid][vID3] != 0)
	 	{
		  	new Query[256];
		  	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID3], MAX_OBJETOS_USERS);
		  	mysql_tquery(handle_db, Query, "L_Objetos", "i",autos3[playerid]);
		}
		if(PLAYER_INFO[playerid][v3Alarma] == 1) alarma[autos3[playerid]] = 1;
		else if(PLAYER_INFO[playerid][v3Alarma] == 0) alarma[autos3[playerid]] = 0;
		ChangeVehicleColor(autos3[playerid], PLAYER_INFO[playerid][v3Color1], PLAYER_INFO[playerid][v3Color2]);
		Baul[autos3[playerid]] = 0;
		MotorAuto[autos3[playerid]] = 0;
		Balde[autos3[playerid]] = 0;
		Luces[autos3[playerid]] = 0;
		SetVehicleHealth(autos3[playerid], 1000.0);
		RepairVehicle(autos3[playerid]);
	}
	return 1;
}
public Auto4(playerid, tipo)
{
	if(!IsPlayerConnected(playerid)) return 1;
	if(JugadorLogeado[playerid] != 1) return 1;
	if(PLAYER_INFO[playerid][vModelo4] == 447) PLAYER_INFO[playerid][vModelo4] = 469;
    if(!autosSpawned[playerid][0] && !autosSpawned[playerid][1] || !autosSpawned[playerid][1] && !autosSpawned[playerid][2] || !autosSpawned[playerid][0] && !autosSpawned[playerid][2])
    {

		if(tipo == 0)
		{
			autos4[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo4],PLAYER_INFO[playerid][v4X],PLAYER_INFO[playerid][v4Y],PLAYER_INFO[playerid][v4Z],PLAYER_INFO[playerid][v4A],PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][v4Color2],-1,0);
			LinkVehicleToInterior(autos4[playerid], PLAYER_INFO[playerid][v4interior]);
			SetVehicleVirtualWorldEx(autos4[playerid], PLAYER_INFO[playerid][v4vw]);
			SetVehicleHealth(autos4[playerid], PLAYER_INFO[playerid][pVidaV4]);
			IsPlayerNearVehicle(playerid,autos4[playerid]);
			ROBO_COCHE[autos4[playerid]][EsRobo] = 0;
		}
		if(tipo == 3)
		{
			if(TowedCar[playerid][3] == 0) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(autos4[playerid]));
			if(autos4[playerid] != INVALID_VEHICLE_ID) DestroyVehicleEx(autos4[playerid]);
			autos4[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo4],PLAYER_INFO[playerid][pOX4],PLAYER_INFO[playerid][pOY4],PLAYER_INFO[playerid][pOZ4],PLAYER_INFO[playerid][pOA4],PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][v4Color2],-1,0);
			LinkVehicleToInterior(autos4[playerid], PLAYER_INFO[playerid][v4Ointerior]);
			SetVehicleVirtualWorldEx(autos4[playerid], PLAYER_INFO[playerid][v4Ovw]);
			SetVehicleHealth(autos4[playerid], PLAYER_INFO[playerid][pVidaV4]);
			ROBO_COCHE[autos4[playerid]][EsRobo] = 0;
			TowedCar[playerid][3] = 0;
		}
		else if(tipo == 2 || tipo == 6 || tipo == 7 || tipo == 8 || tipo == 9 || tipo == 10)
		{
			new floor = 1,rand,estacionamientoid;
			switch(tipo)
			{
				case 2: estacionamientoid = 4;
				case 6: estacionamientoid = 6;
			}
			if(IsValidVehicle(autos4[playerid])) DestroyVehicleEx(autos4[playerid]);
			switch(tipo)
			{
				case 2: rand = random(sizeof(EstacionamientoCamionero));
				default: rand = random(sizeof(EstacionamientoNormal));
			}
			switch(tipo)
			{
				case 2:
				{
					new random1 = random(10);
					new Float:Altitud;
					switch(random1)
					{
						case 0: { floor = 1; Altitud = 10.7177; }
						case 1: { floor = 2; Altitud = 14.9808; }
						case 2: { floor = 3; Altitud = 19.3031; }
						case 3: { floor = 4; Altitud = 23.5820; }
						case 4: { floor = 5; Altitud = 27.8949; }
						case 5: { floor = 6; Altitud = 32.2014; }
						case 6: { floor = 7; Altitud = 36.4815; }
						case 7: { floor = 8; Altitud = 40.8009; }
						case 8: { floor = 9; Altitud = 45.0817; }
						case 9: { floor = 10; Altitud = 49.4005; }
						default: { floor = 1; Altitud = 10.7177; }
					}
					autos4[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo4],EstacionamientoCamionero[rand][0],EstacionamientoCamionero[rand][1],Altitud,EstacionamientoCamionero[rand][3],PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][v4Color2],-1,0);
				}
				default: autos4[playerid] = CreateVehicle(PLAYER_INFO[playerid][vModelo4],EstacionamientoNormal[rand][0],EstacionamientoNormal[rand][1],EstacionamientoNormal[rand][2],EstacionamientoNormal[rand][3],PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][v4Color2],-1,0);
			}
			if(tipo == 2) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el {8baab7}nivel %d{FFFFFF} del estacionamiento de {f21111}Easter Basin Docks",	GetVehicleName(autos4[playerid]),floor);
			if(tipo == 6) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} ha sido guardado en el estacionamiento de {f21111}El castillo del diablo",	GetVehicleName(autos4[playerid]));
			if(tipo == 5) SendClientMessageEx(playerid,-1, "Tu {FFFF04}%s{FFFFFF} fue trasladado al estacionamiento del Salón de Eventos.",				GetVehicleName(autos4[playerid]));
			if(tipo != 6) LinkVehicleToInterior(autos4[playerid], 1);
			else LinkVehicleToInterior(autos4[playerid], 30);
			if(tipo == 2) SetVehicleVirtualWorldEx(autos4[playerid], 4);
			else if(tipo == 6) SetVehicleVirtualWorldEx(autos4[playerid], 6);
			else SetVehicleVirtualWorldEx(autos4[playerid], tipo);
			SetVehicleHealth(autos4[playerid], PLAYER_INFO[playerid][pVidaV4]);
			PLAYER_INFO[playerid][vEstacionado4] = estacionamientoid;
			ROBO_COCHE[autos4[playerid]][EsRobo] = 0;
		}
		format(PLAYER_INFO[playerid][v4patente], 10,""SERVER_COIN"RP %d", autos4[playerid]);
		autosSpawned[playerid][3] = true;
		RELOAD_TD(playerid);
	    SetVehicleNumberPlate(autos4[playerid], PLAYER_INFO[playerid][v4patente]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes0]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes1]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes2]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes3]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes4]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes5]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes6]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes7]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes8]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes9]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes10]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes11]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes12]);
		AddVehicleComponent(autos4[playerid], PLAYER_INFO[playerid][v4Componentes13]);
		VehicleFuel[autos4[playerid]] = PLAYER_INFO[playerid][v4Gas];
		UpdateVehicleDamageStatus(autos4[playerid], PLAYER_INFO[playerid][V4E1], PLAYER_INFO[playerid][V4E2], PLAYER_INFO[playerid][V4E3], PLAYER_INFO[playerid][V4E4]);
		if(PLAYER_INFO[playerid][vPJ4] >= 0) ChangeVehiclePaintjob(autos4[playerid], PLAYER_INFO[playerid][vPJ4]);
		if(PLAYER_INFO[playerid][vSeguro4] == 1)
		{
			bloqueado[autos4[playerid]] = 1;
			GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
		}
		else if(PLAYER_INFO[playerid][vSeguro4] == 0)
		{
			bloqueado[autos4[playerid]] = 0;
			GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
		}
		if(IsValidVehicle(autos4[playerid]) && PLAYER_INFO[playerid][vID4] != 0)
	 	{
		 	new Query[256];
		  	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d' LIMIT %d;",PLAYER_INFO[playerid][vID4], MAX_OBJETOS_USERS);
		  	mysql_tquery(handle_db, Query, "L_Objetos", "i",autos4[playerid]);
		}
		if(PLAYER_INFO[playerid][v4Alarma] == 1) alarma[autos4[playerid]] = 1;
		else if(PLAYER_INFO[playerid][v4Alarma] == 0) alarma[autos4[playerid]] = 0;
		ChangeVehicleColor(autos4[playerid], PLAYER_INFO[playerid][v4Color1], PLAYER_INFO[playerid][v4Color2]);
		Baul[autos4[playerid]] = 0;
		MotorAuto[autos4[playerid]] = 0;
		Balde[autos4[playerid]] = 0;
		Luces[autos4[playerid]] = 0;
		SetVehicleHealth(autos4[playerid], 1000.0);
		RepairVehicle(autos4[playerid]);
	}
	return 1;
}
public RespawnearV(vehicleid)
{
	SetVehicleToRespawn(vehicleid);
}
public RespawnearVF(vehicleid)
{
	SetVehicleToRespawn(vehicleid);
	SetVehicleHealth(vehicleid, 5000.0);
	return 1;
}
public RespawnearVF2(vehicleid)
{
	SetVehicleToRespawn(vehicleid);
	SetVehicleHealth(vehicleid, 1000.0);
	return 1;
}
stock PlayerNearObject(playerid,object,Float:range)
{
	new Float:Pos[3];
	GetDynamicObjectPos(object,Pos[0],Pos[1],Pos[2]);
	if(IsPlayerInRangeOfPoint(playerid,range,Pos[0],Pos[1],Pos[2])) return 1;
	return 0;
}
stock IsNumberEven(number)
{
	new remainder = number % 2;
  	if(remainder > 0) return false;
  	else return true;
}
stock TienePrendaFabrica(playerid)
{
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
    {
        if(PLAYER_TOYS[playerid][i][pt_ATTACHED])
        {
        	if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19472 || PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19472 || PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19472 || PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19472) return 1;
		 }
	}
  	return 0;
}

stock LCaja(playerid)
{
    ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
    return 1;
}
stock DCaja(playerid)
{
    ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
    return 1;
}

public Legal1(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,1832.3918,-1832.4200,13.1546,7.0);
				PuntoCX[playerid] = 1832.3918; PuntoCY[playerid] = -1832.4200; PuntoCZ[playerid] = 13.1546;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 1;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 1;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Legal2(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,1338.6766,-912.8005,35.6672,7.0);
				PuntoCX[playerid] = 1338.6766; PuntoCY[playerid] = -912.8005; PuntoCZ[playerid] = 35.6672;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 1;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 1;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Legal3(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,455.0953,-1502.9357,30.8655,7.0);
				PuntoCX[playerid] = 455.0953; PuntoCY[playerid] = -1502.9357; PuntoCZ[playerid] = 30.8655;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 2;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 2;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Legal4(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,810.9319,-1391.0319,13.8416,7.0);
				PuntoCX[playerid] = 810.9319; PuntoCY[playerid] = -1391.0319; PuntoCZ[playerid] = 13.8416;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 2;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 2;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Legal5(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,488.1939,-1277.0747,15.9604,7.0);
				PuntoCX[playerid] = 488.1939; PuntoCY[playerid] = -1277.0747; PuntoCZ[playerid] = 15.9604;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 2;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 2;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Ilegal1(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
				PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 3;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 3;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Ilegal2(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,2480.9316,-2115.3042,13.2740,7.0);
				PuntoCX[playerid] = 2480.9316; PuntoCY[playerid] = -2115.3042; PuntoCZ[playerid] = 13.2740;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 3;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 3;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Ilegal3(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
				PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 3;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 3;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}

public Ilegal4(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
				PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 4;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 4;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}
public Ilegal5(playerid)
{
	if(Cargando2[playerid] < 11)
	{

		Cargando2[playerid] ++;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		if(Cargando2[playerid] == 11)
		{

			if(CamionID[playerid] != INVALID_PLAYER_ID)
			{

				Cargando2[playerid] = 0;
				KillTimer(Cargas[playerid]);
				TimerCargarCamion[playerid] = 0;
				CerrarPuertasCamionero(playerid);
				SetPlayerCheckpoint(playerid,2169.3521,-2275.2957,13.1360,7.0);
				PuntoCX[playerid] = 2169.3521; PuntoCY[playerid] = -2275.2957; PuntoCZ[playerid] = 13.1360;
				SendClientMessage(playerid,-1,"El camión fue {00FF3F}cargado con exito{FFFFFF}, se marcó en el mapa la ubicación de entrega.");
				TimerCamionero[playerid] = gettime() + 300;
				CargandoC[playerid] = 0;
				DesCargarMapeosEx(playerid);
				CamionCargado[CamionID[playerid]] = 4;
				Chofer[CamionID[playerid]] = playerid;
				Carga[playerid] = 4;
				PLAYER_TEMP[playerid][pt_Camionero] = true;
				HidePlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
			}
		}
	}
}
public DescargandoCamion(playerid)
{
	new autoid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	if(CAMION(autoid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			TimerDescargarCamion[playerid] = 0;
			CerrarPuertasCamionero(playerid);
			Descongelar(playerid);
			SendClientMessage(playerid, -1, "{00FF3F}Bien hecho{FFFFFF}, ahora regresa el camión al depósito para recibir el pago.");
			SetPlayerCheckpoint(playerid, -14.6952,-271.7053,5.4297, 7.0);
			PuntoCX[playerid] = -1699.9927; PuntoCY[playerid] = 10.2943; PuntoCZ[playerid] = 3.5547;
		}
	}
	return 1;
}
public Descongelar(playerid)
{
	TogglePlayerControllable(playerid,1);
	SetPVarInt(playerid, "IsFrozen", 1);
}
public SacarAnimF(playerid)
{
	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
}
public OcultarAnim(playerid)
{
	LoopingAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, -1, "El paciente está listo para ser trasladado al hospital.");
	SendClientMessage(playerid, -1, "Sube a tu ambulancia y escribe {FFFF04}/subir paciente{FFFFFF}, luego conduce al hospital más cercano.");
	SendClientMessage(playerid, -1, "Apresúrate porque está perdiendo mucha sangre y puede morir en el camino.");
}
public StopCell(playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}
public DarDineroLogin(playerid)
{
	GivePlayerMoney(playerid,PLAYER_INFO[playerid][pDinero]);
}

public DarDinero(playerid,cantidad)
{
	if(cantidad < 0) return 1;
	PLAYER_INFO[playerid][pDinero] += cantidad;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PLAYER_INFO[playerid][pDinero]);
	return 1;
}

public QuitarDinero(playerid,cantidad)
{
	if(cantidad < 0) return 1;
	PLAYER_INFO[playerid][pDinero] -= cantidad;
	GivePlayerMoney(playerid,-cantidad);
	return 1;
}

public EncerrandoNombre(playerid,i)
{
	new string[128];
	format(string, sizeof(string), "%s encierra a %s en la celda.", PLAYER_INFO[playerid][Nickname],PLAYER_INFO[i][Nickname]);
	ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	if(RoboTienda[i] == 1)
	{
		RoboTienda[i] = 0;
		SendClientMessage(playerid,-1,"Recibes un bono de {f21111}$10.000{FFFFFF} por el arresto.");
		DarDinero(playerid,10000);
	}
}
public Encerrando2(playerid)
{
    if(GetPlayerScore(playerid) == 0) return 1;
    if(PLAYER_INFO[playerid][pCargos] > 0)
    {
        SetCameraBehindPlayer(playerid);
        NoTeleportHack(playerid);
        new tiempox[32];
        new tiempoCargos = CalcularCargos(playerid);
        PLAYER_INFO[playerid][arrestado] ++;
        PLAYER_TEMP[playerid][VariableCaido] = 0;
        PLAYER_INFO[playerid][pTiempoCarcel] = (tiempoCargos * 60);
        PLAYER_INFO[playerid][pTipoCarcel] = 1;
        PLAYER_TEMP[playerid][pTiempoFianza]  = gettime() + (3*60);
        if(tiempoCargos > 1) tiempox = "minutos";
        else tiempox = "minuto";
        PLAYER_INFO[playerid][Agonizando] = 0;
        SendClientMessageEx(playerid, -1, "{FF3300}Fuiste detenido{FFFFFF}, tendrás que cumplir una condena de {FFFF04}%d %s {FFFFFF}para ser liberado.", tiempoCargos,tiempox);
        SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en tu casa {FFFF04}/domiciliaria");
        if(tiempoCargos > 10) SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en prisión {FFFF04}/pagar fianza");
        SendClientMessage(playerid,-1,"Para ver cuanto tiempo te falta para cumplir la condena, usa {FFFF04}/tiempo");
        SendClientMessage(playerid,-1,"La policia le quita a los detenidos, sus armas y drogas.");
        DesCargarMapeosEx(playerid);
        if(RoboTienda[playerid] > 0)
        {
            SendClientMessage(playerid,-1,"También se te cobró {f21111}$500{FFFFFF} por los daños ocasionados.");
            QuitarDinero(playerid,500);
        }
        PLAYER_INFO[playerid][pCargos] = 0;
        ActualizarRadar();
        SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
        SetPlayerColor(playerid, COLOR_WHITE);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        QuitarArmas(playerid);
        Jail[playerid] = 1;
        if(PLAYER_INFO[playerid][pEnFC] == 0)
        {
            new celda = random(4);
            switch(celda)
            {
                case 0: SetPlayerPosEx(playerid, 227.3367,109.3470,999.0156), CeldaJugador[playerid] = 1;
                case 1: SetPlayerPosEx(playerid, 223.0108,109.8135,999.0156), CeldaJugador[playerid] = 2;
                case 2: SetPlayerPosEx(playerid, 219.0009,110.3388,999.0156), CeldaJugador[playerid] = 3;
                case 3: SetPlayerPosEx(playerid, 215.2188,109.1792,999.0156), CeldaJugador[playerid] = 4;
            }
            SetPlayerVirtualWorld(playerid,1);
            SetPlayerInterior(playerid,10);
        }
    }
    return 1;
}
public Encerrando(playerid)
{
	if(GetPlayerScore(playerid) == 0) return 1;
	new vw = GetPlayerVirtualWorld(playerid);
	BajandoV[playerid] = 1;
	SetPlayerHealthEx(playerid,100.0);
	if(PLAYER_INFO[playerid][pCargos] > 0)
	{
		SetCameraBehindPlayer(playerid);
		new tiempoCargos = CalcularCargos(playerid);
		new celda = random(4);
		PLAYER_INFO[playerid][pTiempoCarcel] = (tiempoCargos * 60);
		PLAYER_TEMP[playerid][pTiempoFianza]  = gettime() + (3*60);
		PLAYER_INFO[playerid][arrestado]++;
		PLAYER_INFO[playerid][Agonizando] = 0;
		PLAYER_TEMP[playerid][VariableCaido] = 0;
		SendClientMessageEx(playerid, -1, "{FF3300}Fuiste detenido{FFFFFF}, tendrás que cumplir una condena de {FFFF04}%d minutos {FFFFFF}para ser liberado.", tiempoCargos);
		SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en tu casa {FFFF04}/domiciliaria");
		if(tiempoCargos > 10) SendClientMessage(playerid, -1, "Puedes pagar para cumplir la condena en prisión {FFFF04}/pagar fianza");
		SendClientMessage(playerid,-1,"Para ver cuanto tiempo te falta para cumplir la condena, escribe {FFFF04}/tiempo");
		SendClientMessage(playerid,-1,"La policia le quita a los detenidos sus armas y drogas.");
		if(RoboTienda[playerid] > 0)
		{
			SendClientMessage(playerid,-1,"También se te cobró {f21111}$500{FFFFFF} por los daños ocasionados.");
			QuitarDinero(playerid,500);
		}
		TogglePlayerControllable(playerid,1);
		SetPVarInt(playerid, "IsFrozen", 1);
		PLAYER_INFO[playerid][pCargos] = 0;
        ActualizarRadar();
		SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
		SetPlayerColor(playerid, COLOR_WHITE);
		Jail[playerid] = 1;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		QuitarArmas(playerid);
		SetCameraBehindPlayer(playerid);
		if(IsPlayerInRangeOfPoint(playerid,15.0,1564.5568,-1694.7732,5.8906) || IsPlayerInRangeOfPoint(playerid,7.0,240.4520,112.8195,1003.2188) && vw == 1)
		{
			PLAYER_INFO[playerid][pTipoCarcel] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerInterior(playerid, 10);
			switch(celda)
			{
				case 0: SetPlayerPosEx(playerid, 227.3367,109.3470,999.0156), CeldaJugador[playerid] = 1;
				case 1: SetPlayerPosEx(playerid, 223.0108,109.8135,999.0156), CeldaJugador[playerid] = 2;
				case 2: SetPlayerPosEx(playerid, 219.0009,110.3388,999.0156), CeldaJugador[playerid] = 3;
				case 3: SetPlayerPosEx(playerid, 215.2188,109.1792,999.0156), CeldaJugador[playerid] = 4;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,-1589.5292,716.2191,-5.6688) || IsPlayerInRangeOfPoint(playerid,7.0,240.4520,112.8195,1003.2188) && vw == 5)
		{
			PLAYER_INFO[playerid][pTipoCarcel] = 2;
			SetPlayerVirtualWorld(playerid, 5);
			SetPlayerInterior(playerid, 10);
			switch(celda)
			{
				case 0: SetPlayerPosEx(playerid, 227.3367,109.3470,999.0156), CeldaJugador[playerid] = 5;
				case 1: SetPlayerPosEx(playerid, 223.0108,109.8135,999.0156), CeldaJugador[playerid] = 6;
				case 2: SetPlayerPosEx(playerid, 219.0009,110.3388,999.0156), CeldaJugador[playerid] = 7;
				case 3: SetPlayerPosEx(playerid, 215.2188,109.1792,999.0156), CeldaJugador[playerid] = 8;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,2293.1904,2451.6099,10.3875) || IsPlayerInRangeOfPoint(playerid,7.0,235.2946,166.3358,1003.0300))
		{
			PLAYER_INFO[playerid][pTipoCarcel] = 3;
			SetPlayerInterior(playerid, 3);
			switch(celda)
			{
				case 0: SetPlayerPosEx(playerid, 227.3367,109.3470,999.0156), CeldaJugador[playerid] = 9;
				case 1: SetPlayerPosEx(playerid, 223.0108,109.8135,999.0156), CeldaJugador[playerid] = 10;
				case 2: SetPlayerPosEx(playerid, 219.0009,110.3388,999.0156), CeldaJugador[playerid] = 11;
				case 3: SetPlayerPosEx(playerid, 215.2188,109.1792,999.0156), CeldaJugador[playerid] = 12;
			}
		}
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
public EnviarJail(playerid)
{
	NoTeleportHack(playerid);
	new string[256];
	format(string,sizeof(string),"Te encuentras sancionado por %s.", PLAYER_INFO[playerid][pRazonSan]);
	SendClientMessage(playerid, 0xAA3333FF, string);
	if(PLAYER_INFO[playerid][pTiempoJail] < 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%ds", PLAYER_INFO[playerid][pTiempoJail]);
	else if(PLAYER_INFO[playerid][pTiempoJail] >= 60) format(string, sizeof(string), "Tiempo restante para cumplir la condena: {f21111}%dm %ds", PLAYER_INFO[playerid][pTiempoJail]/60, PLAYER_INFO[playerid][pTiempoJail]%(60));
	SendClientMessage(playerid,-1,string);
	SetPlayerPosEx(playerid, -992.1902,-6656.0366,52.8119);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, playerid);
	San[playerid] = 1;
	QuitarArma(playerid, 1);
	return 1;
}
public LoadMaletero(playerid,vehicleid)
{
	new slot1,slot2,slot3,slot4,slot5,slot6,slot7,slot8,slot9,slot10;
	if(vehicleid == autos[playerid])
	{
		slot1 = PLAYER_INFO[playerid][vBaul], slot2 = PLAYER_INFO[playerid][vBaul2],  slot3 = PLAYER_INFO[playerid][vBaul3];
		slot4 = PLAYER_INFO[playerid][vBaul4], slot5 = PLAYER_INFO[playerid][vBaul5], slot6 = PLAYER_INFO[playerid][vBaul6];
		slot7 = PLAYER_INFO[playerid][vBaul7], slot8 = PLAYER_INFO[playerid][vBaul8], slot9 = PLAYER_INFO[playerid][vBaul9];
		slot10 = PLAYER_INFO[playerid][vBaul10];
	}
	if(vehicleid == autos2[playerid])
	{
		slot1 = PLAYER_INFO[playerid][v2Baul], slot2 = PLAYER_INFO[playerid][v2Baul2],  slot3 = PLAYER_INFO[playerid][v2Baul3];
		slot4 = PLAYER_INFO[playerid][v2Baul4], slot5 = PLAYER_INFO[playerid][v2Baul5], slot6 = PLAYER_INFO[playerid][v2Baul6];
		slot7 = PLAYER_INFO[playerid][v2Baul7], slot8 = PLAYER_INFO[playerid][v2Baul8], slot9 = PLAYER_INFO[playerid][v2Baul9];
		slot10 = PLAYER_INFO[playerid][v2Baul10];
	}
	if(vehicleid == autos3[playerid])
	{
		slot1 = PLAYER_INFO[playerid][v3Baul], slot2 = PLAYER_INFO[playerid][v3Baul2],  slot3 = PLAYER_INFO[playerid][v3Baul3];
		slot4 = PLAYER_INFO[playerid][v3Baul4], slot5 = PLAYER_INFO[playerid][v3Baul5], slot6 = PLAYER_INFO[playerid][v3Baul6];
		slot7 = PLAYER_INFO[playerid][v3Baul7], slot8 = PLAYER_INFO[playerid][v3Baul8], slot9 = PLAYER_INFO[playerid][v3Baul9];
		slot10 = PLAYER_INFO[playerid][v3Baul10];
	}
	if(vehicleid == autos4[playerid])
	{
		slot1 = PLAYER_INFO[playerid][v4Baul], slot2 = PLAYER_INFO[playerid][v4Baul2],  slot3 = PLAYER_INFO[playerid][v4Baul3];
		slot4 = PLAYER_INFO[playerid][v4Baul4], slot5 = PLAYER_INFO[playerid][v4Baul5], slot6 = PLAYER_INFO[playerid][v4Baul6];
		slot7 = PLAYER_INFO[playerid][v4Baul7], slot8 = PLAYER_INFO[playerid][v4Baul8], slot9 = PLAYER_INFO[playerid][v4Baul9];
		slot10 = PLAYER_INFO[playerid][v4Baul10];
	}
	if(vehicleid > 0)
	{
		Baul[vehicleid] = 0;
		EspacioBaul[vehicleid][1] = slot1;
		EspacioBaul[vehicleid][2] = slot2;
		EspacioBaul[vehicleid][3] = slot3;
		EspacioBaul[vehicleid][4] = slot4;
		EspacioBaul[vehicleid][5] = slot5;
		EspacioBaul[vehicleid][6] = slot6;
		EspacioBaul[vehicleid][7] = slot7;
		EspacioBaul[vehicleid][8] = slot8;
		EspacioBaul[vehicleid][9] = slot9;
		EspacioBaul[vehicleid][10] = slot10;
	}
}
public OnPlayerDataLoaded(playerid)
{

	#if DEBUG_GM == 1
	printf("(OnPlayerDataLoaded) PlayerID: %d", playerid);
	#endif
	if(GetPlayerScore(playerid) != 0) return ExpulsarJugador(playerid, "Posible bug");

	new string[154 + 1];
	new string2[159 + 1];
	InterpolateCameraPos(playerid, 1712.492553, -495.167877, 243.434799, 1769.820800, -2319.798095, 15.502777, 70000);
	InterpolateCameraLookAt(playerid, 1712.163940, -499.679473, 241.304687, 1765.149291, -2321.536132, 15.107414, 5000);
	format(string, sizeof string,"{FFFFFF}Bienvenido Nuevamente {f21111}%s\n{FFFFFF}para ingresar {f21111}nuevamente{FFFFFF} a tu cuenta\n {f21111}ingresa{FFFFFF} tu contraseña.", PLAYER_INFO[playerid][Nickname]);
    format(string2, sizeof string2,"{FFFFFF}Hola {f21111}%s {FFFFFF}Escribe una contraseña\n para registrarte\n{f21111}Indroduce{FFFFFF} la {f21111}contraseña{FFFFFF} en el cuadro.", PLAYER_INFO[playerid][Nickname]);
    if(cache_num_rows() == 1) ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD,"Login > Contraseña",string, "Entrar","Salir");
	else ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD,"Registro > Contraseña",string2, "Registrar", "Salir");
	#if DEBUG_GM == 1
	printf("OnPlayerDataLoad %s[%d] - Load | Comprobando el nombre si su nombre esta en la base de datos.",PLAYER_INFO[playerid][Nickname],playerid);
	#endif
	return 1;
}
public CheckNickName(playerid,result)
{
	if(cache_num_rows() == 0)
	{
		ShowPlayerDialog(playerid, INMIGRACION, DIALOG_STYLE_MSGBOX, "Nombre invalido", "{FFFF04}Departamento de inmigracion:{FFFFFF} Tu nombre no es aceptable.\n{FFFF04}Formato para el nombre:{FFFFFF} Nombre_Apellido\nPor favor, vuelve con un nombre valido.","Aceptar","");
		ExpulsarJugador(playerid,"Nombre invalido.");
		#if DEBUG_GM == 1
		printf("OnPlayerDataLoad %s[%d] - Load 3",PLAYER_INFO[playerid][Nickname],playerid);
		#endif
	}
	else
	{
		#if DEBUG_GM == 1
		printf("OnPlayerDataLoad %s[%d] - Load 4",PLAYER_INFO[playerid][Nickname],playerid);
		#endif
		new string[154 + 1];
		new string2[159 + 1];
		format(string, sizeof string, "{f21111}Bienvenido nuevamente{FFFF04} %s{FFFFFF}\nPara ingresar nuevamente a tu personaje\nIntroduce la contraseña de tu cuenta.", PLAYER_INFO[playerid][Nickname]);
    	format(string2, sizeof string2, "{f21111}Bienvenido{FFFF04} %s{FFFFFF}\n{FFFFFF}Escribe una contraseña para registrarte\nIntroduce la contraseña que tendra tu cuenta.", PLAYER_INFO[playerid][Nickname]);

		if(result == 1) return ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD,"Login > Contraseña",string, "Entrar","Salir");
		else ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT,"Registro > Contraseña",string2, "Registrar", "Salir");
	}
	return 1;
}
public OnPlayerRegister(playerid)
{
	if(cache_num_rows() == 0)
	{
		new Query[1024], day, month, year;
		getdate(year,month,day);
		
		new dayR,monthR,yearR,FechaRegistro[30];
		getdate(yearR, monthR, dayR);
		format(FechaRegistro, sizeof(FechaRegistro), "%d/%d/%d", dayR,monthR,yearR);
		
		new rplName[32];
		GetPlayerName(playerid, rplName, sizeof(rplName));
		for(new i = 0; i < strlen(rplName); i++)
		{
			if(rplName[i] == '_')
			{
			    rplName[i] = ' ';
			}
		}
		
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `usuarios` (username, password,posX,posY,posZ,posA,vida,Registro,Email,EMS,Edad,Registro_U,username_low) VALUES ('%e',md5('%e'),'1615.5591','-2288.4780','13.5399','88.5581','100','%02d/%02d/%02d','%e',1,%d,'%e','ninguno')",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[playerid][pPassword],day,month,year,PLAYER_INFO[playerid][pEmail],PLAYER_INFO[playerid][pEdad],FechaRegistro);
		mysql_pquery(handle_db, Query, "UsuarioRegistrado", "d", playerid);
		
		switch(PLAYER_INFO[playerid][pSexo])
		{
			case 1:
			{
				PLAYER_INFO[playerid][pRopa] = 36;
				mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin` = '36', `Sexo` = '1' WHERE `Username` = '%e'",PLAYER_INFO[playerid][Nickname]);
				mysql_query(handle_db, Query, false);
			}
			case 2:
			{
				PLAYER_INFO[playerid][pRopa] = 150;
				mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin` = '150', `Sexo` = '2' WHERE `Username` = '%e'",PLAYER_INFO[playerid][Nickname]);
				mysql_query(handle_db, Query, false);
			}
		}
		new Querys[1000];
		mysql_format(handle_db, Querys, sizeof(Query),  "SELECT * FROM `usuarios` WHERE `Username` = '%e' AND `Password` = md5('%e');", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[playerid][pPassword]);
		mysql_pquery(handle_db, Querys, "OnPlayerSpawnLoaded", "d", playerid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ORANGE, "Ya hay una cuenta registrada con ese email.");
		ExpulsarJugador(playerid, "Correo en uso");
	}
	return 1;
}
public OnPlayerSpawnLoaded(playerid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerSpawnLoaded) PlayerID: %d", playerid);
	#endif
	if(GetPlayerScore(playerid) != 0) return ExpulsarJugador(playerid, "Posible bug (2)");
	if(cache_num_rows() == 1)
	{
	    cache_get_value_name_int(0, "Admin",PLAYER_INFO[playerid][pAdmin]);
	    if(PLAYER_INFO[playerid][pAdmin] > 0 && !Verificado[playerid])
		{
			MostrarVeriAdmin(playerid);
			return 1;
		}
		cache_get_value_name_int(0, "Striptease", EnClub[playerid]);
		cache_get_value_name_int(0, "suspendido", PLAYER_INFO[playerid][suspendido]);
		cache_get_value_name_int(0, "Sanciones", PLAYER_INFO[playerid][sancionado]);
		cache_get_value_name_int(0, "Skin",PLAYER_INFO[playerid][pRopa]);
		cache_get_value_name_int(0, "Bloqueado", PLAYER_INFO[playerid][pBloqueado]);
		cache_get_value_name_int(0, "ID",PLAYER_INFO[playerid][pID]);
		cache_get_value_name_int(0, "Online",PLAYER_INFO[playerid][pOnline]);
		cache_get_value_name_int(0, "Patines", 	PLAYER_INFO[playerid][pPatines]);
		cache_get_value_name_int(0, "Baneado", 	PLAYER_INFO[playerid][p_Ban]);
		cache_get_value_name_int(0, "Sed",PLAYER_INFO[playerid][pSed]);
		cache_get_value_name_int(0, "LicenciaVuelo", PLAYER_INFO[playerid][pLicenciaVuelo]);
		cache_get_value_name_int(0, "Hambre",PLAYER_INFO[playerid][pHambre]);
		cache_get_value_name_int(0, "SocioHP", 	PLAYER_INFO[playerid][pSocioHP]);
		cache_get_value_name_int(0, "TipoCarcel", 	PLAYER_INFO[playerid][pTipoCarcel]);
		cache_get_value_name_int(0, "TiempoCarcelS", PLAYER_INFO[playerid][pTiempoCarcel]);
		cache_get_value_name_int(0, "Numero",PLAYER_INFO[playerid][pNumero]);
		cache_get_value_name_int(0, "Guia",PLAYER_INFO[playerid][pGuia]);
		cache_get_value_name_int(0, "Sonidos", 	PLAYER_INFO[playerid][pSonidos]);
		cache_get_value_name_int(0, "Muteos",PLAYER_INFO[playerid][pMuteos]);
		cache_get_value_name_int(0, "Barras",PLAYER_INFO[playerid][pBarras]);
		cache_get_value_name_int(0, "Alerta",PLAYER_INFO[playerid][pAlerta]);
		cache_get_value_name_int(0, "Velocimetro", PLAYER_INFO[playerid][pVelocimetro]);
		cache_get_value_name_int(0, "TiempoJail", PLAYER_INFO[playerid][pTiempoJail]);
		cache_get_value_name_int(0, "Cargos",PLAYER_INFO[playerid][pCargos]);
		cache_get_value_name_int(0, "Duty",PLAYER_INFO[playerid][pDuty]);
		cache_get_value_name_int(0, "SkinTrabajo", PLAYER_INFO[playerid][pModelo]);
		cache_get_value_name_int(0, "Agenda",PLAYER_INFO[playerid][pAgenda]);
		cache_get_value_name_int(0, "NivelMecanico", PLAYER_INFO[playerid][pNivelMecanico]);
		cache_get_value_name_int(0, "ExpMecanico", PLAYER_INFO[playerid][pExpMecanico]);
		cache_get_value_name_int(0, "EMS",PLAYER_INFO[playerid][pEMS]);
		cache_get_value_name_int(0, "Radio",PLAYER_INFO[playerid][pRadio]);
		cache_get_value_name_int(0, "GPS",PLAYER_INFO[playerid][pGPS]);
		cache_get_value_name_int(0, "Rango",PLAYER_INFO[playerid][pRango]);
		cache_get_value_name_int(0, "Edad",PLAYER_INFO[playerid][pEdad]);
		cache_get_value_name_int(0, "Sexo",PLAYER_INFO[playerid][pSexo]);
		cache_get_value_name_int(0, "Experiencia", PLAYER_INFO[playerid][pExperiencia]);
		cache_get_value_name_int(0, "Nivel",PLAYER_INFO[playerid][pNivel]);
		cache_get_value_name_int(0, "Martillo", PLAYER_INFO[playerid][pMartillo]);
		cache_get_value_name_int(0, "Destornillador", PLAYER_INFO[playerid][pDestornillador]);
		cache_get_value_name_int(0, "Barreta", PLAYER_INFO[playerid][pBarreta]);
		cache_get_value_name_int(0, "Balde", PLAYER_INFO[playerid][pBalde]);
		cache_get_value_name_int(0, "Faccion", PLAYER_INFO[playerid][pFaccion]);
		cache_get_value_name_int(0, "hprecio", PLAYER_INFO[playerid][hprecio]);
		cache_get_value_name_int(0, "hmoneda", PLAYER_INFO[playerid][hmoneda]);
		cache_get_value_name_int(0, "h2precio", PLAYER_INFO[playerid][h2precio]);
		cache_get_value_name_int(0, "h2moneda", PLAYER_INFO[playerid][h2moneda]);
		cache_get_value_name_int(0, "Repuestos",PLAYER_INFO[playerid][Repuestos]);
		cache_get_value_name_int(0, "FinMes",PLAYER_INFO[playerid][finmes]);
		cache_get_value_name_int(0, "FinDia",PLAYER_INFO[playerid][findia]);
		cache_get_value_name_int(0, "FinAno",PLAYER_INFO[playerid][finano]);
		cache_get_value_name_int(0, "EnCasa",PLAYER_INFO[playerid][EnCasa]);
		cache_get_value_name_int(0, "EnRopero", PLAYER_INFO[playerid][EnRopero]);
		cache_get_value_name_int(0, "EnGarage", PLAYER_INFO[playerid][EnGarage]);
		cache_get_value_name_int(0, "CasaID1", PLAYER_INFO[playerid][CasaID][0]);
		cache_get_value_name_int(0, "CasaID2", PLAYER_INFO[playerid][CasaID][1]);
		cache_get_value_name_int(0, "CasaID3", PLAYER_INFO[playerid][CasaID][2]);
		cache_get_value_name_int(0, "CasaID4", PLAYER_INFO[playerid][CasaID][3]);
		cache_get_value_name_int(0, "EstacionamientoID", PLAYER_INFO[playerid][EstacionamientoID]);
		cache_get_value_name_int(0, "Estacionado1", PLAYER_INFO[playerid][vEstacionado1]);
		cache_get_value_name_int(0, "Estacionado2", PLAYER_INFO[playerid][vEstacionado2]);
		cache_get_value_name_int(0, "Estacionado3", PLAYER_INFO[playerid][vEstacionado3]);
		cache_get_value_name_int(0, "Estacionado4", PLAYER_INFO[playerid][vEstacionado4]);
		cache_get_value_name_int(0, "EnEstacionamiento", PLAYER_INFO[playerid][pEnEstacionamiento]);
		cache_get_value_name_int(0, "Agonizando", 	PLAYER_INFO[playerid][Agonizando]);
		cache_get_value_name_int(0, "VIP",PLAYER_INFO[playerid][pVIP]);
		cache_get_value_name_int(0, "Banco",PLAYER_INFO[playerid][pBanco]);
		cache_get_value_name_int(0, "Moneda",PLAYER_INFO[playerid][Moneda]);
		cache_get_value_name_int(0, "Money",PLAYER_INFO[playerid][pDinero]);
		cache_get_value_name_int(0, "Cocaina", PLAYER_INFO[playerid][pCocaina]);
		cache_get_value_name_int(0, "Perico", PLAYER_INFO[playerid][pPerico]);
		cache_get_value_name_int(0, "Heroina", PLAYER_INFO[playerid][pHeroina]);
		cache_get_value_name_int(0, "Preper", PLAYER_INFO[playerid][pPreper]);
		cache_get_value_name_int(0, "Gino", PLAYER_INFO[playerid][pGino]);
		cache_get_value_name_int(0, "RootCoins", PLAYER_INFO[playerid][pRootCoins]);
		cache_get_value_name_int(0, "Medicamentos", PLAYER_INFO[playerid][pRemedios]);
		cache_get_value_name_int(0, "Marihuana", PLAYER_INFO[playerid][pMarihuana]);
		cache_get_value_name_int(0, "Crack",PLAYER_INFO[playerid][pCrack]);
		cache_get_value_name_int(0, "Materiales", PLAYER_INFO[playerid][pMateriales]);
		cache_get_value_name_int(0, "Trabajo", PLAYER_INFO[playerid][pTrabajo]);
		cache_get_value_name_int(0, "Trabajo2", PLAYER_INFO[playerid][pTrabajo2]);
		cache_get_value_name_int(0, "TiempoDuda",PLAYER_TIMES[playerid][TiempoDuda]);
		cache_get_value_name_int(0, "TiempoAnuncio",PLAYER_TIMES[playerid][TiempoAnuncio]);
		cache_get_value_name_int(0, "RopaBasu", RopaBasu[playerid]);
		cache_get_value_name_int(0, "RopaMedi", RopaMedi[playerid]);
		cache_get_value_name_int(0, "RopaMeca", RopaMeca[playerid]);
		cache_get_value_name_int(0, "Afinidad1", PLAYER_INFO[playerid][pAfinidad1]);
		cache_get_value_name_int(0, "Afinidad2", PLAYER_INFO[playerid][pAfinidad2]);
		cache_get_value_name_int(0, "Afinidad3", PLAYER_INFO[playerid][pAfinidad3]);
		cache_get_value_name_int(0, "Afinidad4", PLAYER_INFO[playerid][pAfinidad4]);
		cache_get_value_name_int(0, "Afinidad5", PLAYER_INFO[playerid][pAfinidad5]);
		cache_get_value_name_int(0, "Afinidad6", PLAYER_INFO[playerid][pAfinidad6]);
		cache_get_value_name_int(0, "WP0",PLAYER_INFO[playerid][j_ARMAS][0]);
		cache_get_value_name_int(0, "WP1",PLAYER_INFO[playerid][j_ARMAS][1]);
		cache_get_value_name_int(0, "WP2",PLAYER_INFO[playerid][j_ARMAS][2]);
		cache_get_value_name_int(0, "WP3",PLAYER_INFO[playerid][j_ARMAS][3]);
		cache_get_value_name_int(0, "WP4",PLAYER_INFO[playerid][j_ARMAS][4]);
		cache_get_value_name_int(0, "WP5",PLAYER_INFO[playerid][j_ARMAS][5]);
		cache_get_value_name_int(0, "WP6",PLAYER_INFO[playerid][j_ARMAS][6]);
		cache_get_value_name_int(0, "WP7",PLAYER_INFO[playerid][j_ARMAS][7]);
		cache_get_value_name_int(0, "WP8",PLAYER_INFO[playerid][j_ARMAS][8]);
		cache_get_value_name_int(0, "WP9",PLAYER_INFO[playerid][j_ARMAS][9]);
		cache_get_value_name_int(0, "WP10",PLAYER_INFO[playerid][j_ARMAS][10]);
		cache_get_value_name_int(0, "WP11",PLAYER_INFO[playerid][j_ARMAS][11]);
		cache_get_value_name_int(0, "WP12",PLAYER_INFO[playerid][j_ARMAS][12]);
		cache_get_value_name_int(0, "NivelArmero", PLAYER_INFO[playerid][pNivelArmero]);
		cache_get_value_name_int(0, "ExpArmero", PLAYER_INFO[playerid][pExpArmero]);
		//
		cache_get_value_name_int(0, "MILITAR", PLAYER_INFO[playerid][mDuty]);
		//
		cache_get_value_name_int(0, "NivelCamionero", PLAYER_INFO[playerid][pNivelCamionero]);
		cache_get_value_name_int(0, "ExpCamionero", PLAYER_INFO[playerid][pExpCamionero]);
		cache_get_value_name_int(0, "NivelBasurero", PLAYER_INFO[playerid][pNivelBasurero]);
		cache_get_value_name_int(0, "ExpBasurero", PLAYER_INFO[playerid][pExpBasurero]);
		cache_get_value_name_int(0, "NivelLadron", PLAYER_INFO[playerid][pNivelLadron]);
		cache_get_value_name_int(0, "ExpLadron", PLAYER_INFO[playerid][pExpLadron]);
		cache_get_value_name_int(0, "NivelMedico", PLAYER_INFO[playerid][pNivelMedico]);
		cache_get_value_name_int(0, "ExpMedico", PLAYER_INFO[playerid][pExpMedico]);
		cache_get_value_name_int(0, "NivelTransportista", PLAYER_INFO[playerid][pNivelTransportista]);
		cache_get_value_name_int(0, "ExpTransportista", PLAYER_INFO[playerid][pExpTransportista]);
		cache_get_value_name_int(0, "TiempoPD", PLAYER_INFO[playerid][TiempoPD]);
		cache_get_value_name_int(0, "Interior", PLAYER_INFO[playerid][pInterior]);
		cache_get_value_name_int(0, "MundoVirtual",PLAYER_INFO[playerid][pMundoVirtual]);
		cache_get_value_name_int(0, "arrestado", PLAYER_INFO[playerid][arrestado]);
		cache_get_value_name_int(0, "horasjugadas", PLAYER_INFO[playerid][horasjugadas]);
		cache_get_value_name_float(0, "Vida",PLAYER_INFO[playerid][j_HEALTH]);
		cache_get_value_name_float(0, "Chaleco", PLAYER_INFO[playerid][j_ARMOUR]);
		cache_get_value_name_float(0, "posX",PLAYER_INFO[playerid][@X]);
		cache_get_value_name_float(0, "posY",PLAYER_INFO[playerid][@Y]);
		cache_get_value_name_float(0, "posZ",PLAYER_INFO[playerid][@Z]);
		cache_get_value_name_float(0, "posA",PLAYER_INFO[playerid][@A]);
		cache_get_value_name_float(0, "XE", PLAYER_INFO[playerid][jPosE_x]);
		cache_get_value_name_float(0, "YE", PLAYER_INFO[playerid][jPosE_y]);
		cache_get_value_name_float(0, "ZE", PLAYER_INFO[playerid][jPosE_z]);
		cache_get_value_name_float(0, "DeathX",DeathX[playerid]);
		cache_get_value_name_float(0, "DeathY",DeathY[playerid]);
		cache_get_value_name_float(0, "DeathZ",DeathZ[playerid]);
		cache_get_value_name(0, "Conexion", PLAYER_INFO[playerid][jConexion]);
		cache_get_value_name(0, "razon",PLAYER_INFO[playerid][pRazon]);
		cache_get_value_name(0, "Email",PLAYER_INFO[playerid][pEmail]);
		cache_get_value_name(0, "RazonSan", PLAYER_INFO[playerid][pRazonSan]);
		cache_get_value_name_int(0, "TieneEmisora", Emisoras[playerid][TieneEmisora]);
		cache_get_value_name(0, "NombreEmisora", Emisoras[playerid][NombreEmisora]);
        cache_get_value_name_int(0, "Acento", PLAYER_INFO[playerid][pAcento]);
        cache_get_value_name_int(0, "BackPack", BackPack[playerid][bDBID]);
        cache_get_value_name_int(0, "NivelTrailero", PLAYER_INFO[playerid][pNivelTrailero]);
		cache_get_value_name_int(0, "ExpTrailero", PLAYER_INFO[playerid][pExpTrailero]);
	    
        CAR_BackPack(playerid);
		LoadVehicles(playerid);
		LogeoCorrecto[playerid] = 1;
		
		SetSpawnInfo(playerid,0,PLAYER_INFO[playerid][pRopa],PLAYER_INFO[playerid][@X], PLAYER_INFO[playerid][@Y], PLAYER_INFO[playerid][@Z],PLAYER_INFO[playerid][@A],0,0,0,0,0,0);
		SetPlayerSkin(playerid,PLAYER_INFO[playerid][pRopa]);
		SetPlayerScore(playerid,PLAYER_INFO[playerid][pNivel]);
		SetPlayerArmourEx(playerid,PLAYER_INFO[playerid][j_ARMOUR]);
		SetPlayerHealthEx(playerid,PLAYER_INFO[playerid][j_HEALTH]);
		
		PLAYER_TIMES[playerid][TIMER_CHALECO] = gettime() + 3;
		PLAYER_TIMES[playerid][TIMER_VIDA] = gettime() + 3;
		
		if(PLAYER_TIMES[playerid][TiempoAnuncio] <= 0) PLAYER_TIMES[playerid][TiempoAnuncio] = 120;
		PLAYER_TIMES[playerid][TiempoAnuncio] = PLAYER_TIMES[playerid][TiempoAnuncio] + gettime();
		
		if(PLAYER_INFO[playerid][pBloqueado] == 1)
		{
			KillTimer(LCHAT[playerid]);
			new str[220];
			format(str, sizeof(str), " Su cuenta se encuentra bloqueada por ingresar desde un país distinto.", PLAYER_INFO[playerid][pRazon]);
			SendClientMessage(playerid, COLOR_MUTE, str);
			ExpulsarJugador(playerid,"Cuenta Bloqueada.");
			return 1;
		}
		if(PLAYER_INFO[playerid][p_Ban] == 1) return ExpulsarJugador(playerid,"Cuenta Baneada");
		if(EnClub[playerid] > 0)
		{
			SacarClubLogeado(playerid);
			return true;
		}
	    if(PLAYER_INFO[playerid][Agonizando] == 1)
        {
          Muriendo[playerid] = 1;
		  TextDrawShowForPlayer(playerid, NewPlayer[2]),TextDrawShowForPlayer(playerid, NewPlayer[0]),PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
   	      TextDrawShowForPlayer(playerid, Sangre);
		}
		if(PLAYER_INFO[playerid][pTiempoJail] > 0)
		{
		    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
			San[playerid] = 1;
			SetTimerEx("EnviarJail", 2000, false, "d", playerid);
			SpawnPlayer(playerid);
			return 1;
		}
		if(PLAYER_INFO[playerid][pCargos] > 0)
		{
		    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
			new dineroquitado = PLAYER_INFO[playerid][pCargos]*500+200;
			QuitarDinero(playerid, dineroquitado);
			SpawnPlayer(playerid);
			SetTimerEx("Encerrando2",3000,false,"d",playerid);
			return 1;
		}
		if(PLAYER_INFO[playerid][pEMS] == 0)
		{
			new string[128];
			format(string,sizeof(string),"{FFFFFF}Ingresa una dirección electronica válida para recuperar tu contraseña en caso de perderla.");
			ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT," ",string,"Siguiente","");
			return 1;
		}
		if(PLAYER_INFO[playerid][pSexo] == -1) return ShowPlayerDialog(playerid, SEXO_1, DIALOG_STYLE_LIST," ","{FFFFFF}Hombre\n{FFFFFF}Mujer","Seleccionar","Salir");
		else
		{
		    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
		    BarraHambre(playerid);
			BarraSed(playerid);
			JugadorLogeado[playerid] = 1;
			SpawnPlayer(playerid);
			return 1;
		}
	}
	else
	{
		if(IsPlayerConnected(playerid))
		{
			ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_INPUT," ","{FFFFFF}La contraseña que has ingresado está errónea\nSi no recuerdas tu contraseña contacta a un administrador","Enviar","Salir");
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(!IsPlayerNPC(playerid))
	{
	    new pCurWeap = GetPlayerWeapon(playerid);
	    if(pCurWeap != pCurrentWeapon[playerid]) {

	        DAR_COLOREARAM(playerid, pCurWeap);
	        pCurrentWeapon[playerid] = pCurWeap;
	    }
		if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID)
		{
			if(TAXI(GetPlayerSurfingVehicleID(playerid)))
			{
				if(GetVehicleSpeed(GetPlayerSurfingVehicleID(playerid)) >= 23)
				{
					new x = 0;
					if(x == 0)
					{
						x = 1;
						GetPlayerPos(playerid, CaidaTaxi[0][playerid],CaidaTaxi[1][playerid],CaidaTaxi[2][playerid]);
						SetTimerEx("Equilibrio",1000,false,"d",playerid);
					}
				}
			}
			new interior = GetVehicleInterior(GetPlayerSurfingVehicleID(playerid));
			new virtualw = GetVehicleVirtualWorld(GetPlayerSurfingVehicleID(playerid));
			if(virtualw != GetPlayerVirtualWorld(playerid)) SetPlayerVirtualWorld(playerid,virtualw);
			if(interior != GetPlayerInterior(playerid)) SetPlayerInterior(playerid,interior);
			PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 2;
		}
 	}
	if(!IsPlayerNPC(playerid))
	{
		if(PLAYER_TEMP[playerid][PuedeRobar] == 0)
		{
			new actor = GetPlayerTargetDynamicActor(playerid);
			new permiterobar = 0;
			for(new act = 0; act < MAX_NPC_ROBOS; act++)
			{
				if(actor == RoboTiendas[act][Actor]) permiterobar = 1;
			}
			if(actor != INVALID_ACTOR_ID && permiterobar == 1)
			{
				switch(GetPlayerWeapon(playerid))
				{
					case 22 .. 33:
					{
						if(IsValidDynamicActor(actor))
						{
							new Float:x,Float:y,Float:z;
							GetDynamicActorPos(actor, x,y,z);
							if(IsPlayerInRangeOfPoint(playerid,10.0,x,y,z))
							{
								RoboActual[playerid] = actor;
								PLAYER_TEMP[playerid][PuedeRobar] = 1;
								LevantarMano(playerid,actor);
							}
							else PLAYER_TEMP[playerid][PuedeRobar] = 0;
						}
					}
				}
			}
		}
	}
	if(!IsPlayerNPC(playerid))
	{
		if(PLAYER_INFO[playerid][pDinero] != GetPlayerMoney(playerid))
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid,PLAYER_INFO[playerid][pDinero]);
		}
		if(PLAYER_INFO[playerid][Agonizando] != 0) SetPlayerArmedWeapon(playerid, 0);
		if(TieneEncargo[playerid] > 0 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] == 23  && Encargo[TieneEncargo[playerid]][Tiene9mm] == 0)
		{
			Encargo[TieneEncargo[playerid]][Tiene9mm] = 1;
			TextDrawSetString(MisionCriminal[TieneEncargo[playerid]], "~g~Reunete~w~ con tu colega en el punto marcado.");
		}
	}
	return 1;
}
public UpdateTerritorio(terri_id)
{
	if(!TERRITORIOS_INFO[terri_id][Territorio_Valido]) return 1;
	if(!TERRITORIOS_INFO[terri_id][Territorio_EnGuerra]) return 1;
	if(TERRITORIOS_INFO[terri_id][Territorio_Tiempo] <= 0)
	{
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_BandaID2]][B_Atacando] = false;
		TERRITORIOS_INFO[terri_id][Territorio_BandaID] = TERRITORIOS_INFO[terri_id][Territorio_AtacanteID];
		TERRITORIOS_INFO[terri_id][Territorio_BandaID2] = TERRITORIOS_INFO[terri_id][Territorio_AtacanteID];
		new r, g, b, a;
		HexToRGBA(BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][BColor], r, g, b, a);
		TERRITORIOS_INFO[terri_id][Territorio_Color] = RGBAToHex(r, g, b, 135);
		new message[145],Query[200];
		format(message, sizeof message, "{FFFF04}[Radio] {FFCA00}%s {FFFFFF}ha conquistado un nuevo territorio.", BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][BNombre],TERRITORIOS_INFO[terri_id][Territorio_BandaID]);
		mysql_format(handle_db, Query, 200, "UPDATE `territorios` SET `Banda`='%d',`Color`='%d' WHERE `ID`='%d'",TERRITORIOS_INFO[terri_id][Territorio_AtacanteID],TERRITORIOS_INFO[terri_id][Territorio_Color],TERRITORIOS_INFO[terri_id][Territorio_ID]);
		mysql_tquery(handle_db, Query);
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][UltimoAtaque] = gettime() + (60*3);
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][B_Atacando] = false;
		TERRITORIOS_INFO[terri_id][Territorio_EnGuerra] = false;
		TERRITORIOS_INFO[terri_id][Territorio_AtacanteID] = 0;
		TERRITORIOS_INFO[terri_id][Territorio_Tiempo] = 0;
		TERRITORIOS_INFO[terri_id][Territorio_UltimoA] = gettime();
		KillTimer(TERRITORIOS_INFO[terri_id][Territorio_TimerEx]);
		UpdateGangZoneColor(terri_id);
		TERRITORIOS_INFO[terri_id][Territorio_Usado] = true;
		return 1;
	}
	TERRITORIOS_INFO[terri_id][Territorio_Tiempo] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIOS_INFO[terri_id][Territorio_Tiempo]));
	TextDrawSetString(Territorio_TD[1], message);
	new attackers_in_area = ContarMiembrosEnTerritorio(TERRITORIOS_INFO[terri_id][Territorio_AtacanteID], terri_id);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{FFFF04}[Banda] {FFFFFF}%s no ha podido conquistar el territorio que estaba atacando.", BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][BNombre]);
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][UltimoAtaque] = gettime() + (60*3);
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_AtacanteID]][B_Atacando] = false;
		BandasInfo[TERRITORIOS_INFO[terri_id][Territorio_BandaID2]][B_Atacando] = false;
		TERRITORIOS_INFO[terri_id][Territorio_EnGuerra] = false;
		TERRITORIOS_INFO[terri_id][Territorio_AtacanteID] = 0;
		TERRITORIOS_INFO[terri_id][Territorio_Tiempo] = 0;
		TERRITORIOS_INFO[terri_id][Territorio_UltimoA] = gettime();
		KillTimer(TERRITORIOS_INFO[terri_id][Territorio_TimerEx]);
		UpdateGangZoneColor(terri_id);
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_INFO[i][pFaccion] > 2)
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIOS_INFO[terri_id][Territorio_Area]))
					{
						ColorJugadorDefault(i);
						TextDrawHideForPlayer(i, Territorio_TD[1]);
						TextDrawHideForPlayer(i, Territorio_TD[0]);
					}
				}
			}
		}
		return 1;
	}
	KillTimer(TERRITORIOS_INFO[terri_id][Territorio_TimerEx]);
	TERRITORIOS_INFO[terri_id][Territorio_TimerEx] = SetTimerEx("UpdateTerritorio", 1000, false, "i", terri_id);
	return 1;
}

public L_Vehicles(resultid, extraid)
{
	new content[64];
	switch(resultid)
	{
		case 1:
		{
			if(cache_num_rows() > 0)
			{
				cache_get_value_name(0, "id", content);					PLAYER_INFO[extraid][vID1] = strval(content);
				cache_get_value_name(0, "EstacionadoX", content);		PLAYER_INFO[extraid][pOX] = floatstr(content);
				cache_get_value_name(0, "EstacionadoY", content);		PLAYER_INFO[extraid][pOY] = floatstr(content);
				cache_get_value_name(0, "EstacionadoZ", content);		PLAYER_INFO[extraid][pOZ] = floatstr(content);
				cache_get_value_name(0, "EstacionadoA", content);		PLAYER_INFO[extraid][pOA] = floatstr(content);
				cache_get_value_name(0, "VE1", content);				PLAYER_INFO[extraid][VE1] = strval(content);
				cache_get_value_name(0, "VE2", content);				PLAYER_INFO[extraid][VE2] = strval(content);
				cache_get_value_name(0, "VE3", content);				PLAYER_INFO[extraid][VE3] = strval(content);
				cache_get_value_name(0, "VE4", content);				PLAYER_INFO[extraid][VE4] = strval(content);
				cache_get_value_name(0, "vMoneda", content);			PLAYER_INFO[extraid][vMonedaa] = strval(content);
				cache_get_value_name(0, "Modelo", content);				PLAYER_INFO[extraid][vModelo] = strval(content);
				cache_get_value_name(0, "Combustible", content);		PLAYER_INFO[extraid][vGas] = strval(content);
				cache_get_value_name(0, "Interior", content);			PLAYER_INFO[extraid][vinterior] = strval(content);
				cache_get_value_name(0, "VW", content);					PLAYER_INFO[extraid][vvw] = strval(content);
				cache_get_value_name(0, "Color1", content);				PLAYER_INFO[extraid][vColor1] = strval(content);
				cache_get_value_name(0, "Color2", content);				PLAYER_INFO[extraid][vColor2] = strval(content);
				cache_get_value_name(0, "Vida", content);				PLAYER_INFO[extraid][pVidaV] = floatstr(content);
				cache_get_value_name(0, "vBaul", content);				PLAYER_INFO[extraid][vBaul] = strval(content);
				cache_get_value_name(0, "vBaul2", content);				PLAYER_INFO[extraid][vBaul2] = strval(content);
				cache_get_value_name(0, "vBaul3", content);				PLAYER_INFO[extraid][vBaul3] = strval(content);
				cache_get_value_name(0, "vBaul4", content);				PLAYER_INFO[extraid][vBaul4] = strval(content);
				cache_get_value_name(0, "vBaul5", content);				PLAYER_INFO[extraid][vBaul5] = strval(content);
				cache_get_value_name(0, "vBaul6", content);				PLAYER_INFO[extraid][vBaul6] = strval(content);
				cache_get_value_name(0, "vBaul7", content);				PLAYER_INFO[extraid][vBaul7] = strval(content);
				cache_get_value_name(0, "vBaul8", content);				PLAYER_INFO[extraid][vBaul8] = strval(content);
				cache_get_value_name(0, "vBaul9", content);				PLAYER_INFO[extraid][vBaul9] = strval(content);
				cache_get_value_name(0, "vBaul10", content);			PLAYER_INFO[extraid][vBaul10] = strval(content);
				cache_get_value_name(0, "PaintJob", content);			PLAYER_INFO[extraid][vPJ] = strval(content);
				cache_get_value_name(0, "Componentes0", content);		PLAYER_INFO[extraid][vComponentes0] = strval(content);
				cache_get_value_name(0, "Componentes1", content);		PLAYER_INFO[extraid][vComponentes1] = strval(content);
				cache_get_value_name(0, "Componentes2", content);		PLAYER_INFO[extraid][vComponentes2] = strval(content);
				cache_get_value_name(0, "Componentes3", content);		PLAYER_INFO[extraid][vComponentes3] = strval(content);
				cache_get_value_name(0, "Componentes4", content);		PLAYER_INFO[extraid][vComponentes4] = strval(content);
				cache_get_value_name(0, "Componentes5", content);		PLAYER_INFO[extraid][vComponentes5] = strval(content);
				cache_get_value_name(0, "Componentes6", content);		PLAYER_INFO[extraid][vComponentes6] = strval(content);
				cache_get_value_name(0, "Componentes7", content);		PLAYER_INFO[extraid][vComponentes7] = strval(content);
				cache_get_value_name(0, "Componentes8", content);		PLAYER_INFO[extraid][vComponentes8] = strval(content);
				cache_get_value_name(0, "Componentes9", content);		PLAYER_INFO[extraid][vComponentes9] = strval(content);
				cache_get_value_name(0, "Componentes10", content);		PLAYER_INFO[extraid][vComponentes10] = strval(content);
				cache_get_value_name(0, "Componentes11", content);		PLAYER_INFO[extraid][vComponentes11] = strval(content);
				cache_get_value_name(0, "Componentes12", content);		PLAYER_INFO[extraid][vComponentes12] = strval(content);
				cache_get_value_name(0, "Componentes13", content);		PLAYER_INFO[extraid][vComponentes13] = strval(content);
				cache_get_value_name(0, "Precio", content);				PLAYER_INFO[extraid][vPrecio] = strval(content);
				cache_get_value_name(0, "X", content);					PLAYER_INFO[extraid][vX] = floatstr(content);
				cache_get_value_name(0, "Y", content);					PLAYER_INFO[extraid][vY] = floatstr(content);
				cache_get_value_name(0, "Z", content);					PLAYER_INFO[extraid][vZ] = floatstr(content);
				cache_get_value_name(0, "A", content);					PLAYER_INFO[extraid][vA] = floatstr(content);
				cache_get_value_name(0, "O_VW", content);				PLAYER_INFO[extraid][vOvw] = strval(content);
				cache_get_value_name(0, "Seguro", content);				PLAYER_INFO[extraid][vSeguro] = strval(content);
				cache_get_value_name(0, "O_Interior", content);			PLAYER_INFO[extraid][vOinterior] = strval(content);
				cache_get_value_name(0, "vAlarma", content);            PLAYER_INFO[extraid][vAlarma] = strval(content);
				cache_get_value_name(0, "Traba", content);				PLAYER_INFO[extraid][vTraba] = strval(content);
				cache_get_value_name(0, "Estado_Alarma", content);		alarma[autos[extraid]] = strval(content);   PLAYER_INFO[extraid][vAAlarma] = strval(content);
				cache_get_value_name(0, "Estado_Seguro", content);		bloqueado[autos[extraid]] = strval(content);    PLAYER_INFO[extraid][vSeguro] = strval(content);
				return 1;
			}
			else return 1;
		}
		case 2:
		{
			if(cache_num_rows() > 0)
			{
			    cache_get_value_name(0, "id", content);					PLAYER_INFO[extraid][vID2] = strval(content);
				cache_get_value_name(0, "EstacionadoX", content);		PLAYER_INFO[extraid][pOX2] = floatstr(content);
				cache_get_value_name(0, "EstacionadoY", content);		PLAYER_INFO[extraid][pOY2] = floatstr(content);
				cache_get_value_name(0, "EstacionadoZ", content);		PLAYER_INFO[extraid][pOZ2] = floatstr(content);
				cache_get_value_name(0, "EstacionadoA", content);		PLAYER_INFO[extraid][pOA2] = floatstr(content);
				cache_get_value_name(0, "VE1", content);				PLAYER_INFO[extraid][V2E1] = strval(content);
				cache_get_value_name(0, "VE2", content);				PLAYER_INFO[extraid][V2E2] = strval(content);
				cache_get_value_name(0, "VE3", content);				PLAYER_INFO[extraid][V2E3] = strval(content);
				cache_get_value_name(0, "VE4", content);				PLAYER_INFO[extraid][V2E4] = strval(content);
				cache_get_value_name(0, "vMoneda", content);			PLAYER_INFO[extraid][v2Monedaa] = strval(content);
				cache_get_value_name(0, "Modelo", content);				PLAYER_INFO[extraid][vModelo2] = strval(content);
				cache_get_value_name(0, "Combustible", content);		PLAYER_INFO[extraid][v2Gas] = strval(content);
				cache_get_value_name(0, "Interior", content);			PLAYER_INFO[extraid][v2interior] = strval(content);
				cache_get_value_name(0, "VW", content);					PLAYER_INFO[extraid][v2vw] = strval(content);
				cache_get_value_name(0, "Color1", content);				PLAYER_INFO[extraid][v2Color1] = strval(content);
				cache_get_value_name(0, "Color2", content);				PLAYER_INFO[extraid][v2Color2] = strval(content);
				cache_get_value_name(0, "Vida", content);				PLAYER_INFO[extraid][pVidaV2] = floatstr(content);
				cache_get_value_name(0, "vBaul", content);				PLAYER_INFO[extraid][v2Baul] = strval(content);
				cache_get_value_name(0, "vBaul2", content);				PLAYER_INFO[extraid][v2Baul2] = strval(content);
				cache_get_value_name(0, "vBaul3", content);				PLAYER_INFO[extraid][v2Baul3] = strval(content);
				cache_get_value_name(0, "vBaul4", content);				PLAYER_INFO[extraid][v2Baul4] = strval(content);
				cache_get_value_name(0, "vBaul5", content);				PLAYER_INFO[extraid][v2Baul5] = strval(content);
				cache_get_value_name(0, "vBaul6", content);				PLAYER_INFO[extraid][v2Baul6] = strval(content);
				cache_get_value_name(0, "vBaul7", content);				PLAYER_INFO[extraid][v2Baul7] = strval(content);
				cache_get_value_name(0, "vBaul8", content);				PLAYER_INFO[extraid][v2Baul8] = strval(content);
				cache_get_value_name(0, "vBaul9", content);				PLAYER_INFO[extraid][v2Baul9] = strval(content);
				cache_get_value_name(0, "vBaul10", content);			PLAYER_INFO[extraid][v2Baul10] = strval(content);
				cache_get_value_name(0, "PaintJob", content);			PLAYER_INFO[extraid][vPJ2] = strval(content);
				cache_get_value_name(0, "Componentes0", content);		PLAYER_INFO[extraid][v2Componentes0] = strval(content);
				cache_get_value_name(0, "Componentes1", content);		PLAYER_INFO[extraid][v2Componentes1] = strval(content);
				cache_get_value_name(0, "Componentes2", content);		PLAYER_INFO[extraid][v2Componentes2] = strval(content);
				cache_get_value_name(0, "Componentes3", content);		PLAYER_INFO[extraid][v2Componentes3] = strval(content);
				cache_get_value_name(0, "Componentes4", content);		PLAYER_INFO[extraid][v2Componentes4] = strval(content);
				cache_get_value_name(0, "Componentes5", content);		PLAYER_INFO[extraid][v2Componentes5] = strval(content);
				cache_get_value_name(0, "Componentes6", content);		PLAYER_INFO[extraid][v2Componentes6] = strval(content);
				cache_get_value_name(0, "Componentes7", content);		PLAYER_INFO[extraid][v2Componentes7] = strval(content);
				cache_get_value_name(0, "Componentes8", content);		PLAYER_INFO[extraid][v2Componentes8] = strval(content);
				cache_get_value_name(0, "Componentes9", content);		PLAYER_INFO[extraid][v2Componentes9] = strval(content);
				cache_get_value_name(0, "Componentes10", content);		PLAYER_INFO[extraid][v2Componentes10] = strval(content);
				cache_get_value_name(0, "Componentes11", content);		PLAYER_INFO[extraid][v2Componentes11] = strval(content);
				cache_get_value_name(0, "Componentes12", content);		PLAYER_INFO[extraid][v2Componentes12] = strval(content);
				cache_get_value_name(0, "Componentes13", content);		PLAYER_INFO[extraid][v2Componentes13] = strval(content);
				cache_get_value_name(0, "Precio", content);				PLAYER_INFO[extraid][v2Precio] = strval(content);
				cache_get_value_name(0, "X", content);					PLAYER_INFO[extraid][v2X] = floatstr(content);
				cache_get_value_name(0, "Y", content);					PLAYER_INFO[extraid][v2Y] = floatstr(content);
				cache_get_value_name(0, "Z", content);					PLAYER_INFO[extraid][v2Z] = floatstr(content);
				cache_get_value_name(0, "A", content);					PLAYER_INFO[extraid][v2A] = floatstr(content);
				cache_get_value_name(0, "O_VW", content);				PLAYER_INFO[extraid][v2Ovw] = strval(content);
				cache_get_value_name(0, "Seguro", content);				PLAYER_INFO[extraid][vSeguro2] = strval(content);
				cache_get_value_name(0, "O_Interior", content);			PLAYER_INFO[extraid][v2Ointerior] = strval(content);
				cache_get_value_name(0, "vAlarma", content);            PLAYER_INFO[extraid][v2Alarma] = strval(content);
				cache_get_value_name(0, "Traba", content);				PLAYER_INFO[extraid][v2Traba] = strval(content);
				cache_get_value_name(0, "Estado_Alarma", content);		alarma[autos2[extraid]] = strval(content);  PLAYER_INFO[extraid][vAAlarma2] = strval(content);
				cache_get_value_name(0, "Estado_Seguro", content);		bloqueado[autos2[extraid]] = strval(content);   PLAYER_INFO[extraid][vSeguro2] = strval(content);
				return 1;
			}
			else return 1;
		}
		case 3:
		{
			if(cache_num_rows() > 0)
			{
			    cache_get_value_name(0, "id", content);					PLAYER_INFO[extraid][vID3] = strval(content);
				cache_get_value_name(0, "EstacionadoX", content);		PLAYER_INFO[extraid][pOX3] = floatstr(content);
				cache_get_value_name(0, "EstacionadoY", content);		PLAYER_INFO[extraid][pOY3] = floatstr(content);
				cache_get_value_name(0, "EstacionadoZ", content);		PLAYER_INFO[extraid][pOZ3] = floatstr(content);
				cache_get_value_name(0, "EstacionadoA", content);		PLAYER_INFO[extraid][pOA3] = floatstr(content);
				cache_get_value_name(0, "VE1", content);				PLAYER_INFO[extraid][V3E1] = strval(content);
				cache_get_value_name(0, "VE2", content);				PLAYER_INFO[extraid][V3E2] = strval(content);
				cache_get_value_name(0, "VE3", content);				PLAYER_INFO[extraid][V3E3] = strval(content);
				cache_get_value_name(0, "VE4", content);				PLAYER_INFO[extraid][V3E4] = strval(content);
				cache_get_value_name(0, "vMoneda", content);			PLAYER_INFO[extraid][v3Monedaa] = strval(content);
				cache_get_value_name(0, "Modelo", content);				PLAYER_INFO[extraid][vModelo3] = strval(content);
				cache_get_value_name(0, "Combustible", content);		PLAYER_INFO[extraid][v3Gas] = strval(content);
				cache_get_value_name(0, "Interior", content);			PLAYER_INFO[extraid][v3interior] = strval(content);
				cache_get_value_name(0, "VW", content);					PLAYER_INFO[extraid][v3vw] = strval(content);
				cache_get_value_name(0, "Color1", content);				PLAYER_INFO[extraid][v3Color1] = strval(content);
				cache_get_value_name(0, "Color2", content);				PLAYER_INFO[extraid][v3Color2] = strval(content);
				cache_get_value_name(0, "Vida", content);				PLAYER_INFO[extraid][pVidaV3] = floatstr(content);
				cache_get_value_name(0, "vBaul", content);				PLAYER_INFO[extraid][v3Baul] = strval(content);
				cache_get_value_name(0, "vBaul2", content);				PLAYER_INFO[extraid][v3Baul2] = strval(content);
				cache_get_value_name(0, "vBaul3", content);				PLAYER_INFO[extraid][v3Baul3] = strval(content);
				cache_get_value_name(0, "vBaul4", content);				PLAYER_INFO[extraid][v3Baul4] = strval(content);
				cache_get_value_name(0, "vBaul5", content);				PLAYER_INFO[extraid][v3Baul5] = strval(content);
				cache_get_value_name(0, "vBaul6", content);				PLAYER_INFO[extraid][v3Baul6] = strval(content);
				cache_get_value_name(0, "vBaul7", content);				PLAYER_INFO[extraid][v3Baul7] = strval(content);
				cache_get_value_name(0, "vBaul8", content);				PLAYER_INFO[extraid][v3Baul8] = strval(content);
				cache_get_value_name(0, "vBaul9", content);				PLAYER_INFO[extraid][v3Baul9] = strval(content);
				cache_get_value_name(0, "vBaul10", content);			PLAYER_INFO[extraid][v3Baul10] = strval(content);
				cache_get_value_name(0, "PaintJob", content);			PLAYER_INFO[extraid][vPJ3] = strval(content);
				cache_get_value_name(0, "Componentes0", content);		PLAYER_INFO[extraid][v3Componentes0] = strval(content);
				cache_get_value_name(0, "Componentes1", content);		PLAYER_INFO[extraid][v3Componentes1] = strval(content);
				cache_get_value_name(0, "Componentes2", content);		PLAYER_INFO[extraid][v3Componentes2] = strval(content);
				cache_get_value_name(0, "Componentes3", content);		PLAYER_INFO[extraid][v3Componentes3] = strval(content);
				cache_get_value_name(0, "Componentes4", content);		PLAYER_INFO[extraid][v3Componentes4] = strval(content);
				cache_get_value_name(0, "Componentes5", content);		PLAYER_INFO[extraid][v3Componentes5] = strval(content);
				cache_get_value_name(0, "Componentes6", content);		PLAYER_INFO[extraid][v3Componentes6] = strval(content);
				cache_get_value_name(0, "Componentes7", content);		PLAYER_INFO[extraid][v3Componentes7] = strval(content);
				cache_get_value_name(0, "Componentes8", content);		PLAYER_INFO[extraid][v3Componentes8] = strval(content);
				cache_get_value_name(0, "Componentes9", content);		PLAYER_INFO[extraid][v3Componentes9] = strval(content);
				cache_get_value_name(0, "Componentes10", content);		PLAYER_INFO[extraid][v3Componentes10] = strval(content);
				cache_get_value_name(0, "Componentes11", content);		PLAYER_INFO[extraid][v3Componentes11] = strval(content);
				cache_get_value_name(0, "Componentes12", content);		PLAYER_INFO[extraid][v3Componentes12] = strval(content);
				cache_get_value_name(0, "Componentes13", content);		PLAYER_INFO[extraid][v3Componentes13] = strval(content);
				cache_get_value_name(0, "Precio", content);				PLAYER_INFO[extraid][v3Precio] = strval(content);
				cache_get_value_name(0, "X", content);					PLAYER_INFO[extraid][v3X] = floatstr(content);
				cache_get_value_name(0, "Y", content);					PLAYER_INFO[extraid][v3Y] = floatstr(content);
				cache_get_value_name(0, "Z", content);					PLAYER_INFO[extraid][v3Z] = floatstr(content);
				cache_get_value_name(0, "A", content);					PLAYER_INFO[extraid][v3A] = floatstr(content);
				cache_get_value_name(0, "O_VW", content);				PLAYER_INFO[extraid][v3Ovw] = strval(content);
				cache_get_value_name(0, "Seguro", content);				PLAYER_INFO[extraid][vSeguro3] = strval(content);
				cache_get_value_name(0, "O_Interior", content);			PLAYER_INFO[extraid][v3Ointerior] = strval(content);
				cache_get_value_name(0, "vAlarma", content);            PLAYER_INFO[extraid][v3Alarma] = strval(content);
				cache_get_value_name(0, "Traba", content);				PLAYER_INFO[extraid][v3Traba] = strval(content);
				cache_get_value_name(0, "Estado_Alarma", content);		alarma[autos3[extraid]] = strval(content);  PLAYER_INFO[extraid][vAAlarma3] = strval(content);
				cache_get_value_name(0, "Estado_Seguro", content);		bloqueado[autos3[extraid]] = strval(content);   PLAYER_INFO[extraid][vSeguro3] = strval(content);
				return 1;
			}
			else return 1;
		}
		case 4:
		{
			if(cache_num_rows() > 0)
			{
			    cache_get_value_name(0, "id", content);					PLAYER_INFO[extraid][vID4] = strval(content);
				cache_get_value_name(0, "EstacionadoX", content);		PLAYER_INFO[extraid][pOX4] = floatstr(content);
				cache_get_value_name(0, "EstacionadoY", content);		PLAYER_INFO[extraid][pOY4] = floatstr(content);
				cache_get_value_name(0, "EstacionadoZ", content);		PLAYER_INFO[extraid][pOZ4] = floatstr(content);
				cache_get_value_name(0, "EstacionadoA", content);		PLAYER_INFO[extraid][pOA4] = floatstr(content);
				cache_get_value_name(0, "VE1", content);				PLAYER_INFO[extraid][V4E1] = strval(content);
				cache_get_value_name(0, "VE2", content);				PLAYER_INFO[extraid][V4E2] = strval(content);
				cache_get_value_name(0, "VE3", content);				PLAYER_INFO[extraid][V4E3] = strval(content);
				cache_get_value_name(0, "VE4", content);				PLAYER_INFO[extraid][V4E4] = strval(content);
				cache_get_value_name(0, "vMoneda", content);			PLAYER_INFO[extraid][v4Monedaa] = strval(content);
				cache_get_value_name(0, "Modelo", content);				PLAYER_INFO[extraid][vModelo4] = strval(content);
				cache_get_value_name(0, "Combustible", content);		PLAYER_INFO[extraid][v4Gas] = strval(content);
				cache_get_value_name(0, "Interior", content);			PLAYER_INFO[extraid][v4interior] = strval(content);
				cache_get_value_name(0, "VW", content);					PLAYER_INFO[extraid][v4vw] = strval(content);
				cache_get_value_name(0, "Color1", content);				PLAYER_INFO[extraid][v4Color1] = strval(content);
				cache_get_value_name(0, "Color2", content);				PLAYER_INFO[extraid][v4Color2] = strval(content);
				cache_get_value_name(0, "Vida", content);				PLAYER_INFO[extraid][pVidaV4] = floatstr(content);
				cache_get_value_name(0, "vBaul", content);				PLAYER_INFO[extraid][v4Baul] = strval(content);
				cache_get_value_name(0, "vBaul2", content);				PLAYER_INFO[extraid][v4Baul2] = strval(content);
				cache_get_value_name(0, "vBaul3", content);				PLAYER_INFO[extraid][v4Baul3] = strval(content);
				cache_get_value_name(0, "vBaul4", content);				PLAYER_INFO[extraid][v4Baul4] = strval(content);
				cache_get_value_name(0, "vBaul5", content);				PLAYER_INFO[extraid][v4Baul5] = strval(content);
				cache_get_value_name(0, "vBaul6", content);				PLAYER_INFO[extraid][v4Baul6] = strval(content);
				cache_get_value_name(0, "vBaul7", content);				PLAYER_INFO[extraid][v4Baul7] = strval(content);
				cache_get_value_name(0, "vBaul8", content);				PLAYER_INFO[extraid][v4Baul8] = strval(content);
				cache_get_value_name(0, "vBaul9", content);				PLAYER_INFO[extraid][v4Baul9] = strval(content);
				cache_get_value_name(0, "vBaul10", content);			PLAYER_INFO[extraid][v4Baul10] = strval(content);
				cache_get_value_name(0, "PaintJob", content);			PLAYER_INFO[extraid][vPJ4] = strval(content);
				cache_get_value_name(0, "Componentes0", content);		PLAYER_INFO[extraid][v4Componentes0] = strval(content);
				cache_get_value_name(0, "Componentes1", content);		PLAYER_INFO[extraid][v4Componentes1] = strval(content);
				cache_get_value_name(0, "Componentes2", content);		PLAYER_INFO[extraid][v4Componentes2] = strval(content);
				cache_get_value_name(0, "Componentes3", content);		PLAYER_INFO[extraid][v4Componentes3] = strval(content);
				cache_get_value_name(0, "Componentes4", content);		PLAYER_INFO[extraid][v4Componentes4] = strval(content);
				cache_get_value_name(0, "Componentes5", content);		PLAYER_INFO[extraid][v4Componentes5] = strval(content);
				cache_get_value_name(0, "Componentes6", content);		PLAYER_INFO[extraid][v4Componentes6] = strval(content);
				cache_get_value_name(0, "Componentes7", content);		PLAYER_INFO[extraid][v4Componentes7] = strval(content);
				cache_get_value_name(0, "Componentes8", content);		PLAYER_INFO[extraid][v4Componentes8] = strval(content);
				cache_get_value_name(0, "Componentes9", content);		PLAYER_INFO[extraid][v4Componentes9] = strval(content);
				cache_get_value_name(0, "Componentes10", content);		PLAYER_INFO[extraid][v4Componentes10] = strval(content);
				cache_get_value_name(0, "Componentes11", content);		PLAYER_INFO[extraid][v4Componentes11] = strval(content);
				cache_get_value_name(0, "Componentes12", content);		PLAYER_INFO[extraid][v4Componentes12] = strval(content);
				cache_get_value_name(0, "Componentes13", content);		PLAYER_INFO[extraid][v4Componentes13] = strval(content);
				cache_get_value_name(0, "Precio", content);				PLAYER_INFO[extraid][v4Precio] = strval(content);
				cache_get_value_name(0, "X", content);					PLAYER_INFO[extraid][v4X] = floatstr(content);
				cache_get_value_name(0, "Y", content);					PLAYER_INFO[extraid][v4Y] = floatstr(content);
				cache_get_value_name(0, "Z", content);					PLAYER_INFO[extraid][v4Z] = floatstr(content);
				cache_get_value_name(0, "A", content);					PLAYER_INFO[extraid][v4A] = floatstr(content);
				cache_get_value_name(0, "O_VW", content);				PLAYER_INFO[extraid][v4Ovw] = strval(content);
				cache_get_value_name(0, "Seguro", content);				PLAYER_INFO[extraid][vSeguro4] = strval(content);
				cache_get_value_name(0, "O_Interior", content);			PLAYER_INFO[extraid][v4Ointerior] = strval(content);
				cache_get_value_name(0, "vAlarma", content);            PLAYER_INFO[extraid][v4Alarma] = strval(content);
				cache_get_value_name(0, "Traba", content);				PLAYER_INFO[extraid][v4Traba] = strval(content);
				cache_get_value_name(0, "Estado_Alarma", content);		alarma[autos4[extraid]] = strval(content);  PLAYER_INFO[extraid][vAAlarma4] = strval(content);
				cache_get_value_name(0, "Estado_Seguro", content);		bloqueado[autos4[extraid]] = strval(content);   PLAYER_INFO[extraid][vSeguro4] = strval(content);
				return 1;
			}
			else return true;
		}
	}
	return true;
}
public L_Objetos(vehicle_id)
{
	if(cache_num_rows() == 0) return false;
	new vobjects;
	for(new z; z < cache_num_rows(); z++ )
	{
		VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_VALID] = true;
		cache_get_value_name_int(z, "ID", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ID]);
		cache_get_value_name_int(z, "TYPE", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE]);
		cache_get_value_name(z, "NAME", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_NAME]);
		cache_get_value_name_int(z, "MODELID", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_MODELID]);
		cache_get_value_name(z, "TEXT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_TEXT]);
		cache_get_value_name_float(z, "OFF_X", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][0]);
		cache_get_value_name_float(z, "OFF_Y", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][1]);
		cache_get_value_name_float(z, "OFF_Z", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][2]);
		cache_get_value_name_float(z, "ROT_X", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][0]);
		cache_get_value_name_float(z, "ROT_Y", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][1]);
		cache_get_value_name_float(z, "ROT_Z", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][2]);
		cache_get_value_name(z, "FONT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT]);
		cache_get_value_name_int(z, "ATTACHED",VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ATTACHED]);
		cache_get_value_name_int(z, "COLOR_0", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][0]);
		cache_get_value_name_int(z, "COLOR_1", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][1]);
		cache_get_value_name_int(z, "COLOR_2", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][2]);
		cache_get_value_name_int(z, "COLOR_3", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][3]);
		cache_get_value_name_int(z, "COLOR_4", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][4]);
		cache_get_value_name_int(z, "FONT_SIZE", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_SIZE]);
		cache_get_value_name_int(z, "FONT_BOLD", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_BOLD]);
		cache_get_value_name_int(z, "FONT_COLOR", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_COLOR]);
 	 	UpdateVehicleAttachedObject(vehicle_id, vobjects, true);
		vobjects++;
	}
	return true;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
    #if DEBUG_GM == 1
    printf("(OnVehicleMod) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
    #endif

	QuitarDinero(playerid, GetVehicleComponentPrice(componentid));
	new interior = GetPlayerInterior(playerid);
	if(interior == 2 && IsPlayerInRangeOfPoint(playerid,15.0,616.7820,-74.815,997.6350))	return 1;	//Loco Low
	if(interior == 3 && IsPlayerInRangeOfPoint(playerid,15.0,615.2851,-124.2390,997.6350))	return 1;	//Wheel Arch Angels
	if(interior == 1 && IsPlayerInRangeOfPoint(playerid,15.0,617.5380,-1.9900,1000.6829))	return 1;	//Transfender

    KickAntiCheat(playerid, 0, 0, "Posible cheat de tuneo");
	return 1;
}
UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SendClientMessage(playerid, -1, "{FF6347}ACTUALIZAMOS EL TOY.");
    SetPlayerAttachedObject(playerid, index, PLAYER_TOYS[playerid][index][pt_MODEL_ID],
	PLAYER_TOYS[playerid][index][pt_BONE], PLAYER_TOYS[playerid][index][pt_POS][0],
	PLAYER_TOYS[playerid][index][pt_POS][1], PLAYER_TOYS[playerid][index][pt_POS][2],
	PLAYER_TOYS[playerid][index][pt_ROT][0], PLAYER_TOYS[playerid][index][pt_ROT][1],
	PLAYER_TOYS[playerid][index][pt_ROT][2], PLAYER_TOYS[playerid][index][pt_SCALE][0],
	PLAYER_TOYS[playerid][index][pt_SCALE][1], PLAYER_TOYS[playerid][index][pt_SCALE][2],
    PLAYER_TOYS[playerid][index][player_toy_COLOR_1],PLAYER_TOYS[playerid][index][player_toy_COLOR_2]
	);

	return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    #if DEBUG_GM == 1
	printf("(OnPlayerEditAttachedObject) PlayerID: %d", playerid);
	#endif
 	if(index != PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]) return 0;
    if(response)
    {
        if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
	    {
	        SendClientMessage(playerid, -1, "{FF6347}El tamaño del accesorio es demasiado grande.");
	        RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
	        if(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED])
	        {
	            SetPlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][0],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][2],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][0], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][1],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][2], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][0],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][2]);
	        }
			return 1;
	    }
	    if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendClientMessage(playerid, -1, "La posición del objeto está demasiado lejos de ti.");

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED])
	        {
	            SetPlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][0],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][2],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][0], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][1],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][2], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][0],
				PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][2]);
	        }
			return 1;
		}
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][0] = fOffsetX;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][1] = fOffsetY;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][2] = fOffsetZ;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][0] = fRotX;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][1] = fRotY;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][2] = fRotZ;

	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][0] = fScaleX;
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][1] = fScaleY;
	 	PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][2] = fScaleZ;

		if(!PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED]) PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED] = true;

		SetPlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID],
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][0],
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][2],
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][0], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][1],
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][2], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][0],
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][2]);
		SendClientMessage(playerid, -1,"Finalizaste de editar este objeto. Escribe {f21111}/accesorios{FFFFFF} si quieres editar otro objeto.");
		PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] = -1;
	}
	else
	{
	    RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED])
		{
			SetPlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID],
			PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][0],
			PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_POS][2],
			PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][0], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][1],
			PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ROT][2], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][0],
			PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][1], PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_SCALE][2]);
			SendClientMessage(playerid, -1,"{CCCCCC}Has cancelado la edición de tu accesorio.");
			PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] = -1;
		}
	}
	return 1;
}

EstaenAUTOF(vehicleid,playerid)
{
	foreach(new i : Player)
    {
    	if(IsPlayerInVehicle(i, vehicleid))
        {
            SendClientMessage(playerid,-1,"Encontramos una persona dentro del vehículo, no podemos guardarlo en éste momento.");

			return 0;
        }
   	}
	return 1;
}

spawnVehicles(playerid, vehicle)
{
	switch(vehicle)
	{
		case 0:
		{
			if(PLAYER_INFO[playerid][vModelo] > 0)
			{

				if(autosSpawned[playerid][0])
				{
					if(EstaenAUTOF(autos[playerid],playerid))
					{
					    GuardarCuenta(playerid);
						DestroyVehicleEx(autos[playerid]);
						autosSpawned[playerid][0] = false;
						autos[playerid] = 0;
					}
				} else {
					if(!mayPlayerSpawnVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000FF, "Solo puedes tener 2 vehiculos spawneados!");
					Auto1(playerid, 0);
				}
				RELOAD_TD(playerid);
			} else return 0;
		}
		case 1:
		{
			if(PLAYER_INFO[playerid][vModelo2] > 0)
			{

				if(autosSpawned[playerid][1])
				{
   					if(EstaenAUTOF(autos2[playerid],playerid))
					{
					    GuardarCuenta(playerid);
						DestroyVehicleEx(autos2[playerid]);
						autosSpawned[playerid][1] = false;
						autos2[playerid] = 0;
					}
				} else {
					if(!mayPlayerSpawnVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000FF, "Solo puedes tener 2 vehiculos spawneados!");
					Auto2(playerid, 0);
				}
				RELOAD_TD(playerid);
			} else return 0;

		}
		case 2:
		{
			if(PLAYER_INFO[playerid][vModelo3] > 0)
			{

				if(autosSpawned[playerid][2])
				{
   					if(EstaenAUTOF(autos3[playerid],playerid))
					{
					    GuardarCuenta(playerid);
						DestroyVehicleEx(autos3[playerid]);
						autosSpawned[playerid][2] = false;
						autos3[playerid] = 0;
					}
				} else {
					if(!mayPlayerSpawnVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000FF, "Solo puedes tener 2 vehiculos spawneados!");
					Auto3(playerid, 0);
				}
				RELOAD_TD(playerid);
			} else return 0;
		}
		case 3:
		{
			if(PLAYER_INFO[playerid][vModelo4] > 0)
			{

				if(autosSpawned[playerid][3])
				{
   					if(EstaenAUTOF(autos4[playerid],playerid))
					{
					    GuardarCuenta(playerid);
						DestroyVehicleEx(autos4[playerid]);
						autosSpawned[playerid][3] = false;
						autos4[playerid] = 0;
					}
				} else {
					if(!mayPlayerSpawnVehicle(playerid)) return SendClientMessage(playerid, 0xFF0000FF, "Solo puedes tener 2 vehiculos spawneados!");
					Auto4(playerid, 0);
				}
				RELOAD_TD(playerid);
			} else return 0;
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    for(new i = 0; i < strlen( inputtext); i++)
	{
		if(inputtext[i] == '%' || inputtext[i] == '=' || inputtext[i] == '\'' || inputtext[i] == '\"')
		{
  			inputtext[i] = 'B';

		}
	}
    #if DEBUG_GM == 1
    printf("(OnDialogResponse) PlayerID: %d | DialogID: %d | Response: %d | ListItem: %d", playerid, dialogid, response, listitem);
    #endif
	new string[1500];
	new Query[256];
	/*********** ESTE CÓDIGO TE LIBRA DE LA VULNERABILIDAD ***************/
 	for(new s = 0, l = strlen(inputtext); s < l; s ++)
	{
	    if (inputtext[s] == '%')
		{
			inputtext[s] = '#';
		}
	}
	/*************************************************************************/
	switch(dialogid)
	{
		//
		case DCONFIG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    switch(CanalDudas[playerid])
					    {
					       case 0: CanalDudas[playerid] = 1;
					       default: CanalDudas[playerid] = 0;
					    }
                        ShowConfig(playerid);
					}
					case 1:
					{
					    switch(PLAYER_INFO[playerid][pMuteos])
					    {
					        case 0: PLAYER_INFO[playerid][pMuteos] =1;
					        default: PLAYER_INFO[playerid][pMuteos] = 0;
					    }
						ShowConfig(playerid);
					}
					case 2:
					{
						switch(PLAYER_INFO[playerid][pSonidos])
						{
						    case 0: PLAYER_INFO[playerid][pSonidos] = 1;
						    default:
							{
								PLAYER_INFO[playerid][pSonidos] = 0;
								StopAudioStreamForPlayer(playerid);
							}
						}
						ShowConfig(playerid);
					}
					case 3:
					{
						switch(PLAYER_INFO[playerid][pAlerta])
						{
						    case 0: PLAYER_INFO[playerid][pAlerta] = 1;
						    default: PLAYER_INFO[playerid][pAlerta] = 0;
						}
                        ShowConfig(playerid);
					}
					case 4:
					{
					    switch(PLAYER_INFO[playerid][pGuia])
						{
					        case 0: PLAYER_INFO[playerid][pGuia] = 1;
					    	default: PLAYER_INFO[playerid][pGuia] = 0;
						}
       					ShowConfig(playerid);
					}
					case 5:
					{
						if(PLAYER_INFO[playerid][pBarras] == 1)
						{
							PLAYER_INFO[playerid][pBarras] = 0;
							ShowConfig(playerid);
						}
						else if(PLAYER_INFO[playerid][pBarras] == 0)
						{
							PLAYER_INFO[playerid][pBarras] = 1;
							ShowConfig(playerid);
						}
						BarraHambre(playerid);
						BarraSed(playerid);
						return 1;
					}
					case 6:
					{
					    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					    {
							if(PLAYER_INFO[playerid][pVelocimetro] == 1)
							{
							    PLAYER_INFO[playerid][pVelocimetro] = 0;
								PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][0]);
								PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][1]);
								PlayerTextDrawHide(playerid, F_0[playerid]);
								PlayerTextDrawHide(playerid, F_1[playerid]);
								PlayerTextDrawHide(playerid, F_2[playerid]);
								PlayerTextDrawHide(playerid, FUELICON[playerid]);
								PlayerTextDrawHide(playerid, H_0[playerid]);
								PlayerTextDrawHide(playerid, S_1[playerid]);
								PlayerTextDrawHide(playerid, S_2[playerid]);
								PlayerTextDrawHide(playerid, SPEEDICON[playerid]);
								KillTimer(Bajando[playerid]);

								ShowConfig(playerid);
							}
							else
							{
							    PLAYER_INFO[playerid][pVelocimetro] = 1;
							    ShowConfig(playerid);
							    MostrarVelocimetro(playerid);
           					}
						}
      				  	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						{
						    switch(PLAYER_INFO[playerid][pVelocimetro])
						    {
						         case 0: PLAYER_INFO[playerid][pVelocimetro] = 1;
						         default: PLAYER_INFO[playerid][pVelocimetro] = 0;
						    }
                            ShowConfig(playerid);
						}
					}
					case 7:
					{
					    if(PLAYER_INFO[playerid][pAdmin] < 2) return 0;
 	 					new a[30];
    					if(VerAdmin[playerid] == 0) VerAdmin[playerid] = 1,a = "Mostrando log de admin.";
    					else VerAdmin[playerid] = 0,a = "Ocultando log de admin.";
    					SendClientMessage(playerid,-1,a);
    					ShowConfig(playerid);
					}
				}
			}
		}
		//
		case DIALOG_CONB:
		{
			if(!response)return 1;
			if(response)
			{
				switch(listitem)
				{
				    case 0:QUE_CONSUME(playerid,1);
				    case 1:QUE_CONSUME(playerid,2);
				    case 2:QUE_CONSUME(playerid,3);
				    case 3:QUE_CONSUME(playerid,4);
				}
			}
		}
		case DIALOG_PAINTW:
		{
			if(!response)return 1;
			if(response)
			{
			    switch(listitem)
			    {
			            case 0..5:
						{

						    COLOR_ARMA[playerid] = listitem;
						    SendClientMessageEx(playerid,0xFFFF1493, "Información: Color de arma establecido correctamente.");
					     	if(GetPlayerWeapon(playerid))DAR_COLOREARAM(playerid, GetPlayerWeapon(playerid));
				     	}
						case 6:
						{
	     					COLOR_ARMA[playerid] = -1;
						    SendClientMessageEx(playerid,0xFFFF1493, "Información: Color de arma removido correctamente.");
						    if(GetPlayerWeapon(playerid))DAR_COLOREARAM(playerid, GetPlayerWeapon(playerid));
						}
		     	}

			}
		}
		case DIALOG_MILI:
		{
			if(!response)return 1;
			if(response)
			{
			    switch(listitem)
			    {
				//
				  case 0: ARMA_MILI(playerid,24);
				  case 1: ARMA_MILI(playerid,25);
				  case 2: ARMA_MILI(playerid,29);
				  case 3: ARMA_MILI(playerid,27);
				  case 4: ARMA_MILI(playerid,31);
				  case 5: ARMA_MILI(playerid,34);

			    //
			    }
			}

		}
		case ARMAS_PD:
		{
			if(!response)return 1;
			if(response)
			{
			    switch(listitem)
			    {
				//
				  case 0: ARMA_MILI(playerid,24);
				  case 1: ARMA_MILI(playerid,25);
				  case 2: ARMA_MILI(playerid,29);
				  case 3: ARMA_MILI(playerid,27);
				  case 4: ARMA_MILI(playerid,31);
				  case 5: ARMA_MILI(playerid,34);

			    //
			    }
			}

		}
		case DIALOG_BACKPACK:
		{
			if(response)
			{
				if(BackPack[playerid][bObjeto][listitem] == 0) DALM_ITEM(playerid, listitem);
				else
				{
					new s_wp = GetWeaponSlot(BackPack[playerid][bObjeto][listitem]);

					if(s_wp != 0)
					{

						if(PLAYER_INFO[playerid][j_ARMAS][s_wp] > 0)
							return SendClientMessage(playerid, -1, "No puedes tener 2 armas de este tipo.");
						new rol[126];


						DarArma(playerid, BackPack[playerid][bObjeto][listitem]);

						format(rol, sizeof rol, "sacó un/a %s de su mochila.", OBJETOS_INFO[BackPack[playerid][bObjeto][listitem]][obj_NAME]);

						SET_BackPackItem(playerid, listitem, 0, 0);
						AccionesRol(playerid,rol, 20);
					}
					else
					{
						SALT_ITEM(playerid, listitem);
					}
				}
			}
		}
		case DIALOG_BACKPACK_ALM:
		{
			if(response)
			{
				if(ALM_Slot[playerid] < 0 && ALM_Slot[playerid] >= BP_MAX_SLOTS) return 1;
				if(BackPack[playerid][bObjeto][ALM_Slot[playerid]] != NO_ITEM) return 1;

				if(OBJETOS_INFO[ALM_List[playerid][listitem]][obj_MAX] == 1)
				{
					new rol[126];
					SET_BackPackItem(playerid, ALM_Slot[playerid], ALM_List[playerid][listitem], 1);


					format(rol, sizeof rol, "guardó un/a %s en su mochila.", OBJETOS_INFO[ALM_List[playerid][listitem]][obj_NAME]);
					AccionesRol(playerid,rol, 20);

					if(GetWeaponSlot(ALM_List[playerid][listitem]) != 0)
						QuitarArma(playerid, ALM_List[playerid][listitem]);
					PlayerBackPackShow(playerid);
				}
				else
				{
					CALT_ITEM(playerid, listitem);
				}
			} else PlayerBackPackShow(playerid);
		}
		case DIALOG_BP_SAC_CANT:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					SALT_ITEM(playerid, ALM_Sel[playerid]);
					return SendClientMessage(playerid, -1, "Has insertado una cantidad inválida, intenta de nuevo.");
				}
				new cantidad = strval(inputtext);
				if(!cantidad) return 1;

				if(BackPack[playerid][bCantidad][ALM_Sel[playerid]] < cantidad)
				{
					SALT_ITEM(playerid, ALM_Sel[playerid]);
					if(BackPack[playerid][bObjeto][ALM_Sel[playerid]] == 48) return SendClientMessage(playerid, -1, "No tienes esa cantidad de crack");
					if(BackPack[playerid][bObjeto][ALM_Sel[playerid]] == 47) return SendClientMessage(playerid, -1, "No tienes esa cantidad de medicamentos");
				}

				if(BackPack[playerid][bObjeto][ALM_Sel[playerid]] == 48)
				{
					PLAYER_INFO[playerid][pCrack] += cantidad;
					AccionesRol(playerid, "sacó gramos de crack de su mochila.", 20);
				}
		  		if(BackPack[playerid][bObjeto][ALM_Sel[playerid]] == 47)
                {
                    PLAYER_INFO[playerid][pRemedios] += cantidad;
                    AccionesRol(playerid, "sacó medicamentos de su mochila.", 20);
                }
				GIVE_BackPackItem(playerid, ALM_Sel[playerid], -cantidad);
                PlayerBackPackShow(playerid);
			}
		}
		case DIALOG_BP_ALM_CANT:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					CALT_ITEM(playerid, ALM_Sel[playerid]);
					return SendClientMessage(playerid, -1, "Has insertado una cantidad inválida, intenta de nuevo.");
				}

				new str[90], cantidad = strval(inputtext);
				if(!cantidad) return 1;


				if(ALM_List[playerid][ALM_Sel[playerid]] == 48)
				{
					if(PLAYER_INFO[playerid][pCrack] < cantidad && PLAYER_INFO[playerid][pCrack] < OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX])
					{
						CALT_ITEM(playerid, ALM_Sel[playerid]);
						return SendClientMessage(playerid, -1, "No tienes esa cantidad de crack");
					}
					AccionesRol(playerid, "guardó gramos de crack en su mochila.", 20);
				}
				else if(ALM_List[playerid][ALM_Sel[playerid]] == 47)
				{
					if(PLAYER_INFO[playerid][pRemedios] < cantidad && PLAYER_INFO[playerid][pRemedios] < OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX])
					{
						CALT_ITEM(playerid, ALM_Sel[playerid]);
						return SendClientMessage(playerid, -1, "No tienes esa cantidad de medicamentos");
					}
					AccionesRol(playerid, "guardó medicamentos en su mochila.", 20);
				}

				if(cantidad > OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX])
				{
					cantidad = OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX];
					if(ALM_List[playerid][ALM_Sel[playerid]] == 48)
						format(str, sizeof str, "Solo se pudieron guardar {f21111}%dg{FFFFFF} de crack.", OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX]);
					else if(ALM_List[playerid][ALM_Sel[playerid]] == 47)
						format(str, sizeof str, "Solo se pudieron guardar {f21111}%d{FFFFFF} medicamentos.", OBJETOS_INFO[ALM_List[playerid][ALM_Sel[playerid]]][obj_MAX]);
					SendClientMessage(playerid, -1, str);
				}

				if(ALM_List[playerid][ALM_Sel[playerid]] == 48) PLAYER_INFO[playerid][pCrack] -= cantidad;
				if(ALM_List[playerid][ALM_Sel[playerid]] == 47) PLAYER_INFO[playerid][pRemedios] -= cantidad;

				SET_BackPackItem(playerid, ALM_Slot[playerid], ALM_List[playerid][ALM_Sel[playerid]], cantidad);
				PlayerBackPackShow(playerid);
			}
			else PlayerBackPackShow(playerid);
		}
		case DIALOG_PLAYER_VEHICLES: if(response) spawnVehicles(playerid, listitem);
		case AlquilarSalon1:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0,	Personas = 0, PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
			if(IsNumeric(inputtext) == 0 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
		    if(strval(inputtext) <= 0) return 1;
			if(strval(inputtext) > 8)
			{
				//SendClientMessage(playerid,-1,"");
				ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
				return true;
			}
			new Precio = 20000 * HorasSalon;
			if(GetPlayerMoney(playerid) < Precio)
			{
				SendClientMessage(playerid,-1,"Necesitas {00D61C}$20.000{FFFFFF} para pagar el contrato del alquiler.");
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 1;
			}
			HorasSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon2,DIALOG_STYLE_INPUT,"Nombre del evento","Máximo 100 caracteres:","Siguiente","Salir");
		}
		case AlquilarSalon2:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
	    	if(strlen(inputtext) > 100 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon2,DIALOG_STYLE_INPUT,"Nombre del evento","Máximo 100 caracteres:","Siguiente","Salir");
			format(NombreEvento,sizeof(NombreEvento),"%s",inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon3,DIALOG_STYLE_INPUT,"Descripción del evento","Máximo 150 caracteres:","Siguiente","Salir");
		}
		case AlquilarSalon3:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
		    if(strlen(inputtext) > 150 || isnull(inputtext)) return ShowPlayerDialog(playerid,AlquilarSalon3,DIALOG_STYLE_INPUT,"Descripción del evento","Máximo 150 caracteres:","Siguiente","Salir");
			format(DescriEvento,sizeof(DescriEvento),"%s",inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
		}
		case AlquilarSalon4:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
		    if(isnull(inputtext) || IsNumeric(inputtext) == 0) return ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
		    if(strval(inputtext) <= 0)
			{
				SendClientMessage(playerid,-1,"El precio de las entradas {FF3300}tiene que ser superior{FFFFFF} a {f21111}$0");
				ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
				return 1;
			}
		    if(strval(inputtext) > 900)
			{
		    	SendClientMessage(playerid,-1,"El precio de las entradas {FF3300}tiene que ser menor{FFFFFF} a {f21111}$900");
				ShowPlayerDialog(playerid,AlquilarSalon4,DIALOG_STYLE_INPUT,"Precio de las entradas","Costo de la entrada","Siguiente","Salir");
				return 1;
			}
			PrecioSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
		}
		case AlquilarSalon5:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
	    	if(isnull(inputtext) || IsNumeric(inputtext) == 0) return ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
			if(strval(inputtext) <= 1)
			{
			    SendClientMessage(playerid,-1,"El nivel requerido para ingresar {FF3300}tiene que ser superior{FFFFFF} a {f21111}1");
		    	ShowPlayerDialog(playerid,AlquilarSalon5,DIALOG_STYLE_INPUT,"Nivel necesario","Nivel mínimo necesario para ingresar:","Siguiente","Salir");
			    return 1;
			}
			NivelSalon = strval(inputtext);
			ShowPlayerDialog(playerid,AlquilarSalon6,DIALOG_STYLE_LIST,"Tipo de evento:","General\nArtes marciales\nExposición de autos\nConcierto","Siguiente","Salir");
		}
		case AlquilarSalon6:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
		    TipoEvento = listitem+1;
		    format(string,sizeof(string),"{FFFFFF}Nombre del evento: %s",NombreEvento);
	    	format(string,sizeof(string),"%s\nDescripción: %s",string,DescriEvento);
	    	format(string,sizeof(string),"%s\nCosto de las entradas: {f21111}$%d",string,PrecioSalon);
		    format(string,sizeof(string),"%s\nNivel requerido: %d",string,NivelSalon);
		    format(string,sizeof(string),"%s\nDuración del contrato de alquiler: %d",string,HorasSalon);
	    	if(TipoEvento == 1) format(string,sizeof(string),"%s\nTipo de evento: General",string);
		    if(TipoEvento == 2) format(string,sizeof(string),"%s\nTipo de evento: Artes marciales",string);
		    if(TipoEvento == 3) format(string,sizeof(string),"%s\nTipo de evento: Exposición de autos",string);
	    	if(TipoEvento == 4) format(string,sizeof(string),"%s\nTipo de evento: Concierto",string);
		    ShowPlayerDialog(playerid,AlquilarSalon7,DIALOG_STYLE_MSGBOX,"Confirmar",string,"Crear","Cancelar");
		}
		case AlquilarSalon7:
		{
	    	if(!response)
			{
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 0;
			}
			if(Alquilado == true) return SendClientMessage(playerid,-1,"Acaban de alquilar el salón de eventos.");
			new Precio = 20000 * HorasSalon;
			if(GetPlayerMoney(playerid) < Precio)
			{
				SendClientMessage(playerid,-1,"Necesitas {00D61C}$20.000{FFFFFF} para pagar el contrato del alquiler.");
				format(Alquilador,sizeof(Alquilador),"Nadie");
				Alquilado = false;
				HorasSalon = 0;
				Personas = 0;
				PrecioSalon = 0;
				NivelSalon = 0;
				format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
				format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
				TipoEvento = 0;
				return 1;
			}
    		AlquiladoTimer = SetTimer("SalonTimer",1000*60*60*HorasSalon,0);
	     	Delete3DTextLabel(TextoSalon);
			format(string,sizeof(string),"Alquilaste el salón por {f21111}%d hora(s)",HorasSalon);
  			SendClientMessage(playerid,-1,string);
			SendClientMessage(playerid,-1,"Para recibir ayuda sobre el funcionamiento del salón, escribe {FFFF04}/ayuda salon");
			format(string,sizeof(string),"Stream ID: {FFFF04}50");
			SendClientMessage(playerid,-1,string);
			SendClientMessage(playerid, -1, "Si se pierde la conexion escribe {FFFF04}/sincronizar");
			format(Alquilador,sizeof(Alquilador),"%s", PLAYER_INFO[playerid][Nickname]);
			format(string,sizeof(string),"{F6F61D}/comprar entrada{FFFFFF}\nCosto:{00D61C} $%d",PrecioSalon);
			TextoSalon2 = Create3DTextLabel(string, COLOR_WHITE, -1253.2917,2116.7095,1246.5457, 5, 1, 0);
			Alquilado = true;

			if(TipoEvento == 2)
			{
    			if(BoxObj == 1) return SendClientMessage(playerid, -1, "Los objetos de box ya fueron cargados.");
				ObjBox[0] = CreateDynamicObject(2773, -1243.44995, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[1] = CreateDynamicObject(2773, -1240.93005, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[2] = CreateDynamicObject(2773, -1238.37000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[3] = CreateDynamicObject(2773, -1235.81006, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[4] = CreateDynamicObject(2773, -1233.25000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[5] = CreateDynamicObject(2773, -1230.63000, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[6] = CreateDynamicObject(2773, -1231.15002, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[7] = CreateDynamicObject(2773, -1227.96997, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[8] = CreateDynamicObject(2773, -1228.56995, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[9] = CreateDynamicObject(2773, -1225.34998, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[10] = CreateDynamicObject(2773, -1226.05005, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[11] = CreateDynamicObject(2773, -1222.77002, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[12] = CreateDynamicObject(2773, -1223.46997, 2087.80005, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[13] = CreateDynamicObject(2773, -1222.52002, 2086.32007, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[14] = CreateDynamicObject(2773, -1220.20996, 2091.02002, 1246.04602,   0.00000, 0.00000, 90.00000);
				ObjBox[15] = CreateDynamicObject(2773, -1219.27002, 2089.63989, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[16] = CreateDynamicObject(2773, -1219.27002, 2087.71997, 1246.04602,   0.00000, 0.00000, 0.00000);
				ObjBox[17] = CreateDynamicObject(3398, -1214.26001, 2093.91992, 1263.19202,   180.00000, 0.00000, 229.00000);
				ObjBox[18] = CreateDynamicObject(3398, -1214.22998, 2080.51001, 1263.19202,   180.00000, 0.00000, 316.00000);
				ObjBox[19] = CreateDynamicObject(3398, -1199.35999, 2093.89990, 1263.19202,   180.00000, 0.00000, 141.00000);
				ObjBox[20] = CreateDynamicObject(3398, -1199.22998, 2080.56006, 1263.19202,   0.00000, 180.00000, 222.00000);
				ObjBox[21] = CreateDynamicObject(3819, -1210.98999, 2099.10010, 1246.53601,   0.00000, 0.00000, 90.00000);
				ObjBox[22] = CreateDynamicObject(3819, -1210.98999, 2075.88989, 1246.53601,   0.00000, 0.00000, -90.00000);
				ObjBox[23] = CreateDynamicObject(3819, -1202.37000, 2099.10010, 1246.53601,   0.00000, 0.00000, 90.00000);
				ObjBox[24] = CreateDynamicObject(3819, -1202.37000, 2075.88989, 1246.53601,   0.00000, 0.00000, -90.00000);
				ObjBox[25] = CreateDynamicObject(3819, -1195.04004, 2091.72998, 1246.53601,   0.00000, 0.00000, 0.00000);
				ObjBox[26] = CreateDynamicObject(3819, -1195.04004, 2083.11011, 1246.53601,   0.00000, 0.00000, 0.00000);
				ObjBox[27] = CreateDynamicObject(11472, -1215.58997, 2085.83008, 1243.38000,   0.00000, 0.00000, -90.00000);
				ObjBox[28] = CreateDynamicObject(14434, -1212.78003, 2083.34009, 1253.18994,   0.00000, 0.00000, 90.00000);
				ObjBox[29] = CreateDynamicObject(14434, -1200.83997, 2091.01001, 1253.18994,   0.00000, 0.00000, -90.00000);
				ObjBox[30] = CreateDynamicObject(14791, -1206.72998, 2087.78003, 1247.57202,   0.00000, 0.00000, 0.00000);
				ObjBox[31] = CreateDynamicObject(16089, -1206.79004, 2088.67993, 1254.18005,   0.00000, -90.00000, 90.00000);
				ObjBox[32] = CreateDynamicObject(16089, -1206.80005, 2085.70996, 1254.18005,   0.00000, 90.00000, 90.00000);
				BoxObj = 1;
			}
			if(TipoEvento == 3)
			{
    	        if(ExpObj == 1) return SendClientMessage(playerid, -1, "Los objetos de la exposición ya fueron cargados.");
				ObjExp[0] = CreateDynamicObject(13646, -1223.97998, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[1] = CreateDynamicObject(13646, -1214.02002, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[2] = CreateDynamicObject(13646, -1223.97998, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[3] = CreateDynamicObject(13646, -1214.02002, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[4] = CreateDynamicObject(13646, -1204.02002, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[5] = CreateDynamicObject(13646, -1223.97998, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[6] = CreateDynamicObject(13646, -1204.02002, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[7] = CreateDynamicObject(13646, -1214.02002, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[8] = CreateDynamicObject(13646, -1204.02002, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[9] = CreateDynamicObject(13646, -1179.35999, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[10] = CreateDynamicObject(13646, -1179.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[11] = CreateDynamicObject(13646, -1169.35999, 2057.28003, 1245.08984,   0.00000, 0.00000, 0.00000);
				ObjExp[12] = CreateDynamicObject(13646, -1179.35999, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[13] = CreateDynamicObject(13646, -1169.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[14] = CreateDynamicObject(13646, -1159.35999, 2057.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[15] = CreateDynamicObject(13646, -1169.38770, 2037.27405, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[16] = CreateDynamicObject(13646, -1159.35999, 2047.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
				ObjExp[17] = CreateDynamicObject(13646, -1159.35999, 2037.28003, 1245.06580,   0.00000, 0.00000, 0.00000);
	    		ExpObj = 1;
			}
			if(TipoEvento == 4)
			{
    			if(ConObj == 1) return SendClientMessage(playerid, -1, "Los objetos del concierto ya fueron cargados.");
				ObjCon[0] = CreateDynamicObject(19609, -1188.19055, 2031.88159, 1247.32886,   0.00000, 0.00000, 180.00000);
				ObjCon[1] = CreateDynamicObject(19317, -1192.71997, 2027.67627, 1248.13135,   0.00000, 0.00000, 180.00000);
				ObjCon[2] = CreateDynamicObject(19319, -1193.42944, 2027.67627, 1248.05945,   0.00000, 0.00000, 180.00000);
				ObjCon[3] = CreateDynamicObject(1806, -1188.17456, 2030.85193, 1247.32776,   0.00000, 0.00000, 0.00000);
  			  	ConObj = 1;
			}
		}
		case DCLUB:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
                        if(Bailarina1 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,1);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
                        Bailarina1 = 1;
                        MostrarLuegoDe(playerid);
						QuitarDinero(playerid, cobro);
						SetPlayerVirtualWorld(playerid,playerid);
						LlevarClub(playerid,1);
						SetActorVirtualWorld(Strips[2], 999);
						PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
					case 1:
					{
                        if(Bailarina2 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,2);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
						Bailarina2 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,2);
                        SetPlayerVirtualWorld(playerid,playerid);
                        SetActorVirtualWorld(Strips[8], 999);
                        PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
					case 2:
					{
                        if(Bailarina3 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,3);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
						Bailarina3 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,3);
                        SetPlayerVirtualWorld(playerid,playerid);
						SetActorVirtualWorld(Strips[4], 999);
						PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
					case 3:
					{
                        if(Bailarina4 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,4);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
						Bailarina4 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,4);
                        SetPlayerVirtualWorld(playerid,playerid);
						SetActorVirtualWorld(Strips[9], 999);
						PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
					case 4:
					{
                        if(Bailarina5 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,5);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
						Bailarina5 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,5);
                        SetPlayerVirtualWorld(playerid,playerid);
						SetActorVirtualWorld(Strips[7], 999);
						PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
					case 5:
					{
                        if(Bailarina6 == 1) return SendClientMessage(playerid,-1,"La bailarina se encuentra {EB0000}ocupada{FFFFFF}, ingresa con otra o espera un momento.");
                        new cobro = AfinidadCobro(playerid,6);
                        if(GetPlayerMoney(playerid) < cobro) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
                        QuitarDinero(playerid, cobro);
						Bailarina6 = 1;
                        MostrarLuegoDe(playerid);
                        LlevarClub(playerid,6);
						SetPlayerVirtualWorld(playerid,playerid);
						SetActorVirtualWorld(Strips[3], 999);
						PLAYER_TIMES[playerid][TiempoSacarClub] = SetTimerEx("ProstitutaJugador",900,false,"d",playerid);
					}
				}
			}
		}
		case DSEXOO:
		{
			if(response)
			{
			    new stringas[200],string2[200];
			    format(stringas, sizeof(stringas), "%s comenzó a practicarle sexo oral a %s.", PLAYER_INFO[SexoOral[playerid]][Nickname], PLAYER_INFO[playerid][Nickname]);
				ProxDetector(20.0, playerid, stringas, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
			
				if(PLAYER_INFO[SexoOral[playerid]][pTrabajo] == T_Prostituta || PLAYER_INFO[SexoOral[playerid]][pTrabajo2] == T_Prostituta)
				{
				    if(PLAYER_INFO[SexoOral[playerid]][j_ARMOUR] <= 40) GivePlayerArmour(SexoOral[playerid], 10.0);
					else if(PLAYER_INFO[SexoOral[playerid]][j_ARMOUR] >= 40 && PLAYER_INFO[SexoOral[playerid]][j_ARMOUR] <= 50) SetPlayerArmourEx(SexoOral[playerid], 50);
				}
				DarDinero(SexoOral[playerid],precioofertax[playerid]);
				QuitarDinero(playerid,precioofertax[playerid]);
				format(string2,sizeof(string2),"Pagaste $%d por el servicio.",precioofertax[playerid]);
			    SendClientMessage(playerid,-1,string2);
				ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 0, 0, 1, 0, 1);
    			PLAYER_TIMES[playerid][TimerChupar] = SetTimerEx("elSexoOral",1000,false,"d",playerid);
				precioofertax[playerid] = 0;
			}
			else
			{
				new rechazo[38+MAX_PLAYER_NAME];
				format(rechazo,sizeof(rechazo),"{f21111}%s{FFFFFF} rechazó tu oferta.", PLAYER_INFO[playerid][Nickname]);
			 	SendClientMessage(SexoOral[playerid],-1,rechazo);
			 	precioofertax[playerid] = 0;
				SexoOral[playerid] = INVALID_PLAYER_ID;
		 	}
		}
		case MMEDICO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new cual = 0;
						if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) cual = 1;
						if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) cual = 1;
						if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759)) cual = 1;
						if(cual == 1)
						{
						    if(PLAYER_INFO[playerid][pCama] > 0) return 1;
							new Float:calculo;

							if(PLAYER_INFO[playerid][j_HEALTH] > 99) return 1;

							calculo = 100 - PLAYER_INFO[playerid][j_HEALTH];
							ObtenerEstadoSalud(playerid);
							HCalculo[playerid] = floatround(calculo, floatround_round);

							format(string, sizeof(string),"{FFFFFF}Necesitas ser internado con urgencia por {a9c4e4}%s\nCosto de internación {f21111}$%d",Enfermedades(playerid),HCalculo[playerid]*10);
							ShowPlayerDialog(playerid,DHOSPITAL,DIALOG_STYLE_MSGBOX,"Diagnóstico médico",string,"Aceptar","Cancelar");
						}
						else if(PLAYER_INFO[playerid][Agonizando] == 1)
						{
						    if(LlamadaMedicos[playerid] == 0)
						    {
								foreach(new i : Player)
								{
									if(PLAYER_INFO[i][pTrabajo] == T_Medico || PLAYER_INFO[i][pTrabajo2] == T_Medico)
									{
									    if(RopaMedi[i] == 1)
									    {
											if(GetPlayerVirtualWorld(playerid) == 0) SetPlayerMarkerForPlayer(i, playerid, COLOR_AMARILLO);
											format(string, sizeof(string), "{FFFFFF}Hay un nuevo paciente solicitando {FFFF04}/servicio medico{FFFFFF}, para avisarle que vas a atenderlo escribe {FFFF04}/responder medico", PLAYER_INFO[playerid][Nickname], playerid);
											SendClientMessage(i, 0x00CC00FF, string);
											TimerMedico[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,2);
											ResponderMedi[i] = 1;
										}
									}
							 	}
								SendClientMessage(playerid, -1,"Llamaste al servicio medico, por favor espera un momento.");
								TimerMalherido[playerid] = 100;
								MarcadoMedicos[playerid] = 1;
								LlamadaMedicos[playerid] = 1;
							}
						}
						TextDrawShowForPlayer(playerid, NewPlayer[2]); TextDrawShowForPlayer(playerid, NewPlayer[0]);
						PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
                    }
					case 1:
					{
					    if(PLAYER_INFO[playerid][Agonizando] == 1)
						{
						    PLAYER_TEMP[playerid][@pHospital] = 1;
				   			ApareceHospital(playerid),		Muriendo[playerid] = 0;
							MarcadoMedicos[playerid] = 0,	LlamadaMedicos[playerid] = 0;
							TimerMalherido[playerid] = 0,	suicidio[playerid] = 0;
						}
					    PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
					}
					case 2:
					{
					    for(new ID = 1; ID < MAX_FABRICAS; ID++)
					    {
			          		if(!FABRICAS_INFO[ID][f_VALID]) continue;
			          		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
	        				if(FABRICAS_INFO[ID][f_TIPO_ACTOR][10] == 0) continue;
	        				
		           			SendClientMessage(playerid,-1,"Fuiste trasladado a la {FF0000}fábrica{FFFFFF} y el {20c126}médico{FFFFFF} te está atendiendo.");

							new x = random(4);
							switch(x)
							{
							    case 0:
							    {
							        SetPlayerPosEx(playerid, -2020.3910,217.8160,1035.8162);
									SetPlayerFacingAngle(playerid, 357.0745);
									SetPlayerInterior(playerid, FABRICAS_INFO[ID][f_INTERIOR]);
									SetPlayerVirtualWorld(playerid, FABRICAS_INFO[ID][f_VW]);

							        format(string, sizeof(string), "*Jesus empieza a revisar al paciente %s", PLAYER_INFO[playerid][Nickname]);
							        SendClientMessage(playerid,COLOR_VERDECLARO,string);
							    	SetDynamicActorPos(FABRICAS_INFO[ID][f_ACTORES][10],-2021.8739,217.4766,1035.8162);
							    	ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][10], "COP_AMBIENT", "Coplook_loop", 4.1,1,0,0,1,0);
							    }
							    case 1:
							    {
							        SetPlayerPosEx(playerid, -2016.1665,217.8162,1035.8162);
									SetPlayerFacingAngle(playerid, 357.0745);
									SetPlayerInterior(playerid, FABRICAS_INFO[ID][f_INTERIOR]);
									SetPlayerVirtualWorld(playerid, FABRICAS_INFO[ID][f_VW]);
									
							        format(string, sizeof(string), "*Jesus empieza a revisar al paciente %s", PLAYER_INFO[playerid][Nickname]);
							        SendClientMessage(playerid,COLOR_VERDECLARO,string);
							    	SetDynamicActorPos(FABRICAS_INFO[ID][f_ACTORES][10],-2017.4900,217.5690,1035.8162);
							    	ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][10], "COP_AMBIENT", "Coplook_loop", 4.1,1,0,0,1,0);
							    }
							    case 2:
							    {
							        SetPlayerPosEx(playerid, -2012.2633,217.8160,1035.8162);
									SetPlayerFacingAngle(playerid, 355.5078);
									SetPlayerInterior(playerid, FABRICAS_INFO[ID][f_INTERIOR]);
									SetPlayerVirtualWorld(playerid, FABRICAS_INFO[ID][f_VW]);
									
							        format(string, sizeof(string), "*Jesus empieza a revisar al paciente %s", PLAYER_INFO[playerid][Nickname]);
							        SendClientMessage(playerid,COLOR_VERDECLARO,string);
							    	SetDynamicActorPos(FABRICAS_INFO[ID][f_ACTORES][10],-2013.4424,217.2246,1035.8162);
							    	ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][10], "COP_AMBIENT", "Coplook_loop", 4.1,1,0,0,1,0);
							    }
							    case 3:
							    {
							        SetPlayerPosEx(playerid, -2009.1785,217.6486,1035.8162);
									SetPlayerFacingAngle(playerid, 357.0745);
									SetPlayerInterior(playerid, FABRICAS_INFO[ID][f_INTERIOR]);
									SetPlayerVirtualWorld(playerid, FABRICAS_INFO[ID][f_VW]);
									
							        format(string, sizeof(string), "*Jesus empieza a revisar al paciente %s", PLAYER_INFO[playerid][Nickname]);
							        SendClientMessage(playerid,COLOR_VERDECLARO,string);
							    	SetDynamicActorPos(FABRICAS_INFO[ID][f_ACTORES][10],-2009.1785,217.6486,1035.8162);
							    	ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][10], "COP_AMBIENT", "Coplook_loop", 4.1,1,0,0,1,0);
							    }
                            }
                            TextDrawHideForPlayer(playerid, Sangre);
							TextDrawHideForPlayer(playerid, NewPlayer[2]);
						    TextDrawHideForPlayer(playerid, NewPlayer[0]);
                            FabricaMedicaID[playerid] = ID;
							FabricaMedica[playerid] = 1;
							SetPlayerHealthEx(playerid, 50);
							HCurando[playerid] = SetTimerEx("CurandoHospital",1000,true,"d",playerid);
							ValueTimerBugH[playerid] = 0;
							PLAYER_INFO[playerid][Agonizando] = 0;
							Muriendo[playerid] = 0;
							PLAYER_TEMP[playerid][VariableCaido] = 0;
							Esposando[playerid] = 0;
						}
					}
				}
			}
			else
			{
				TextDrawShowForPlayer(playerid, NewPlayer[2]);
				TextDrawShowForPlayer(playerid, NewPlayer[0]);
				PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
            }
		}
		case REGISTROOFF:
		{
      		ExpulsarJugador(playerid, "Registro Inhabilitado.");
		}
		case CVEHICULO:
		{
			if(response)
			{
			    new vehicleid = GetPlayerVehicleID(playerid),count_vehicles;
			    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No estas en un vehículo.");

				if(VehiculosInfo[vehicleid][vcomprable] != 1) return SendClientMessage(playerid,-1,"Este vehículo no esta en venta..");

				if(PLAYER_INFO[playerid][vModelo] != 0) count_vehicles ++;
				if(PLAYER_INFO[playerid][vModelo2] != 0) count_vehicles ++;
				if(PLAYER_INFO[playerid][vModelo3] != 0) count_vehicles ++;
				if(PLAYER_INFO[playerid][vModelo4] != 0) count_vehicles ++;

				if(count_vehicles >= 4) return SendClientMessage(playerid, -1, "Solo puedes tener 4 vehículos.");

	            new CONCE_ID = ConceCercano(playerid);
				switch(VehiculosInfo[vehicleid][vmoneda])
				{
					case 0: //dinero
					{
						if(VehiculosInfo[vehicleid][vprecio] > PLAYER_INFO[playerid][pDinero]) return SendClientMessageEx(playerid,-1, "Necesitas {f21111}$%d{FFFFFF} para comprar este vehículo.",VehiculosInfo[vehicleid][vprecio]);
	                    RemovePlayerFromVehicle(playerid);
						CreatePlayerVehicle(playerid, VehiculosInfo[vehicleid][vmodelo], Concesionaria_Spawn_Positions[CONCE_ID][0], Concesionaria_Spawn_Positions[CONCE_ID][1], Concesionaria_Spawn_Positions[CONCE_ID][2], Concesionaria_Spawn_Positions[CONCE_ID][3], VehiculosInfo[vehicleid][vcolor1], VehiculosInfo[vehicleid][vcolor2], VehiculosInfo[vehicleid][vprecio],VehiculosInfo[vehicleid][vmoneda], -1);
	                    QuitarDinero(playerid, VehiculosInfo[vehicleid][vprecio]);
					}
					case 1: //monedas RZ.
					{
					    if(VehiculosInfo[vehicleid][vprecio] > PLAYER_INFO[playerid][Moneda]) return SendClientMessageEx(playerid,-1,"Necesitas {f21111}%d "SERVER_COIN"{FFFFFF} para comprar este vehículo.",VehiculosInfo[vehicleid][vprecio]);
	                    RemovePlayerFromVehicle(playerid);
						CreatePlayerVehicle(playerid, VehiculosInfo[vehicleid][vmodelo], Concesionaria_Spawn_Positions[CONCE_ID][0], Concesionaria_Spawn_Positions[CONCE_ID][1], Concesionaria_Spawn_Positions[CONCE_ID][2], Concesionaria_Spawn_Positions[CONCE_ID][3], VehiculosInfo[vehicleid][vcolor1], VehiculosInfo[vehicleid][vcolor2], VehiculosInfo[vehicleid][vprecio],VehiculosInfo[vehicleid][vmoneda], -1);
	                    PLAYER_INFO[playerid][Moneda] -= VehiculosInfo[vehicleid][vprecio];
					}
				}
				return 1;
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("RespawnearV",3000,false,"d",GetPlayerVehicleID(playerid));
			}
		}
		case TUNING_MENU_RUEDAS:
		{
			if(response == 1)
			{
				new idcar = GetPlayerVehicleID(playerid);
				switch(listitem)
				{
					case 0:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas OffRoad instaladas.");
						AddVehicleComponent(idcar, 1025);
						return 1;
					}
					case 1:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Shadow instaladas.");
						AddVehicleComponent(idcar, 1073);
						return 1;
					}
					case 2:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Mega instaladas.");
						AddVehicleComponent(idcar, 1074);
						return 1;
					}
					case 3:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Rimshine instaladas. ");
						AddVehicleComponent(idcar, 1075);
						return 1;
					}
					case 4:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Wires instaladas.");
						AddVehicleComponent(idcar, 1076);
						return 1;
					}
					case 5:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Classic instaladas.");
						AddVehicleComponent(idcar, 1077);
						return 1;
					}
					case 6:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Twist instaladas.");
						AddVehicleComponent(idcar, 1078);
						return 1;
					}
					case 7:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Cutter instaladas.");
						AddVehicleComponent(idcar, 1079);
						return 1;
					}
					case 8:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Switch instaladas.");
						AddVehicleComponent(idcar, 1080);
						return 1;
					}
					case 9:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Grove instaladas.");
						AddVehicleComponent(idcar, 1081);
						return 1;
					}
					case 10:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Import instaladas.");
						AddVehicleComponent(idcar, 1082);
						return 1;
					}
					case 11:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Dollar instaladas.");
						AddVehicleComponent(idcar, 1083);
						return 1;
					}
					case 12:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Trance instaladas.");
						AddVehicleComponent(idcar, 1084);
						return 1;
					}
					case 13:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Atomic instaladas.");
						AddVehicleComponent(idcar, 1085);
						return 1;
					}
					case 14:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Atomic instaladas.");
						AddVehicleComponent(idcar, 1096);
						return 1;
					}
					case 15:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Atomic instaladas.");
						AddVehicleComponent(idcar, 1097);
						return 1;
					}
					case 16:
					{
						Mensaje(playerid, COLORCARGO0, "Llantas Atomic instaladas.");
						AddVehicleComponent(idcar, 1098);
						return 1;
					}
				}
			}
		}
		case DIALOG_SALON:
		{
			if(response)
			{
				switch(listitem)
			    {
		    	    case 0:	{
		            	if(PLAYER_INFO[playerid][pDinero] < 110) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($110)");
						QuitarDinero(playerid, 110);
						DarVino(playerid);
						SendClientMessage(playerid, -1, "Compraste un vino por {f21111}$110 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		        	case 1:	{
		        	    if(PLAYER_INFO[playerid][pDinero] < 80) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($80)");
						QuitarDinero(playerid, 80);
						DarCerveza(playerid);
						SendClientMessage(playerid, -1, "Compraste una cerveza por {f21111}$80 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		        	case 2:	{
		            	if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
						QuitarDinero(playerid, 65);
						DarSprunk(playerid);
						SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		        	case 3:	{
		            	if(PLAYER_INFO[playerid][pDinero] < 170) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($170)");
						QuitarDinero(playerid, 170);
	                    DarAquarius(playerid);
						SendClientMessage(playerid, -1, "Compraste una botella de aquarius por {f21111}$170 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		    	}
			}
		}
		case DIALOG_PIZZA:
		{
			if(response)
			{
				switch(listitem)
			    {
		    	    case 0:	{
		            	if(PLAYER_INFO[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($40)");
						QuitarDinero(playerid, 40);
	                    DarPizza(playerid);
	                    AccionesRol(playerid,"compró una porción de pizza.", 20);
						SendClientMessage(playerid, -1, "Compraste una porción de pizza por {f21111}$40 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para comer.");
						AnimacionVenta(playerid);
		        	}
		        	case 1:	{
		        	    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
		            	if(PLAYER_INFO[playerid][pDinero] < 300) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($300)");
		            	DarCajaPizza(playerid);
						QuitarDinero(playerid, 300);
						SendClientMessage(playerid, -1, "Compraste una caja de pizza por {f21111}$300");
						AnimacionVenta(playerid);
		        	}
		        	case 2:	{
		        	    if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
						DarSprunk(playerid);
						QuitarDinero(playerid, 65);
						AccionesRol(playerid,"compró un vaso de Sprunk.", 20);
						SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		        	case 3:	{
		            	if(PLAYER_INFO[playerid][pDinero] < 170) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($170)");
						QuitarDinero(playerid, 170);
	                    DarAquarius(playerid);
	                    AccionesRol(playerid,"compró una botella de aquarius.", 20);
						SendClientMessage(playerid, -1, "Compraste una botella de aquarius por {f21111}$170 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
		        	}
		    	}
			}
		}
		case CONTROLES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
						{
							if(Humo1Ojb == 0)
							{
							    format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} encendio las maquinas de humo delanteras.", PLAYER_INFO[playerid][Nickname]);
								MandarMensajeSalon(string, playerid);
						    	ObjHumo1[0] = CreateDynamicObject(2415, -1186.80493, 2036.34924, 1245.98035,   0.00000, 0.00000, 0.00000);
								ObjHumo1[1] = CreateDynamicObject(2415, -1196.69702, 2036.34924, 1245.98035,   0.00000, 0.00000, 0.00000);
								SendClientMessage(playerid,-1,"Encendiste las maquinas de humo delanteras.");
								Humo1Ojb = 1;
							}
							else
							{
							    format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} apago las maquinas de humo delanteras.", PLAYER_INFO[playerid][Nickname]);
								MandarMensajeSalon(string, playerid);
						    	DestroyDynamicObject(ObjHumo1[0]);
						    	DestroyDynamicObject(ObjHumo1[1]);
								SendClientMessage(playerid,-1,"Apagaste las maquinas de humo delanteras.");
								Humo1Ojb = 0;
							}
							return 1;
						}
					}
					case 1:
					{
					    if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
						{
							if(Humo2Ojb == 0)
							{
							    format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} encendio las maquinas de humo traseras", PLAYER_INFO[playerid][Nickname]);
								MandarMensajeSalon(string, playerid);
						    	ObjHumo2[0] = CreateDynamicObject(2415, -1185.50305, 2031.20337, 1245.98035,   0.00000, 0.00000, 0.00000);
								ObjHumo2[1] = CreateDynamicObject(2415, -1198.21899, 2031.20337, 1245.98035,   0.00000, 0.00000, 0.00000);
								SendClientMessage(playerid,-1,"Encendiste las maquinas de humo traseras.");
								Humo2Ojb = 1;
							}
							else
							{
							    format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} apago las maquinas de humo traseras.", PLAYER_INFO[playerid][Nickname]);
								MandarMensajeSalon(string, playerid);
						    	DestroyDynamicObject(ObjHumo2[0]);
						    	DestroyDynamicObject(ObjHumo2[1]);
								SendClientMessage(playerid,-1,"Apagaste las maquinas de humo traseras.");
								Humo2Ojb = 0;
							}
							return 1;
						}
					}
				}
			}
		}
		case DAYUDA:
		{
			if(response) EnviarDuda2(playerid,DudaTexto[playerid]);
		}
		case DIALOG_REPORTAR:
		{
   		    if(response)
		    {
		        for(new i=0;i<MAX_REPORTS;i++)
				{
				    if(strlen(inputtext) < 1)return SendClientMessage(playerid, -1 ,"{99000}Debe introducir una razón a reportar.");
					
					if(gettime() > JustReported[playerid])
					{
					    new length = strlen(inputtext);
				    	if(length > 100) return SendClientMessageEx(playerid,-1,"No puedes enviar un reporte muy extenso, abrevia tus palabras por favor.");
						SendReportToQue(playerid,REPORT_INFO[i][ReportadoID], inputtext);
						SendClientMessageEx(playerid,-1,"{f21111}El reporte fue enviado correctamente.");
						JustReported[playerid] = gettime() + 60;
						return 1;
					}
					else
					{
					    new numero = JustReported[playerid] - gettime();
					    SendClientMessageEx(playerid, -1, "Espera {f21111}%ds{FFFFFF} para enviar otro reporte.", numero);
					    return 1;
					}
				}
		    }
		}
		case CREPUESTOS:
		{
			if(response)
			{
			    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, CREPUESTOS, DIALOG_STYLE_INPUT, "Repuestos", "Ingresa la cantidad de repuestos que deseas comprar\nRecuerda que cada repuesto cuesta $100 y solo puedes llevar 200 encima.", "Comprar", "Cancelar"),SendClientMessage(playerid,-1,"Ingresa la cantidad de repuestos que deseas comprar.");
				if(strval(inputtext) > 0 && strval(inputtext) <= 200)
				{
					if(PLAYER_INFO[playerid][pDinero] < strval(inputtext)*100) return SendClientMessage(playerid,-1,"No tienes la cantidad de dinero suficiente para comprar repuestos.");
					if(PLAYER_INFO[playerid][Repuestos]+strval(inputtext) <= 200)
					{
					    if(PLAYER_INFO[playerid][Repuestos]+strval(inputtext) <= 200) PLAYER_INFO[playerid][Repuestos] = PLAYER_INFO[playerid][Repuestos]+strval(inputtext);
					    else PLAYER_INFO[playerid][Repuestos] = 200;
						format(string,500,"Compraste {FFFF04}%d repuestos{FFFFFF} por {f21111}$%d",strval(inputtext),strval(inputtext)*100);
						SendClientMessage(playerid,-1,string);
						QuitarDinero(playerid,strval(inputtext)*100);
					}
				}
			}
		}
		case BOTIQUIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:  { PLAYER_INFO[playerid][pMedicina] = 1; }
					case 1:  { PLAYER_INFO[playerid][pMedicina] = 2; }
					case 2:  { PLAYER_INFO[playerid][pMedicina] = 3; }
					case 3:  { PLAYER_INFO[playerid][pMedicina] = 4; }
					case 4:  { PLAYER_INFO[playerid][pMedicina] = 5; }
					case 5:  { PLAYER_INFO[playerid][pMedicina] = 6; }
					case 6:  { PLAYER_INFO[playerid][pMedicina] = 7; }
					case 7:  { PLAYER_INFO[playerid][pMedicina] = 8; }
					case 8:  { PLAYER_INFO[playerid][pMedicina] = 9; }
					case 9:  { PLAYER_INFO[playerid][pMedicina] = 9; }
					case 10: { PLAYER_INFO[playerid][pMedicina] = 10;}
				}
				AccionesRol(playerid,"está sacando cosas del botiquín.", 20);
				SendClientMessage(playerid,-1,"Agarraste cosas del botiquín, ahora puedes {FFFF04}/atender paciente [id]");
			}
		}
		case DHOSPITAL:
		{
			if(response)
			{
			    new hospital,Float:sala,salon;
			    NoTeleportHack(playerid);
			    if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) hospital = 1; // Los Santos
				else if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) hospital = 2; // San Fierro
				else if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759))
				{
					switch(GetPlayerVirtualWorld(playerid))
					{
					    case 7: hospital = 4; // LS Groove
						case 9: hospital = 3;// LV
				    }
			    }
				switch(hospital)
				{
				    case 1:
				    {
				        for(new i = 0; i < sizeof(CamillasLS); i++)
				        {
				        	if(CamillaLS[i] == 0)
							{
							    SetPlayerPosEx(playerid, CamillasLS[i][0], CamillasLS[i][1], CamillasLS[i][2]);
								SetPlayerFacingAngle(playerid, CamillasLS[i][3]);
								CamillaLS[i] = 1;
								PLAYER_INFO[playerid][pCama] = i+1;
								sala = CamillasLS[i][4];
								salon = floatround(sala);
								break;
							}
						}
					}
					case 2:
					{
					    for(new i = 0; i < sizeof(CamillasSF); i++)
				        {
				        	if(CamillaSF[i] == 0)
							{
							    SetPlayerPosEx(playerid, CamillasSF[i][0], CamillasSF[i][1], CamillasSF[i][2]);
								SetPlayerFacingAngle(playerid, CamillasSF[i][3]);
								CamillaSF[i] = 1;
								PLAYER_INFO[playerid][pCama] = i+1;
								sala = CamillasSF[i][4];
								salon = floatround(sala);
								break;
							}
						}
					}
					case 3:
					{
					    for(new i = 0; i < sizeof(CamillasLV); i++)
				        {
				        	if(CamillaLV[i] == 0)
							{
							    SetPlayerPosEx(playerid, CamillasLV[i][0], CamillasLV[i][1], CamillasLV[i][2]);
								SetPlayerFacingAngle(playerid, CamillasLV[i][3]);
								CamillaLV[i] = 1;
								PLAYER_INFO[playerid][pCama] = i+1;
								sala = CamillasLV[i][4];
								salon = floatround(sala);
								break;
							}
						}
					}
					case 4:
					{
					    for(new i = 0; i < sizeof(CamillasLV); i++)
				        {
				        	if(CamillaGA[i] == 0)
							{
							    SetPlayerPosEx(playerid, CamillasLV[i][0], CamillasLV[i][1], CamillasLV[i][2]);
								SetPlayerFacingAngle(playerid, CamillasLV[i][3]);
								CamillaGA[i] = 1;
								PLAYER_INFO[playerid][pCama] = i+1;
								sala = CamillasLV[i][4];
								salon = floatround(sala);
								break;
							}
						}
					}
				}
				PLAYER_INFO[playerid][enHospital] = hospital;
				SendClientMessage(playerid,-1,"Por favor espera mientras los médicos te atienden.");
				if(PLAYER_INFO[playerid][pDinero] >= HCalculo[playerid]*10)
			    {
			        format(string,sizeof(string),"Pagaste {FF3300}$%d{FFFFFF} por los servicios médicos.",HCalculo[playerid]*10);
					SendClientMessage(playerid,-1,string);
					QuitarDinero(playerid,HCalculo[playerid]*10);
			    }
			    else if(PLAYER_INFO[playerid][pBanco] < HCalculo[playerid]*10)
			    {
                    format(string,sizeof(string),"Pagaste {FF3300}$%d{FFFFFF} usando tu cuenta bancaria.",HCalculo[playerid]*10);
					SendClientMessage(playerid,-1,string);
					PLAYER_INFO[playerid][pBanco] -= HCalculo[playerid]*10;
			    }
			    else SendClientMessage(playerid,-1,"El gobierno de San Andreas te pagó los servicios médicos.");
    			ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0,1);
				HCurando[playerid] = SetTimerEx("CurandoHospital",1000,true,"d",playerid);
				ValueTimerBugH[playerid] = 0;
				PLAYER_INFO[playerid][pAtendido] = 0;
				foreach(new i : Player)
				{
					if(RopaMedi[playerid] == 1 && (PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico))
					{
						if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
						{
						    new texto[200];
							format(texto,sizeof(texto),"{FFFFFF}Hay un paciente en la {FFFF04}sala %d{FFFFFF} esperando ser atendido.",salon);
							SendClientMessage(i,-1,texto);
							format(texto,sizeof(texto),"(( Usa {FFFF04}/revisar paciente %s{FFFFFF} junto al paciente para revisarlo. ))",PLAYER_INFO[playerid][Nickname]);
                            SendClientMessage(i,-1,texto);
							SetPlayerMarkerForPlayer(i, playerid, COLOR_GREEN3);
						}
					}
				}
			}
		}
		case DEMAIL:
		{
			if(!response) ExpulsarJugador(playerid,"Escape en registro.");
			if(strlen(inputtext) < 32)
			{
			    if(!IsCorrectMail(inputtext))
                {
					format(string,sizeof(string),"{FFFFFF}Ingresa una dirección electronica válida para recuperar tu contraseña en caso de perderla.");
					ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT," ",string,"Siguiente","");
					return 0;
				}
				else
				{
					format(PLAYER_INFO[playerid][pEmail], 32, "%s", inputtext);
					new pQuery[200];
					mysql_format(handle_db, pQuery, sizeof(pQuery), "SELECT Username FROM `usuarios` WHERE `Email` = '%e'", inputtext);
					mysql_pquery(handle_db, pQuery, "CorreoInvalido", "d", playerid);
				}
    		}
		}
		case LOGIN:
		{
			if(!response) ExpulsarJugador(playerid, "Escape en registro");
            if(strlen(inputtext) <= 2)
			{
				PLAYER_TEMP[playerid][@ContraVacia] = 1;
				SendClientMessage(playerid, 0xAFAFAFAA, "Ingresa la contraseña" );
			}
			if(strlen(inputtext) > 18) SendClientMessage(playerid, 0xAFAFAFAA, "Contraseña muy larga.");
			if(response)
			{
				if(IsPlayerConnected(playerid))
				{
					new escapepass[100];
					mysql_escape_string(inputtext, escapepass);
					mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username` = '%e' AND `Password` = md5('%e')", PLAYER_INFO[playerid][Nickname], escapepass);
					mysql_pquery(handle_db, Query, "OnPlayerSpawnLoaded", "d", playerid);
					format(PLAYER_INFO[playerid][ContraTemporal],128,"%s",escapepass);
				}
			}
		}
		case VERIFICAR_ADMIN:
		{
			if(!response) ExpulsarJugador(playerid, "No verificar");

			if(strlen(inputtext) == 0) return ExpulsarJugador(playerid, "No verificar");
			if(strcmp(inputtext,PasswordADMIN,false) == 0)
			{
				new Estring[126];
				format(Estring, sizeof Estring, "%s{FFFFFF}(ID: %d) pasó la verificación administrativa.", PLAYER_INFO[playerid][Nickname], playerid);
				Verificado[playerid] = true;
				MensajeAdmin(0x00AAFFFF, Estring, 1);
				mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username` = '%e' AND `Password` = md5('%e') LIMIT 1", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[playerid][ContraTemporal]);
				mysql_pquery(handle_db, Query, "OnPlayerSpawnLoaded", "d", playerid);

			} else
			{
				new Estring[126];
				format(Estring, sizeof Estring, "%s(ID: %d) no pasó la verificación administrativa.", PLAYER_INFO[playerid][Nickname], playerid);
				MensajeAdmin(COLOR_GREY, Estring, 1);
				return ExpulsarJugador(playerid, "Error al verificar");
			}
		}
		case REGISTRO:
		{
			if(!response) ExpulsarJugador(playerid, "Escape en registro");
			else
			{
			    if(!strlen(inputtext)) ExpulsarJugador(playerid, "No ingresó datos.");
				if(strlen(inputtext) < 4 || strlen(inputtext) > 18)
				{
					format(string, sizeof(string), "{FFFFFF}La contraseña que ingresaste no es valida.\n");
					format(string, sizeof(string), "%s{FFFFFF}La contraseña debe contener de 4 a 18 caracteres", string);
					ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT," ",string,"Registrar","Salir");
				}
				else if(strlen(inputtext) > 3 && strlen(inputtext) < 21)
				{
					new string2[128];
					format(string2, sizeof(string2), "%s", inputtext);
					format(PLAYER_INFO[playerid][pPassword], 144, "%s",inputtext);
					ShowPlayerDialog(playerid,SEXO, DIALOG_STYLE_LIST," ","{FFFFFF}Hombre\n{FFFFFF}Mujer","Registrar","Salir");
				}
			}
			return 1;
		}
		case PRODUCTOS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_INFO[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
						if(PLAYER_INFO[playerid][pNumero] > 0) return SendClientMessage(playerid,-1,"Ya tienes un teléfono móvil, escribe {FFFF04}/ayuda{FFFFFF} para recibir ayuda.");
						
						PLAYER_INFO[playerid][pNumero] = PLAYER_INFO[playerid][pID] + 5000;
						
						QuitarDinero(playerid, 1500);
						format(string, sizeof(string), "Conseguiste un teléfono móvil por {f21111}$1500{FFFFFF}, tu número es {FFFF04}%d",PLAYER_INFO[playerid][pNumero]);
						SendClientMessage(playerid, -1, string);
						
						AddPlayerConectats(playerid);
									
						SendClientMessage(playerid, -1, "Ahora puedes usar {FFFF04}/telefono, /agenda, /llamar, /sms.");
						AnimacionVenta(playerid);
					}
					case 1:
					{
						if(PLAYER_INFO[playerid][pDinero] < 35) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($35)");
						if(PLAYER_INFO[playerid][pAgenda] == 1) return SendClientMessage(playerid,-1,"Ya tienes una guía teléfonica, escribe {FFFF04}/numero {FFFFFF}[{FFFF04}Nombre o ID{FFFFFF}] para averiguar el número de teléfono de la persona.");
						QuitarDinero(playerid, 35);
						PLAYER_INFO[playerid][pAgenda] = 1;
						SendClientMessage(playerid, -1, "Compraste una guía teléfonica por {f21111}$35");
      					AnimacionVenta(playerid);
					}
					case 2:
					{
						if(PLAYER_INFO[playerid][pRadio] != 0) return SendClientMessage(playerid,-1,"Ya tienes un radio comunicador, escribe {FFFF04}!{FFFFFF} delante del mensaje.");
						if(PLAYER_INFO[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");
						PLAYER_INFO[playerid][pRadio] = 1;
						QuitarDinero(playerid, 2000);
						SendClientMessage(playerid,-1,"Compaste un radio comunicador por {f21111}$2000");
						AnimacionVenta(playerid);
					}
					case 3:
					{
						if(PLAYER_INFO[playerid][pGPS] != 0) return SendClientMessage(playerid,-1,"Ya tienes un GPS, escribe {FFFF04}/gps{FFFFFF} para ver lo puntos de interés.");
						if(PLAYER_INFO[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1500)");
						PLAYER_INFO[playerid][pGPS] = 1;
						QuitarDinero(playerid, 1500);
						SendClientMessage(playerid,-1,"Compraste un GPS por {f21111}$1500");
						AnimacionVenta(playerid);
					}
					case 4:
					{
						if(PLAYER_INFO[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($470)");
						if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
						SendClientMessage(playerid,-1,"Compraste 6 cervezas por {f21111}$470{FFFFFF}, ahora guárdalas en una heladera.");
						SendClientMessage(playerid,-1,"Tienes que usar {FFFF04}/heladera guardar objeto{FFFFFF}, o para tirarlas {FFFF04}/tirar objeto");
						Objeto[playerid] = 1000;
						SetPlayerAttachedObject(playerid, 7, 2060, 6, 0.265999,0.002999,0.034000,107.000038,178.100204,175.399856,0.388000,0.463999,0.587999);
						QuitarDinero(playerid, 470);
						AnimacionVenta(playerid);
					}
					case 5:
					{
						if(PLAYER_INFO[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($590)");
						if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
						SendClientMessage(playerid,-1,"Compraste 6 botellas de vino por {f21111}$590{FFFFFF}, ahora guárdalas en una heladera.");
						SendClientMessage(playerid,-1,"Tienes que usar {FFFF04}/heladera guardar objeto{FFFFFF}, o para tirarlas {FFFF04}/tirar objeto");
						Objeto[playerid] = 1001;
						SetPlayerAttachedObject(playerid, 7, 3800, 6, 0.262000,0.070999,0.021000,106.599998,-1.999999,171.599975,0.372999,0.239999,0.166000);
						QuitarDinero(playerid, 590);
						AnimacionVenta(playerid);
					}
					case 6:
					{
						if(PLAYER_INFO[playerid][pDinero] < 470) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($200)");
						if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
						SendClientMessage(playerid,-1,"Compraste 4 vasos de sprunk por {f21111}$200{FFFFFF}, ahora guárdalas en una heladera.");
						SendClientMessage(playerid,-1,"Tienes que usar {FFFF04}/heladera guardar objeto{FFFFFF}, o para tirarlas {FFFF04}/tirar objeto");
						Objeto[playerid] = 1002;
						SetPlayerAttachedObject(playerid, 7, 2900, 6, 0.256000,0.074999,0.019000,94.400001,0.000000,1.300018,0.376999,0.207000,0.164999);
						QuitarDinero(playerid, 200);
						AnimacionVenta(playerid);
					}
					case 7:
					{
						if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
						DarSprunk(playerid);
						QuitarDinero(playerid, 65);
						SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
						AnimacionVenta(playerid);
					}
				}
			}
			return 1;
		}
  		case DIALOGO_GRUA4:
		{
				    if(!response) return FIN_SERVI(playerid);
				    new SLOT_VEHICLE = PLAYER_TEMP[playerid][pVEHICLES_SLOT][listitem], vehicle_id = PLAYER_TEMP[playerid][pVEHICLES][listitem];
				    if(vehicle_id == 0) return 1;
				    switch(SLOT_VEHICLE)
					{
					    case 1:AUTO_ROLGRU(playerid,vehicle_id,PLAYER_INFO[playerid][vpatente]);
				     	case 2:AUTO_ROLGRU(playerid,vehicle_id,PLAYER_INFO[playerid][v2patente]);
			     	 	case 3:AUTO_ROLGRU(playerid,vehicle_id,PLAYER_INFO[playerid][v3patente]);
			     	 	case 4:AUTO_ROLGRU(playerid,vehicle_id,PLAYER_INFO[playerid][v4patente]);
					}
		}
		
  		case TRABAV:
		{
			new autoid, patentex[10],precio,x = 0,y;
			if(response)
			{
			    switch(listitem)
			    {
                    case 0:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; y = PLAYER_INFO[playerid][v2Traba]; x = 2;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; y = PLAYER_INFO[playerid][v3Traba]; x = 3;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; y = PLAYER_INFO[playerid][v4Traba]; x = 4;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; y = PLAYER_INFO[playerid][v2Traba]; x = 2;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; y = PLAYER_INFO[playerid][v2Traba]; x = 2;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; y = PLAYER_INFO[playerid][v3Traba]; x = 3;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio];   y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; y = PLAYER_INFO[playerid][vTraba]; x = 1;}
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; y = PLAYER_INFO[playerid][v2Traba]; x = 2;}
						}
                        if(y != 1)
                        {
                            new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 2000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar un sistema de traba para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+2000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
								if(x == 1) PLAYER_INFO[playerid][vTraba] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Traba] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Traba] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Traba] = 1;
								mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Traba` = '1' WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[playerid][pID],x);
								mysql_tquery(handle_db, Query);
								QuitarDinero(playerid, calcPrecio);
								AnimacionVenta(playerid);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else
						{
							SendClientMessage(playerid,-1,"Tu vehículo ya tiene instalado el sistema de traba de seguridad.");
							SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
							return 1;
						}
                    }
                    case 1:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else return 1;
						}
                        if(y != 1)
                        {
                            new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 2000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar un sistema de traba para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+2000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
								if(x == 1) PLAYER_INFO[playerid][vTraba] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Traba] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Traba] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Traba] = 1;
								mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Traba` = '1' WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[playerid][pID],x);
								mysql_tquery(handle_db, Query);
								QuitarDinero(playerid, calcPrecio);
								AnimacionVenta(playerid);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else
						{
							SendClientMessage(playerid,-1,"Tu vehículo ya tiene instalado el sistema de traba de seguridad.");
							SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
							return 1;
						}
                    }
                    case 2:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else return 1;
						}
                        if(y != 1)
                        {
                            new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 2000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar un sistema de traba para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+2000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
								if(x == 1) PLAYER_INFO[playerid][vTraba] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Traba] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Traba] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Traba] = 1;
								mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Traba` = '1' WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[playerid][pID],x);
								mysql_tquery(handle_db, Query);
								QuitarDinero(playerid, calcPrecio);
								AnimacionVenta(playerid);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else
						{
							SendClientMessage(playerid,-1,"Tu vehículo ya tiene instalado el sistema de traba de seguridad.");
							SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
							return 1;
						}
                    }
                    case 3:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Traba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vTraba]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Traba]; }
							else return 1;
						}
                        if(y != 1)
                        {
                            new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 2000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar un sistema de traba para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+2000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
								if(x == 1) PLAYER_INFO[playerid][vTraba] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Traba] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Traba] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Traba] = 1;
								mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Traba` = '1' WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[playerid][pID],x);
								mysql_tquery(handle_db, Query);
								QuitarDinero(playerid, calcPrecio);
								AnimacionVenta(playerid);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else
						{
							SendClientMessage(playerid,-1,"Tu vehículo ya tiene instalado el sistema de traba de seguridad.");
							SendClientMessage(playerid,-1,"Usa {FFFF04}/cerrar{FFFFFF} para cerrarlo o {FFFF04}/abrir{FFFFFF} para destrabarlo.");
							return 1;
						}
                    }
			    }
			}
			else return 1;
		}
		case ALARMAV:
		{
			new autoid, patentex[10],precio,x,y;
			if(response)
			{
			    switch(listitem)
			    {
                    case 0:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v3Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v3Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else return 1;
						}
                        if(y != 1)
						{
							new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 5000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar una alarma para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+5000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/alarma{FFFFFF} para activar y desactivar la alarma.");
								if(x == 1) PLAYER_INFO[playerid][vAlarma] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Alarma] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Alarma] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Alarma] = 1;
								QuitarDinero(playerid, calcPrecio);
								AnimacionVenta(playerid);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Este vehículo ya tiene alarma.");
                    }
                    case 1:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//Tiene auto en el 1 y 2 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 1 y 3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Alarma]; }
							//Tiene auto en el 1 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//Tiene auto en el 2 y 3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 2 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//Tiene auto en el 3 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//Tiene auto en el 1,2,3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 1,2,4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//SLOT EN VEHICULOS 1-3-4
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Alarma]; }
							//SLOT EN VEHICULOS 2-3-4
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 3;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else return 1;
						}
                        if(y != 1)
						{
							new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 5000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar una alarma para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d{FFFFFF}",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+5000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/alarma{FFFFFF} para activar y desactivar la alarma.");
								if(x == 1) PLAYER_INFO[playerid][vAlarma] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Alarma] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Alarma] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Alarma] = 1;
                                AnimacionVenta(playerid);
								QuitarDinero(playerid, calcPrecio);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Este vehículo ya tiene alarma.");
                    }
                    case 2:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Alarma]; }
							//Tiene auto en el 1 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							//Tiene auto en el 2 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//Tiene auto en el 1 y 2 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							//Tiene auto en el 1 y 3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							//Tiene auto en el 1 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							//Tiene auto en el 2 y 3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 2 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 3 y 4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							//Tiene auto en el 1,2,3 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v3Alarma]; }
							//Tiene auto en el 1,2,4 SLOT
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//SLOT EN VEHICULOS 1-3-4
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							//SLOT EN VEHICULOS 2-3-4
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							else return 1;
						}
                        if(y != 1)
						{
							new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 5000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar una alarma para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d{FFFFFF}",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+5000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/alarma{FFFFFF} para activar y desactivar la alarma.");
								if(x == 1) PLAYER_INFO[playerid][vAlarma] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Alarma] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Alarma] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Alarma] = 1;
                                AnimacionVenta(playerid);
								QuitarDinero(playerid, calcPrecio);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Este vehículo ya tiene alarma.");
                    }
                    case 3:
                    {
						if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))
						{
							if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 3;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos4[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v4patente]); precio = PLAYER_INFO[playerid][v4Precio]; x = 4;  y = PLAYER_INFO[playerid][v4Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos3[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v3patente]); precio = PLAYER_INFO[playerid][v3Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] == 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] == 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] > 0 && PLAYER_INFO[playerid][vModelo2] == 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][vpatente]); precio = PLAYER_INFO[playerid][vPrecio]; x = 1;  y = PLAYER_INFO[playerid][vAlarma]; }
							else if(PLAYER_INFO[playerid][vModelo] == 0 && PLAYER_INFO[playerid][vModelo2] > 0 && PLAYER_INFO[playerid][vModelo3] > 0 && PLAYER_INFO[playerid][vModelo4] > 0) { autoid = autos2[playerid]; format(patentex,sizeof(patentex),"%s",PLAYER_INFO[playerid][v2patente]); precio = PLAYER_INFO[playerid][v2Precio]; x = 2;  y = PLAYER_INFO[playerid][v2Alarma]; }
							else return 1;
						}
                        if(y != 1)
						{
							new stringas[200];
							new calcPrecio = ((precio / 2) / 10) + 5000;
							if(PLAYER_INFO[playerid][pDinero] >= calcPrecio)
							{
								format(stringas,sizeof(stringas),"Acabas de comprar una alarma para tu {FFFF04}%s {FFFFFF}({f21111}%s{FFFFFF}). Gasto total: {FF3300}$%d{FFFFFF}",NombreAuto[GetVehicleModel(autoid)-400], patentex,precio/20+5000);
								SendClientMessage(playerid,-1,stringas);
								SendClientMessage(playerid,-1,"Usa {FFFF04}/alarma{FFFFFF} para activar y desactivar la alarma.");
								if(x == 1) PLAYER_INFO[playerid][vAlarma] = 1;
								if(x == 2) PLAYER_INFO[playerid][v2Alarma] = 1;
								if(x == 3) PLAYER_INFO[playerid][v3Alarma] = 1;
								if(x == 4) PLAYER_INFO[playerid][v4Alarma] = 1;
                                AnimacionVenta(playerid);
								QuitarDinero(playerid, calcPrecio);
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "No tienes la cantidad de dinero suficiente.");
						}
						else return SendClientMessage(playerid, COLOR_WHITE, "Este vehículo ya tiene alarma.");
                    }
			    }
			}
			else return 1;
		}
		case PRODUCTOS2:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_INFO[playerid][pDinero] < 80) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($80)");
						for(new p; p < MAX_PROPIEDADES; p++)
   						{
						    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        				{
	        				    if(PropInfo[p][pCerveza] <= 0) return SendClientMessage(playerid,-1,"No queda más cerveza, regresa más tarde.");
	        				    PropInfo[p][pCerveza]--;
		        				PropInfo[p][pGanancias]+=80;
		        				GuardarPropiedad(p);
	        				}
						}
						QuitarDinero(playerid, 80);
						DarCerveza(playerid);
						AccionesRol(playerid,"compró una botella de cerveza.", 20);
						SendClientMessage(playerid, -1, "Compraste una cerveza por {f21111}$80 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
					}
					case 1:
					{
						if(PLAYER_INFO[playerid][pDinero] < 100) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($100)");
						for(new p; p < MAX_PROPIEDADES; p++)
   						{
						    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        				{
	        				    if(PropInfo[p][pVino] <= 0) return SendClientMessage(playerid,-1,"No queda más vino, regresa más tarde.");
	        				    PropInfo[p][pVino]--;
		        				PropInfo[p][pGanancias]+=100;
		        				GuardarPropiedad(p);
	        				}
						}
						QuitarDinero(playerid, 100);
						DarVino(playerid);
						AccionesRol(playerid,"compró una botella de vino.", 20);
						SendClientMessage(playerid, -1, "Compraste una botella de vino por {f21111}$100 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
					}
					case 2:
					{
						if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($60)");
						for(new p; p < MAX_PROPIEDADES; p++)
   						{
						    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        				{
	        				    if(PropInfo[p][pSprunk] <= 0) return SendClientMessage(playerid,-1,"No queda más sprunk, regresa más tarde.");
	        				    PropInfo[p][pSprunk]--;
	        					PropInfo[p][pGanancias]+=60;
	        					GuardarPropiedad(p);
	        				}
						}
						DarSprunk(playerid);
						QuitarDinero(playerid, 65);
						AccionesRol(playerid,"compró un vaso de Sprunk.", 20);
						SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
					}
					case 3:
	        		{
		            	if(PLAYER_INFO[playerid][pDinero] < 160) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($160)");
		            	for(new p; p < MAX_PROPIEDADES; p++)
   						{
						    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        				{
	        				    if(PropInfo[p][pAquarius] <= 0) return SendClientMessage(playerid,-1,"No queda más aquarius, regresa más tarde.");
	        				    PropInfo[p][pAquarius]--;
		        				PropInfo[p][pGanancias]+=160;
		        				GuardarPropiedad(p);
	        				}
						}
						QuitarDinero(playerid, 160);
        	           	DarAquarius(playerid);
        	           	AccionesRol(playerid,"compró una botella de aquarius.", 20);
						SendClientMessage(playerid, -1, "Compraste una botella de aquarius por {f21111}$160 {FFFFFF}Presiona {FFFF04}'Y'{FFFFFF} para beber.");
					}
				}
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}sin VIP 3{FFFFFF}pueden tener hasta %d objetos en vehículos! Usa {f21111}/ayuda  {b1fc6f}VIP 3{FFFFFF}.", MAX_OBJETOS);
							return 1;
						}
						if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
							return 1;
						}
						PLAYER_TEMP[playerid][p_TUNING] = true;
					 	ShowDialog(playerid, TUNING_TYPE);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
						if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}sin VIP 3{FFFFFF}pueden tener hasta %d objetos en vehículos! Usa {f21111}/ayuda  {b1fc6f}VIP 3{FFFFFF}.", MAX_OBJETOS);
							return 1;
						}
						if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PLAYER_INFO[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($500)");
						QuitarDinero(playerid, 500);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_VALID] = true;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ID] = 0;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_MODELID] = 19327;
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_NAME], 32, "Texto");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ATTACHED] = true;
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_text_TEXT], 32, "Mi texto");
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_text_FONT], 24, "Arial");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_text_FONT_SIZE] = 24;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_text_BOLD] = false;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;
						RegisterNewVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot, true);
						SendClientMessage(playerid, -1, "{FFFFFF}El objeto de texto ha sido añadido.");
						PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
						if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}sin VIP 3{FFFFFF}pueden tener hasta %d objetos en vehículos! Usa {f21111}/ayuda  {b1fc6f}VIP 3{FFFFFF}.", MAX_OBJETOS);
							return 1;
						}
						if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PLAYER_INFO[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 0;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 4:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
						if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}sin VIP 3{FFFFFF}pueden tener hasta %d objetos en vehículos! Usa {f21111}/ayuda  {b1fc6f}VIP 3{FFFFFF}.", MAX_OBJETOS);
							return 1;
						}
						if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}
					 	if(PLAYER_INFO[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 1;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][p_TUNING] = false;
				SendClientMessage(playerid, -1,"Has terminado la edición de tu vehículo");
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
				
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 0);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case TUNING_TYPE:
		{
			if(response)
			{
				new parachoques1[25] = {1116,1115,1182,1181,1152,1153,1185,1779,1117,1172,1165,1174,1175,1157,1166,1171,1170,1173,1190,1191,1155,1169,1160,1189,1188};
				new parachoques2[21] = {1180,1178,1150,1151,1176,1176,1184,1177,1183,1161,1140,1141,1159,1148,1149,1167,1192,1193,1187,1186,1156};
				new alerones[18] = {1049,1060,1000,1016,1002,1014,1015,1147,1163,1139,1158,1138,1146,1164,1023,1001,1003,1162};
				switch(listitem)
				{
				    case 0: ShowModelSelectionMenuEx(playerid, parachoques1, 25, "Paragolpes delanteros", TUNINGSHOP, 0.0, 0.0, 0.0);
				    case 1: ShowModelSelectionMenuEx(playerid, parachoques2, 21, "Paragolpes traseros", TUNINGSHOP, 0.0, 0.0, 0.0);
				    case 2: ShowModelSelectionMenuEx(playerid, alerones, 18, "Alerones", TUNINGSHOP, 0.0, 0.0, 0.0);
				    case 3: ShowDialog(playerid, DIALOG_VOBJECT_NEON);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		case DIALOG_VOBJECT_NEON:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: AgregarTuning(playerid, 18647);
		            case 1: AgregarTuning(playerid, 18648);
		            case 2: AgregarTuning(playerid, 18649);
		            case 3: AgregarTuning(playerid, 18650);
		            case 4: AgregarTuning(playerid, 18651);
		            case 5: AgregarTuning(playerid, 18652);

		        }
		    }
		    else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if(response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]);
				if(PLAYER_INFO[playerid][pVIP] <= 2 && slot >= MAX_OBJETOS_USERS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}sin VIP 3{FFFFFF}pueden tener hasta %d objetos en vehículos! Usa {f21111}/ayuda  {b1fc6f}VIP 3{FFFFFF}.", MAX_OBJETOS);
					return 1;
				}
				if(PLAYER_INFO[playerid][pVIP] == 3 && slot >= MAX_OBJETOS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}¡Los jugadores {b1fc6f}VIP 3 {FFFFFF}pueden tener hasta %d objetos en vehículos.", MAX_OBJETOS);
					return 1;
				}
				if(slot == -1)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(PLAYER_INFO[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2000)");

				QuitarDinero(playerid, 2000);
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ID] = 0;
				if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 0)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_MODELID] = 19307;
				}
				else if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 1)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_MODELID] = 2661;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_NAME], 32, "Pais");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_ATTACHED] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][slot][vobject_COLORS][0] = listitem;

				RegisterNewVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], slot, true);

				SendClientMessage(playerid, -1, "{FFFFFF}El objeto ha sido añadido.");
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_OBJETOS_USERS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][listitem][vobject_VALID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto guardado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
							UpdateVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						}
						else
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto colocado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
							UpdateVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						EditVehicleObject(playerid, PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}
			}
			else
			{
				UpdateVehicleObject(playerid,PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El nombre del objeto debe contener de 1 a 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = 0;
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);
				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}
				new DB_Query[128];
				mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID` = '%d';", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ID]);
				mysql_tquery(handle_db, DB_Query);
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;
				SendClientMessage(playerid, -1, "{FFFFFF}Objeto eliminado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
	 	 		new auto_slot;
		        if(autos[playerid] == PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]) {  auto_slot = PLAYER_INFO[playerid][vID1]; }
			    else if(autos2[playerid] == PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]) {  auto_slot = PLAYER_INFO[playerid][vID2]; }
			    else if(autos3[playerid] == PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]) {  auto_slot = PLAYER_INFO[playerid][vID3]; }
			    else if(autos4[playerid] == PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID]) {  auto_slot = PLAYER_INFO[playerid][vID4]; }
				new DB_Query[128];
				mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", auto_slot);
				mysql_tquery(handle_db, DB_Query);
				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_OBJETOS_USERS; i ++)
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][i] = temp_VEHICLE_OBJECTS;
				}
				SendClientMessage(playerid, -1, "{FFFFFF}Todos los objetos de este vehículo han sido eliminados.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = false;
							SendClientMessage(playerid, -1, "Negrita deshabilitada.");
						}
						else
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = true;
							SendClientMessage(playerid, -1, "Negrita habilitada.");
						}
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						ShowDialog(playerid, dialogid);
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un texto de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(sscanf(inputtext, "s[32]", inputtext))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Texto actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir una fuente de 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(sscanf(inputtext, "s[24]", inputtext))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Fuente actualizada.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0 || inputtext[0] >= 255)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor entre 1 y 255.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Tamaño de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if(response)
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_COLOR] = RGBAToARGB(RandomColors[listitem]);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Color de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case JUGUETES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_INFO[playerid][pDinero] < 1000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1000)");
						QuitarDinero(playerid, 1000);
						DarArma(playerid,11);
						SendClientMessage(playerid, -1, "Compraste un Vibrador blanco por {f21111}$1000");
					}
					case 1:
					{
						if(PLAYER_INFO[playerid][pDinero] < 1200) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1200)");
						QuitarDinero(playerid, 1200);
						DarArma(playerid,13);
						SendClientMessage(playerid, -1, "Compraste un Vibrador plateado por {f21111}$1200");
					}
					case 2:
					{
						if(PLAYER_INFO[playerid][pDinero] < 1600) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1600)");
						QuitarDinero(playerid, 1600);
						DarArma(playerid,12);
						SendClientMessage(playerid, -1, "Compraste un Gran vibrador blanco por {f21111}$1600");
					}
					case 3:
					{
						if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2500)");
						QuitarDinero(playerid, 2500);
						DarArma(playerid,10);
						SendClientMessage(playerid, -1, "Compraste un consolador rosa por {f21111}$2500");
					}
				}
			}
			return 1;
		}
		case SERVICIOGRUA1:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < PLAYER_INFO[playerid][vPrecio]/100) return SendClientMessage(playerid, -1, "No tienes el dinero suficiente para solícitar una grua a este vehículo");
				new stringo[256];
				format(stringo, 256, "Ultimo lugar estacionado\nEstacionamiento municipal");
				ShowPlayerDialog(playerid, SERVICIOGRUA2, DIALOG_STYLE_LIST,"¿Dónde quieres que enviemos tu vehículo?",stringo,"Aceptar","Cancelar");
			}
		}
		case COMPRARRADIO:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] >= 15000)
				{
					Emisoras[playerid][TieneEmisora] = 1;
					Emisoras[playerid][EmisoraID] = -1;
					Emisoras[playerid][TransEmisora] = 0;
					Emisoras[playerid][CabinaOcupada] = -1;
					format(Emisoras[playerid][NombreEmisora], 90, "%s", inputtext);
					format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
					QuitarDinero(playerid, 15000);
					format(string, sizeof(string), "{f21111}¡Felicidades! {FFFFFF}Has creado una estación de radio llamada {FFFF04}%s", inputtext);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Necesitas {f21111}$15000{FFFFFF} para crear una estación de radio");
			}
		}
		case VCPLAYER:
		{
		    if(!response) return 1;

		    new SLOT_VEHICLE = PLAYER_TEMP[playerid][pVEHICLES_SLOT][listitem], vehicle_id = PLAYER_TEMP[playerid][pVEHICLES][listitem];
		    if(vehicle_id == 0) return 1;
		    switch(SLOT_VEHICLE)
			{
			    case 1:
			    {


						OBTENER_DATOSV(playerid,1);
					    VEHPLAYER[playerid][PMAX] = PLAYER_INFO[playerid][vPrecio];


			    }
			    case 2:
			    {


				        OBTENER_DATOSV(playerid,2);
						VEHPLAYER[playerid][PMAX] = PLAYER_INFO[playerid][v2Precio];


			    }
			    case 3:
			    {

						OBTENER_DATOSV(playerid,3);
						VEHPLAYER[playerid][PMAX] = PLAYER_INFO[playerid][v3Precio];

			    }
			    case 4:
			    {
					    OBTENER_DATOSV(playerid,4);
					    VEHPLAYER[playerid][PMAX] = PLAYER_INFO[playerid][v4Precio];
    	    	}
			}
		}
		case VCPLAYER2:
		{
		    if(!response)return 1;
		    if(response)
		    {
      			if(isnull(inputtext) || IsNumeric(inputtext) == 0) return D_ESCRIBEPRICE(playerid);
  				if(strval(inputtext) <= 0) return D_ESCRIBEPRICE(playerid);
      			//if(strval(inputtext) > VEHPLAYER[playerid][PMAX]) return D_ESCRIBEPRICE(playerid);
      			VEHPLAYER[playerid][PRECIO] = strval(inputtext);
      			D_ESCRIBEID(playerid);
		    }
		}
		case VCPLAYER3:
		{
		    if(!response)return 1;
		    if(response)
		    {


				new value = strval(inputtext);
				VEHPLAYER[playerid][IDU] = value;
				if(value == playerid) return SendClientMessage(playerid,0x25AB26FF,"No puedes usar el comando contigo mismo.");
				if(!IsPlayerConnected(value)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
				if(JugadorLogeado[value] == 0) return SendClientMessage(playerid,0x25AB26FF,"Jugador no logeado.");
				//

				//
				new Float:x,Float:y,Float:z;
			 	if(IsPlayerConnected(value)) GetPlayerPos(value, x,y,z);
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
				{
				if(!mayPlayerSpawnVehicle(value))
				{
				    SendClientMessage(value, 0xFF0000FF, "Info: Detectamos 2 vehículos spawneados; Guarda uno en  /vehiculos.");
				    SendClientMessage(playerid, 0xFF0000FF, "Info: Detectamos 2 vehículos spawneados; Indícale al usuario que guarde 1");
					return 1;
				}
                VEHPLAYER[value][IDVEN] = playerid;
				SendClientMessageEx(playerid, -1, "{FFFFFF}Ofreciste a {009AFF}%s{FFFFFF} tu {009AFF}%s {FFFFFF}por %d%s,  espera que acepte o rechace.",PLAYER_INFO[VEHPLAYER[playerid][IDU]][Nickname],NombreAuto[GetVehicleModel(VEHPLAYER[playerid][IDV])-400],VEHPLAYER[playerid][PRECIO],(VEHPLAYER[playerid][TIPO] == 1)?(""SERVER_COIN""):("$"));
       			new msgven[250];
				format(msgven,sizeof(msgven),"{009AFF}%s{FFFFFF} te ofrece su {009AFF}%s por %d%s.",PLAYER_INFO[playerid][Nickname],NombreAuto[GetVehicleModel(VEHPLAYER[playerid][IDV])-400],VEHPLAYER[playerid][PRECIO],(VEHPLAYER[playerid][TIPO] == 1)?(""SERVER_COIN""):("$"));
				ShowPlayerDialog(value, VCPLAYER4, DIALOG_STYLE_MSGBOX,"Comprar vehículo", msgven,"Aceptar","Rechazar");
				return 1;
				}
				else return SendClientMessage(playerid,-1,"No estás cerca de ese jugador.");
		    }
		}

		case VCPLAYER4:
		{
		    if(!response)
		    {
     			SendClientMessageEx(VEHPLAYER[playerid][IDVEN], -1, "VENTAS: %s rechazó la venta del vehículo.",PLAYER_INFO[playerid][Nickname]);
     			SendClientMessageEx(playerid, -1, "VENTAS: rechazaste la compra del vehículo ofertado.");
		    }
		    if(response)
		    {


				new CountVeh = 0;
				if(PLAYER_INFO[playerid][vModelo] != 0) CountVeh ++;
				if(PLAYER_INFO[playerid][vModelo2] != 0) CountVeh ++;
				if(PLAYER_INFO[playerid][vModelo3] != 0) CountVeh ++;
				if(PLAYER_INFO[playerid][vModelo4] != 0) CountVeh ++;

				if(CountVeh > 1 && PLAYER_INFO[playerid][pVIP] == 0) return SendClientMessage(playerid, -1, "Las cuentas comunes solo pueden tener 2 vehículos."),SendClientMessage(VEHPLAYER[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
				if(CountVeh > 2 && PLAYER_INFO[playerid][pVIP] == 1) return SendClientMessage(playerid, -1, "Las cuentas VIP1 solo pueden tener 3 vehículos."),SendClientMessage(VEHPLAYER[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
				if(CountVeh > 3 && PLAYER_INFO[playerid][pVIP] == 2) return SendClientMessage(playerid, -1, "Las cuentas con membresía VIP solo pueden tener 4 vehículos."),SendClientMessage(VEHPLAYER[playerid][IDVEN], -1, "El usuario ya no puede comprar más vehículos.");
				new  obertador = VEHPLAYER[playerid][IDVEN];
		  		if(VEHPLAYER[obertador][TIPO] == 0)
		  		{
				        if(PLAYER_INFO[playerid][pDinero] < VEHPLAYER[obertador][PRECIO])
				        {
				            SendClientMessage(playerid, -1, "No tienes suficiente dinero .");
				            SendClientMessage(obertador, -1, "El comprador no tiene suficiente dinero.");
							return 1;
				        }
				        QuitarDinero(playerid,VEHPLAYER[obertador][PRECIO]);
						DarDinero(obertador,VEHPLAYER[obertador][PRECIO]);

		    	}
                else if(VEHPLAYER[obertador][TIPO] == 1)
			    {
				        if(PLAYER_INFO[playerid][Moneda] < VEHPLAYER[obertador][PRECIO])
				        {
				            SendClientMessage(playerid, -1, "No tienes suficientes RZ .");
				            SendClientMessage(obertador, -1, "El comprador no tiene suficientes RZ'S");
							return 1;
				        }
				    	PLAYER_INFO[playerid][Moneda] -= VEHPLAYER[obertador][PRECIO];
           				PLAYER_INFO[obertador][Moneda] += VEHPLAYER[obertador][PRECIO];
				}
				new  mven[250];
				format(mven,sizeof(mven), "{f21111}%s{FFFFFF} aceptó comprarte tu %s por %d%s.",PLAYER_INFO[playerid][Nickname],NombreAuto[GetVehicleModel(VEHPLAYER[obertador][IDV])-400],VEHPLAYER[obertador][PRECIO],(VEHPLAYER[obertador][TIPO] == 1)?(""SERVER_COIN""):("$"));
				SendClientMessage(obertador, -1, mven);
				//
				new  msgof[250];
				format(msgof,sizeof(msgof), "{f21111}%s{FFFFFF} le compraste a %s su %s por %d%s.",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[obertador][Nickname],NombreAuto[GetVehicleModel(VEHPLAYER[obertador][IDV])-400],VEHPLAYER[obertador][PRECIO],(VEHPLAYER[obertador][TIPO] == 1)?(""SERVER_COIN""):("$") );
				SendClientMessage(playerid, -1, msgof);
				Remove_SVEHICLE(obertador,VEHPLAYER[obertador][SLOT]);
				PLAYER_TIMES[obertador][TiempoVenderv] = 60;
    //

		    }
		}
	   case D_REGALOS:
	    {
	        if(response)
	        {
	            PLAYER_TEMP[playerid][pSeleccion_Regalos] = listitem+1;
	            switch(listitem)
	            {
					case 0: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Medicamentos", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 1: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Crack", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 2: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Marihuana", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 3: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Piezas de armas", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 4: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Patines", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 5: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Dinero", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 6: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Moneda", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 7: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Cocaina", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 8: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios - Heroina", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 9: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios -RootCoins", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 10: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios -Preper", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 11: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios -Gino", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 12: ShowPlayerDialog(playerid, D_REGALOS2, DIALOG_STYLE_LIST, "{f21111}"SERVER_COIN":RP | Cantidad de usuarios -Gino", "Un solo jugador\nTodos los jugadores", "Siguiente","Cerrar");
					case 13:
					{
					    if(PayDayActive == false)
					    {
					        new requerido = 0;
					        TimerForcep = SetTimerEx("PayDay",segundos(1),true,"d",requerido);
					    	PayDayActive = true;
							format(string,sizeof(string),"%s activa la lluvia de pagas diarias.",PLAYER_INFO[playerid][Nickname]);
					    	MensajeAdmin(COLOR_CHEAT,string,3);
					    }
					    else
					    {
					        KillTimer(TimerForcep);
					        PayDayActive = false;
					        format(string,sizeof(string),"%s desactiva la lluvia de pagas diarias.",PLAYER_INFO[playerid][Nickname]);
					    	MensajeAdmin(COLOR_CHEAT,string,3);
					    }
					}
					case 14:
					{
						callcmd::adminarena(playerid);
					}
				}
	        }
	    }
	    case D_REGALOS2:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
					case 0:
					{
					    PLAYER_TEMP[playerid][pSeleccion_Regalos_Staff] = 1;
						ShowPlayerDialog(playerid, D_REGALOS3, DIALOG_STYLE_INPUT, "{f21111}"SERVER_COIN":RP | Un solo jugador", "Jugador (ID):", "Siguiente","Cerrar");
					}
					case 1:
					{
					    PLAYER_TEMP[playerid][pSeleccion_Regalos_Staff] = 2;
						ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, "{f21111}"SERVER_COIN":RP | Todos los jugadores", "Cantidad:", "Siguiente","Cerrar");
					}
	            }
	        }
	    }
	    case D_REGALOS3:
	    {
	        if(response)
	        {
	            if(IsNumeric(inputtext) == 0 || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numerico.");
				new id = strval(inputtext);
				PLAYER_TEMP[playerid][pSeleccion_Regalos_Jugador] = id;
	            switch(PLAYER_TEMP[playerid][pSeleccion_Regalos_Staff])
	            {
	                case 1:
	                {
					    new mensajeria[128];
					    format(mensajeria,sizeof(mensajeria),"{f21111}"SERVER_COIN":RP | Solo %s",PLAYER_INFO[id][Nickname]);
					    ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
	                }
					case 2:
					{
					    new mensajeria[128];
					    format(mensajeria,sizeof(mensajeria),"{f21111}"SERVER_COIN":RP | Todos los jugadores");
					    ShowPlayerDialog(playerid, D_REGALOS4, DIALOG_STYLE_INPUT, mensajeria, "Cantidad:", "Siguiente","Cerrar");
					}
	            }
	        }
	    }
	    case D_REGALOS4:
        {
            if(response)
            {
                if(!IsNumeric(inputtext) || isnull(inputtext)) return SendClientMessage(playerid,-1,"Debe ingresar un valor numerico.");
                new cantidad = strval(inputtext);
                new id = PLAYER_TEMP[playerid][pSeleccion_Regalos_Jugador];
                switch(PLAYER_TEMP[playerid][pSeleccion_Regalos_Staff])
                {
                    case 1: // Un solo jugador
                    {
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 1) // Medicamentos
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pRemedios] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d medicamentos{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 2) // Crack
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pCrack] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%dg de crack{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 3) // Marihuana
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pMarihuana] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%dg de marihuana{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 4) // PiAGas de armas
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pMateriales] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d piezas de armas{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 5) // Patines
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pPatines] = 1;
                            format(string,128,"{FFFFFF}Has recibido {f21111}patines{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 6) // Dinero
                        {
                            if(IsPlayerNPC(id)) return 1;
                            DarDinero(id, cantidad);
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d de dinero{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 7) // Monedas
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][Moneda] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d "SERVER_COIN"{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 8) // cocaina
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pCocaina] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d de cocaina{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 9) // heroina
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pHeroina] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d heroina{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 10) // RootCoins
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pHeroina] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d RootCoins{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 11) // Preper
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pPreper] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d Preper{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 12) // Gino
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pGino] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d Gino{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                        if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 13) // Perico
                        {
                            if(IsPlayerNPC(id)) return 1;
                            PLAYER_INFO[id][pPerico] += cantidad;
                            format(string,128,"{FFFFFF}Has recibido {f21111}%d Perico{FFFFFF} de parte de la administracion.", cantidad);
                            SendClientMessage(id,-1,string);
                        }
                    }
                    case 2: // Todos los jugadores
                    {
                        foreach(new i : Player)
                        {
                            if(!IsPlayerNPC(i))
                            {
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 1) // Medicamentos
                                {
                                    PLAYER_INFO[i][pRemedios] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d medicamentos{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 2) // Crack
                                {
                                    PLAYER_INFO[i][pCrack] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%dg de crack{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 3) // Marihuana
                                {
                                    PLAYER_INFO[i][pMarihuana] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%dg de marihuana{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 4) // Piezas de armas
                                {
                                    PLAYER_INFO[i][pMateriales] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d piezas de armas{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 5) // Patines
                                {
                                    PLAYER_INFO[i][pPatines] = 1;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}patines{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 6) // Dinero
                                {
                                    DarDinero(i, cantidad);
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d de dinero{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                      			if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 7) // Monedas
	  							{
                                    PLAYER_INFO[i][Moneda] += cantidad;
									format(string,128,"{FFFFFF}Has recibido {f21111}%d RZ{FFFFFF} de parte de la administración.", cantidad);
									SendClientMessage(i,-1,string);
	  							}
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 8) // cocaina
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pCocaina] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d de cocaina{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 9) // heroina
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pHeroina] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d heroina{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 10) // RootCoins
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pRootCoins] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d RootCoins{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 11) // Preper
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pPreper] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d Preper{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 12) // Gino
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pGino] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d Gino{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                                if(PLAYER_TEMP[playerid][pSeleccion_Regalos] == 13) // Perico
                                {
                                    if(IsPlayerNPC(i)) return 1;
                                    PLAYER_INFO[i][pPerico] += cantidad;
                                    format(string,128,"{FFFFFF}Has recibido {f21111}%d Perico{FFFFFF} de parte de la administracion.", cantidad);
                                    SendClientMessage(i,-1,string);
                                }
                            }
                        }
                    }
                    default: return 1;
                }
                PLAYER_TEMP[playerid][pSeleccion_Regalos] = 0;
                PLAYER_TEMP[playerid][pSeleccion_Regalos_Staff] = 0;
                PLAYER_TEMP[playerid][pSeleccion_Regalos_Jugador] = INVALID_PLAYER_ID;
            }
        }
		case TIENDA_DROGAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_INFO[playerid][Moneda] < 20) return SendClientMessage(playerid, -1,"No tienes suficientes RZ");
						PLAYER_INFO[playerid][pCocaina] += 20;
						SendClientMessage(playerid, -1,"Has comprado un pack de cocaína de {00EC00}20 unidades");
						PLAYER_INFO[playerid][Moneda] -= 20;
					}
					case 1:
					{
						if(PLAYER_INFO[playerid][Moneda] < 40) return SendClientMessage(playerid, -1,"No tienes suficientes RZ");
						PLAYER_INFO[playerid][pCocaina] += 40;
						SendClientMessage(playerid, -1,"Has comprado un pack de cocaína de {00EC00}40 unidades");
						PLAYER_INFO[playerid][Moneda] -= 40;
					}
					case 2:
					{
						if(PLAYER_INFO[playerid][Moneda] < 20) return SendClientMessage(playerid, -1,"No tienes suficientes RZ");
						PLAYER_INFO[playerid][pHeroina] += 20;
						SendClientMessage(playerid, -1,"Has comprado un pack de heroìna de {00EC00}20 unidades");
						PLAYER_INFO[playerid][Moneda] -= 20;
					}
					case 3:
					{
						if(PLAYER_INFO[playerid][Moneda] < 40) return SendClientMessage(playerid, -1,"No tienes suficientes RZ");
						PLAYER_INFO[playerid][pHeroina] += 40;
						SendClientMessage(playerid, -1,"Has comprado un pack de heroìna de {00EC00}40 unidades");
						PLAYER_INFO[playerid][Moneda] -= 40;
					}
				}
			}
		}
		case DIALOG_COMANDOS:
        {
            if(response)
            {
                switch(listitem)
                {
					case 0:
					{
						if(PLAYER_INFO[playerid][pAdmin] >= CMD_MOD_DUDAS)
                       	ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Moderador Dudas:",
                       	"\
                       	    {FFFFFF}/log /ls /tiendadp /saem /ganton /trailero /sf /lv\n\
                       	    {FFFFFF}/mutear /muteardc /desmutear /mutead /unmutead\n\
                       	    \n\
						"
						, "Salir", "");
						return 1;
					}
                    case 1:
                    {
                    	if(PLAYER_INFO[playerid][pAdmin] >= CMD_MOD_JUEGO)
						ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Moderador Juego",
						"\
                            {f21111}|---------------------------------------------------------------------|\n\
						    {FFFFFF}/mp /skininfo /sancionar  /spec /specoff\n\
						    {FFFFFF}/kick /rtcar /reportes /limpiarreportes /traer /ir /getcar /gotocar /slap /rp\n\
						    {FFFFFF}/fix /revive /crearcasa  /banear /pedidos  /unbanip\n\
						    {FFFFFF}/setarmor /eliminarcasa /sethealth /darsed /darhambre /check /centrada /editar\n\
						    {FFFFFF}/creargaraje /ponerint /ircasa /irgaraje /desvolcar\n\
						    {f21111}|---------------------------------------------------------------------|\
						    \n\
						"
						, "Salir", "");
						return 1;
					}
                    case 2:
                    {
                    	if(PLAYER_INFO[playerid][pAdmin] >= CMD_MOD_GLOBAL)
    					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Moderador Global",
						"\
						    {f21111}|---------------------------------------------------------------------|\n\
         				    {FFFFFF}/cambiarpass /newname /cord /congelar /descongelar /setskin (Para ir al mapeo a hacer el evento)\n\
						    {FFFFFF}/liberar /info /borrarauto /borrarcontrol /gd /rac /racall /explotar /jetpack /musicaadmin\n\
						    {f21111}|---------------------------------------------------------------------|\n\
						    \n\
						"
						, "Salir", "");
						return 1;
					}
				 	case 3:
                    {
                    	if(PLAYER_INFO[playerid][pAdmin] >= CMD_ADM)
    					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Administrador",
						"\
						    {f21111}|---------------------------------------------------------------------|\n\
         				    {FFFFFF}/adminarena /inactivas /givetoy /dararma /glob /fixveh /darjetpack\n\
						    {FFFFFF}/shopcar /disarm /dstat /fstat /infoex /reloadfabricas /Joder /quitarjetpack\n\
						    {f21111}|---------------------------------------------------------------------|\n\
						    \n\
						"
						, "Salir", "");
						return 1;
					}
                    case 4:
                    {
                    	if(PLAYER_INFO[playerid][pAdmin] >= CMD_SUBDUENO)
    					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Sub Dueño",
						"\
						    {f21111}|---------------------------------------------------------------------|\n\
         				    {FFFFFF}/baneados /infocamello /recargarcamello /yo /menu /breakserver (Bloquea el server)\n\
						    {f21111}|---------------------------------------------------------------------|\n\
						    \n\
						"
						, "Salir", "");
						return 1;
					}
        		}
        	}
        }
        case NMusica:
		{
		if(response)
		{
		ReproducirCancionParaTodos(inputtext);
		SendClientMessageToAll(COLOR_WHITE, "{f21111}[Servidor]:{FFFFFF} un administrador ha puesto una {00AEFF}Canción.");
		}
		return 1;
		}
		case GPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(string, sizeof(string), "{f21111} {FFFFFF}Sub Urban\n{f21111} {FFFFFF}ZIP\n{f21111} {FFFFFF}Binco\n{f21111} {FFFFFF}Victim\n{f21111} {FFFFFF}Didier Sachz\n{f21111} {FFFFFF}Pro Laps");
						ShowPlayerDialog(playerid,GPS1, DIALOG_STYLE_LIST,"GPS: Selecciona una tienda",string,"Seleccionar","Cerrar");
						return 1;
					}
					case 1:
					{
						format(string, sizeof(string), "{f21111} {FFFFFF}Trabajo de Armero\n{f21111} {FFFFFF}Trabajo de Camionero\n{f21111} {FFFFFF}{f21111} {FFFFFF}Trabajo de Médico\n{f21111} {FFFFFF}Trabajo de Taxista\n{f21111} {FFFFFF}Trabajo de Guardaespaldas\n{f21111} {FFFFFF}Trabajo de Mecánico\n{f21111} {FFFFFF}Trabajo de Basurero\n{f21111} {FFFFFF}Trabajo de Transportista\n{f21111} {FFFFFF}Trabajo de Prostitución\n{f21111} {FFFFFF}Trabajo de Trailero");
						ShowPlayerDialog(playerid,GPS2, DIALOG_STYLE_LIST,"GPS: Selecciona un trabajo",string,"Seleccionar","Cerrar");
						return 1;
					}
					case 2:
					{
					    format(string, sizeof(string), "{f21111} {FFFFFF}Wang Cars LS\n{f21111} {FFFFFF}Coches baratos\n{f21111} {FFFFFF}Grotti\n{f21111} {FFFFFF}Coutt and Schutz\n{f21111} {FFFFFF}Wang Cars SF");
					    ShowPlayerDialog(playerid,GPS3, DIALOG_STYLE_LIST,"GPS: Selecciona un concesionario",string,"Seleccionar","Cerrar");
					}
					case 3: PosicionGPS(playerid, 1202.7670,-1565.9500,13.3828, 5.0);//tienda RZ
					case 4:
					{
					    format(string, sizeof(string), "{f21111} {FFFFFF}Taller Tunning Los santos");
					    ShowPlayerDialog(playerid,GPS4, DIALOG_STYLE_LIST,"GPS: Selecciona donde quieras ir",string,"Seleccionar","Cerrar");
					}
			        case 5:
					{
						format(string, sizeof(string), "{f21111} {FFFFFF} Banco central de Los Santos\n{f21111} {FFFFFF} Banco central de San Fierro\n{f21111} {FFFFFF} Banco central de Las Venturas\n{f21111} {FFFFFF} Banco LSPD");
						ShowPlayerDialog(playerid,GPS5, DIALOG_STYLE_LIST,"Selecciona un banco",string,"Ver mapa","Cerrar");
						return 1;
					}
				    case 6:
					{
						format(string, sizeof(string), "{f21111} {FFFFFF}Edificio Municipal\n{f21111} {FFFFFF}Los santos police departament\n{f21111} {FFFFFF}Base Militar Las Venturas\n{f21111} {FFFFFF}San Fierro Police Department\n{f21111} {FFFFFF}Las Venturas Police Department");
						ShowPlayerDialog(playerid,GPS6, DIALOG_STYLE_LIST,"Selecciona un lugar",string,"Ver mapa","Cerrar");
						return 1;
					}
					case 7:
					{
						PosicionGPS(playerid, 2122.1213,-1896.6118,13.3828, 5.0);//Mercado negro
					}
				}
			}
		}
		case GPS1: // Tienda de ropa
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid,2112.9199,-1217.4652,23.8047,5); // Sub Urban
					case 1: PosicionGPS(playerid,1451.8942,-1155.9928,23.6642,5); // ZIP
					case 2: PosicionGPS(playerid,2245.3401,-1661.1309,15.4690,5); // Binco
					case 3: PosicionGPS(playerid,454.1436,-1501.9719,30.8730,5);  // Victim
					case 4: PosicionGPS(playerid,448.6999,-1479.9546,30.6317,5);  // Didier Sachz
					case 5: PosicionGPS(playerid,507.7714,-1357.4158,15.9609,5);  // Pro Laps
				}
			}
		}
		case GPS2: // Trabajos
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid,2237.5837,-2214.2102,13.5469,5); // Trabajo de Armero
					case 1: PosicionGPS(playerid,-54.6815,-337.7328,5.4297,5);   // Trabajo de Camionero
					case 2: PosicionGPS(playerid,1189.0481,-1361.8744,13.5550,5); // Trabajo de Medico
					case 3: PosicionGPS(playerid,1743.3903,-1860.9901,13.5781,5); // Trabajo de Taxista
					case 4: PosicionGPS(playerid,2221.8628,-1715.7574,13.3314,5); // Trabajo de Guardaespaldas
					case 5: PosicionGPS(playerid,114.3449,-158.1824,1.5781,5);    // Trabajo de Mecanico
					case 6: PosicionGPS(playerid,-174.5626,-1623.9821,3.0859,5);  // Trabajo de Basurero
					case 7: PosicionGPS(playerid,1377.5569,1157.6708,10.8203,5);  // Trabajo de Transportista
					case 8: PosicionGPS(playerid,2017.9595,1154.9974,10.8203,5); // Trabajo de Prostitucion
					case 9: PosicionGPS(playerid,-235.5366,-226.0073,1.4219,5); // Trabajo de Trailero
				}
			}
		}
		case GPS3: // Concesionarios
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid,1494.2202,-1743.4330,13.5469,7.0);
					case 1: PosicionGPS(playerid,1657.7146,-1882.3820,13.5520,7.0);
					case 2: PosicionGPS(playerid,557.5392,-1256.9833,17.2422,7.0);
					case 3: PosicionGPS(playerid,2127.8708,-1122.4624,25.3704,7.0);
					case 4: PosicionGPS(playerid,-1991.3212,288.4648,34.0322,7.0);
				}
			}
		}
		case GPS4: // Talleres Tunning
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid, 2417.3464,-2089.1995,13.4366, 7.0);//TUNING LS
				}
			}
		}
		case GPS5:// Bancos
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid,1462.1840,-1019.6361,24.6326, 5);
					case 1: PosicionGPS(playerid,-1580.7654,859.5545,7.4429, 5);
					case 2: PosicionGPS(playerid,2433.5603,2289.6563,10.8203, 5);
					case 3: PosicionGPS(playerid,1498.5227,-1584.7042,13.5469,5);
				}
			}
		}
		case GPS6:// Edificios
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PosicionGPS(playerid,1417.5177,-1702.6820,13.5395, 5);
					case 1: PosicionGPS(playerid,1543.7274,-1675.3765,13.5570, 5);
					case 2: PosicionGPS(playerid,-44.0844,2637.9958,63.4287, 5);
					case 3: PosicionGPS(playerid,-1605.1154,721.3596,11.8904, 5);
					case 4: PosicionGPS(playerid,2289.6543,2424.9956,10.8203, 5);
				}
			}
		}
		case CCCOBJETOS:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
                        if(PLAYER_INFO[playerid][pDinero] < 4600) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($4600)");
                        QuitarDinero(playerid, 4600);
                        Objeto[playerid] = 19317;
                        SendClientMessage(playerid, -1, "Compraste una guitarra por {00F000}4600$");
                        SetPlayerAttachedObject(playerid,7,19317,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
                    }
                    case 1:
                    {
                        if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
                        if(PLAYER_INFO[playerid][pDinero] < 2400) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2400)");
                        QuitarDinero(playerid, 2400);
                        Objeto[playerid] = 2404;
                        SendClientMessage(playerid, -1, "Compraste una Tabla de Surf T1 por {00F000}2400$");
                        SetPlayerAttachedObject(playerid,7,2404,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
                    }
                    case 2:
                    {
                        if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
                        if(PLAYER_INFO[playerid][pDinero] < 4800) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($4800)");
                        QuitarDinero(playerid, 4800);
                        Objeto[playerid] = 1210;
                        SendClientMessage(playerid, -1, "Compraste un Maletin por {00F000}4800$");
                        SetPlayerAttachedObject(playerid, 7, 1210, 6, 0.289999, 0.079999, -0.000000, 0.000000, -100.000000, 1.000000);
                    }
                    case 3:
                    {
                        if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
                        if(PLAYER_INFO[playerid][pDinero] < 2400) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($2400)");
                        QuitarDinero(playerid, 2400);
                        Objeto[playerid] = 2405;
                        SendClientMessage(playerid, -1, "Compraste una Tabla de Surf T2 por {00F000}2400$");
                        SetPlayerAttachedObject(playerid,7,2405,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
                    }
                    case 4:
                    {
                        if(Objeto[playerid] != 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en la mano.");
                        if(PLAYER_INFO[playerid][pDinero] < 4200) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($4200)");
                        QuitarDinero(playerid, 4200);
                        Objeto[playerid] = 19318;
                        SendClientMessage(playerid, -1, "Compraste un Bajo por {00F000}4200$");
                        SetPlayerAttachedObject(playerid,7,19318,6,0.103999,0.036000,-0.127999,175.999954,-157.499877,174.199905,0.620001,0.515000,0.856000);
                    }
                }
            }
            return 1;
        }
		case INVITARCRI:
		{
			if(response)
			{
				if(TieneEncargo[playerid] > 0) return SendClientMessage(playerid, -1, "Ya tienes un encargo, terminalo.");
				new e;
				e = TieneEncargo[Invitador[playerid]];
				Encargo[e][IdColega] = playerid;
				TieneEncargo[playerid] = e;
				if(e == 1)
				{
					SendClientMessage(Encargo[e][IdCriminal],-1,"Encargo aceptado: {FF0019}Elimina al gerente del Banco Central.");
					SendClientMessage(Encargo[e][IdColega],-1,"Encargo aceptado: {FF0019}Elimina al gerente del Banco Central.");
					SendClientMessage(Encargo[e][IdColega],-1,"Tienes que llevar un vehículo de escape hasta el punto marcado en el mapa.");
					TextDrawSetString(MisionCriminal[e], "~g~Reunete~w~ con tu colega en el punto marcado.");
					TextDrawSetString(MisionColega[e], "~g~Conduce~w~ hasta el punto marcado.");
					Encargo[e][SegundosMision] = 300;
					CriminalAceptado[Encargo[e][IdColega]] = 1;
					CriminalAceptado[Encargo[e][IdCriminal]] = 1;
					SetPlayerCheckpoint(Encargo[e][IdColega], 1526.0902,-1017.4032,23.5809, 5.0);
					SetPlayerCheckpoint(Encargo[e][IdCriminal], 1526.0902,-1017.4032,23.5809, 5.0);
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)
					{
						Encargo[e][Tiene9mm] = 0;
						TextDrawSetString(MisionCriminal[e], "Consigue una ~r~9mm silenciada~w~.");
						SendClientMessage(Encargo[e][IdCriminal],-1,"Necesitas conseguir una 9mm silenciada para continuar.");
					}
					return 1;
				}
				if(e == 2)
				{
					SendClientMessage(Encargo[e][IdCriminal],-1,"Encargo aceptado: {FF0019}Elimina al policía corrupto.");
					SendClientMessage(Encargo[e][IdColega],-1,"Encargo aceptado: {FF0019}Elimina al policía corrupto.");
					SendClientMessage(Encargo[e][IdColega],-1,"Tienes que llevar un vehículo de escape hasta el punto marcado en el mapa.");
					TextDrawSetString(MisionCriminal[e], "~g~Reunete~w~ con tu colega en el punto marcado.");
					TextDrawSetString(MisionColega[e], "~g~Conduce~w~ hasta el punto marcado.");
					Encargo[e][SegundosMision] = 300;
					CriminalAceptado[Encargo[e][IdColega]] = 1;
					CriminalAceptado[Encargo[e][IdCriminal]] = 1;
					SetPlayerCheckpoint(Encargo[e][IdColega], 1607.3558,-1703.0073,13.2540, 5.0);
					SetPlayerCheckpoint(Encargo[e][IdCriminal], 1607.3558,-1703.0073,13.2540, 5.0);
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)
					{
						Encargo[e][Tiene9mm] = 0;
						TextDrawSetString(MisionCriminal[e], "Consigue una ~r~9mm silenciada~w~.");
						SendClientMessage(Encargo[e][IdCriminal],-1,"Necesitas conseguir una 9mm silenciada para continuar.");
					}
					return 1;
				}
				if(e == 3)
				{
					SendClientMessage(Encargo[e][IdCriminal],-1,"Encargo aceptado: {FF0019}Elimina al maquinista.");
					SendClientMessage(Encargo[e][IdColega],-1,"Encargo aceptado: {FF0019}Elimina al maquinista.");
					SendClientMessage(Encargo[e][IdColega],-1,"Tienes que llevar un vehículo de escape hasta el punto marcado en el mapa.");
					TextDrawSetString(MisionCriminal[e], "~g~Reunete~w~ con tu colega en el punto marcado.");
					TextDrawSetString(MisionColega[e], "~g~Conduce~w~ hasta el punto marcado.");
					Encargo[e][SegundosMision] = 300;
					CriminalAceptado[Encargo[e][IdColega]] = 1;
					CriminalAceptado[Encargo[e][IdCriminal]] = 1;
					SetPlayerCheckpoint(Encargo[e][IdColega], 1374.1508,2695.1580,10.5291, 5.0);
					SetPlayerCheckpoint(Encargo[e][IdCriminal], 1374.1508,2695.1580,10.5291, 5.0);
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)
					{
						Encargo[e][Tiene9mm] = 0;
						TextDrawSetString(MisionCriminal[e], "Consigue una ~r~9mm silenciada~w~.");
						SendClientMessage(Encargo[e][IdCriminal],-1,"Necesitas conseguir una 9mm silenciada para continuar.");
					}
					return 1;
				}
				if(e == 4)
				{
					SendClientMessage(Encargo[e][IdCriminal],-1,"Encargo aceptado: {FF0019}Elimina a un empleado del Burguer Shot.");
					SendClientMessage(Encargo[e][IdColega],-1,"Encargo aceptado: {FF0019}Elimina a un empleado del Burguer Shot.");
					SendClientMessage(Encargo[e][IdColega],-1,"Tienes que llevar un vehículo de escape hasta el punto marcado en el mapa.");
					TextDrawSetString(MisionCriminal[e], "~g~Reunete~w~ con tu colega en el punto marcado.");
					TextDrawSetString(MisionColega[e], "~g~Conduce~w~ hasta el punto marcado.");
					Encargo[e][SegundosMision] = 300;
					CriminalAceptado[Encargo[e][IdColega]] = 1;
					CriminalAceptado[Encargo[e][IdCriminal]] = 1;
					SetPlayerCheckpoint(Encargo[e][IdColega], 1218.0623,-874.5742,42.6080, 5.0);
					SetPlayerCheckpoint(Encargo[e][IdCriminal], 1218.0623,-874.5742,42.6080, 5.0);
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)
					{
						Encargo[e][Tiene9mm] = 0;
						TextDrawSetString(MisionCriminal[e], "Consigue una ~r~9mm silenciada~w~.");
						SendClientMessage(Encargo[e][IdCriminal],-1,"Necesitas conseguir una 9mm silenciada para continuar.");
					}
					return 1;
				}
				if(e == 5)
				{
					SendClientMessage(Encargo[e][IdCriminal],-1,"Encargo aceptado: {FF0019}Elimina al Camello.");
					SendClientMessage(Encargo[e][IdColega],-1,"Encargo aceptado: {FF0019}Elimina al Camello.");
					SendClientMessage(Encargo[e][IdColega],-1,"Tienes que llevar un vehículo de escape hasta el punto marcado en el mapa.");
					TextDrawSetString(MisionCriminal[e], "~g~Reunete~w~ con tu colega en el punto marcado.");
					TextDrawSetString(MisionColega[e], "~g~Conduce~w~ hasta el punto marcado.");
					Encargo[e][SegundosMision] = 300;
					CriminalAceptado[Encargo[e][IdColega]] = 1;
					CriminalAceptado[Encargo[e][IdCriminal]] = 1;
					SetPlayerCheckpoint(Encargo[e][IdColega], 2337.8752,-1366.0424,24.0111, 5.0);
					SetPlayerCheckpoint(Encargo[e][IdCriminal], 2337.8752,-1366.0424,24.0111, 5.0);
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)
					{
						Encargo[e][Tiene9mm] = 0;
						TextDrawSetString(MisionCriminal[e], "Consigue una ~r~9mm silenciada~w~.");
						SendClientMessage(Encargo[e][IdCriminal],-1,"Necesitas conseguir una 9mm silenciada para continuar.");
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid,-1,"No hay encargos disponibles en este momento, espera unos minutos.");
				}
			}
			if(!response)
			{
				SendClientMessage(playerid,-1,"{EB0000}Invitación rechazada.");
				SendClientMessage(Invito[playerid],-1,"El jugador rechazó la invitación.");
				Colega[Criminal[playerid]] = INVALID_PLAYER_ID;
				Invito[Invito[playerid]] = INVALID_PLAYER_ID;
				Invito[playerid] = INVALID_PLAYER_ID;
				Invitador[playerid] = INVALID_PLAYER_ID;
			}
		}
		case REGLAS:
		{
			if(response)
			{
				new string2[1200];
				string2="{FFFF04}Usar canales correspondientes\n{FFFFFF}Hay 2 tipos de canales {f21111}Dentro del personaje (DP){FFFFFF} y {f21111}Fuera del personaje (FP){FFFFFF}, es importante saber diferenciarlos y respetarlos.\n\n- Los {f21111}canales DP{FFFFFF} son todos aquellos que usamos dentro del Rol del personaje, el chat normal, el chat\npor radio/telefono, por mensaje de texto y aquellos para indicar acciones o resaltar ({FFFF04}/y /g /p /s{FFFFFF}) ({FFFF04}!{FFFFFF} en chat bandas)\n\n- {f21111}Los canales FP{FFFFFF} son todos aquellos que se utilizan para hablar estando fueral del personaje, estos\nincluyen al chat de ayuda ({FFFF04}/n{FFFFFF}), en el canal de reportes ({FFFF04}/reportar{FFFFFF}) y el comando más comun para la gente cercana {FFFF04}/b{FFFFFF} (!! en el chat de bandas).\n\n- {f21111}Información Fuera del Personaje (IFP){FFFFFF}: Esta información es aquella que sabemos, pero que {f21111}DP{FFFFFF}, no podemos utilizar, ejemplo:\nTodos vemos el nombre de las personas arrriba de ellos, pero esto no quiere decir que {f21111}DP{FFFFFF} lo sepamos,\nsi esta persona nunca nos dijo su nombre, no lo conocemos y por lo tanto, no podemos llamarla por tal nombre.\n";
				ShowPlayerDialog(playerid, REGLAS2, DIALOG_STYLE_MSGBOX, "Reglas del servidor", string2, "Siguiente","");
			}
		}
		case REGLAS2:
		{
			if(response)
			{
				new string2[700];
				string2="{FFFF04}Agredir sin razon (ASR)\n{FFFFFF}Esta completamente prohibido el {f21111}ASR{FFFFFF} ya sea golpeando con puños,\narmas blancas, disparando o con un vehiculo\n\n{FFFF04}Acciones imposibles (AI)\n{FFFFFF}Esta implica realizar acciones que no son realistas, y esto es totalmente prohibido.\nEjemplo: Ir parado arriba de un auto, empujar un camión corriendo, entre otros.\n\n{FFFF04}Atropellar con vehiculo (AV)\n{FFFFFF}Esta prohibido chocar con el vehículo intencionalmente para matar o herir a alguien,\nya sea manteniendo el auto arriba de la persona hasta que muera, o pisándolo varias veces hasta matarlo.";
				ShowPlayerDialog(playerid, REGLAS4, DIALOG_STYLE_MSGBOX, " Reglas del juego",string2,"Aceptar","");
			}
        }
		case HERRAMIENTAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    if(PLAYER_INFO[playerid][pMartillo] == 1) return SendClientMessage(playerid,-1,"Ya tienes un martillo.");
					    if(PLAYER_INFO[playerid][pDinero] < 20) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($20)");
						SendClientMessage(playerid,-1,"Compraste un martillo.");
						PLAYER_INFO[playerid][pMartillo] = 1;
						QuitarDinero(playerid, 20);
						return 1;
					}
					case 1:
					{
					    if(PLAYER_INFO[playerid][pDestornillador] == 1) return SendClientMessage(playerid,-1,"Ya tienes un destornillador.");
					    if(PLAYER_INFO[playerid][pDinero] < 25) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($25)");
						SendClientMessage(playerid,-1,"Compraste un destornillador.");
						PLAYER_INFO[playerid][pDestornillador] = 2;
						QuitarDinero(playerid, 25);
						return 1;
					}
					case 2:
					{
					    if(PLAYER_INFO[playerid][pBarreta] == 1) return SendClientMessage(playerid,-1,"Ya tienes una barreta.");
					    if(PLAYER_INFO[playerid][pDinero] < 60) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($60)");
						SendClientMessage(playerid,-1,"Compraste una barreta.");
						PLAYER_INFO[playerid][pBarreta] = 3;
						QuitarDinero(playerid, 60);
						return 1;
					}
					case 3:
					{
					    if(PLAYER_INFO[playerid][pBalde] == 1) return SendClientMessage(playerid,-1,"Ya tienes un balde.");
					    if(PLAYER_INFO[playerid][pDinero] < 120) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($120)");
						SendClientMessage(playerid,-1,"Compraste un balde.");
						QuitarDinero(playerid, 120);
						return 1;
					}
				}
			}
		}
		case DIALOG_LOC:
		{
			if(!response)return 1;
			switch(listitem)
			{
				case 0:
				{
					if(IsValidVehicle(autos[playerid]) || IsValidVehicle(autos2[playerid]) || IsValidVehicle(autos3[playerid]) || IsValidVehicle(autos4[playerid]))Localizar(playerid);
				}
				case 1:LocalizarPropiedad(playerid);
			}
		}
		case LocalizarP:
    	{
    	    if(!response) return 0;
			new home = ObtenerOrdenPropiedad(playerid,listitem);
			if(PLAYER_INFO[playerid][CasaID][home] > 0)
			{
				for(new p=1; p < MAX_PROPIEDADES; p++)
				{
    				if(PropInfo[p][pID] == PLAYER_INFO[playerid][CasaID][home] && PropInfo[p][pPosX] != 0)
				    {

						SendClientMessage(playerid,-1,"{DBED15}Se ha marcado en el mapa la ubicación de la propiedad.");
						SetPlayerCheckpoint(playerid,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],4.0);
						break;
					}
			    }
			}
    	}
		case ENTREGARSE1:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < 500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ({f21111}$500{FFFFFF}).");
			    QuitarDinero(playerid, 500);
			    
			    PLAYER_INFO[playerid][pCargos] = 0;
			    ActualizarRadar();
				SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
			    SendClientMessage(playerid, -1, "Pagaste la fianza de {f21111}$500{FFFFFF} y se te quitaron los cargos.");
   			}
		}
		case ENTREGARSE2:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < 1000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ({f21111}$1000{FFFFFF}).");
			    QuitarDinero(playerid, 1000);
			    PLAYER_INFO[playerid][pCargos] = 1;
			    ActualizarRadar();
				SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
				SendClientMessage(playerid, -1, "Pagaste la fianza de {f21111}$1000{FFFFFF} y se te redujo los cargos.");
			    SetTimerEx("Encerrando",500,false,"d",playerid);
                if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
				else TipoPrision[playerid] = 1;
   			}
		}
		case ENTREGARSE3:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < 1500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ({f21111}$1500{FFFFFF}).");
			    QuitarDinero(playerid, 1500);
			    PLAYER_INFO[playerid][pCargos] = 2;
			    ActualizarRadar();
				SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
				SendClientMessage(playerid, -1, "Pagaste la fianza de {f21111}$1500{FFFFFF} y se te redujo los cargos.");
			    SetTimerEx("Encerrando",500,false,"d",playerid);
			    if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
				else TipoPrision[playerid] = 1;
   			}
		}
		case ENTREGARSE4:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < 2000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ({f21111}$2000{FFFFFF}).");
			    QuitarDinero(playerid, 2000);
			    PLAYER_INFO[playerid][pCargos] = 3;
			    ActualizarRadar();
				SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
				SendClientMessage(playerid, -1, "Pagaste la fianza de {f21111}$2000{FFFFFF} y se te redujo los cargos.");
			    SetTimerEx("Encerrando",500,false,"d",playerid);
			    if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
				else TipoPrision[playerid] = 1;
   			}
		}
		case ENTREGARSE5:
		{
			if(response)
			{
				if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ({f21111}$2500{FFFFFF}).");
			    QuitarDinero(playerid, 2500);
			    PLAYER_INFO[playerid][pCargos] = 4;
			    ActualizarRadar();
				SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
				SendClientMessage(playerid, -1, "Pagaste la fianza de {f21111}$2500{FFFFFF} y se te redujo los cargos.");
			    SetTimerEx("Encerrando",500,false,"d",playerid);
			    if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
				else TipoPrision[playerid] = 1;
   			}
		}
		case ENTREGARSE6:
		{
			if(response)
			{
			    SetTimerEx("Encerrando",500,false,"d",playerid);
			    if(GetPlayerVirtualWorld(playerid) == 5 && GetPlayerInterior(playerid) == 5) TipoPrision[playerid] = 2;
				else TipoPrision[playerid] = 1;
   			}
		}
		case DOMICILIARIA:
		{
			if(response)
			{
				EnvioDomiciliaria(playerid);
			}
		}
		case BUSCARCOCHE:
		{
		    if(response)
			{
			    if(isnull(inputtext)) return 1;
				ShowPlayerDialog(playerid, BUSCARCOCHE2, DIALOG_STYLE_INPUT, "Buscar información", "Patente del vehículo:", "Buscar", "Cancelar");
   			}
		}
		case BUSCARCOCHE2:
		{
		    if(response)
			{
				new str[50], modelo;
				ObtenerVehiculo(playerid, inputtext);
				modelo = GetVehicleModel(AutoBuscado[playerid]);

				format(str, sizeof(str), "%s (%s) - Dueño: %s", NombreAuto[modelo-400], PatenteBuscada[playerid], PLAYER_INFO[JugadorBuscado[playerid]][Nickname]);
				ShowPlayerDialog(playerid, BUSCARCOCHE3, DIALOG_STYLE_LIST, "Información del vehículo", str, "Opciones", "Salir");
   			}
		}
		case BUSCARCOCHE3:
		{
		    if(response)
			{
				ShowPlayerDialog(playerid, BUSCARCOCHE4, DIALOG_STYLE_LIST, "Opciones", "Localizar\nInformar como vehículo robado", "Aceptar", "Cancelar");
   			}
		}
		case BUSCARCOCHE4:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0:
					{
						new modelo, mensaje[150], zone[MAX_ZONE_NAME];
						modelo = GetVehicleModel(AutoBuscado[playerid]);
						GetCar3DZone(AutoBuscado[playerid], zone, sizeof(zone));
						format(mensaje, sizeof(mensaje), "Detalles [ Vehículo: {FFFF04}%s {FFFFFF}| Patente: {f21111}%s{FFFFFF} | Localización: {2EA3F5}%s{FFFFFF} ]", NombreAuto[modelo-400], PatenteBuscada[playerid], zone);
						SendClientMessage(playerid,-1, mensaje);
						SendClientMessage(playerid,-1,"{FFFF04}Se ha marcado en el mapa la ubicación actual del vehículo.");
						new Float:x,Float:y,Float:z;
						GetVehiclePos(AutoBuscado[playerid], x,y,z);
						SetPlayerCheckpoint(playerid,x,y,z,7.0);
	 				}
	 				case 1:
	 				{
	 				    new modelo, mensaje[150];
	 				    modelo = GetVehicleModel(AutoBuscado[playerid]);
	 				    format(mensaje, 150,"{3399FF}[Central de Policía]{FFFFFF} reportando: Se busca %s robado, patente %s.", NombreAuto[modelo-400], PatenteBuscada[playerid]);
						SendRadioMessagePatrulla(1,-1,mensaje);
						new Float:x,Float:y,Float:z;
						GetVehiclePos(AutoBuscado[playerid], x,y,z);
						SetPlayerCheckpoint(playerid,x,y,z,7.0);
	 				}
 				}
   			}
		}
		case GeoLocalization:
		{
			if(response)
			{
				if(listitem < 0 || listitem > 9) return 1;

				new Float:x,Float:y,Float:z, patentex[10];

				if(LocalizarID[playerid][listitem] > 0)
				{
					if(!IsValidVehicle(LocalizarID[playerid][listitem])) return SendClientMessage(playerid,-1,"Error, contacta un administrador.");
					new modelo = GetVehicleModel(LocalizarID[playerid][listitem]), zone[MAX_ZONE_NAME], estacionado;
					GetVehiclePos(LocalizarID[playerid][listitem], x,y,z);
					GetCar3DZone(LocalizarID[playerid][listitem], zone, sizeof(zone));
					if(IsVehicleInRangeOfPoint(LocalizarID[playerid][listitem],10.0,727.1412,-3320.2461,5.8700)) format(zone, sizeof(zone), "Isla Santa Carolina");
					if(LocalizarID[playerid][listitem] == autos[playerid])
					{
						format(patentex, sizeof(patentex), PLAYER_INFO[playerid][vpatente]);
						estacionado = PLAYER_INFO[playerid][vEstacionado1];
					}
					else if(LocalizarID[playerid][listitem] == autos2[playerid])
					{
						format(patentex, sizeof(patentex), PLAYER_INFO[playerid][v2patente]);
						estacionado = PLAYER_INFO[playerid][vEstacionado2];
					}
					else if(LocalizarID[playerid][listitem] == autos3[playerid])
					{
						format(patentex, sizeof(patentex), PLAYER_INFO[playerid][v3patente]);
						estacionado = PLAYER_INFO[playerid][vEstacionado3];
					}
					else if(LocalizarID[playerid][listitem] == autos4[playerid])
					{
						format(patentex, sizeof(patentex), PLAYER_INFO[playerid][v4patente]);
						estacionado = PLAYER_INFO[playerid][vEstacionado4];
					}
					if(GetVehicleInterior(LocalizarID[playerid][listitem]) != 0)
					{
						switch(estacionado)
						{
							case 4:
							{
								new altura_esta;
								altura_esta = GetNivelEsta(z);
								new strings[128];
								format(strings,sizeof(strings),"El vehiculo se encuentra en el {8baab7}nivel %d{FFFFFF} del estacionamiento de la{f21111} Plaza LSPD",altura_esta);
								SendClientMessage(playerid,-1,strings);
								SendClientMessage(playerid,-1,"Se ha marcado en el mapa la ubicacion de entrada del mismo.");
							}
							default:
							{
								SendClientMessage(playerid,-1,"Tu vehiculo se encuentra dentro de un estacionamiento.");
								SendClientMessage(playerid,-1,"Se ha marcado en el mapa la ubicacion de entrada del mismo.");
							}
						}
						if(estacionado < MAX_GARAGES) SetPlayerCheckpoint(playerid,Estacionamientos[estacionado][PosX],Estacionamientos[estacionado][PosY],Estacionamientos[estacionado][PosZ],5.0),MarcarLocalizarGPS(playerid,Estacionamientos[estacionado][PosX],Estacionamientos[estacionado][PosY]);
						else for(new i = 0; i < MAX_PROPIEDADES; i++)
						{
							if(PLAYER_INFO[playerid][CasaID] == i)
							{
								if(PropInfo[i][pGX] != 0)
								{
								    if(GetVehicleInterior(LocalizarID[playerid][listitem]) == 4)
								    {
								        SetPlayerCheckpoint(playerid,PropInfo[i][pGX],PropInfo[i][pGY],PropInfo[i][pGZ],5.0);
								        MarcarLocalizarGPS(playerid,PropInfo[i][pGX],PropInfo[i][pGY]);
								    }
								}
							}
						}
						Localizando[playerid] = 1;
					}
					else
					{
						SetPlayerCheckpoint(playerid,x,y,z,5.0);
						MarcarLocalizarGPS(playerid,x,y);
						SendClientMessage(playerid,-1,"{009AFF}Se ha marcado en el mapa la ubicacion actual del vehiculo.");
						format(string, sizeof(string), "Detalles [ Vehiculo: {009AFF}%s {FFFFFF}| Patente: {f21111}%s{FFFFFF} | Localizacion: {2EA3F5}%s{FFFFFF} ]", NombreAuto[modelo-400], patentex, zone);
						SendClientMessage(playerid,-1,string);
						Localizando[playerid] = 1;
					}


				}
			}
		}
		case DIALOGO_FRECUENCIAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 1, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 1;
						frecuencias[1] += 1;
						return 1;
					}
					case 1:
					{
				      	LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 2, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 2;
						frecuencias[2] += 1;
						return 1;
					}
					case 2:
					{
				      	LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 3, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 3;
						frecuencias[3] += 1;
						return 1;
					}
					case 3:
					{
						LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 4, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 4;
						frecuencias[4] += 1;
						return 1;
					}
					case 4:
					{
						LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 5, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 5;
						frecuencias[5] += 1;
						return 1;
					}
					case 5:
					{
						LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 6, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 6;
						frecuencias[6] += 1;
						return 1;
					}
					case 6:
					{
						LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 7, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 7;
						frecuencias[7] += 1;
						return 1;
					}
					case 7:
					{
					    LimpiarFrecuencia(playerid);
						SendClientMessage(playerid, -1, "Has seleccionado la frecuencia número 8, para hablar escribir !DP !!FP");
						Frecuencia[playerid] = 8;
						frecuencias[8] += 1;
						return 1;
					}
				}
			}
		}
		case DIALOGO_GRUA:
		{
			if(response)
			{
				new chatadmin[128];
				format(chatadmin, sizeof(chatadmin), "%s (por celular): Sí, por favor.", PLAYER_INFO[playerid][Nickname]);
				ProxDetector(15.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
				SetTimerEx("ServicioGrua1",4000,false,"d",playerid);
			}
			else
			{
			    new chatadmin[128];
			    format(chatadmin, sizeof(chatadmin), "%s (por celular): Perdón, no usaré el servicio.", PLAYER_INFO[playerid][Nickname]);
				ProxDetector(10.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
				callcmd::colgar(playerid);
			}
		}
		case DIALOGO_GRUA3:
		{
			if(!response)return FIN_SERVI(playerid);
			if(response)
			{
			        INFO_GRUA[playerid][Tipo] = listitem+1;
					new chatadmin[200];
					format(chatadmin, sizeof(chatadmin), "%s (por celular):  %s.", PLAYER_INFO[playerid][Nickname],TypeGrua(playerid));
					ProxDetector(15.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
					SetTimerEx("ServicioGrua2",3000,false,"d",playerid);
			}

		}
		case DIALOGO_LORO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOGO_LORO2, DIALOG_STYLE_INPUT, "Enseñar frase al loro", "Ingresa una frase.", "Aceptar", "Cancelar");
					}
					case 1:
					{
						SendClientMessage(playerid, COLOR_WHITE, "El loro no hablará hasta que le enseñes otra frase.");
						PLAYER_TEMP[playerid][LoroHabla] = false;
						PLAYER_TIMES[playerid][pTIME_LORO] = gettime();
					}
				}
			}
			return 1;
  		}
		case DIALOGO_LORO2:
		{
			if(response)
			{
				format(FraseLoro[playerid], 70, "%s",inputtext);
				SendClientMessage(playerid, COLOR_WHITE, "El loro aprendió a repetir la frase.");
				PLAYER_TEMP[playerid][LoroHabla] = true;
				PLAYER_TIMES[playerid][pTIME_LORO] = gettime() + 60;
			}
			return 1;
		}
		case VENDERRZ:
		{
			if(response)
			{
				new string5[200];
				format(string5, 256, "Le ofrecistes %d "SERVER_COIN" a {f21111}%s{FFFFFF} por {f21111}$%d",EVOfrecidos[LeOfreci[playerid]],PLAYER_INFO[LeOfreci[playerid]][Nickname],dineropedido[LeOfreci[playerid]]);
				SendClientMessage(playerid, -1,string5);
				YaOfrecio[playerid] = 1;
				idTimerOfertaPerdida[LeOfreci[playerid]] = SetTimerEx("OfertaPerdida", 60000, false, "d", LeOfreci[playerid]);
				PLAYER_TIMES[playerid][TiempoVenta] = gettime() + 60;
				format(string, 256, "{f21111}%s{FFFFFF} te ofrece %d "SERVER_COIN" por {f21111}$%d{FFFFFF}, para aceptar escribe {FFFF04}/aceptar "SERVER_COIN"", PLAYER_INFO[playerid][Nickname],EVOfrecidos[LeOfreci[playerid]],dineropedido[LeOfreci[playerid]]);
				SendClientMessage(LeOfreci[playerid], -1, string);
			}
		}
		case ELEVADORSAPD:
		{
			if(response)
			{
			    NoTeleportHack(playerid);
				switch(listitem)
				{
    				case 0:
					{
					    switch(GetPlayerVirtualWorld(playerid))
						{
							case 1:
							{
								SetPosEx(playerid,1524.4830,-1677.9261,6.2188,0,0,0);
							}
						}
						return 1;
					}
					case 1:
					{
						switch(GetPlayerVirtualWorld(playerid))
						{
							case 1:
							{
								SetPosEx(playerid,1558.0905,-1675.5868,28.3955,0,0,0);
							}
						}
					}
				}
			}
		}
		case ELEVADORGARAGE:
		{
			if(response)
			{
			    NoTeleportHack(playerid);
				switch(listitem)
				{
    				case 0:
					{
						SetPosEx(playerid,265.9726,115.5081,1004.6172,0,10,1);
					}
					case 1:
					{
						SetPosEx(playerid,1558.0905,-1675.5868,28.3955,0,0,0);
					}
				}
			}
		}
		case ELEVADORTEJADO:
		{
			if(response)
			{
			    NoTeleportHack(playerid);
				switch(listitem)
				{
    				case 0:
					{
						SetPosEx(playerid,265.9726,115.5081,1004.6172,0,10,1);
					}
					case 1:
					{
						SetPosEx(playerid,1524.4830,-1677.9261,6.2188,0,0,0);
					}
				}
			}
		}
		case DASCENSOR:
		{
			if(response)
			{
			    NoTeleportHack(playerid);
				switch(listitem)
				{
					case 0: SetPlayerPosEx(playerid, 2116.6707,2416.5557,10.8432);
					case 1: SetPlayerPosEx(playerid, 2116.6707,2416.5557,14.8432);
					case 2: SetPlayerPosEx(playerid, 2116.6707,2416.5557,18.8432);
					case 3: SetPlayerPosEx(playerid, 2116.6707,2416.5557,22.8432);
					case 4: SetPlayerPosEx(playerid, 2116.6707,2416.5557,27.8432);
					case 5: SetPlayerPosEx(playerid, 2116.6707,2416.5557,31.8432);
					case 6: SetPlayerPosEx(playerid, 2116.6707,2416.5557,36.8432);
					case 7: SetPlayerPosEx(playerid, 2116.6707,2416.5557,40.8432);
					case 8: SetPlayerPosEx(playerid, 2116.6707,2416.5557,44.8432);
					case 9: SetPlayerPosEx(playerid, 2116.6707,2416.5557,48.8432);
				}
				SetPlayerFacingAngle(playerid, 93.8111);
				PlayerPlaySoundEx(playerid, 6401, 0.0, 0.0, 0.0);
			}
		}
		case DIALOG_COMPRABLANCA:
		{
            if(response)
            {
                switch(listitem)
                {
					case 0:
					{
						if(PLAYER_INFO[playerid][pDinero] < 3000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 3000);
						DarArma(playerid, 1);
						SendClientMessage(playerid, -1,"Has comprado un {FFFF00}puño americano");
					}
					case 1:
					{
						if(PLAYER_INFO[playerid][pDinero] < 5000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 5000);
						DarArma(playerid, 2);
						SendClientMessage(playerid, -1,"Has comprado un {FFFF00}Palo de golf");
					}
					case 2:
					{
						if(PLAYER_INFO[playerid][pDinero] < 5000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 5000);
						DarArma(playerid, 6);
						SendClientMessage(playerid, -1,"Has comprado una {FFFF00}Pala");
					}
					case 3:
					{
						if(PLAYER_INFO[playerid][pDinero] < 10000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 10000);
						DarArma(playerid, 8);
						SendClientMessage(playerid, -1,"Has comprado una {FFFF00}Katana");
					}
					case 4:
					{
						if(PLAYER_INFO[playerid][pDinero] < 3000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 3000);
						DarArma(playerid, 5);
						SendClientMessage(playerid, -1,"Has comprado un {FFFF00}Bate");
					}
					case 5:
					{
						if(PLAYER_INFO[playerid][pDinero] < 50000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
						QuitarDinero(playerid, 50000);
						DarArma(playerid, 43);
						SendClientMessage(playerid, -1,"Has comprado una {FFFF00}Camara");
					}
				}
			}
		}
		case DIALOG_TALLER:
        {
            if(response)
            {
                if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
                new autoid = GetPlayerVehicleID(playerid);
				if(autoid == autos[playerid])
				{
    				PLAYER_INFO[playerid][vColor1] =  strval(inputtext);
				    ChangeVehicleColor(autoid, strval(inputtext),PLAYER_INFO[playerid][vColor2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d' WHERE `Propietario`='%d' AND Slot = '1'",PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color primario de tu vehículo");
     				format(string, 256,"{FFFFFF}Coloca el número del color secundario que deseas utilizar en tu vehiculo");
					ShowPlayerDialog(playerid, DIALOG_TALLER2, DIALOG_STYLE_INPUT, "Color secundario",string,"Pintar","Cancelar");
                    RELOAD_TD(playerid);
				}
				else if(autoid == autos2[playerid])
				{
    				PLAYER_INFO[playerid][v2Color1] =  strval(inputtext);
				    ChangeVehicleColor(autoid, strval(inputtext),PLAYER_INFO[playerid][v2Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d' WHERE `Propietario`='%d' AND Slot = '2'",PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color primario de tu vehículo");
     				format(string, 256,"{FFFFFF}Coloca el número del color secundario que deseas utilizar en tu vehiculo");
					ShowPlayerDialog(playerid, DIALOG_TALLER2, DIALOG_STYLE_INPUT, "Color secundario",string,"Pintar","Cancelar");
					RELOAD_TD(playerid);
				}
				else if(autoid == autos3[playerid])
				{
    				PLAYER_INFO[playerid][v3Color1] =  strval(inputtext);
				    ChangeVehicleColor(autoid, strval(inputtext),PLAYER_INFO[playerid][v3Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d' WHERE `Propietario`='%d' AND Slot = '3'",PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color primario de tu vehículo");
     				format(string, 256,"{FFFFFF}Coloca el número del color secundario que deseas utilizar en tu vehiculo");
					ShowPlayerDialog(playerid, DIALOG_TALLER2, DIALOG_STYLE_INPUT, "Color secundario",string,"Pintar","Cancelar");
					RELOAD_TD(playerid);
				}
				else if(autoid == autos4[playerid])
				{
    				PLAYER_INFO[playerid][v4Color1] =  strval(inputtext);
				    ChangeVehicleColor(autoid, strval(inputtext),PLAYER_INFO[playerid][v4Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d' WHERE `Propietario`='%d' AND Slot = '4'",PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color primario de tu vehículo");
     				format(string, 256,"{FFFFFF}Coloca el número del color secundario que deseas utilizar en tu vehiculo");
					ShowPlayerDialog(playerid, DIALOG_TALLER2, DIALOG_STYLE_INPUT, "Color secundario",string,"Pintar","Cancelar");
					RELOAD_TD(playerid);
				}
			}
        }
        case DIALOG_TALLER2:
        {
            if(response)
            {
                if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
                new autoid = GetPlayerVehicleID(playerid);
				if(autoid == autos[playerid])
				{
    				PLAYER_INFO[playerid][vColor2] =  strval(inputtext);
				    ChangeVehicleColor(autoid, PLAYER_INFO[playerid][vColor1],PLAYER_INFO[playerid][vColor2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color2`='%d' WHERE `Propietario`='%d' AND Slot = '1'",PLAYER_INFO[playerid][vColor2],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color de tu vehículo, te costo {f21111}3 RZ");
					PLAYER_INFO[playerid][Moneda] -= 3;
					RELOAD_TD(playerid);
				}
				else if(autoid == autos2[playerid])
				{
    				PLAYER_INFO[playerid][v2Color2] =  strval(inputtext);
				    ChangeVehicleColor(autoid, PLAYER_INFO[playerid][v2Color1],PLAYER_INFO[playerid][v2Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color2`='%d' WHERE `Propietario`='%d' AND Slot = '2'",PLAYER_INFO[playerid][v2Color2],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color de tu vehículo, te costo {f21111}3 RZ");
					PLAYER_INFO[playerid][Moneda] -= 3;
					RELOAD_TD(playerid);
				}
				else if(autoid == autos3[playerid])
				{
    				PLAYER_INFO[playerid][v3Color2] =  strval(inputtext);
				    ChangeVehicleColor(autoid, PLAYER_INFO[playerid][v3Color1],PLAYER_INFO[playerid][v3Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color2`='%d' WHERE `Propietario`='%d' AND Slot = '3'",PLAYER_INFO[playerid][v3Color2],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color de tu vehículo, te costo {f21111}3 RZ");
					PLAYER_INFO[playerid][Moneda] -= 3;
					RELOAD_TD(playerid);
				}
				else if(autoid == autos4[playerid])
				{
    				PLAYER_INFO[playerid][v4Color2] =  strval(inputtext);
				    ChangeVehicleColor(autoid, PLAYER_INFO[playerid][v4Color1],PLAYER_INFO[playerid][v4Color2]);
				    mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color2`='%d' WHERE `Propietario`='%d' AND Slot = '4'",PLAYER_INFO[playerid][v4Color2],PLAYER_INFO[playerid][pID]);
					mysql_pquery(handle_db, Query);
					SendClientMessage(playerid, -1, "Cambiaste el color de tu vehículo, te costo {f21111}3 RZ");
					PLAYER_INFO[playerid][Moneda] -= 3;
					RELOAD_TD(playerid);
				}
			}
        }
  		case DIALOG_ROPA:
        {
            if(response)
            {
                switch(listitem)
                {
					case 0:
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"No eres hombre");
					    ShowModelSelectionMenu(playerid, RopaHombre, "Selecciona tu nueva ropa");
					}
					case 1:
					{
					    if(PLAYER_INFO[playerid][pSexo] == 1) return SendClientMessage(playerid, -1,"No eres mujer");
					    ShowModelSelectionMenu(playerid, RopaMujer, "Selecciona tu nueva ropa");
					}
				}
			}
        }
		case DIALOG_UNIFORMES:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0: // Cadete
                    {
                        if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 0)
                        {
	                        SetPlayerSkin(playerid, 71);
                            PLAYER_INFO[playerid][pModelo] = 71;
	                        SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
						}
					}
					case 1: // Oficial
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 1)
                        {
                            SetPlayerSkin(playerid, 266);
                            PLAYER_INFO[playerid][pModelo] = 266;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 2: // Cabo
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 2)
                        {
                            SetPlayerSkin(playerid, 267);
                            PLAYER_INFO[playerid][pModelo] = 267;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 3: // Sargento
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 3)
                        {
                            SetPlayerSkin(playerid, 281);
                            PLAYER_INFO[playerid][pModelo] = 281;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 4: // Teniente
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 4)
                        {
                            SetPlayerSkin(playerid, 280);
                            PLAYER_INFO[playerid][pModelo] = 280;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 5: // Capitán
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 5)
                        {
                            SetPlayerSkin(playerid, 265);
                            PLAYER_INFO[playerid][pModelo] = 265;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 6: // Inspector
					{
					    if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 6)
                        {
                            SetPlayerSkin(playerid, 282);
                            PLAYER_INFO[playerid][pModelo] = 282;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
					case 7: // Comisario
					{
						if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        if(PLAYER_INFO[playerid][pRango] > 7)
                        {
                            SetPlayerSkin(playerid, 283);
                            PLAYER_INFO[playerid][pModelo] = 283;
                            SetPlayerColor(playerid, COLOR_POLICIA);
							PLAYER_INFO[playerid][pDuty] = 1;
                        }
                    }
                    case 8: // Oficial Motorizado
                    {
                    	if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
                        SetPlayerSkin(playerid, 284);
                        PLAYER_INFO[playerid][pModelo] = 284;
                        SetPlayerColor(playerid, COLOR_POLICIA);
						PLAYER_INFO[playerid][pDuty] = 1;
					}
					case 9: // Oficial Femenina 1
					{
						if(PLAYER_INFO[playerid][pSexo] == 1) return SendClientMessage(playerid, -1,"Tu no eres mujer no puedes colocarte este uniforme.");
						SetPlayerSkin(playerid, 306);
						PLAYER_INFO[playerid][pModelo] = 306;
                        SetPlayerColor(playerid, COLOR_POLICIA);
						PLAYER_INFO[playerid][pDuty] = 1;
					}
					case 10: // Oficial Femenina 2
					{
						if(PLAYER_INFO[playerid][pSexo] == 1) return SendClientMessage(playerid, -1,"Tu no eres mujer no puedes colocarte este uniforme.");
						SetPlayerSkin(playerid, 307);
						PLAYER_INFO[playerid][pModelo] = 307;
                        SetPlayerColor(playerid, COLOR_POLICIA);
						PLAYER_INFO[playerid][pDuty] = 1;
					}
					case 11: // Oficial Femenina 3
					{
						if(PLAYER_INFO[playerid][pSexo] == 1) return SendClientMessage(playerid, -1,"Tu no eres mujer no puedes colocarte este uniforme.");
						SetPlayerSkin(playerid, 309);
						PLAYER_INFO[playerid][pModelo] = 309;
                        SetPlayerColor(playerid, COLOR_POLICIA);
						PLAYER_INFO[playerid][pDuty] = 1;
					}
					case 12: // SWAT Operaciones Especiales
					{
						if(PLAYER_INFO[playerid][pSexo] == 2) return SendClientMessage(playerid, -1,"Tu no eres hombre no puedes colocarte este uniforme.");
						SetPlayerSkin(playerid, 285);
						PLAYER_INFO[playerid][pModelo] = 285;
                        SetPlayerColor(playerid, COLOR_POLICIA);
						PLAYER_INFO[playerid][pDuty] = 1;
					}
					case 13: // Quitar Uniforme
					{
					    if(PLAYER_INFO[playerid][pDuty] == 0) return SendClientMessage(playerid, -1, "No estás en servicio.");
						SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
						SetPlayerColor(playerid,COLOR_WHITE);
						format(string, sizeof(string), "%s %s se saca el uniforme y deja su placa en el casillero.", RangoPolicia(playerid), PLAYER_INFO[playerid][Nickname]);
						ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
						PLAYER_INFO[playerid][pDuty] = 0;
						QuitarArmas(playerid);
					}
                }
        	}
        }
		case DIALOG_CREARARMA:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 12)
                        {
                            DarArma(playerid, 22);
                            PLAYER_INFO[playerid][pMateriales] -= 12;
                            format(string,sizeof(string),"* %s crea una pistola 9mm con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 1:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 12)
                        {
                            DarArma(playerid, 23);
                            PLAYER_INFO[playerid][pMateriales] -= 12;
                            format(string,sizeof(string),"* %s crea una pistola 9mm-silenciada con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 2:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 20)
                        {
                            DarArma(playerid, 25);
                            PLAYER_INFO[playerid][pMateriales] -= 20;
                            format(string,sizeof(string),"* %s crea una escopeta con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 3:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 36)
                        {
                            DarArma(playerid, 24);
                            PLAYER_INFO[playerid][pMateriales] -= 36;
                            format(string,sizeof(string),"* %s crea una pistola desert-eagle con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 4:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 58)
                        {
                            DarArma(playerid, 29);
                            PLAYER_INFO[playerid][pMateriales] -= 58;
                            format(string,sizeof(string),"* %s crea una mp5 con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 5:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 82)
                        {
                            DarArma(playerid, 30);
                            PLAYER_INFO[playerid][pMateriales] -= 82;
                            format(string,sizeof(string),"* %s crea una ak47 con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 6:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 96)
                        {
                            DarArma(playerid, 31);
                            PLAYER_INFO[playerid][pMateriales] -= 96;
                            format(string,sizeof(string),"* %s crea una m4 con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 7:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 52)
                        {
                            DarArma(playerid, 33);
                            PLAYER_INFO[playerid][pMateriales] -= 52;
                            format(string,sizeof(string),"* %s crea un rifle con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                    case 8:
                    {
                        if(PLAYER_INFO[playerid][pMateriales] >= 136)
                        {
                            DarArma(playerid, 27);
                            PLAYER_INFO[playerid][pMateriales] -= 136;
                            format(string,sizeof(string),"* %s crea una escopeta-de-combate con sus piezas de arma.",PLAYER_INFO[playerid][Nickname]);
                            ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
                        }
                    }
                }
            }
        }
        //
        case DIALOG_UNIFORMES2:
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:BZ_MILIFORME(playerid,179,1);
					case 1:BZ_MILIFORME(playerid,309,2);
					case 2:BZ_MILIFORME(playerid,287,1,1);
					case 3:BZ_MILIFORME(playerid,287,1,2);
					case 4:BZ_MILIFORME(playerid,287,1,3);
					case 5:BZ_MILIFORME(playerid,287,1,4);
					case 6:BZ_MILIFORME(playerid,287,1,5);
					case 7:BZ_MILIFORME(playerid,287,1,6);
					case 8:BZ_MILIFORME(playerid,287,1,6);
					case 9: // Quitar Uniforme
					{
					    if(PLAYER_INFO[playerid][mDuty] == 0) return SendClientMessage(playerid, -1, "No estás en servicio.");
						SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
						SetPlayerColor(playerid,COLOR_WHITE);
						format(string, sizeof(string), "%s %s se saca el uniforme y deja su placa en el casillero.", RangoMilitar(playerid), PLAYER_INFO[playerid][Nickname]);
						ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
						PLAYER_INFO[playerid][mDuty] = 0;
						QuitarArmas(playerid);
					}
                }
        	}
        }
        //
        case DIALOG_HELP:
        {
            if(response)
            {
                switch(listitem)
                {
					case 0:
					{
                       	ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre general:",
                       	"\
                       	    {FFFFFF}La reputación se aumenta cada {FFCA00}60 minutos,{FFFFFF} cuando la reputación llegue\n\
                       	    {FFFFFF}al límite podrás subir al siguiente nivel con el comando {FFFF04}/comprar nivel\n\
                       	    \n\
                       	    {FFFFFF}Para ver las habilidades los trabajos que has realizado usa el comando {FFFF04}/habilidad\n\
                       	    {FFFFFF}Para utilizar el canal de dudas utiliza el comando {FFFF04}/n{FFFFFF} seguido de tu duda.\n\
                       	    {FFFFFF}Para deshabilitar o volver a habilitar el canal de dudas usa {FFFF04}/canal dudas \n\
                       	    \n\
                       	    {FFFFFF}para configuraciones básicas de tu cuenta usa {FFFF04}/configuracion\n\
						"
						, "Salir", "");
						return 1;
					}
                    case 1:
                    {
						ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre las propiedades:",
						"\
						    {FFFFFF}Puedes encontrar diferentes propiedades en todo {FFCA00}San Andreas\n\
						    {FFFFFF}Para comprar una casa es simple, acercace al icono de la casa verde, disponer del dinero para comprarla\n\
						    {FFFFFF}El comando es el siguiente: {FFFF04}/comprar propiedad {FFFFFF}solo se comprará estando en la puerta\n\
						    {FFFFFF}Las propiedades cuentan con un ropero, el cual se abre y cierra con {FFFF04}/abrir ropero /cerrar ropero\n\
						    \n\
						    {FFFFFF}Dentro del ropero hay una estanteria, donde se pueden guardar objetos, medicamentos, crack, entre otros\n\
						    {FFFFFF}Para ver la estanteria se escribe {FFFF04}/ver estanteria{FFFFFF}, para guardar y sacar armas se usa: {FFFF04}/sacar(guardar) [Nombre]\n\
						    {FFFFFF}Las casas con garaje disponen de un garaje exclusivo, donde pueden guardar sus vehículos.\n\
						    {FFFFFF}Para entrar al garaje con el auto, te acercas al portón de la casas y pones {FFFF04}/entrar {FFFFFF}(estando dentro del vehículo)\n\
						"
						, "Salir", "");
						return 1;
					}
                    case 2:
                    {
    					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre las necesidades:",
						"\
						    {FFFFFF}La sed puede verse en la barra superario azul, mientras más llena esté la barra, más sed tendrás\n\
						    {FFFFFF}Si la barra se llena, comenzarás a perder vida con el paso del tiempo y morirás si no te hidratas\n\
						    {FFFFFF}Para hidratarte necesitas ir a un supermercado 24/7 o restaurante y comprar un {f21111}Vaso de Sprunk\n\
						    {FFFFFF}Para ocultar la barra de sed, escribe {FFFF04}/ocultar sed{FFFFFF} y para mostrarla {FFFF04}/mostrar sed\n\
						    \n\
						    {FFFFFF}La hambre puede verse en la barra superario naranja, mientras más llena esté la barra, más hambre tendrás.\n\
						    {FFFFFF}Si la barra se llena, comenzarás a perder vida con el paso del tiempo\ny morirás si no comes\n\
						    {FFFFFF}Para comer necesitas ir a una pizzeria y comprar una {f21111}porción de pizza\n\
						    {FFFFFF}Para ocultar la barra de hambre, escribe {FFFF04}/ocultar hambre{FFFFFF} y para mostrarla {FFFF04}/mostrar hambre\n\
						"
						, "Salir", "");
						return 1;
					}
                    case 3:
                    {
						format(string, sizeof(string),"Información general\nTrabajo de Médico\nTrabajo de Taxista\nTrabajo de Guardaespaldas\nTrabajo de Camionero\nTrabajo de Fabricante de armas\nTrabajo de Mecánico\nTrabajo de Cosechador (Sin habilidad)\nTrabajo de Basurero (2 jugadores)\nTrabajo de Transportista\nTrabajo de Ladrón\nTrabajo de Prostitución\nTrabajo de Trailero");
						ShowPlayerDialog(playerid,TRABAJOS, DIALOG_STYLE_LIST,"Todo sobre los trabajos:",string,"Aceptar","Salir");
                    }
                    case 4:
                    {
     					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre los vehiculos:",
						"\
						    {FFFFFF}Existen varios concesionarias, las cuales tienen una gran variedad de vehículos a la venta\n\
						    {FFFFFF}Cuando quieras cambiar de vehículo, puedes vender el usado, solamente tienes que ir al Edificio Municipal General de LS e iniciar el trámite\n\
						    {FFFFFF}Para que no usen tu vehículo te recomendamos {FFFF04}/estacionar{FFFFFF} dentro de un estacionamiento. El costo es de {f21111}$150{FFFFFF} por día\n\
						    \n\
						    {FFFFFF}Puedes comprar un sistema de traba en cualquier 24/7 si tienes el sistema de traba, escribe {FFFF04}/cerrar{FFFFFF} para trabar las puertas del vehículo\n\
						    {FFFFFF}Para abrirlo {FFFF04}/abrir{FFFFFF}para cerrarlo {FFFF04}/cerrar{FFFFFF}, tienes que estar cerca o dentro del vehículo\n\
						    {FFFFFF}Si no encuentrsa tu vehículo usa {FFFF04}/localizar {FFFFFF}si fue robado, llama a la policía, ellos te van a pedir la patente para poder localizarlo\n\
						    \n\
						    {FFFFFF}Para enceender o apagar las luces, escribe {FFFF04}/luces {FFFFFF}Para detener el motor, usa '2' {FFFFFF}Para encenderlo, usa {FFFF04}'2'\n\
						    {FFFFFF}Para activar o desactivar la alarma, escribe {FFFF04}/alarma {FFFFFF}Para guardar o sacar cosas del maletero de tu vehículo necesitas abrirlo\n\
						    {FFFFFF}Para abrir tu maletero, escribe {FFFF04}/abrir maletero{FFFFFF}, para cerrar tu maletero escribe {FFFF04}/cerrar maletero{FFFFFF}, para mirar el interior usa {FFFF04}/maletero\n\
						"
						, "Salir", "");
						return 1;
					}
                    case 5:
                    {
     					ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre los territorios:",
						"\
						    {FFFFFF}Las bandas pueden conquistar territorios a lo largo de todo el mapa de {FFCA00}San Andreas\n\
						    {FFFFFF}para imponer su dominio frente a todas las otras bandas y tener cierta ganancia por los territorios dominados\n\
						    \n\
						    {FFFFFF}Para conquistar un territorio tendrás que pertenecer a una banda y usar el comando {FFFF04}/conquistar\n\
						    {FFFFFF}Para poder conquistar debes contar con 4 integrantes de tu banda, el tiempo para conquistar durará {f21111}5 minutos\n\
						    {FFFFFF}durante ese periodo de tiempo deben permanecer miembros de la banda que esta atacando el territorio\n\
						    {FFFFFF}Si todos los atacantes abandonan el territorio se cancerá el ataque y no ganaran nada\n\
						    \n\
						    {FFFFFF}Al finalizar la conquista, los atacantes recibiran unas bonificaciones aleatorias.\n\
			    		"
						, "Salir", "");
						return 1;
					}
					case 6:
					{
						ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre las bandas:",
						"\
						    {FFFFFF}El sistema de bandas esta diseñado para mejorar tu experiencia en {FFCA00}"SERVER_NAME2" Roleplay\n\
						    {FFFFFF}Al crear una banda tu podras comunciarte facilmente con tus amigos y muchas opciones mas\n\
						    \n\
						    {FF0000}Consejos útiles\n\
						    {FFFFFF}* Primero necesitaras comprar un radio comunicador en cualquier 24/7\n\
						    {FFFFFF}* Al tener uno fácilmente usa {FFFF04}!(DP) {FFFFFF}Texto - {FFFF04}!!(FP) {FFFFFF}Texto\n\
						    {FFFFFF}* El mensaje que enviaste le llegara a todos los integrantes de tu banda mediante el radio comunicador\n\
						    \n\
						    {FFFFFF}* Para poder abandonar tu banda, escribe {FFFF04}/abandonar banda\n\
						    {FFFFFF}* Para subir de rango de un miembro de tu banda, escribe {FFFF04}/ascender {FFFFFF}<PlayerID> <1-8>\n\
						    {FFFFFF}* Para expulsar un miembro de tu banda, escribe {FFFF04}/despedir {FFFFFF}<PlayerID>\n\
						    {FFFFFF}* Para expulsar un miembro desconectado, escribe {FFFF04}/despediroff {FFFFFF}<Nombre_Apellido>\n\
						    {FFFFFF}* Para ingresar a un miembro a la banda, escribe {FFFF04}/invitar {FFFFFF}<Nombre_Apellido>\n\
						    \n\
						    {FF0000}Información extra\n\
						    {FFFFFF}* Al signar un miembro de tu banda con el rango 8 automáticamente perderas el rango lider de tu banda.\n\
						    {FFFFFF}* El comando de expulsar, subir/bajar rango e invitar solamente puede ser usado por miembros\n\
							{FFFFFF}  Con rangos autorizados por el lider de la banda.\n\
			    		"
						, "Salir", "");
						return 1;
					}
					case 7:
					{
						ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Todo sobre el tunning:",
						"\
						    {FFFFFF}Para tunear tu vehículo tienes que dirigirte hasta {FFCA00}Vinewood - Los Santos\n\
						    {FFFFFF}Ahí se encuentra el taller de tunning que fácilmente puedes localizarlo con {FFFF04}/gps\n\
						    \n\
						    {FF0000}Información importante\n\
						    {FFFFFF}* Personas que utilicen los objetos para matar a los usuarios será {FF0000}baneado {FFFFFF}inmediatamente\n\
						    {FFFFFF}* Los objetos personalizables que le pongas a tu vehículo tendra un costo de dinero dentro del juego.\n\
			    		"
						, "Salir", "");
						return 1;
					}
        		}
        	}
        }
		case D_COLOR1:
		{
			if(!response) ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
			if(response)
			{
				ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
			}
		}
		case D_COLOR2:
		{
			if(!response) ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona el color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
			if(response)
			{
				new Banda = PLAYER_INFO[playerid][pFaccion];
				new ColorB = RandomColors[listitem];
				for(new id; id < MAX_BANDAS; id++)
				{
					if(BandasInfo[id][BColor] == ColorB) return ShowPlayerDialog(playerid, D_COLOR2, DIALOG_STYLE_LIST, "{FFFFFF}Color en uso, selecciona otro color", DIALOG_CREATE_CREW_COLOR_String, "Seleccionar", "Atrás");
				}
				BandasInfo[Banda][BColor] = ColorB;
				new DB_Query[256];
				mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `facciones` SET `Color` = '%d' WHERE `id`='%d'", BandasInfo[Banda][BColor], BandasInfo[Banda][bID]);
				mysql_tquery(handle_db, DB_Query);
				SendClientMessage(playerid,-1,"Color asignado a tu banda correctamente.");
			}
		}
		case BANCO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(string,sizeof(string),"Coloca en nUmeros la cantidad que deseas retirar");
						ShowPlayerDialog(playerid, BANCO1, DIALOG_STYLE_INPUT, "Retiro", string, "Retirar","Cancelar");
						return 1;
					}
					case 1:
					{
						format(string,sizeof(string),"Coloca en nUmeros la cantidad que deseas depositar");
						ShowPlayerDialog(playerid, BANCO4, DIALOG_STYLE_INPUT, "Deposito", string, "Depositar","Cancelar");
						return 1;
					}
					case 2:
					{
						SendClientMessage(playerid,-1,"====================================================");
						format(string,sizeof(string),"{FFFFFF}El saldo actual, de tu cuenta bancaria, es de {f21111}$%s",Numeros(PLAYER_INFO[playerid][pBanco]));
						SendClientMessage(playerid,-1,string);
						SendClientMessage(playerid,-1,"====================================================");
						return 1;
					}
					case 3:
					{
					    if(PLAYER_TIMES[playerid][TiempoDarDinero] > gettime())
						{
							if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime() > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime()) /60, (PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
							else if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime() < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
							return SendClientMessage(playerid, -1,string);
						}
						if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessageEx(playerid,-1,"Necesitas nivel %d para transferir dinero entre cuentas bancarias.",3);
						ShowPlayerDialog(playerid, BANCO2, DIALOG_STYLE_INPUT, "Transferencia", "Coloca la ID del jugador al que haras la transferencia", "Transferir","Cancelar");
						return 1;
					}
				}
			}
		}
		case BANCO1:
		{
			if(response)
			{
			    if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Monto invalido");
				if(PLAYER_INFO[playerid][pBanco] >= strval(inputtext) && IsNumeric(inputtext))
				{
					DarDinero(playerid, strval(inputtext));
					PLAYER_INFO[playerid][pBanco] -= strval(inputtext);
					SendClientMessage(playerid,-1,"===========================================================");
					format(string,sizeof(string),"{FFFFFF}Acabas de retirar {f21111}$%d{FFFFFF}, ahora tu saldo es de {f21111}$%d", strval(inputtext), PLAYER_INFO[playerid][pBanco]);
					SendClientMessage(playerid,-1,string);
					SendClientMessage(playerid,-1,"===========================================================");
				}
				else if(PLAYER_INFO[playerid][pBanco] < strval(inputtext))	{
					SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero tu cuenta bancaria.");
					SendClientMessage(playerid,-1,"Por favor, consulta tu saldo antes de intentar retirar.");	}
			}
		}
		case BANCO2:
		{
			if(response)
			{
			    if(!IsPlayerConnected(strval(inputtext))) return SendClientMessage(playerid,-1,"No se ha encontrado esa cuenta bancaria");
				if(IsNumeric(inputtext))
				{
					format(string,sizeof(string),"El titular de la cuenta a depositar %s, coloca el monto", PLAYER_INFO[strval(inputtext)][Nickname]);
					ShowPlayerDialog(playerid, BANCO3, DIALOG_STYLE_INPUT, "Deposito", string, "Depositar", "Cancelar");
					Deposito[playerid] = strval(inputtext);
				}
			}
		}
		case BANCO3:
		{
			if(response)
			{
			    if(strval(inputtext) > 0 && strval(inputtext) <= 5000000 && IsNumeric(inputtext))
				{
					if(PLAYER_INFO[playerid][pBanco] >= strval(inputtext))
					{
						PLAYER_INFO[playerid][pBanco] -= strval(inputtext);
						PLAYER_INFO[Deposito[playerid]][pBanco] += strval(inputtext);
						SendClientMessage(playerid,-1,"===========================================================");
						format(string,sizeof(string),"{FFFFFF}Acabas de transferir {f21111}$%d{FFFFFF} a %s.", strval(inputtext),PLAYER_INFO[Deposito[playerid]][Nickname]);
						SendClientMessage(playerid,-1,string);
						SendClientMessage(playerid,-1,"===========================================================");
						format(string,sizeof(string),"((SMS de %s [333])): Recibiste una transferencia de $%d realizada por %s.",NombreBanco(playerid), strval(inputtext),PLAYER_INFO[playerid][Nickname]);
						SendClientMessage(Deposito[playerid],COLOR_AMARILLO2,string);
						Deposito[playerid] = INVALID_PLAYER_ID;

						new string2[200];
						new year, month,day;
						new hour,minuite,second;
						getdate(year, month, day);
						gettime(hour,minuite,second);
						format(string2, sizeof(string2), "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minuite,second);
						mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO `log_transacciones` (`Fecha`, `Enviador`, `Receptor`, `Monto`) VALUES ('%e','%e', '%e', '%e')", string2, PLAYER_INFO[playerid][Nickname], PLAYER_INFO[Deposito[playerid]][Nickname], inputtext);
						mysql_tquery(handle_db, Query);
					}
				}
				else return SendClientMessage(playerid,-1,"Monto invalido");
			}
		}
		case BANCO4:
		{
			if(response)
			{
			    if(strval(inputtext) > 0 && strval(inputtext) <= 5000000 && IsNumeric(inputtext))
				{
					if(PLAYER_INFO[playerid][pDinero] >= strval(inputtext))
					{
						QuitarDinero(playerid, strval(inputtext));
						PLAYER_INFO[playerid][pBanco] += strval(inputtext);
						SendClientMessage(playerid,-1,"===========================================================");
						format(string, sizeof(string), "{FFFFFF}Acabas de depositar {f21111}$%d{FFFFFF}, ahora tu saldo es de {f21111}$%d",strval(inputtext), PLAYER_INFO[playerid][pBanco]);
						SendClientMessage(playerid,-1,string);
						SendClientMessage(playerid,-1,"===========================================================");
					}
					else return SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero.");
				}
				else return SendClientMessage(playerid,-1,"Monto invalido");
			}
		}
	case VENDERAUTO:
		{
			if(response)
			{
			    for(new i = 0; i < 4; i++)
			    {
			        PLAYER_TEMP[playerid][pVEHICLES][i] = 0;
			    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 0;
			    }
				if(autos[playerid] > 0 || autos2[playerid] > 0 || autos3[playerid] > 0 || autos4[playerid] > 0)
				{
					new vehiculo1[150],vehiculo2[150],vehiculo3[150],vehiculo4[150],mensaje[600], tipomoneda[5];
					if(PLAYER_INFO[playerid][vModelo] > 0)
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 1;
						    	break;
					    	}
					    }
						if(PLAYER_INFO[playerid][vMonedaa] > 0) { tipomoneda=" "SERVER_COIN""; } else { tipomoneda="$"; }
						format(vehiculo1, sizeof(vehiculo1), " vehiculo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio: {009AFF}%d%s", NombreAuto[GetVehicleModel(autos[playerid])-400], PLAYER_INFO[playerid][vpatente], PLAYER_INFO[playerid][vPrecio]/2, tipomoneda);
					}
					if(PLAYER_INFO[playerid][vModelo2] > 0)
					{
                        for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos2[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 2;
						    	break;
					    	}
					    }
						if(PLAYER_INFO[playerid][v2Monedaa] > 0) { tipomoneda=" "SERVER_COIN""; } else { tipomoneda="$"; }
						format(vehiculo2, sizeof(vehiculo2), "\n vehiculo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio: {009AFF}%d%s", NombreAuto[GetVehicleModel(autos2[playerid])-400], PLAYER_INFO[playerid][v2patente], PLAYER_INFO[playerid][v2Precio]/2, tipomoneda);
					}
					if(PLAYER_INFO[playerid][vModelo3] > 0)
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos3[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 3;
						    	break;
					    	}
					    }
						if(PLAYER_INFO[playerid][v3Monedaa] > 0) { tipomoneda=" "SERVER_COIN""; } else { tipomoneda="$"; }
						format(vehiculo3, sizeof(vehiculo3), "\n vehiculo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio: {009AFF}%d%s", NombreAuto[GetVehicleModel(autos3[playerid])-400], PLAYER_INFO[playerid][v3patente], PLAYER_INFO[playerid][v3Precio]/2, tipomoneda);
					}
					if(PLAYER_INFO[playerid][vModelo4] > 0)
					{
					    for(new i = 0; i < 4; i++)
					    {
					        if(PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] == 0)
					        {
						        PLAYER_TEMP[playerid][pVEHICLES][i] = autos4[playerid];
						    	PLAYER_TEMP[playerid][pVEHICLES_SLOT][i] = 4;
						    	break;
					    	}
					    }
						if(PLAYER_INFO[playerid][v4Monedaa] > 0) { tipomoneda=" "SERVER_COIN""; } else { tipomoneda="$"; }
						format(vehiculo4, sizeof(vehiculo4), "\n vehiculo: {F6E200}%s{FFFFFF} | Patente: {f21111}%s{FFFFFF} | Precio: {009AFF}%d%s", NombreAuto[GetVehicleModel(autos4[playerid])-400], PLAYER_INFO[playerid][v4patente], PLAYER_INFO[playerid][v4Precio]/2, tipomoneda);
					}
					format(mensaje, sizeof(mensaje), "%s%s%s%s", vehiculo1,vehiculo2,vehiculo3,vehiculo4);
					ShowPlayerDialog(playerid, VENDERAUTO2, DIALOG_STYLE_LIST, "vehiculo que deseas vender", mensaje, "Vender","Cancelar");
				}
			}
		}
		case VENDERAUTO2:
		{
		    if(!response) return 1;

		    new SLOT_VEHICLE = PLAYER_TEMP[playerid][pVEHICLES_SLOT][listitem], vehicle_id = PLAYER_TEMP[playerid][pVEHICLES][listitem];
		    if(vehicle_id == 0) return 1;

		    switch(SLOT_VEHICLE)
			{
			    case 1:
			    {
			        if(EstaEnAutoVent4(vehicle_id, playerid))
					{
						if(PLAYER_INFO[playerid][vMonedaa] == 0)
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}$%d",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][vpatente], PLAYER_INFO[playerid][vPrecio]/2);
							DarDinero(playerid, (PLAYER_INFO[playerid][vPrecio] / 2));
						}
						else
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}%d "SERVER_COIN"",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][vpatente], PLAYER_INFO[playerid][vPrecio]/2);
							PLAYER_INFO[playerid][Moneda] += (PLAYER_INFO[playerid][vPrecio] / 2);
						}
						new DB_Query[128];
						mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[playerid][vID1]);
						mysql_tquery(handle_db, DB_Query);
					}
			    }
			    case 2:
			    {
			        if(EstaEnAutoVent4(vehicle_id, playerid))
					{
						if(PLAYER_INFO[playerid][v2Monedaa] == 0)
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}$%d",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v2patente], PLAYER_INFO[playerid][v2Precio]/2);
							DarDinero(playerid, (PLAYER_INFO[playerid][v2Precio] / 2));
						}
						else
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}%d "SERVER_COIN"",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v2patente], PLAYER_INFO[playerid][v2Precio]/2);
							PLAYER_INFO[playerid][Moneda] += (PLAYER_INFO[playerid][v2Precio] / 2);
						}
						new DB_Query[128];
						mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[playerid][vID2]);
						mysql_tquery(handle_db, DB_Query);
					}
			    }
			    case 3:
			    {
			        if(EstaEnAutoVent4(vehicle_id, playerid))
					{
						if(PLAYER_INFO[playerid][v3Monedaa] == 0)
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}$%d",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v3patente], PLAYER_INFO[playerid][v3Precio]/2);
							DarDinero(playerid, (PLAYER_INFO[playerid][v3Precio] / 2));
						}
						else
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}%d "SERVER_COIN"",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v3patente], PLAYER_INFO[playerid][v3Precio]/2);
							PLAYER_INFO[playerid][Moneda] += (PLAYER_INFO[playerid][v3Precio] / 2);
						}
						new DB_Query[128];
						mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[playerid][vID3]);
						mysql_tquery(handle_db, DB_Query);
					}
			    }
			    case 4:
			    {
			        if(EstaEnAutoVent4(vehicle_id, playerid))
					{
						if(PLAYER_INFO[playerid][v4Monedaa] == 0)
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}$%d",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v4patente], PLAYER_INFO[playerid][v4Precio]/2);
							DarDinero(playerid, (PLAYER_INFO[playerid][v4Precio] / 2));
						}
						else
						{
							SendClientMessageEx(playerid, -1, "Muchas gracias por vendernos tu {7401DF}%s{FFFFFF} ({f21111}%s{FFFFFF}). Te pagamos: {009AFF}%d "SERVER_COIN"",NombreAuto[GetVehicleModel(vehicle_id)-400], PLAYER_INFO[playerid][v4patente], PLAYER_INFO[playerid][v4Precio]/2);
							PLAYER_INFO[playerid][Moneda] += (PLAYER_INFO[playerid][v4Precio] / 2);
						}
						new DB_Query[128];
						mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[playerid][vID4]);
						mysql_tquery(handle_db, DB_Query);
					}
			    }
			}
			mysql_format(handle_db, Query, 900, "DELETE FROM `p_vehicles` WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[playerid][pID], SLOT_VEHICLE);
			mysql_query(handle_db, Query, false);

			LimpiarMaletero(vehicle_id);
			MotorAuto[vehicle_id] = 0;
			QuitarAuto(playerid, SLOT_VEHICLE, vehicle_id);
		}
  		case VENDERCASA:
        {
            if(!response) return 1;
            if(response)
            {
				new casa[200*MAX_PCASAS];
				for(new k = 0; k < MAX_PCASAS; k++)
				{
					if(PLAYER_INFO[playerid][CasaID][k] == 0) continue;
					for(new p=1; p < MAX_PROPIEDADES; p++)
					{
					    if(PropInfo[p][pID] == PLAYER_INFO[playerid][CasaID][k])
					    {
					        new cos = PropInfo[p][pPrecio]/2;
					        switch(PLAYER_INFO[playerid][pVIP])
					        {
					            case 0,1,2:cos = PropInfo[p][pPrecio]/2;
					            case 3:cos = PropInfo[p][pPrecio]*70/100;
					        }
							switch(PropInfo[p][pEnVentaPor])
	   						{
	   						    case 0: format(casa,sizeof(casa),"%s Propiedad ubicada en %s. (Valor de la propiedad: {f21111}$%s{FFFFFF})\n",casa,PropInfo[p][pLocalizacion],ConvertirNumero(cos));
	   						    case 1: format(casa,sizeof(casa),"%s Propiedad ubicada en %s. (Valor de la propiedad: {DBED15}%s RZ{FFFFFF})\n",casa,PropInfo[p][pLocalizacion],ConvertirNumero(cos));

	   						}
                    	}
					 }
 				}
                ShowPlayerDialog(playerid,VENDERCASA1,DIALOG_STYLE_LIST,"Selecciona la propiedad que deseas vender",casa,"Vender","Cancelar");
            }
        }
       	case VENDERCASA1:
    	{
    	    if(!response) return 1;
			new home = ObtenerOrdenPropiedad(playerid,listitem);
			if(PLAYER_INFO[playerid][CasaID][home] > 0)
			{
				for(new p=1; p < MAX_PROPIEDADES; p++)
				{
    				if(PropInfo[p][pID] == PLAYER_INFO[playerid][CasaID][home] && PropInfo[p][pPosX] != 0)
				    {
            			new cos = PropInfo[p][pPrecio]/2;
				        switch(PLAYER_INFO[playerid][pVIP])
				        {
					            case 0,1,2:cos = PropInfo[p][pPrecio]/2;
					            case 3:cos = PropInfo[p][pPrecio]*70/100;
				        }
						switch(PropInfo[p][pEnVentaPor])
						{
		    				case 0: format(string,sizeof(string),"Vendiste tu propiedad ubicada en {f21111}%s{FFFFFF} por {f21111}$%s.",PropInfo[p][pLocalizacion],ConvertirNumero(cos)),DarDinero(playerid,cos);
						    case 1: format(string,sizeof(string),"Vendiste tu propiedad ubicada en {f21111}%s{FFFFFF} por {DBED15}%s RZ.",PropInfo[p][pLocalizacion],ConvertirNumero(cos)),PLAYER_INFO[playerid][Moneda] += cos;

						}
						SendClientMessageEx(playerid,-1,string);
						PLAYER_INFO[playerid][CasaID][home] = 0;
						mysql_format(handle_db, Query, sizeof(Query),"UPDATE `usuarios` SET `CasaID%d`='0',`Moneda`='%d' WHERE `ID`='%d'",home+1,PLAYER_INFO[playerid][Moneda],PLAYER_INFO[playerid][pID]);
						mysql_tquery(handle_db, Query);
						PropInfo[p][pEnVenta] = 1;
						format(PropInfo[p][pPropietario],40,"Nadie");
						PropInfo[p][pAbierta] = 1;
						PropInfo[p][pRoperoAbierto] = 0;
						PropInfo[p][pIDPropietario] = 0;
						mysql_format(handle_db, Query, sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1' WHERE `ID`='%d'",p);
						mysql_tquery(handle_db, Query);
						BorrarLabelCasa(p);
						CargarPropiedad(p);
						GuardarPropiedad(p);
						break;
					}
			    }
			}
    	}
	    case SEXO:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		PLAYER_INFO[playerid][pSexo] = 1;
		PLAYER_INFO[playerid][pRopa] = 26;
		ShowPlayerDialog(playerid, EDAD, DIALOG_STYLE_INPUT," ","{FFFFFF}Bien, te has identificado en el género masculino.\n{FFFFFF}Ahora necesitamos que ingreses tu edad.","Enviar","Salir");
		}
		case 1:
		{
		PLAYER_INFO[playerid][pSexo] = 2;
		PLAYER_INFO[playerid][pRopa] = 11;
		ShowPlayerDialog(playerid, EDAD, DIALOG_STYLE_INPUT," ","{FFFFFF}Bien, te has identificado en el género femenino.\n{FFFFFF}Ahora necesitamos que ingreses tu edad.","Enviar","Salir");
		}
		}
		}
		else ExpulsarJugador(playerid,"Escape en registro.");
		return 1;
		}
		case EDAD:
		{
		new pName2[32];
		GetPlayerName(playerid, pName2, 32);
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return Error(playerid);
		if(strval(inputtext) < 14 || strval(inputtext) > 80)
		{
		SendClientMessage(playerid,-1, "{FFFFFF}Debes colocar una edad entre los 14 años y los 80 años");
		format(string, sizeof(string), "{FFFFFF}Tu personaje tendrá %s años.",pName2);
		ShowPlayerDialog(playerid, EDAD, DIALOG_STYLE_INPUT," ",string,"Enviar","Salir");
		return 1;
		}
		PLAYER_INFO[playerid][pEdad] = strval(inputtext);
		format(string,sizeof(string),"{FFFFFF}Ingresa una dirección electronica válida para recuperar tu contraseña en caso de perderla.");
		ShowPlayerDialog(playerid, DEMAIL,DIALOG_STYLE_INPUT," ",string,"Siguiente","");
		}
        else ExpulsarJugador(playerid,"Escape en registro.");
        return 1;
		}
        case TRABAJO_MEDICO:
        {
		if(response)
		{
		PlayerPlaySoundEx(playerid,1055,0.0,0.0,0.0);
		if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) AsignarTrabajo(playerid,T_Medico,0),PLAYER_INFO[playerid][pDinero] -= 4000;
		else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno && PLAYER_INFO[playerid][pVIP] == 2) AsignarTrabajo(playerid,T_Medico,1),PLAYER_INFO[playerid][pDinero] -= 4000;
		}
    	}
		case TRABAJOS:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: // Informacion general
		{
		new mensaje[250];
		mensaje="{FFFFFF}Hay muchos trabajos disponibles para que te ganes la vida.\nElige el que más te guste y comienza a trabajar.\n\nPara tener dos trabajos a la vez, necesitas cuenta VIP.)";
		ShowPlayerDialog(playerid, INFOMEDICO, DIALOG_STYLE_MSGBOX, "Ayuda sobre los trabajos", mensaje, "Aceptar","");
		return 1;
		}
		case 1: // Trabajo médico
		{
		new Byte[1200];
		strcat(Byte,"{FFFFFF}El {f21111}trabajo de médico{FFFFFF} se consigue en el {00cbff}Hospital General de Los Santos, puedes encontrarlo en tu GPS.");
		strcat(Byte,"\nPara trabajar de médico necesitas tener como mínimo {EB0000}nivel 2{FFFFFF}.\n\nUna vez tengas el trabajo, necesitas ponerte el uniforme para comenzar a trabajar.");
		strcat(Byte,"\n\n{FFFFFF}El uniforme te lo puedes poner dentro del hospital o en la parte trasera de una ambulancia.\nusando el comando {f21111}/medico\n\n");
		strcat(Byte,"{f21111}Médico de calle{FFFFFF}:\nCuando alguien solicite asistencia médica se marcará en el mapa un icono de color verde, al que tendrás\nque dirigirte para salvarle la vida.");
		strcat(Byte,"\n\n{FFFFFF}Al estar junto a un paciente agonizando tendrás que {f21111}/reanimar {FFFFFF}[{f21111}ID o Nombre{FFFFFF}] y luego dentro de la\nambulancia deberás {f21111}/subir paciente{FFFFFF}.");
		strcat(Byte,"\n\n{FFFFFF}Finalmente tienes que llevarlo al hospital para salvar su vida y cobrar tu paga ({f21111}$800{FFFFFF}).");
		strcat(Byte,"\n\n{FFFFFF}En algunos casos podrás reanimar al paciente en el mismo lugar que lo atiendes, todo\ndepende de tu nivel de habilidad como médico.");
		strcat(Byte,"\n\n{f21111}Médico de hospital{FFFFFF}:\n\nPuedes trabajar dentro de cualquier hospital, en este caso\ntienes que usar {f21111}/revisar paciente {FFFFFF}[{f21111}ID o Nombre{FFFFFF}] cuando se te notifique.");
		strcat(Byte,"\n\n{FFFFFF}A continuación deberás ir a buscar en el botiquín lo que creas necesario para el tratamiento.\n\nFinalmente tendrás que {f21111}/atender paciente {FFFFFF}[{f21111}ID o Nombre{FFFFFF}] para terminar.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Médico", Byte, "Aceptar", "");
		return 1;
		}
		case 2: // Trabajo taxista
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Taxista && PLAYER_INFO[playerid][pTrabajo2] != T_Taxista) {
		new Byte[500];
		strcat(Byte,"Puedes conseguir este trabajo dentrode Unity Station.");
		strcat(Byte,"\n");
		strcat(Byte,"Esta profesión no cuenta con niveles. Ganarás según el precio que cobres.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Taxista", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[500];
		strcat(Byte,"{FFFFFF}Para ponerle un costo de ficha al taxi usa {f21111}/ficha precio");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Por ejemplo: {f21111}/ficha 20");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Cuando tu cliente no tenga dinero, se bajará del taxi.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Taxista", Byte, "Aceptar", "");
		}
		case 3: // Trabajo guardaespaldas
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Guardaespaldas && PLAYER_INFO[playerid][pTrabajo2] != T_Guardaespaldas)
		{
		new Byte[1000];
		strcat(Byte,"Para conseguir este trabajo en Ganton GYM. Esta profesión no cuenta con niveles.");
		strcat(Byte,"\n");
		strcat(Byte,"Un guardaespaldas puede darle el 50% de blindaje a su protegido.");
		strcat(Byte,"\n\n");
		strcat(Byte,"Los guardaespaldas están normalmente armados y tienen experiencia en el combate");
		strcat(Byte,"\n");
		strcat(Byte,"cuerpo a cuerpo y desarmado, conducción y primeros auxilios.");
		strcat(Byte,"\n");
		strcat(Byte,"Sin embargo, la habilidad más importante para un guardaespaldas es evaluar una situación de");
		strcat(Byte,"\n");
		strcat(Byte,"peligo para su protegido y tratar de minimizar los daños.");
		strcat(Byte,"\n\n");
		strcat(Byte,"Ganarás según el precio que cobres.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Guardaespaldas", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[500];
		strcat(Byte,"{FFFFFF}Para cubrir a alguien usa {f21111}/cubrir [id o nombre] [precio]\n");
		strcat(Byte,"{FFFFFF}El precio del chaleco tiene que ser entre $400 y $1000.\n");
		strcat(Byte,"{FFFFFF}No puedes ofrecer un chaleco en combate, si tu protegido lo está tampoco podrá recibirlo.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Guardaespaldas", Byte, "Aceptar", "");
		}
		case 4: // Trabajo camionero
		{
	    if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero)
		{
		new Byte[1000];
		strcat(Byte,"{FFFFFF}Este trabajo se obtiene en Red County Blueberry");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Comienzas en nivel 1, ganando {66B3FF}$1250 {FFFFFF}por entrega realizada.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}El trabajo es legal, siempre y cuando lleves productos legales.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}A medida que aumentes tu nivel como camionero, el pago será mayor, y los bonus por transportes ilegales serán mejores.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Por ejmeplo: Nivel 1 de camionero = 2 piezas de armas, Nivel 2 = 5 piezas de armas, etc. También aumenta la cantidad de drogas y medicamentos.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}En caso de perder el punto de entrega, usa {f21111}/cp camionero");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Camionero", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[500];
		strcat(Byte,"{FFFFFF}Cuando te hayas subido a un camión, puedes cargarlo usando {f21111}/cargar camion");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Selecciona lo que llevarás y se te marcará en el mapa el punto donde se realizará la entrega, luego trae el camión al muelle.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Los camiones de color blanco son para las cuentas normales y los de color negro para usuarios con VIP2.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}En caso de perder el punto de entrega, usa {f21111}/cp camionero");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{f21111}No intentes usar cheats para realizar la entrega más rápido porque te puede detectar el anticheat.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Camionero", Byte, "Aceptar", "");
		}
		case 5: // Trabajo armero
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Armero && PLAYER_INFO[playerid][pTrabajo2] != T_Armero)
		{
		new Byte[1000];
		strcat(Byte,"{FFFFFF}Para obtener este trabajo necesitas como mínimo nivel 3.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}En la fábrica de armas ilegal de Los Santos dan el trabajo.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}En caso de no encontrarla llama a un taxi {f21111}/servicio taxi");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Con este empleo podrás fabricar una gran variedad de armas.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Igualmente todas aquellas personas que no son armeros, pueden vender sus armas con {FFFFFF}/vender {FFFFFF}[{f21111}nombre-del-arma{FFFFFF}][{f21111}id/nombre{FFFFFF}][{f21111}precio{FFFFFF}].");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Listado de armas:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Pistola 9mm (9mm)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Pistola 9mm con slenciador (9mm-silenciada)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Escopeta normal (escopeta)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Desert Eagle (desert-eagle)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}MP5");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}AK-47 (ak47)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}M4");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Rifle");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Escopeta de combate (escopeta-de-combate)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Granada");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Fabricante de armas", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[1000];
		strcat(Byte,"{FFFFFF}Para crear armas usa {f21111}/crear nombre-del-arma");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Cada arma necesita un nivel de habilidad y una cantidad de piezas para poder crearla.");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Listado de armas:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Nivel 1:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Pistola 9mm (9mm) (10 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Pistola 9mm con slenciador (9mm-silenciada) (12 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Nivel 2:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Escopeta normal (escopeta) (20 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Nivel 3:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Desert Eagle (desert-eagle) (36 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Nivel 4:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}MP5 (58 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Nivel 5:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}AK-47 (ak47) (82 piezas)");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}M4 (96 piezas");
		strcat(Byte,"\n\n");
		strcat(Byte,"{FFFFFF}Nivel 6:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Rifle (52 piezas)");
		strcat(Byte,"\n\n");
		strcat(Byte,"{FFFFFF}Nivel 7:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Escopeta de combate (escopeta-de-combate) (136 piezas)");
		strcat(Byte,"\n\n");
		strcat(Byte,"{FFFFFF}Nivel 8:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}Granada (156 piezas)");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Fabricante de armas", Byte, "Aceptar", "");
		}
		case 6: // Trabajo mecanico
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico)
		{
		new Byte[256];
		strcat(Byte,"{FFFFFF}Para obtener el trabajo de mecánico, tienes que ir al taller que se encuentra en Vinewood.");
		strcat(Byte,"\n{FFFFFF}Este trabajo cuenta con nivel y habilidad.");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Mecánico", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[1000];
		strcat(Byte,"\n{FFFFFF}Para ponerte en servicio de mecánico debes acercarte a la caseta y usa {f21111}/mecanico\n");
		strcat(Byte,"{FFFFFF}Cada vehículo a reparar necesita distintas cantidades de repuestos.\n");
		strcat(Byte,"{FFFFFF}Los repuestos se compran cerca del taller y tienen un costo de {66B3FF}$100 {FFFFFF}cada uno.\n");
		strcat(Byte,"{FFFFFF}Para saber cuantos necesita cada uno usa {f21111}/revisar\n");
		strcat(Byte,"{FFFFFF}Siempre y cuando estés cerca de un cliente que llamó al servicio y que tenga el capó abierto.\n");
		strcat(Byte,"{FFFFFF}Para ofrecer reparación a alguien usa {f21111}/reparar [precio]\n");
		strcat(Byte,"{FFFFFF}Los clientes que necesiten mecánicos se marcará en el mapa de color {f21111}celeste{FFFFFF}.\n");
		strcat(Byte,"{FFFFFF}Por cada nivel que aumentes repararás más rápido.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Mecánico", Byte, "Aceptar", "");
		}
     	case 7: // Trabajo Cosechador
		{
		new dialog[1000];
		strcat(dialog, "{FFFFFF}El trabajo de granjero no requiere un nivel, pero tampoco se aumenta la habilidad trabajando.\n");
		strcat(dialog, "Este trabajo no ocupa lugar como trabajo primario ni secundario.\n");
		strcat(dialog, "En caso de no encontrarla llama a el {f21111}/servicio taxi{FFFFFF}\n");
		strcat(dialog, "Para trabajar de cosechador, necesitas ir a alguna de las granjas de Los Santos.\n\n");
		strcat(dialog, "Las ganancias en dinero es similar a la de camionero.\n");
		strcat(dialog, "A veces también te dan un premio extra de regalo, los cuales pueden ser:\n\n");
		strcat(dialog, "{f21111}Granja de Blueberry:{FFFFFF}\n");
		strcat(dialog, "Medicamentos (30% probabilidad de conseguirlo)\n");
		strcat(dialog, "Crack (10% probabilidad de conseguirlo)\n");
		strcat(dialog, "Ramo de flores (10% probabilidad de conseguirlo)\n");
		strcat(dialog, "Pala (10% probabilidad de conseguirla)\n\n\n");
		strcat(dialog, "{f21111}Granja de Flint Range:{FFFFFF}\n");
		strcat(dialog, "Medicamentos (30% probabilidad de conseguirlo)\n");
		strcat(dialog, "Crack (13% probabilidad de conseguirlo)\n");
		strcat(dialog, "Ramo de flores (10% probabilidad de conseguirlo)\n");
		strcat(dialog, "Cuchillo (10% probabilidad de conseguirlo)\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Cosechador", dialog, "Aceptar", "");
		}
		case 8: // Trabajo Basurero
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico)
		{
		new Byte[1000];
		strcat(Byte,"{FFFFFF}El trabajo de basurero no requiere de un nivel mínimo.\n");
		strcat(Byte,"{FFFFFF}Este trabajo se consigue en el basural que se encuentra entre Los Santos y San Fierro.\n");
		strcat(Byte,"{FFFFFF}Para trabajar de basurero se necesitan dos personas, una que maneje el camión y otra que recolecte la basura.\n");
		strcat(Byte,"{FFFFFF}Los pagos se incrementan a medida que suben de nivel. También el tiempo de recolección disminuye al subir de nivel.\n");
		strcat(Byte,"{FFFFFF}En las bolsas de basure se puede llegar a encontrar una gran variedad de cosas.\n");
		strcat(Byte,"{FFFFFF}Para comenzar a trabajar necesitan ponerse la ropa de basurero (cuentas VIP no necesitan).\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Basurero", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[700];
		strcat(Byte, "{FFFFFF}El trabajo de transportista requiere nivel 3 de camionero o más.\n");
		strcat(Byte, "Además para trabajar de transportista necesitas un camión DFT-30, no necesariamente tiene que ser tuyo.\n");
		strcat(Byte, "Este trabajo se consigue en Las Venturas y lo puedes encontrar en cualquier mapa o GPS.\n");
		strcat(Byte, "A medida que aumentes de nivel se agregarán nuevos recorridos con nuevas cargas y el pago aumentará {f21111}$150{FFFFFF} cada nivel.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Transportista", Byte, "Aceptar", "");
		}
		case 9: // Trabajo Transportista
		{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Transportista && PLAYER_INFO[playerid][pTrabajo2] != T_Transportista)
		{
		new Byte[1000];
		strcat(Byte,"{FFFFFF}El trabajo de transportista requiere nivel 3 de camionero o más.\n");
		strcat(Byte,"{FFFFFF}Además de trabajar de transportista necesitas un camión DFT-30, no necesariamente tiene que ser tuyo.\n");
		strcat(Byte,"{FFFFFF}Este trabajo se consigue en Las Venturas y lo puedes encontrar en cualquier mapa o GPS.\n");
		strcat(Byte,"{FFFFFF}A medida que aumentes de nivel se agregarán nuevos recorridos con nuevas cargas y el pago aumentará $150 cada nivel.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Transportista", Byte, "Aceptar", "");
		return 1;
		}
		new Byte[700];
		strcat(Byte, "{FFFFFF}El trabajo de transportista requiere nivel 3 de camionero o más.\n");
		strcat(Byte, "Además para trabajar de transportista necesitas un camión DFT-30, no necesariamente tiene que ser tuyo.\n");
		strcat(Byte, "Este trabajo se consigue en Las Venturas y lo puedes encontrar en cualquier mapa o GPS.\n");
		strcat(Byte, "A medida que aumentes de nivel se agregarán nuevos recorridos con nuevas cargas y el pago aumentará {f21111}$150{FFFFFF} cada nivel.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Transportista", Byte, "Aceptar", "");
		}
		case 10: // Trabajo Ladrón
		{
		new Byte[700];
		strcat(Byte, "{FFFFFF}El ladrón puede robar bienes de diferentes propiedades distribuidas por todo San Andreas.\n\n");
		strcat(Byte, "Para forzar cerraduras necesitas como mínimo nivel 6 o una cuenta VIP y para robar, nivel 3 o cuenta VIP.\n");
        strcat(Byte, "Para el trabajo de ladrón se usan diferentes herramientas según tu nivel de habilidad.\n");
        strcat(Byte, "A medida que aumentes de nivel, podrás usar otras herramientas para forzar las puertas más rápido.\n");
		ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Ladrón", Byte, "Aceptar", "");
		}
		case 11: // Trabajo Prostitucion
		{
		new Byte[800];
		strcat(Byte,"{FFFFFF}El trabajo de prostitución se consigue en {f21111}Las Venturas{FFFFFF}, puedes encontrarlo fácilmente en el {f21111}GPS{FFFFFF}.");
		strcat(Byte,"\n\n");
		strcat(Byte,"{FFFFFF}Una vez que tengas el trabajo, puedes comenzar a cobrar usando {f21111}/ofrecer sexo {FFFFFF}[{f21111}ID{FFFFFF}-o-{f21111}Nombre{FFFFFF}] [{f21111}Precio{FFFFFF}].");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}No necesitas el trabajo para ofrecerlo, pero sí para cobrar por eso.");
		strcat(Byte,"\n\n");
		strcat(Byte,"{f21111}Quienes reciban sexo oral de prostitutas profesionales obtendrán{FFFFFF}:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}- Blindaje {f21111}+20%{FFFFFF} hasta llegar como máximo a {f21111}80%{FFFFFF}.");
		strcat(Byte,"\n\n");
		strcat(Byte,"{f21111}Quienes reciban sexo oral de personas sin esa ocupación obtendrán{FFFFFF}:");
		strcat(Byte,"\n");
		strcat(Byte,"{FFFFFF}- Blindaje {f21111}+10%{FFFFFF} hasta llegar como máximo a {f21111}50%{FFFFFF}.");
		strcat(Byte,"\n\n");
		strcat(Byte,"{FFFFFF}Para ofrecer {EB0000}sexo oral {FFFFFF}tienes que estar dentro de un vehículo.");
		ShowPlayerDialog(playerid, INFOLADRON, DIALOG_STYLE_MSGBOX, "{FFFFFF}Ayuda sobre el trabajo de Prostitución", Byte, "Aceptar","");
		return 1;
		}
		case 12: // Trabajo Trailero
		{
		new Byte[700];
		strcat(Byte, "Para trabajar de trailero necesitas un camión con enganche, no necesariamente tiene que ser tuyo.\n");
		strcat(Byte, "Este trabajo se consigue en Blue Berry y lo puedes encontrar en cualquier mapa o GPS.\n");
		strcat(Byte, "A medida que aumentes de nivel pago aumentará.\n");
		strcat(Byte, "Para empezar la ruta solo debes enganchar un trailer al camion, automaticamente se te dara la ruta.\n");
        strcat(Byte, "Las rutas son de Gasolineras, 24/7, bares y tiendas de ropa.\n");
		ShowPlayerDialog(playerid,INFOLADRON, DIALOG_STYLE_MSGBOX,"{FFFFFF}Ayuda sobre el trabajo de Trailero", Byte, "Aceptar", "");
		}
		}
		}
		}
		case CAMIOND:
		{
		if(response)
		{
		Cargando2[playerid] = 0;
		SetPlayerProgressBarValue(playerid,Progressbar[playerid][Camionero], Cargando2[playerid]);
		UpdatePlayerProgressBar(playerid,Progressbar[playerid][Camionero]);
		CamionID[playerid] = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = true;
		TimerCargarCamion[playerid] = 15;
		AbrirPuertasCamionero(playerid);
		switch(listitem)
		{
		case 0:
		{
		new punto = random(2);
		switch (punto)
		{
		case 0:
		{
		AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Legal1",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		case 1:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Legal2",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		}
		return 1;
		}
		case 1:
		{
		new punto = random(3);
		switch (punto)
		{
		case 0:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Legal3",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		case 1:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Legal4",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		case 2:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Legal5",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		}
		return 1;
		}
		case 2:
		{
		new punto = random(2);
		switch (punto)
		{
		case 0:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Ilegal1",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		case 1:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Ilegal2",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		}
		return 1;
		}
		case 3:
		{
		new punto = random(2);
		switch (punto)
		{
		case 0:
		{
        AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Ilegal4",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		case 1:
		{
		AbrirPuertasCamionero(playerid);
		PLAYER_TEMP[playerid][pt_Camionero] = false;
		Cargas[playerid] = SetTimerEx("Ilegal5",1000,true,"d",playerid);
		TimerCargarCamion[playerid] = 5;
		}
		}
		return 1;
		}
		}
		}
		else
		{
		CargandoC[playerid] = 0;
		DesCargarMapeosEx(playerid);
		}
		}
        case COMPRARCAMELLO:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: ShowPlayerDialog(playerid, COMPRARCAMELLO2, DIALOG_STYLE_LIST, "Comprar", "Medicamentos\nCrack\nMarihuana\nCocaina\nHeroina", "Aceptar", "Cancelar");
		case 1: ShowPlayerDialog(playerid, VENDERCAMELLO, DIALOG_STYLE_LIST, "Vender", "Medicamentos\nCrack\nMarihuana\nCocaina\nHeroina", "Aceptar", "Cancelar");
		}
		}
		return 1;
		}
		case VENDERCRACK:
		{
		if(response)
		{
        if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		new precio = 250;
		new preciototal = precio * strval(inputtext);
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pCrack] >= strval(inputtext))
		{
		if(DineroCamello >= preciototal)
		{
		format(string, sizeof(string), "Le vendiste al camello %sg de crack por $%s.", ConvertirNumero(strval(inputtext)),ConvertirNumero(preciototal));
		SendClientMessage(playerid, -1, string);
		DarDinero(playerid, preciototal);
		DineroCamello -= preciototal;
		CrackCamello += strval(inputtext);
		PLAYER_INFO[playerid][pCrack] -= strval(inputtext);
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero para comprarte esa cantidad.", -1, 30.0, 5000);
		SendClientMessage(playerid,-1,"Lo siento hombre, no tengo dinero para comprarte esa cantidad.");
		}
		}
		else SendClientMessage(playerid, -1, "No tienes esa cantidad de crack.");
		}
		return 1;
		}
		case VENDERMARIHUANA:
		{
		if(response)
		{
        if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		new precio = 250;
		new preciototal = precio * strval(inputtext);
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pMarihuana] >= strval(inputtext))
		{
		if(DineroCamello >= preciototal)
		{
		format(string, sizeof(string), "Le vendiste al camello %sg de marihuana por $%s.", ConvertirNumero(strval(inputtext)),ConvertirNumero(preciototal));
		SendClientMessage(playerid, -1, string);
		DarDinero(playerid, preciototal);
		DineroCamello -= preciototal;
		MarihuanaCamello += strval(inputtext);
		PLAYER_INFO[playerid][pMarihuana] -= strval(inputtext);
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero para comprarte esa cantidad.", -1, 30.0, 5000);
		SendClientMessage(playerid,-1,"Lo siento hombre, no tengo dinero para comprarte esa cantidad.");
		}
		}
		else SendClientMessage(playerid, -1, "No tienes esa cantidad de marihuana.");
		}
		return 1;
		}
		case VENDERCOCAINA:
		{
		if(response)
		{
        if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		new precio = 90000;
		new preciototal = precio * strval(inputtext);
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pCocaina] >= strval(inputtext))
		{
		if(DineroCamello >= preciototal)
		{
		SendClientMessageEx(playerid, -1,"Le vendiste al camello %sg de cocaina por $%s.", ConvertirNumero(strval(inputtext)),ConvertirNumero(preciototal));
		DarDinero(playerid, preciototal);
		DineroCamello -= preciototal;
		CocainaCamello += strval(inputtext);
		PLAYER_INFO[playerid][pCocaina] -= strval(inputtext);
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero para comprarte esa cantidad.", -1, 30.0, 5000);
		SendClientMessage(playerid,-1,"Lo siento hombre, no tengo dinero para comprarte esa cantidad.");
		}
		}
		else SendClientMessage(playerid, -1, "No tienes esa cantidad de cocaina.");
		}
		return 1;
		}
		case VENDERHEROINA:
		{
		if(response)
		{
        if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		new precio = 100000;
		new preciototal = precio * strval(inputtext);
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pHeroina] >= strval(inputtext))
		{
		if(DineroCamello >= preciototal)
		{
		SendClientMessageEx(playerid, -1,"Le vendiste al camello %sg de heroina por $%s.", ConvertirNumero(strval(inputtext)),ConvertirNumero(preciototal));
		DarDinero(playerid, preciototal);
		DineroCamello -= preciototal;
		CocainaCamello += strval(inputtext);
		PLAYER_INFO[playerid][pHeroina] -= strval(inputtext);
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero para comprarte esa cantidad.", -1, 30.0, 5000);
		SendClientMessage(playerid,-1,"Lo siento hombre, no tengo dinero para comprarte esa cantidad.");
		}
		}
		else SendClientMessage(playerid, -1, "No tienes esa cantidad de heroina.");
		}
		return 1;
		}
		case VENDERMEDICAMENTOS:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		new precio = 150;
		new preciototal = precio * strval(inputtext);
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pMedicamentos] >= strval(inputtext))
		{
		if(DineroCamello >= preciototal)
		{
		format(string, sizeof(string), "Le vendiste al camello %s medicamentos por $%s.", ConvertirNumero(strval(inputtext)),ConvertirNumero(preciototal));
		SendClientMessage(playerid, -1, string);
		DarDinero(playerid, preciototal);
		DineroCamello -= preciototal;
		MedicamentosCamello += strval(inputtext);
		PLAYER_INFO[playerid][pMedicamentos] -= strval(inputtext);
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero para comprarte esa cantidad.", -1, 30.0, 5000);
		SendClientMessage(playerid,-1,"Lo siento hombre, no tengo dinero para comprarte esa cantidad.");
		}
		}
		else SendClientMessage(playerid, -1, "No tienes esa cantidad de medicamentos.");
		}
		return 1;
		}
		case VENDERCAMELLO:
		{
		if(DineroCamello > 0)
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		format(string,sizeof(string), "Selecciona la cantidad de medicamentos que deseas venderle al camello\nTengo $%s y compro $150 a cada uno.",ConvertirNumero(DineroCamello));
		ShowPlayerDialog(playerid, VENDERMEDICAMENTOS, DIALOG_STYLE_INPUT, "Vende medicamentos", string, "Vender", "Cancelar");
		}
		case 1:
		{
		format(string,sizeof(string), "Selecciona la cantidad de gramos de crack que deseas venderle al camello\nTengo $%s y compro $250 a cada gramo.",ConvertirNumero(DineroCamello));
		ShowPlayerDialog(playerid, VENDERCRACK, DIALOG_STYLE_INPUT, "Vende crack", string, "Vender", "Cancelar");
		}
		case 2:
		{
		format(string,sizeof(string), "Selecciona la cantidad de gramos de marihuana que deseas venderle al camello\nTengo $%s y compro $250 a cada gramo.",ConvertirNumero(DineroCamello));
		ShowPlayerDialog(playerid, VENDERMARIHUANA, DIALOG_STYLE_INPUT, "Vende marihuana", string, "Vender", "Cancelar");
		}
		case 3:
		{
		format(string,sizeof(string), "Selecciona la cantidad de gramos de cocaina que deseas venderle al camello\nTengo $%s y compro $250 a cada gramo.",ConvertirNumero(DineroCamello));
		ShowPlayerDialog(playerid, VENDERCOCAINA, DIALOG_STYLE_INPUT, "Vende cocaina", string, "Vender", "Cancelar");
		}
		case 4:
		{
		format(string,sizeof(string), "Selecciona la cantidad de gramos de heroina que deseas venderle al camello\nTengo $%s y compro $250 a cada gramo.",ConvertirNumero(DineroCamello));
		ShowPlayerDialog(playerid, VENDERHEROINA, DIALOG_STYLE_INPUT, "Vende heroina", string, "Vender", "Cancelar");
		}
		}
		}
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, no tengo dinero.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento hombre, no tengo dinero.");
		}
		return 1;
		}
		case COMPRARCAMELLO2:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		if(MedicamentosCamello > 0)
		{
		format(string, sizeof(string), "Elige una cantidad de medicamentos que deseas comprar\nTengo %d medicamentos y los vendo a 250 cada uno.",MedicamentosCamello);
		ShowPlayerDialog(playerid, COMPRARMEDICAMENTOS, DIALOG_STYLE_INPUT, "Comprar medicamentos", string,"Comprar", "Cancelar");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, ya no tengo mas medicamentos.", -1, 30.0, 5000);
	    SendClientMessage(playerid, -1, "Lo siento hombre, ya no tengo mas medicamentos.");
		}
		}
		case 1:
		{
		if(CrackCamello > 0)
		{
		format(string, sizeof(string), "Elige una cantidad de crack que deseas comprar\nTengo %d gramos de crack y los vendo a 350 cada uno.",CrackCamello);
		ShowPlayerDialog(playerid, COMPRARCRACK, DIALOG_STYLE_INPUT, "Comprar crack", string, "Comprar", "Cancelar");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, ya no tengo mas crack.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento hombre, ya no tengo mas crack.");
		}
		}
		case 2:
		{
		if(MarihuanaCamello > 0)
		{
		format(string, sizeof(string), "Elige una cantidad de marihuana que deseas comprar\nTengo %d gramos de marihuana y los vendo a 350 cada uno.",MarihuanaCamello);
		ShowPlayerDialog(playerid, COMPRARMARIHUANA, DIALOG_STYLE_INPUT, "Comprar marihuana", string, "Comprar", "Cancelar");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, ya no tengo mas marihuana.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento hombre, ya no tengo mas marihuana.");
		}
		}
		case 3:
		{
		if(CocainaCamello > 0)
		{
		format(string, sizeof(string), "Elige una cantidad de cocaina que deseas comprar\nTengo %d gramos de marihuana y los vendo a 100.000 cada uno.",CocainaCamello);
		ShowPlayerDialog(playerid, COMPRARCOCAINA, DIALOG_STYLE_INPUT, "Comprar cocaina", string, "Comprar", "Cancelar");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, ya no tengo mas cocaina.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento hombre, ya no tengo mas cocaina.");
		}
		}
		case 4:
		{
		if(HeroinaCamello > 0)
		{
		format(string, sizeof(string), "Elige una cantidad de heroina que deseas comprar\nTengo %d gramos de heroina y los vendo a 120.000 cada uno.",HeroinaCamello);
		ShowPlayerDialog(playerid, COMPRARHEROINA, DIALOG_STYLE_INPUT, "Comprar heroina", string, "Comprar", "Cancelar");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento hombre, ya no tengo mas heroina.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento hombre, ya no tengo mas heroina.");
		}
		}
		}
		}
		}
		case COMPRARCRACK:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		if(CrackCamello >= strval(inputtext))
		{
		new precio = 350;
		new preciofinal = strval(inputtext) * precio;
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pDinero] >= preciofinal)
		{
		SendClientMessageEx(playerid, -1,"Compraste %sg de crack al camello por $%s.", ConvertirNumero(strval(inputtext)), ConvertirNumero(preciofinal));
		QuitarDinero(playerid, preciofinal);
		PLAYER_INFO[playerid][pCrack] += strval(inputtext);
		CrackCamello -= strval(inputtext);
		DineroCamello += preciofinal;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento man, no tengo esa cantidad de crack.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento man, no tengo esa cantidad de crack.");
		}
		}
		return 1;
		}
		case COMPRARMARIHUANA:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		if(MarihuanaCamello >= strval(inputtext))
		{
		new precio = 350;
		new preciofinal = strval(inputtext) * precio;
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pDinero] >= preciofinal)
		{
		SendClientMessageEx(playerid, -1, "Compraste %sg de marihuana al camello por $%s.", ConvertirNumero(strval(inputtext)), ConvertirNumero(preciofinal));
		QuitarDinero(playerid, preciofinal);
		PLAYER_INFO[playerid][pMarihuana] += strval(inputtext);
		MarihuanaCamello -= strval(inputtext);
		DineroCamello += preciofinal;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento man, no tengo esa cantidad de marihuana.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento man, no tengo esa cantidad de marihuana.");
		}
		}
		return 1;
		}
		case COMPRARCOCAINA:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		if(CocainaCamello >= strval(inputtext))
		{
		new precio = 100000;
		new preciofinal = strval(inputtext) * precio;
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pDinero] >= preciofinal)
		{
		SendClientMessageEx(playerid, -1, "Compraste %sg de cocaina al camello por $%s.", ConvertirNumero(strval(inputtext)), ConvertirNumero(preciofinal));
		QuitarDinero(playerid, preciofinal);
		PLAYER_INFO[playerid][pCocaina] += strval(inputtext);
		CocainaCamello -= strval(inputtext);
		DineroCamello += preciofinal;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento man, no tengo esa cantidad de cocaina.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento man, no tengo esa cantidad de cocaina.");
		}
		}
		return 1;
		}
		case COMPRARHEROINA:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		if(HeroinaCamello >= strval(inputtext))
		{
		new precio = 120000;
		new preciofinal = strval(inputtext) * precio;
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pDinero] >= preciofinal)
		{
		SendClientMessageEx(playerid, -1, "Compraste %sg de heroina al camello por $%s.", ConvertirNumero(strval(inputtext)), ConvertirNumero(preciofinal));
		QuitarDinero(playerid, preciofinal);
		PLAYER_INFO[playerid][pHeroina] += strval(inputtext);
		HeroinaCamello -= strval(inputtext);
		DineroCamello += preciofinal;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento man, no tengo esa cantidad de heroina.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento man, no tengo esa cantidad de heroina.");
		}
		}
		return 1;
		}
		case COMPRARMEDICAMENTOS:
		{
		if(response)
		{
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return SendClientMessage(playerid,-1,"Error, intentalo nuevamente y ten cuidado con lo que escribes.");
		if(MedicamentosCamello >= strval(inputtext))
		{
		new precio = 250;
		new preciofinal = strval(inputtext) * precio;
		if(strval(inputtext) <= 0) return SendClientMessage(playerid,-1,"Los items deben ser mayor a 0");
		if(PLAYER_INFO[playerid][pDinero] >= preciofinal)
		{
		SendClientMessageEx(playerid, -1,"Compraste %s medicamentos al camello por $%s.",ConvertirNumero(strval(inputtext)),ConvertirNumero(preciofinal));
		QuitarDinero(playerid, preciofinal);
		PLAYER_INFO[playerid][pMedicamentos] += strval(inputtext);
		MedicamentosCamello -= strval(inputtext);
		DineroCamello += preciofinal;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero.");
		}
		else
		{
		SetPlayerChatBubble(Camello, "Lo siento man, no tengo esa cantidad de medicamentos.", -1, 30.0, 5000);
		SendClientMessage(playerid, -1, "Lo siento man, no tengo esa cantidad de medicamentos.");
		}
		}
		return 1;
		}
		case MENU_INVITACIONES:
		{
		if(response)
		{
		if(PLAYER_TEMP[playerid][p_INVITACIONES][listitem] == -1)
		{
		ShowPlayerDialog(playerid, DIALOG_PLAYER_INV_DELETE_ALL, DIALOG_STYLE_MSGBOX, "Invitaciones - Eliminar Todo", "¿Estás seguro que quieres borrar todas tus invitaciones pendientes?", "Eliminar", "Atrás");
		return 1;
		}
		else
		{
		PLAYER_TEMP[playerid][BandaOfertada][0] = PLAYER_TEMP[playerid][p_INVITACIONES][listitem];
		PLAYER_TEMP[playerid][BandaOfertada][1] = PLAYER_TEMP[playerid][p_INVITACIONES_ID][listitem];
		ShowPlayerDialog(playerid, DIALOG_PLAYER_INV_ACEPT, DIALOG_STYLE_LIST, "Invitaciones - Opciones", "Aceptar invitación\nEliminar invitación", "Selecionar", "Atrás");
		return 1;
		}
		}
		}
		case DIALOG_PLAYER_INV_DELETE_ALL:
		{
		if(!response) return 1;
	    mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s'",PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query, true);
		SendClientMessage(playerid,-1,"Todas tus invitaciónes activas fueron borradas.");
		}
		case DIALOG_PLAYER_INV_ACEPT:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0:
		{
		mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s' AND `ID`='%d'",PLAYER_INFO[playerid][Nickname],PLAYER_TEMP[playerid][BandaOfertada][1]);
		mysql_query(handle_db, Query, true);
		PLAYER_INFO[playerid][pRango] = 1;
	    PLAYER_INFO[playerid][pFaccion] = PLAYER_TEMP[playerid][BandaOfertada][0];
		if(PLAYER_TEMP[playerid][BandaOfertada][0] == 1)
		{
		format(string, sizeof string, "{3399FF}[Banda] {FFFFFF}%s se ha unido a la facción con el rango %s.",PLAYER_INFO[playerid][Nickname],RangoPolicia(playerid));
		SendRadioPoliceMessage(-1, string);
		SendRadioMilitarMessage(-1, string);
		}
		else if(PLAYER_TEMP[playerid][BandaOfertada][0] >= 2)
		{
		SetPlayerGangZones(playerid);
		format(string, sizeof string, "{%06x}[Banda]{FFFFFF} %s se ha unido a la banda con el rango %s.",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, PLAYER_INFO[playerid][Nickname], RangoBanda(PLAYER_INFO[playerid][pFaccion], PLAYER_INFO[playerid][pRango]));
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], 0xff9c00FF, string);
		}
		GuardarCuenta(playerid);
		return 1;
		}
		case 1:
		{
		mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `invitaciones` WHERE `Invitado`='%s' AND `ID`='%d'",PLAYER_INFO[playerid][Nickname],PLAYER_TEMP[playerid][BandaOfertada][1]);
		mysql_query(handle_db, Query, true);
        SendClientMessageEx(playerid,-1,"Borraste la invitación de la banda: {f21111}%s.",BandasInfo[PLAYER_TEMP[playerid][BandaOfertada][0]][BNombre]);
		}
		}
	    return 1;
		}
		case CONFIG_BANDA:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: ShowDialog(playerid, CHANGE_NAME_CREW);
		case 1: ShowDialog(playerid, VIEW_RANK_NAME);
		case 2: ShowDialog(playerid, CHANGE_PROP_RANK);
		case 3: ShowDialog(playerid, CREW_MODIFY_COLOR);
		case 4: ShowDialog(playerid, CREW_VIEW_MEMBERS);
		case 5: ShowDialog(playerid, CREW_DELETE);
		}
		}
		}
		case CHANGE_NAME_CREW:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA); 
		if(strlen(inputtext) < 4 || strlen(inputtext) > 24)
		{
		ShowDialog(playerid, CHANGE_NAME_CREW);
		return SendClientMessage(playerid,-1,"El nombre ingresado tiene que tener entre 4 y 24 caracteres.");
		}
		if(!strlen(inputtext))
		{
		ShowDialog(playerid, CHANGE_NAME_CREW);
		return SendClientMessage(playerid,-1,"El nombre ingresado no es válido.");
		}
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `Nombre`='%s'",inputtext);
		mysql_query(handle_db, Query,true);	
		if(cache_num_rows()) return SendClientMessage(playerid,-1,"El nombre ingresado para tu banda ya esta en uso.");
		if(PLAYER_INFO[playerid][pDinero] < 150000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
		QuitarDinero(playerid, 150000);
		mysql_format(handle_db, Query,sizeof(Query), "UPDATE `facciones` SET `Nombre` = '%s' WHERE `id`='%d';", inputtext, BandasInfo[PLAYER_INFO[playerid][pFaccion]][bID]);
		mysql_query(handle_db, Query, false);		
		format(BandasInfo[PLAYER_INFO[playerid][pFaccion]][BNombre], 32, "%s", inputtext);	
		format(string, 128, "El nombre de la banda fue cambiado a {%06x}%s", BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, inputtext);
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		return 1;
		}
		case CREW_MODIFY_COLOR:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);
		if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid, -1,"No perteneces a una banda.");
		if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes modificar el color de esta banda.");
		if(PLAYER_INFO[playerid][pRango] != 8) return SendClientMessage(playerid, -1, "No tienes permiso.");
		if(BandasInfo[ PLAYER_INFO[playerid][pFaccion] ][B_Atacando]) return SendClientMessage(playerid, -1, "No se puede cambiar el color cuando la banda está en combate.");
        for(new id; id < MAX_BANDAS; id++)
		{
		if(BandasInfo[id][BColor] == RandomColors[listitem])
		{
	    SendClientMessage(playerid, -1, "Color en uso, selecciona otro color.");
		return ShowDialog(playerid, CREW_MODIFY_COLOR);
		}
		}
        BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] = RandomColors[listitem];
		new r, g, b, a,	new_territory_color;
		HexToRGBA(BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor], r, g, b, a);
		new_territory_color = RGBAToHex(r, g, b, 135);	
		for(new i = 0; i != MAX_T; i ++)
		{
		if(!TERRITORIOS_INFO[i][Territorio_Valido]) continue;
		if(!TERRITORIOS_INFO[i][Territorio_Usado]) continue;
		if((TERRITORIOS_INFO[i][Territorio_Banda] == BandasInfo[PLAYER_INFO[playerid][pFaccion]][bID]) || (TERRITORIOS_INFO[i][Territorio_BandaID] == BandasInfo[PLAYER_INFO[playerid][pFaccion]][bID]))
		{
		TERRITORIOS_INFO[i][Territorio_Color] = new_territory_color;
		UpdateGangZoneColor(i);
		}
		}
		SendClientMessage(playerid,-1,"El color de tu banda fue cambiado correctamente.");
		new DB_Query[256];
		mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `facciones` SET `Color` = '%d' WHERE `id`='%d';", BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor], BandasInfo[PLAYER_INFO[playerid][pFaccion]][bID]);
		mysql_query(handle_db, DB_Query, false);
		mysql_format(handle_db, DB_Query, sizeof(DB_Query), "UPDATE `territorios` SET `Color`='%d' WHERE `Banda`='%d'", new_territory_color, PLAYER_INFO[playerid][pFaccion]);
		mysql_query(handle_db, DB_Query, false);
		ShowDialog(playerid, CONFIG_BANDA);
		return 1;
		}
		case CREW_VIEW_MEMBERS:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);
		}
		case VIEW_RANK_NAME:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);
		PLAYER_TEMP[playerid][jSelectRango] = listitem + 1;
		return ShowPlayerDialog(playerid,CHANGE_RANK_NAME, DIALOG_STYLE_INPUT, "{f21111}RZ:RP - Cambiar Nombre Rango", "Introduce el nuevo nombre para el rango", "Continuar", "Salir");
		}
		case CHANGE_RANK_NAME:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);
	    new BANDA_ID = PLAYER_INFO[playerid][pFaccion];
		if(BANDA_ID == 1) return SendClientMessage(playerid,-1,"No se puede hacer esto en esta faccion.");
		if(strfind(inputtext,"=",true) != -1 || strfind(inputtext,"´",true) != -1 || strfind(inputtext,"'",true) != -1 || strfind(inputtext,"`",true) != -1 || strfind(inputtext,",",true) != -1 || strfind(inputtext,"¨",true) != -1) return Error(playerid);
		if(!RangoYaCreado(BANDA_ID, inputtext))
		{
	    ShowPlayerDialog(playerid,CHANGE_RANK_NAME, DIALOG_STYLE_INPUT, "{f21111}RZ:RP - Cambiar Nombre Rango", "El rango introducido ya se encuentra en uso.\nIntroduce el nuevo nombre para el rango", "Continuar", "Salir");
	    return 1;
		}
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%d`='%s' WHERE `ID`='%d'",PLAYER_TEMP[playerid][jSelectRango],inputtext,BandasInfo[BANDA_ID][bID]);
		mysql_query(handle_db, Query, true);
		format(string, 128, "El rango {%06x}%s{FFFFFF} fue cambiado a {%06x}%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, PLAYER_TEMP[playerid][jSelectRango]),BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8,inputtext);
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		PLAYER_TEMP[playerid][jSelectRango] = 0;
		CargarFacciones();
		return ShowDialog(playerid, VIEW_RANK_NAME);
		}
		case CHANGE_PROP_RANK:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);
		if(response)
		{
		switch(listitem)
		{
		case 0: ShowDialog(playerid, CREW_RANK_INV);
		case 1: ShowDialog(playerid, CREW_RANK_EXP);
		case 2: ShowDialog(playerid, CREW_RANK_EDI);
		}
		}
		return 1;
		}
		case CREW_RANK_EDI:
		{
		if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
		if(response)
		{
        new BANDA_ID = PLAYER_INFO[playerid][pFaccion];
		if(BandasInfo[BANDA_ID][RANK_EDIT][listitem] == 1) BandasInfo[BANDA_ID][RANK_EDIT][listitem] = 0;
		else BandasInfo[BANDA_ID][RANK_EDIT][listitem] = 1;
		format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s subir o bajar rangos",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8,RangoBanda(BANDA_ID, listitem + 1), (BandasInfo[BANDA_ID][RANK_EDIT][listitem]) ? ("pueden") : ("no podrán"));
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dEdi`='%d' WHERE `Nombre`='%s'",listitem+1, BandasInfo[BANDA_ID][RANK_EDIT][listitem],BandasInfo[BANDA_ID][BNombre]);
 		mysql_query(handle_db, Query, false);	
 		ShowDialog(playerid, CREW_RANK_EDI);
		}
		return 1;
		}
		case CREW_RANK_EXP:
		{
		if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
		if(response)
		{
        new BANDA_ID = PLAYER_INFO[playerid][pFaccion];
		if(BandasInfo[BANDA_ID][RANK_EXP][listitem] == 1) BandasInfo[BANDA_ID][RANK_EXP][listitem] = 0;
		else BandasInfo[BANDA_ID][RANK_EXP][listitem] = 1;
		format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s expulsar",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, listitem + 1), (BandasInfo[BANDA_ID][RANK_EXP][listitem]) ? ("pueden") : ("no podrán"));
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dExp`='%d' WHERE `Nombre`='%s'",listitem+1, BandasInfo[BANDA_ID][RANK_EXP][listitem], BandasInfo[BANDA_ID][BNombre]);
 		mysql_query(handle_db, Query, false);
 		ShowDialog(playerid, CREW_RANK_EXP);
		}
		return 1;
		}
		case CREW_RANK_INV:
		{
		if(!response) return ShowDialog(playerid, CHANGE_PROP_RANK);
		else if(response)
		{
   		new BANDA_ID = PLAYER_INFO[playerid][pFaccion];
		if(BandasInfo[BANDA_ID][RANK_INV][listitem] == 1) BandasInfo[BANDA_ID][RANK_INV][listitem] = 0;
		else BandasInfo[BANDA_ID][RANK_INV][listitem] = 1;
		format(string, sizeof string, "Ahora los jugadores con el rango {%06x}%s{FFFFFF} %s invitar",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, RangoBanda(BANDA_ID, listitem + 1),(BandasInfo[BANDA_ID][RANK_INV][listitem]) ? ("pueden") : ("no podrán"));
		SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Rango%dInv`='%d' WHERE `Nombre`='%s'", listitem+1,BandasInfo[BANDA_ID][RANK_INV][listitem], BandasInfo[BANDA_ID][BNombre]);
		mysql_query(handle_db, Query, false);
		ShowDialog(playerid, CREW_RANK_INV);
		}
		return 1;
		}
		case CREW_NAME:
		{
		if(response)
		{
		if(strlen(inputtext) < 4 || strlen(inputtext) > 24) return SendClientMessage(playerid,-1,"El nombre ingresado tiene que tener entre 4 y 24 caracteres.");
		else if(!strlen(inputtext)) return SendClientMessage(playerid,-1,"El nombre ingresado no es válido.");
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `Nombre`='%s'",inputtext);
		mysql_query(handle_db, Query,true);
		if(!cache_num_rows())
		{
		if(PLAYER_INFO[playerid][pDinero] < 350000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
		QuitarDinero(playerid, 350000);
		new day,month,year;
		getdate(day,month,year);
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO facciones (Nombre, Integrantes, Lider, fecha) VALUES ('%s','1', '%s','%d/%d/%d')",inputtext,PLAYER_INFO[playerid][Nickname],year,month,day);
		mysql_query(handle_db, Query, true);
		PLAYER_INFO[playerid][pFaccion] = cache_insert_id();
		SendClientMessageEx(playerid,-1,"La banda {FFCC00}%s {FFFFFF}se ha creado correctamente, escribe {FFFF04}/banda {FFFFFF}para administrarla.", inputtext);
		SendClientMessage(playerid,-1,"Para mayor información escribe el comando {FFFF04}/ayuda");
		CargarFacciones();
		DarPropietarioBanda(playerid, inputtext);
		GuardarCuenta(playerid);	
		if(PLAYER_INFO[playerid][pFaccion] > 2) SetPlayerGangZones(playerid);
		if(PLAYER_INFO[playerid][pFaccion] > 2 && PLAYER_INFO[playerid][pRango] == 8)
		{
		if(BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] == 0) ShowPlayerDialog(playerid, D_COLOR1, DIALOG_STYLE_MSGBOX, "Informacion sobre los territorios:", "{FFFFFF}Debido al nuevo sistema de territorios deberás asigarle un color a tu banda\nel color que asignes será el color que tendra los territorios que domines.", "Siguiente", "Salir");
		}
		}
		else SendClientMessage(playerid,-1,"El nombre ingresado para tu banda ya esta en uso.");
		}
		return 1;
		}
		case CREW_DELETE:
		{
		if(!response) return ShowDialog(playerid, CONFIG_BANDA);	 
		if(PLAYER_INFO[playerid][pFaccion] == 1) return SendClientMessage(playerid, -1,"No puedes eliminar esta facción.");
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `facciones` SET `Nombre`='Slot Disponible',`EnUso`='0' WHERE `id`='%d'",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bID]);
		mysql_pquery(handle_db, Query);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Faccion`='0',`Rango`='0' WHERE `Faccion`='%d'",PLAYER_INFO[playerid][pFaccion]);
        mysql_pquery(handle_db, Query);
        new fabrica_id = TieneFabrica(PLAYER_INFO[playerid][pFaccion]);
        if(fabrica_id > 0)
		{
		DesocuparFabrica(fabrica_id);
		FABRICAS_INFO[fabrica_id][f_SOBORNO_TIME] = gettime();
       	FABRICAS_INFO[fabrica_id][f_VENTA] = 0;
        FABRICAS_INFO[fabrica_id][f_FACCION_ID] = 0;
        CargarFabrica(fabrica_id);
        GuardarFabrica(fabrica_id);
		}
		foreach(new i : Player)
        {
		if(PLAYER_INFO[i][pFaccion] == PLAYER_INFO[playerid][pFaccion] && i != playerid)
		{
		PLAYER_INFO[i][pFaccion] = 0;
		PLAYER_INFO[i][pRango] = 0;
		HidePlayerGangZones(i);
	 	SendClientMessage(i, -1, "La banda que pertenecías fue borrada por el lider.");
		}
		}
		DarRopa(playerid);
		DarArmas(playerid);
		PLAYER_INFO[playerid][pFaccion] = 0;
		PLAYER_INFO[playerid][pRango] = 0;
		CargarFacciones();
		SendClientMessage(playerid,-1,"Tu banda fue borrada correctamnete.");
		}
		case DIALOG_FIANZA:
		{
		if(!response) return 1;
		if(PLAYER_TEMP[playerid][pFianzaTotal] > PLAYER_INFO[playerid][pDinero]) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
		SendClientMessage(playerid,-1,"{11FF00}Cumpliste tu condena{FFFFFF}, quedas en libertad.");
		QuitarDinero(playerid, PLAYER_TEMP[playerid][pFianzaTotal]);
		PLAYER_TEMP[playerid][pFianzaTotal] = 0;
        EstaDomiciliaria[playerid] = 0;
		PLAYER_INFO[playerid][pTiempoCarcel] = 0;
		PLAYER_INFO[playerid][pTiempoJail] = 0;
		Esposando[playerid] = 0;
		PLAYER_TEMP[playerid][VariableCaido] = 0;
		CeldaJugador[playerid] = 0;
		Jail[playerid] = 0;
		San[playerid] = 0;
		CargarMapeosEx(playerid);
		switch(PLAYER_INFO[playerid][pTipoCarcel])
		{
		case 1:
		{
		new donde = random(6);
		switch(donde)
		{
		case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,1);
		case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,1);
		case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,1);
		case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,1);
		case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,1);
		case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,1);
		}
		}
		case 2:
		{
		new donde = random(6);
		switch(donde)
		{
		case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,5);
		case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,5);
		case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,5);
		case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,5);
		case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,5);
		case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,5);
		}
		}
		case 3:
		{
		new donde = random(6);
		switch(donde)
		{
		case 0: SetPosEx(playerid, 212.4893,158.3311,1003.0300,265.8078,3,7);
		case 1: SetPosEx(playerid, 212.3264,157.0358,1003.0300,270.1945,3,7);
		case 2: SetPosEx(playerid, 212.6126,159.4301,1003.0300,270.5078,3,7);
		case 3: SetPosEx(playerid, 211.6316,159.2158,1003.0234,270.5078,3,7);
		case 4: SetPosEx(playerid, 211.3360,158.4849,1003.0300,270.5078,3,7);
		case 5: SetPosEx(playerid, 211.4012,157.4245,1003.0300,270.5078,3,7);
		}
		}
		case 4:
		{
		new donde = random(6);
		switch(donde)
		{
		case 0: SetPosEx(playerid, 292.9334,1419.6272,10.1358,263.0111,0,0);
		case 1: SetPosEx(playerid, 292.3492,1418.9880,10.1810,263.0111,0,0);
		case 2: SetPosEx(playerid, 293.0168,1420.9564,10.1436,263.0111,0,0);
		case 3: SetPosEx(playerid, 293.6794,1419.9397,10.0793,263.0111,0,0);
		case 4: SetPosEx(playerid, 293.8986,1418.5115,10.0506,263.0111,0,0);
		case 5: SetPosEx(playerid, 294.7386,1419.3837,9.9930,263.0111,0,0);
		}
		}
		}
		PLAYER_INFO[playerid][pTipoCarcel] = 0;
		}
		case DIALOG_ADMINS:
		{
		if(!response) return 1;
		if(PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][listitem] == -1) return ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "{FFFFFF}Indica el 'ID' del jugador que quieres añadir a la administracion.", "Siguiente", "Salir");
		ShowPlayerDialog(playerid, DIALOG_ADMINS_2, DIALOG_STYLE_LIST, "Administradores", "{FFFFFF}- Cambiar rango administrativo\n{FFFFFF}- Expulsar de la administracion","Seleccionar", "Salir");
		PLAYER_TEMP[playerid][p_SELECT_ADMIN] = PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][listitem];
		PLAYER_TEMP[playerid][p_SELECT_ADMIN_ONLINE] = PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID_ONLINE][listitem];
		PLAYER_TEMP[playerid][p_SELECT_ADMIN_LEVEL] = PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID_LEVEL][listitem];
		return 1;
		}
		case DIALOG_ADMINS_2:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0://ascender
		{
		new dialog[145];
		format(dialog, sizeof dialog, "{FFFFFF}Rango actual: {33CCFF}%s\n{FFFFFF}Indica el nuevo rango (1-7):", RangoAdministrativo(PLAYER_TEMP[playerid][p_SELECT_ADMIN_LEVEL]));
		ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		}
		case 1://expulsar
		{
		if(PLAYER_TEMP[playerid][p_SELECT_ADMIN_ONLINE] == 1)
		{
		foreach(new i : Player)
		{
		if(JugadorLogeado[i] == 1)
		{
		if(PLAYER_TEMP[playerid][p_SELECT_ADMIN] == PLAYER_INFO[i][pID])
		{
		if(i == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
		mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Admin`='0' WHERE `ID`='%d'",PLAYER_TEMP[playerid][p_SELECT_ADMIN]);
		mysql_pquery(handle_db, Query);
		SendClientMessage(i,-1,"Un dueño de te expulso de la administracion");
		PLAYER_INFO[i][pAdmin] = 0;
		SendClientMessage(playerid,-1,"El jugador fue expulsado de la administracion");
		break;
		}
		}
		}
		}
	    mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Admin`='0' WHERE `ID`='%d'",PLAYER_TEMP[playerid][p_SELECT_ADMIN]);
		mysql_pquery(handle_db, Query);
		SendClientMessage(playerid,-1,"El jugador fue expulsado de la administracion");
		return 1;
		}
		}
		return 1;
		}
		case DIALOG_ADMINS_3:
		{
		if(response)
		{
		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "Introduce un valor numerico.");
		new dialog[145];
		format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 7):", RangoAdministrativo(PLAYER_TEMP[playerid][p_SELECT_ADMIN_LEVEL]));
		ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		if(inputtext[0] < 0)
		{
		SendClientMessage(playerid, -1, "Introduce un valor positivo.");
		new dialog[145];
		format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 7):", RangoAdministrativo(PLAYER_TEMP[playerid][p_SELECT_ADMIN_LEVEL]));
		ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		if(inputtext[0] >= 1 && inputtext[0] <= 7)
		{
		if(PLAYER_TEMP[playerid][p_SELECT_ADMIN_ONLINE] == 1)
		{
		foreach(new i : Player)
		{
		if(JugadorLogeado[i] == 1)
		{
		if(PLAYER_TEMP[playerid][p_SELECT_ADMIN] == PLAYER_INFO[i][pID])
		{
		if(i == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
		MensajeEx(i,-1, "Un dueño te asigno el rango administrativo {8F70FE}%s", RangoAdministrativo(inputtext[0]));
		PLAYER_INFO[i][pAdmin] = inputtext[0];
		GuardarCuenta(i);
		break;
		}
		}
		}
		}
	    SendClientMessage(playerid,-1,"Modificaste el rango del usuario correctamente.");
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Admin`='%d' WHERE `ID`='%d'",inputtext[0], PLAYER_TEMP[playerid][p_SELECT_ADMIN]);
		mysql_pquery(handle_db, Query);
		return 1;
		}
		else
		{
		SendClientMessage(playerid, -1, "Indica el nuevo rango (1 - 6).");
		new dialog[145];
		format(dialog, sizeof dialog, "Rango actual: %s\nIndica el nuevo rango (1 - 7):", RangoAdministrativo(PLAYER_TEMP[playerid][p_SELECT_ADMIN_LEVEL]));
		ShowPlayerDialog(playerid, DIALOG_ADMINS_3, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		}
		return 1;
		}
		case DIALOG_ADMINS_ADD:
		{
		if(response)
		{
		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor numerico.");
		ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "Indica el 'Nombre_Jugador o el ID' del jugador que quieres añadir a la administracion.", "Siguiente", "Salir");
		return 1;
		}
		else if(strval(inputtext) < 0)
		{
		SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor positivo.");
		ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD, DIALOG_STYLE_INPUT, "Administradores", "Indica el 'Nombre_Jugador o el ID' del jugador que quieres añadir a la administracion.", "Siguiente", "Salir");
		return 1;
		}
		if(!IsPlayerConnected(inputtext[0])) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
		if(IsPlayerNPC(inputtext[0])) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
        if(inputtext[0] == playerid) return SendClientMessage(playerid,-1,"No puedes hacer esto.");
		if(PLAYER_INFO[inputtext[0]][pAdmin] != 0) return SendClientMessage(playerid,-1,"El jugador seleccionado ya se encuentra fuera del staff.");
		PLAYER_TEMP[playerid][p_ADD_ADMIN_ID] = inputtext[0];
		new dialog[145];
		format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 6):",  PLAYER_INFO[inputtext[0]][Nickname], inputtext[0]);
		return ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		}
		return 1;
		}
		case DIALOG_ADMINS_ADD_2:
		{
		if(response)
		{
		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "Introduce un valor numerico.");
		new dialog[145];
		format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 7):",  PLAYER_INFO[PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]][Nickname], PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]);
		ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		if(inputtext[0] < 0)
		{
		SendClientMessage(playerid, -1, "Introduce un valor positivo.");
		new dialog[145];
		format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 7):",  PLAYER_INFO[PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]][Nickname], PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]);
		ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		if(inputtext[0] >= 1 && inputtext[0] <= 7)
		{
		new ID = PLAYER_TEMP[playerid][p_ADD_ADMIN_ID];
		if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,-1,"No se encontro al jugador seleccionado.");
		else
		{
		MensajeEx(ID,-1,"Un dueño te asigno el rango administrativo {8F70FE}%s", RangoAdministrativo(inputtext[0]));
		SendClientMessage(playerid,-1,"Modificaste el rango del usuario correctamente.");
		PLAYER_INFO[ID][pAdmin] = inputtext[0];
		GuardarCuenta(ID);
		}
		}
		else
		{
		SendClientMessage(playerid, -1, "Indica el rango (1 - 7).");
		new dialog[145];
		format(dialog, sizeof dialog, "Jugador: %s\nID: %d\n\nIndica el nuevo rango (1 - 7):",  PLAYER_INFO[PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]][Nickname], PLAYER_TEMP[playerid][p_ADD_ADMIN_ID]);
		ShowPlayerDialog(playerid, DIALOG_ADMINS_ADD_2, DIALOG_STYLE_INPUT, "Administradores", dialog, "Seleccionar", "Salir");
		return 1;
		}
		}
		return 1;
		}
		case MERCADO_NEGRO:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		if(PLAYER_INFO[playerid][pDinero] < 5500) return SendClientMessage(playerid,-1,"Necesitas {f21111}5,500${FFFFFF} para comprar este pack de armas.");
		{
		QuitarDinero(playerid,5500);
		DarArma(playerid,24);
		DarArma(playerid,27);
		DarArma(playerid,31);
		DarArma(playerid,16);
		DarArma(playerid,28);
		AccionesRol(playerid,"{FFFFFF} {f21111}Compra una {f21111}pack{FFFFFF} de armas.", 20);
		}
		return 1;
		}
		case 1:
		{
	    if(PLAYER_INFO[playerid][pDinero] < 150000) return SendClientMessage(playerid,-1,"Necesitas {f21111}150,000${FFFFFF} para comprar este pack de Drogas.");
		{
		QuitarDinero(playerid,150000);
		PLAYER_INFO[playerid][pHeroina] += 100;
		PLAYER_INFO[playerid][pCocaina] += 100;
		PLAYER_INFO[playerid][pPreper] += 100;
		PLAYER_INFO[playerid][pGino] += 100;
		AccionesRol(playerid,"{FFFFFF} {f21111}Compra un {FFFFFF}Pack de {f21111}drogas.", 20);
        }
		return 1;
		}
		case 2:
		{
		if(PLAYER_INFO[playerid][pDinero] < 14500) return SendClientMessage(playerid,-1,"Necesitas {f21111}14,500${FFFFFF} para comprar esta arma.");
		{
		QuitarDinero(playerid,14500);
		DarArma(playerid,34);
		AccionesRol(playerid,"{FFFFFF} {f21111}Compra un {f21111}Franco {FFFFFF}tirador", 20);
		}
		return 1;
		}
		}
		}
		}
        case CHALECOS_MENU:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
			if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"Necesitas {f21111}2,500${FFFFFF} para comprar esta protección.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"{F6E200}No puedes comprar protección mientras estas en combate.");
			{
				GivePlayerArmour(playerid, 25.0);
				QuitarDinero(playerid,2500);
				AccionesRol(playerid,"{FFFFFF}Compra una {f21111}protección{FFFFFF} de nivel bajo.", 20);
			}
			return 1;
		}
		case 1:
		{
	    	if(PLAYER_INFO[playerid][pDinero] < 3500) return SendClientMessage(playerid,-1,"Necesitas {f21111}3,500${FFFFFF} para comprar esta protección.");
	    	if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"{F6E200}No puedes comprar protección mientras estas en combate.");
			{
				GivePlayerArmour(playerid, 30.0);
				QuitarDinero(playerid,3500);
				AccionesRol(playerid,"{FFFFFF}Compra un una {f21111}protección{FFFFFF} de nivel medio.", 20);
            }
			return 1;
		}
		case 2:
		{
			if(PLAYER_INFO[playerid][pDinero] < 4500) return SendClientMessage(playerid,-1,"Necesitas {f21111}4,500${FFFFFF} para comprar esta protección.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"{F6E200}No puedes comprar protección mientras estas en combate.");
			{
				GivePlayerArmour(playerid, 100.0);
				QuitarDinero(playerid,4500);
				AccionesRol(playerid,"{FFFFFF}Compra una {f21111}protección{FFFFFF} de nivel alto.", 20);
			}
			return 1;
		}
		}
		}
		}
		case MENU_TIENDA:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: //ropa
		{
	    if(PLAYER_INFO[playerid][pDuty] > 0)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1, "No puedes comprar ropa estando de servicio");
		return 1;
		}
	    if(PLAYER_INFO[playerid][Moneda] < 5)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar ropa {f21111}5"SERVER_COIN"");
		return 1;
		}
		switch(PLAYER_INFO[playerid][pSexo])
		{
		case 1:
		{
		ShowModelSelectionMenu(playerid, RopaHombreEZ, "Ropa "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {f21111}5"SERVER_COIN"");
		}
		case 2:
		{
		ShowModelSelectionMenu(playerid, RopaMujerEZ, "Ropa "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {f21111}5"SERVER_COIN"");
		}
		default: ShowPlayerDialog(playerid, MENU_TIENDA_1, DIALOG_STYLE_LIST,"Sexo Inválido - Vuelve a seleccionarlo.","{FFFFFF}Hombre\n{FFFFFF}Mujer", "Seleccionar", "Salir");
		}
		}
		case 1: //botes
		{			    
		if(PLAYER_INFO[playerid][vModelo] != 0 && PLAYER_INFO[playerid][vModelo2] != 0 && PLAYER_INFO[playerid][vModelo3] != 0 && PLAYER_INFO[playerid][vModelo4] != 0) {callcmd::tienda(playerid),SendClientMessage(playerid, -1, "Tu ya tienes 4 vehículos."); return 1;}
		if(PLAYER_INFO[playerid][Moneda] < 30)
	 	{
	 	callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar vehiculos {f21111}30"SERVER_COIN"");
		return 1;
		}
		ShowModelSelectionMenu(playerid, barp, "Botes "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {f21111}30"SERVER_COIN"");
	    }
		case 2: //motos
		{
	    if(PLAYER_INFO[playerid][vModelo] != 0 && PLAYER_INFO[playerid][vModelo2] != 0 && PLAYER_INFO[playerid][vModelo3] != 0 && PLAYER_INFO[playerid][vModelo4] != 0) {callcmd::tienda(playerid),SendClientMessage(playerid, -1, "Tu ya tienes 4 vehículos."); return 1;}
	    if(PLAYER_INFO[playerid][Moneda] < 35)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar motos {f21111}35"SERVER_COIN"");
		return 1;
		}
		ShowModelSelectionMenu(playerid, Motosrp, "Motos "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {f21111}35"SERVER_COIN"");
		}
		case 3:// veh
		{
		if(PLAYER_INFO[playerid][vModelo] != 0 && PLAYER_INFO[playerid][vModelo2] != 0 && PLAYER_INFO[playerid][vModelo3] != 0 && PLAYER_INFO[playerid][vModelo4] != 0) {callcmd::tienda(playerid),SendClientMessage(playerid, -1, "Tu ya tienes 4 vehículos."); return 1;}
		if(PLAYER_INFO[playerid][Moneda] < 40)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar vehiculos {f21111}40"SERVER_COIN"");
		return 1;
		}
		ShowModelSelectionMenu(playerid, vehrp, "Vehiculos "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {f21111}40"SERVER_COIN"");
		}
		case 4: //helicopteros
		{
		if(PLAYER_INFO[playerid][vModelo] != 0 && PLAYER_INFO[playerid][vModelo2] != 0 && PLAYER_INFO[playerid][vModelo3] != 0 && PLAYER_INFO[playerid][vModelo4] != 0) {callcmd::tienda(playerid),SendClientMessage(playerid, -1, "Tu ya tienes 4 vehículos."); return 1;}
		if(PLAYER_INFO[playerid][pLicenciaVuelo] == 0)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"Necesitas una licencia de piloto para poder comprar este tipo de vehículo.");
		return 1;
		}
	    if(PLAYER_INFO[playerid][Moneda] < 80)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"No tienes suficiente "SERVER_COIN" para comprar helicopteros {f21111}80"SERVER_COIN"");
		return 1;
		}
		ShowModelSelectionMenu(playerid, Helrp, "Helicopteros "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona el que mas te guste, cada uno tiene un valor de {f21111}80"SERVER_COIN"");
		}
		case 5: //crear banda
		{
		if(PLAYER_INFO[playerid][pFaccion] != 0)
		{
		callcmd::tienda(playerid);
		SendClientMessage(playerid,-1,"Ya perteneces a una banda");
		return 1;
		}
		ShowPlayerDialog(playerid,CREW_NAME, DIALOG_STYLE_INPUT, "Creación de organización", "{FFFFFF}El coste de crear una organización es de {00E300}350.000${FFFFFF}\nSi estás seguro de crearla, escribe el nombre", "Continuar", "Salir");
		}
		case 6: //VIP
        {
        ShowPlayerDialog(playerid, TIENDADP2, DIALOG_STYLE_LIST, "- VIP","- Comprar VIP1 \n- Comprar VIP2", "Aceptar","Cancelar");
        }
		}
		}
		}
		case MENU_TIENDA_1:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		PLAYER_INFO[playerid][pSexo] = 1;
		ShowModelSelectionMenu(playerid, RopaHombreEZ, "Ropa "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {f21111}5"SERVER_COIN"");
		}
		case 1:
		{
		PLAYER_INFO[playerid][pSexo] = 2;
		ShowModelSelectionMenu(playerid, RopaMujerEZ, "Ropa "SERVER_COIN"");
		SendClientMessage(playerid,-1,"Selecciona la ropa que mas te guste, cada una tiene un valor de {f21111}5"SERVER_COIN"");
		}
		}
		}
		}
		case TIENDADP2:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: //VIP 1
		{
    	new dia,mes,ano;
		getdate(ano,mes,dia);
		PLAYER_INFO[playerid][pVIP] = 1;
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `FinDia`='%d',`FinMes`='%d',`FinAno`='%d' WHERE `Username`='%e'",dia,mes+1,ano,PLAYER_INFO[playerid][Nickname]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][findia] = dia;
		PLAYER_INFO[playerid][finmes] = mes+1;
		PLAYER_INFO[playerid][finano] = ano;
		format(string,128,"Felicidades! Adquiriste VIP 1 hasta el %d/%d/%d",dia,mes+1,ano);
		SendClientMessage(playerid,-1,string);
		}
		case 1: //VIP2
		{
		new dia,mes,ano;
		getdate(ano,mes,dia);
		PLAYER_INFO[playerid][pVIP] = 2;
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `FinDia`='%d',`FinMes`='%d',`FinAno`='%d' WHERE `Username`='%e'",dia,mes+1,ano,PLAYER_INFO[playerid][Nickname]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][findia] = dia;
		PLAYER_INFO[playerid][finmes] = mes+1;
		PLAYER_INFO[playerid][finano] = ano;
		format(string,128,"Felicidades! Adquiriste VIP 2 hasta el %d/%d/%d",dia,mes+1,ano);
		SendClientMessage(playerid,-1,string);
		}
		}
		}
		}
  		case DIALOG_PHONE:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: //Agenda
		{
		if(TelefonoEstado[playerid] == 1)
		{
		AccionesRol(playerid,"encendió su teléfono móvil.", 20);
		TelefonoEstado[playerid] = 0;
		ShowDialog(playerid, dialogid);
		return 1;
		}
		ShowDialog(playerid, DIALOG_PHONE_BOOK);
		}
		case 1: //Llamar
		{
		if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
		ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
		}
		case 2: //Enviar mensaje
		{
		if(TelefonoEstado[playerid] == 1) return SendClientMessage(playerid, -1, "Tu teléfono está apagado, enciéndelo para usarlo.");
		ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
		}
		case 3: //Apagar
		{
		if(PLAYER_INFO[playerid][MobileSub] == 2540 || PLAYER_INFO[playerid][MobileSub] == 911)  ColgarLaLlamada(playerid);
		new caller = PLAYER_INFO[playerid][MobileSub];
		if(IsPlayerConnected(caller) && caller != -1)
		{
		SendClientMessage(caller, -1, "Colgaron la llamada.");
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(caller, 7);
		PLAYER_INFO[caller][MobileSub] = -1;
		EnLlamada[caller] = 0;
		finllamada(caller);
		ColgarLaLlamada(playerid);
		}
		TelefonoEstado[playerid] = 1;
		AccionesRol(playerid,"apagó su teléfono móvil.", 20);
		}
		}
		}
		return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
		if(response)
		{
		if(PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
		if(PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
		if(PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);

		PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
		ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
		}
		else ShowDialog(playerid, DIALOG_PHONE);
		return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
		if(response)
		{
		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor numérico.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		if(inputtext[0] <= 0)
		{
		SendClientMessage(playerid, -1, "{CCCCCC}Introduce un valor positivo.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
		ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK);
		return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
		if(response)
		{
		if(isnull(inputtext))
		{
		ShowDialog(playerid, dialogid);
		return 1;
		}
		if(strlen(inputtext) > 24)
		{
		SendClientMessage(playerid, -1, "Caracteres: 1-24.");
		ShowDialog(playerid, dialogid);
	    return 1;
		}

	    new slot = GetEmptyPlayerPhoneBookSlot(playerid);
		if(slot == -1) return SendClientMessage(playerid, -1, "Memoria de la agenda llena.");


		PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
		format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
		PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
		RegisterNewPlayerPhoneBook(playerid, slot);

		SendClientMessageEx(playerid, -1, "Nuevo contacto añadido: Nombre: {f21111}%s {FFFFFF}Teléfono: {f21111}%d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
		ShowDialog(playerid, DIALOG_PHONE_BOOK);
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
		return 1;
		}
		case REPORTSMENU:
		{
		if(response)
		{
		if(CancelReport[playerid] == listitem) return 1;
		new reportid = ListItemReportId[playerid][listitem];
		if(REPORT_INFO[reportid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ese reporte ya fue revisado!");
		if(!IsPlayerConnected(REPORT_INFO[reportid][ReportFrom]))
		{
		SendClientMessageEx(playerid, COLOR_GREY, "El que reportó se ha desconectado");
		REPORT_INFO[reportid][ReportFrom] = 999;
		REPORT_INFO[reportid][BeingUsed] = 0;
		return 1;
		}
		for(new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
		if(IsPlayerConnected(i) && PLAYER_INFO[i][pAdmin] > 2 && VerAdmin[i] == 1)
		{
		if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(i,0xF00000FF,"Un Administrador{FFFFFF} aceptó el reporte de {FF3300}%s{FFFFFF} (ID: %i a ID: %i, #%i).", NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], REPORT_INFO[reportid][ReportadoID], reportid);
		else SendClientMessageEx(i,0xF00000FF,"%s{FFFFFF} aceptó el reporte de {FF3300}%s{FFFFFF} (ID: %i a ID: %i, #%i).", NombreJugador(playerid), NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], REPORT_INFO[reportid][ReportadoID], reportid);
    	IDReporte[playerid] = REPORT_INFO[reportid][ReportadoID];
    	format(IDReporteMensaje[playerid], 150, REPORT_INFO[reportid][Report]);
		}
		}
    	SendClientMessageEx(playerid,-1,"Usa el comando {F4FA58}/spec %d{FFFFFF} para verificar el estado del jugador reportado.", IDReporte[playerid]);
		if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{f21111}Un Administrador está viendo tu reporte.");
		else SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{f21111}El Administrador %s está viendo tu reporte.", NombreJugador(playerid));
		REPORT_INFO[reportid][CheckingReport] = playerid;
		REPORT_INFO[reportid][BeingUsed] = 0;
		}
		else
		{
		if(CancelReport[playerid] == listitem) return 1;
		new reportid = ListItemReportId[playerid][listitem];
		if(REPORT_INFO[reportid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ese reporta ya fue revisado!");
		if(!IsPlayerConnected(REPORT_INFO[reportid][ReportFrom]))
		{
		SendClientMessageEx(playerid, COLOR_GREY, "El que reportó se ha desconectado!");
		REPORT_INFO[reportid][ReportFrom] = 999;
		REPORT_INFO[reportid][BeingUsed] = 0;
		return 1;
		}
		for(new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
		if(IsPlayerConnected(i) && PLAYER_INFO[i][pAdmin] > 2 && VerAdmin[i] == 1)
		{
		if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(i,0xF00000FF,"Un Administrador{FFFFFF} rechazó el reporte de {FF3300}%s{FFFFFF} (ID:%d) (#%i).", NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], reportid);
		else SendClientMessageEx(i,0xF00000FF,"%s{FFFFFF} rechazó el reporte de {FF3300}%s{FFFFFF} (ID:%d) (#%i).", NombreJugador(playerid), NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], reportid);
    	IDReporte[playerid] = REPORT_INFO[reportid][ReportadoID];
    	format(IDReporteMensaje[playerid], 150, REPORT_INFO[reportid][Report]);
		}
		}
		if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{FF3300}Un Administrador ha rechazado tu reporte.");
		else SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{FF3300}El administrador %s ha rechazado tu reporte.", NombreJugador(playerid));
		REPORT_INFO[reportid][ReportFrom] = 999;
		REPORT_INFO[reportid][BeingUsed] = 0;
		new reportdialog[4000], itemid = 0;
		for(new i = 0; i < MAX_REPORTS; i++)
		{
		if(REPORT_INFO[i][BeingUsed] == 1 && itemid < 100)
		{
		ListItemReportId[playerid][itemid] = i;
		itemid++;
		format(reportdialog, sizeof(reportdialog), "%s#%i (%ds) ID:%i a ID:%i | R: %s", reportdialog, i, gettime() - REPORT_INFO[i][TiempoReport], REPORT_INFO[i][ReportFrom], REPORT_INFO[i][ReportadoID], REPORT_INFO[i][Report]);
		format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
		}
		}
		CancelReport[playerid] = itemid;
		format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
		format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
		ShowPlayerDialog(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reportes", reportdialog, "Aceptar", "Rechazar");
		}
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0: //llamar
		{
		new numero[70];
		format(numero, sizeof(numero),"%d",PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
        callcmd::llamar(playerid, numero);
		}
		case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
		case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
		case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
		}
		PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER];
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK);
		return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
		if(response)
		{
		if(isnull(inputtext))
		{
		ShowDialog(playerid, dialogid);
		return 1;
		}
		if(strlen(inputtext) > 24)
		{
		SendClientMessage(playerid, -1, "Caracteres: 1-24.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);

        new query[520];
	    mysql_format(handle_db, query, sizeof(query), "UPDATE `player_book` SET `NAME` = '%s' WHERE `ID` = '%d';",PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
        mysql_query(handle_db, query, true);

		SendClientMessage(playerid, -1, "Contacto modificado.");
		ShowDialog(playerid, DIALOG_PHONE_BOOK);
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
		return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
		if(response)
		{
		new query[520];
		mysql_format(handle_db, query, sizeof(query), "DELETE FROM `player_book` WHERE `PHONE_ID` = '%d' AND `ID` = '%d';", PLAYER_INFO[playerid][pNumero], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
		mysql_query(handle_db, query, true);
		SendClientMessageEx(playerid, -1, "Contacto {f21111}\"%s\" {FFFFFF}eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
		PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
		PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
		format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
		PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;

		ShowDialog(playerid, DIALOG_PHONE_BOOK);
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
		return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
		if(response)
		{
		new query[520];
		mysql_format(handle_db, query, sizeof(query), "DELETE FROM `player_book` WHERE `PHONE_ID` = '%d';", PLAYER_INFO[playerid][pNumero]);
		mysql_query(handle_db, query, true);
		new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
		for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;
		SendClientMessage(playerid, -1, "Has eliminado todos sus contactos.");
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK);
		return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
		if(response)
		{
		if(TelefonoEstado[playerid] == 1) return SendClientMessageEx(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /telefono.");
		if(EnLlamada[playerid] == 1) return SendClientMessageEx(playerid, -1, "Estás en una llamada.");

		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "Número no válido.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		if(inputtext[0] <= 0)
		{
		SendClientMessage(playerid, -1, "El número destino no es válido.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		new numero[70];
		format(numero, sizeof(numero),"%d", inputtext[0]);
	    callcmd::llamar(playerid, numero);
		}
		else ShowDialog(playerid, DIALOG_PHONE);
		return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
		if(response)
		{
		if(TelefonoEstado[playerid] == 1) return SendClientMessageEx(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /movil.");
		if(EnLlamada[playerid] == 1) return SendClientMessageEx(playerid, -1, "Estás en una llamada.");
		if(sscanf(inputtext, "d", inputtext[0]))
		{
		SendClientMessage(playerid, -1, "Número no válido.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		if(inputtext[0] <= 0)
		{
		SendClientMessage(playerid, -1, "El número destino no es válido.");
		ShowDialog(playerid, dialogid);
		return 1;
		}
		new to_playerid = INVALID_PLAYER_ID;
		foreach(new i : Player)
		{
		if(IsPlayerConnected(i))
		{
		if(PLAYER_INFO[i][pNumero] == inputtext[0])
		{
        to_playerid = i;
		break;
		}
		}
		}
		if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "El número destino no es válido.");

		PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
		ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
		}
		else ShowDialog(playerid, DIALOG_PHONE);
		return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
		if(response)
		{
		if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
		if(strlen(inputtext) > 145) return ShowDialog(playerid, dialogid);
        new numero[170];
        format(numero, sizeof(numero),"%d %s", PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
	    callcmd::sms(playerid, numero);
		}
		else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
		return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
		if(response)
		{
		if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
		if(strlen(inputtext) > 145) return ShowDialog(playerid, dialogid);
		new numero[170];
	    format(numero, sizeof(numero),"%d %s", PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
	    callcmd::sms(playerid, numero);
		}
		else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
		return 1;
		}
		case DIALOG_TOYS:
		{
		if(!response) return 1;
		new slot = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
		if(PLAYER_TOYS[playerid][slot][pt_MODEL_ID] == 0) return SendClientMessage(playerid, -1, "{FF6347}No tienes ningun objeto en este espacio.");
		PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] = slot;
		ShowDialog(playerid, DIALOG_TOYS_MENU);
		return 1;
		}
		case DIALOG_TOYS_MENU:
		{
		if(!response) return ShowDialog(playerid, DIALOG_TOYS);
		if(PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] == -1) return SendClientMessage(playerid, -1, "{FF6347}No tienes ningun objeto seleccionado.");
		switch(listitem)
		{
		case 0://Poner / Quitar accesorio
		{
		if(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED])
		{
	    PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED] = false;
		SendClientMessageEx(playerid, -1, "{D55124}%s{FFFFFF} quitado correctamente.", GetNameObjeto(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID]));
		RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		}
		else
		{
		if(PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] == 4 && PLAYER_INFO[playerid][pVIP] != 3)
		return SendClientMessage(playerid, -1, "Necesitas {D55124}VIP3{FFFFFF} para poder tener {DBED15}5{FFFFFF} prendas puestas.");
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED] = true;
        new INDEXBON = PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT];
		SetPlayerAttachedObject(playerid, INDEXBON, PLAYER_TOYS[playerid][INDEXBON][pt_MODEL_ID],
		PLAYER_TOYS[playerid][INDEXBON][pt_BONE], PLAYER_TOYS[playerid][INDEXBON][pt_POS][0],
		PLAYER_TOYS[playerid][INDEXBON][pt_POS][1], PLAYER_TOYS[playerid][INDEXBON][pt_POS][2],
		PLAYER_TOYS[playerid][INDEXBON][pt_ROT][0], PLAYER_TOYS[playerid][INDEXBON][pt_ROT][1],
		PLAYER_TOYS[playerid][INDEXBON][pt_ROT][2], PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][0],
		PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][1], PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][2],
    	PLAYER_TOYS[playerid][INDEXBON][player_toy_COLOR_1],PLAYER_TOYS[playerid][INDEXBON][player_toy_COLOR_2]);
		SendClientMessageEx(playerid, -1, "{D55124}%s{FFFFFF} puesto correctamente.", GetNameObjeto(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID]));
	    }
		PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] = -1;
		return 1;
		}
		case 1://Modificar accesorio
		{
		ShowDialog(playerid, DIALOG_TOYS_EDIT);
		}
		case 2://Color Prenda
		{
		ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
		}
		case 3://Eliminar accesorio
		{
		SendClientMessageEx(playerid, -1,"{CCCCCC}Has eliminado el accesorio %s correcamente.",GetNameObjeto(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID]));

        mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM `player_toys` WHERE `ID`='%d'",PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ID]);
		mysql_query(handle_db, Query, true);

		new reiniciar_toys[ptInfo];  PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]] = reiniciar_toys;
		if(IsPlayerAttachedObjectSlotUsed(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT])) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] = -1;
		return 1;
		}
		}
		}
		case DIALOG_TOYS_EDIT:
		{
		if(!response) return ShowDialog(playerid, DIALOG_TOYS_MENU);
		switch(listitem)
		{
		case 0://cambiar parte
		{
		ShowDialog(playerid, DIALOG_TOYS_EDIT_2);
		}
		case 1://editor personalizado
		{
		SendClientMessage(playerid, -1, "Posiciona bien la camara y usa {DEED15}'/headmove'{FFFFFF} para una edicion mucho mejor.");
		SendClientMessage(playerid, -1,"Manten presionado {DEED15}'~k~~PED_SPRINT~'{FFFFFF} para cambiar la posicion de la camara.");
		if(!IsPlayerAttachedObjectSlotUsed(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]))
		{
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_ATTACHED] = true;
        new INDEXBON = PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT];
 		SetPlayerAttachedObject(playerid, INDEXBON, PLAYER_TOYS[playerid][INDEXBON][pt_MODEL_ID],
		PLAYER_TOYS[playerid][INDEXBON][pt_BONE], PLAYER_TOYS[playerid][INDEXBON][pt_POS][0],
		PLAYER_TOYS[playerid][INDEXBON][pt_POS][1], PLAYER_TOYS[playerid][INDEXBON][pt_POS][2],
		PLAYER_TOYS[playerid][INDEXBON][pt_ROT][0], PLAYER_TOYS[playerid][INDEXBON][pt_ROT][1],
		PLAYER_TOYS[playerid][INDEXBON][pt_ROT][2], PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][0],
		PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][1], PLAYER_TOYS[playerid][INDEXBON][pt_SCALE][2],
    	PLAYER_TOYS[playerid][INDEXBON][player_toy_COLOR_1],PLAYER_TOYS[playerid][INDEXBON][player_toy_COLOR_2]);
		}
		return EditAttachedObject(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		}
		}
		return 1;
		}
		case DIALOG_TOYS_EDIT_2:
		{
		if(!response) return ShowDialog(playerid, DIALOG_TOYS_EDIT);
        SendClientMessageEx(playerid, -1, "Cambiaste el accesorio {DEED15}'%s'{FFFFFF} a {999999}%s{FFFFFF}.", GetNameObjeto(PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_MODEL_ID]),GetNameBoneToy(listitem + 1));
		PLAYER_TOYS[playerid][PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]][pt_BONE] = listitem + 1;
		DarPrendas(playerid);
		ShowDialog(playerid, DIALOG_TOYS_EDIT);
		}
        case DIALOG_PLAYER_TOY_COLOR_1:
		{
		if(response)
		{
		if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
		else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = RGBAToARGB(RandomColors[listitem]);

		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][pt_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		SendClientMessage(playerid, -1, "{E6F8E0}Color del accesorio actualizado.");
		}
		else ShowDialog(playerid, DIALOG_TOYS_MENU);
		return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
		if(response)
		{
		if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
		else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = RGBAToARGB(RandomColors[listitem]);

		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT] ][pt_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][p_SELECTED_TOY_SLOT]);
		SendClientMessage(playerid, -1, "{E6F8E0}Color del accesorio actualizado.");
		}
		else ShowDialog(playerid, DIALOG_TOYS_MENU);
		return 1;
		}
		case DIALOG_CHANGE_PASS:
		{
		if(!response) return 1; 
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, 0xAFAFAFAA, "Ingresa la contraseña");
		return ShowDialog(playerid, DIALOG_CHANGE_PASS);
		}
		if(strlen(inputtext) < 4 || strlen(inputtext) > 18) return ShowDialog(playerid, DIALOG_CHANGE_PASS);
		else if(strlen(inputtext) >= 4 && strlen(inputtext) <= 18)
		{
		new escapepass[100];
		mysql_escape_string(inputtext, escapepass);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` set `Password`=md5('%e') WHERE `ID`='%d'",escapepass, PLAYER_INFO[playerid][pID]);
		mysql_query(handle_db, Query, true);
		format(PLAYER_INFO[playerid][ContraTemporal],128,"%s",escapepass);
		return SendClientMessageEx(playerid,-1,"La contraseña fue cambiada correctamente a {FF6347}%s.", escapepass);
		}
		return 1;
		}
		case DIALOG_POSTULACION:
		{
		if(!response) return 1;  
		SetPlayerPosEx(playerid, -2033.4351,-117.4390,1035.1719);
		SetPlayerFacingAngle(playerid, 85.1265);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, playerid);
	    PLAYER_TEMP[playerid][pt_ENPOSTULACION] = true;  
		InterpolateCameraPos(playerid, -2024.810546, -117.389549, 1036.273681, -2032.151611, -117.396995, 1036.255493, 7000);
		InterpolateCameraLookAt(playerid, -2024.487792, -112.400169, 1036.229492, -2037.077026, -117.422775, 1035.395263, 5000);	
		KillTimer(PLAYER_TIMES[playerid][t_TIME_POSTULACION]);
		PLAYER_TIMES[playerid][t_TIME_POSTULACION] = SetTimerEx("AccionPostulacion",4000,false,"dd",playerid, 0);
		TogglePlayerControllable(playerid, 0);	
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_0],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_1],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_2],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_3],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_4],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_5],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_6],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_7],145," ");
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_8],145," ");
		return 1;
		}
		case DIALOG_POSTULACION_1:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		    
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_0],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_2);
		}
		case DIALOG_POSTULACION_2:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
				}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_1],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_3);
		}
		case DIALOG_POSTULACION_3:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_2],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_4);
		}
		case DIALOG_POSTULACION_4:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_3],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_5);
		}
		case DIALOG_POSTULACION_5:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_4],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_6);
		}
		case DIALOG_POSTULACION_6:
		{
		if(!response)
	    {
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_5],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_7);
		}
		case DIALOG_POSTULACION_7:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_6],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_8);
		}
		case DIALOG_POSTULACION_8:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_7],145,"%s",inputtext);
		return ShowDialog(playerid, DIALOG_POSTULACION_9);
		}
		case DIALOG_POSTULACION_9:
		{
		if(!response)
		{
		if(!PLAYER_TEMP[playerid][pt_EXIPOSTULACION])
		{
		SendClientMessage(playerid,-1,"Si deseas cancelar el exámen pulsa {f21111}'ESC'.");
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = true;
		ShowDialog(playerid, dialogid);
		}
		else AccionPostulacion(playerid, 2);
		return 1;
		}
		if(!strlen(inputtext))
		{
		SendClientMessage(playerid, -1, "Ingresa la respuesta solicitada.");
		return ShowDialog(playerid, dialogid);
		}
		if(strlen(inputtext) > 145)
		{
		SendClientMessage(playerid, -1, "La respuesta ingresada no puede ser tan larga.");
		return ShowDialog(playerid, dialogid);
		}
		PLAYER_TEMP[playerid][pt_EXIPOSTULACION] = false;
		format(PLAYER_TEMP[playerid][pt_RESPUES_POSTULACION_8],145,"%s",inputtext);

		SavePlayerRespuestas(playerid);
        KillTimer(PLAYER_TIMES[playerid][t_TIME_POSTULACION]);
		PLAYER_TIMES[playerid][t_TIME_POSTULACION] = SetTimerEx("AccionPostulacion",1000,false,"dd",playerid, 2);
		return SendClientMessage(playerid, -1, "Completaste todo el cuestionario, si tus respuestas son adecuadas se te contactará para seguir con el proceso.");
		}
		case DIALOG_CURRICULUMS:
		{
		if(!response) return 1;
		new CV_ID = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem], dialog[12*170];
		PLAYER_TEMP[playerid][pt_RESPONSED_CV] = CV_ID;

		format(dialog, sizeof dialog, "Nombre: %s.\n\n\
		{ffffff}1.- ¿Qué lo movito a postularse a San Andreas Police Department?\n\
		{999999}%s\n\n\
		{ffffff}2.-¿Qué trabajo ha obtenido anteriormente? ¿Hasta que cargo llegó? ¿Por qué los dejó?\n\
        {999999}%s\n\n\
		{ffffff}3.-¿Posee Conocimientos de las leyes de San Andreas?\n\
        {999999}%s\n\n\
		{ffffff}4.-¿Posee antecedentes penales? sí es así ¿por que los obtuvo?\n\
        {999999}%s\n\n\
		{ffffff}5.-¿En una situación de agresión por parte de un civil a usted. ¿Cómo procedería ante ésta situación?\n\
        {999999}%s\n\n\
		{ffffff}6.-En caso de que un compañero de trabajo esté incumpliendo con las normativas del departamento. ¿Cómo procedería usted?\n\
		{999999}%s\n\n\
		{ffffff}7.-¿Es una persona que le gusta recibir y acatar ordenes?\n\
        {999999}%s\n\n\
		{ffffff}8.-¿Se considera una persona apta para el cargo?\n\
		{999999}%s\n\n\
		{ffffff}9.-¿Por que cree usted que deberíamos contratarlo?\n\
		{999999}%s",
		CURRICULUM_INFO[CV_ID][cv_NAME],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_1],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_2],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_3],
		CURRICULUM_INFO[CV_ID][cv_RESPUESTA_4],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_5],
		CURRICULUM_INFO[CV_ID][cv_RESPUESTA_6],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_7],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_8],CURRICULUM_INFO[CV_ID][cv_RESPUESTA_9]);
        ShowPlayerDialog(playerid, DIALOG_CURRICULUMS_1, DIALOG_STYLE_MSGBOX, "Curriculums", dialog, "Opciones", "Volver");
		}
		case DIALOG_CURRICULUMS_1:
		{
		if(!response) return ShowDialog(playerid, DIALOG_CURRICULUMS);   
		ShowPlayerDialog(playerid, DIALOG_CURRICULUMS_2, DIALOG_STYLE_LIST,"¿Que acción vas a tomar?","{00FF00}Aprobar\n{FF0000}Rechazar","Seleccionar","Atras");
		return 1;
		}
		case DIALOG_CURRICULUMS_2:
		{
		if(!response) return ShowDialog(playerid, DIALOG_CURRICULUMS);
		    
		new CV_ID = PLAYER_TEMP[playerid][pt_RESPONSED_CV];
		switch(listitem)
		{
		case 0:	//aprobar
		{
		SendClientMessageEx(playerid,-1,"El curriculum de %s fue {00FF00}aprobado.",CURRICULUM_INFO[CV_ID][cv_NAME]);
		CURRICULUM_INFO[CV_ID][cv_ESTADO] = 1;
        ShowDialog(playerid, DIALOG_CURRICULUMS);         
		foreach(new i : Player)
		{
		if(CURRICULUM_INFO[CV_ID][cv_DBPLAYER] == PLAYER_INFO[i][pID])
		{
		SendClientMessageEx(i, -1, "Felicitaciones {f21111}%s{FFFFFF}, aprobaron el curriculum que contestaste.", PLAYER_INFO[i][Nickname]);
		break;
		}
		}
		}
		case 1: //rechazar
		 {
		SendClientMessageEx(playerid,-1,"El curriculum de %s fue {FF0000}rechazado.",CURRICULUM_INFO[CV_ID][cv_NAME]);
		CURRICULUM_INFO[CV_ID][cv_ESTADO] = 2;
		ShowDialog(playerid, DIALOG_CURRICULUMS);          
		foreach(new i : Player)
		{
		if(CURRICULUM_INFO[CV_ID][cv_DBPLAYER] == PLAYER_INFO[i][pID])
		{
		SendClientMessageEx(i, -1, "%s, El curriculum que contestaste fue {FF0000}rechazado.", PLAYER_INFO[i][Nickname]);
		break;
		}
		}
		}
		}
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `curriculum_table` SET `CV_ESTADO`='%d' WHERE `NAME`='%s'", CURRICULUM_INFO[CV_ID][cv_ESTADO], CURRICULUM_INFO[CV_ID][cv_NAME]);
		mysql_query(handle_db, Query, false);
		ActualizarTablero();
		return 1;
		}
		case DIALOG_PEDIDO:
		{
		if(!response) return 1;
		new dialog[] = "- Propiedades\n- Cambio de nombre";
    	ShowPlayerDialog(playerid, DIALOG_PEDIDO_2, DIALOG_STYLE_TABLIST, "Menu de Pedido", dialog, "Seleccionar","Salir");
		return 1;
		}
		case DIALOG_PEDIDO_2:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0: // Casa
		{
		new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n\
		{FFFFFF}Ingresa el interior que quieres para la casa, pero recuerda:\n\n\
	    {FFFFFF}\t* El interior que quieres tener debe ser entre 1 y 42\n\
	    {FFFFFF}\t* Debes colocar si quieres la propiedad con garage si/no\n\
	    {FFFFFF}\t* El interior debe ser acorde al {00FF3F}tamaño de la casa(exterior)\n\
	    {FFFFFF}\t* Debes estar en la {00FF3F}entrada de la casa {FFFFFF}para pedir el mapeo\n\n\
	    {FF0000}Información importante\n\
	    {FFFFFF}Solo debes ingresar lo que se te pide, caso contrario no se tomará en cuenta tu pedido.";
		ShowPlayerDialog(playerid, DIALOG_PEDIDO_PROPIEDAD, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
		}
		case 1://Cambio de nombre
		{
		new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n\
		{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n\
	    {FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n\
	    {FFFFFF}\t* No debe tener ningún número.\n\
	    {FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n\
		{FFFFFF}\t* Ejemplo: Daniel_Casanova";
		ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
		return 1;
		}
		}
		}
		case DIALOG_PEDIDO_PROPIEDAD:
		{
		if(!response) return 1;
		if(strval(inputtext) >= 1 && (strlen(inputtext) <= 5) && (ColocoSi_No(inputtext)))
		{
		new info1[50],interior[] = "42",value[] = "no";
		format(interior, sizeof(interior),"%s",inputtext);
		format(value, sizeof(value),"%s",inputtext[3]);
		format(info1, sizeof(info1), "Interior: %s - Garaje: %s", interior, value);
		RegistrarPedido(playerid, "Propiedad", info1, 1);
		return 1;
		}
		else SendClientMessage(playerid,-1,"Tu pedido fue cancelado por que no cumple los requisitos, sigue el ejemplo.");
		return 1;
		}
		case DIALOG_PEDIDO_NOMBRE:
		{
		if(!response) return 1;
		    
		if(!strlen(inputtext))
		{
		new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n\
		{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n\
        {FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n\
        {FFFFFF}\t* No debe tener ningún número.\n\
        {FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n\
		{FFFFFF}\t* Ejemplo: Daniel_Casanova";
		ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
		return SendClientMessage(playerid, 0xAFAFAFAA, "Ingresa el 'Nombre_Apellido'.");
		}
		if(strlen(inputtext) < 4 || strlen(inputtext) >= 25)
		{
		new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n\
		{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n\
        {FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n\
        {FFFFFF}\t* No debe tener ningún número.\n\
        {FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n\
		{FFFFFF}\t* Ejemplo: Daniel_Casanova";
		return ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
		}
		if(!IsValidName(inputtext))
		{
		new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\n\
		{FFFFFF}Ingresa el nuevo nombre, pero recuerda:\n\n\
        {FFFFFF}\t* El nombre que quieres tener debe ser de un maxímo de 24 caracteres\n\
        {FFFFFF}\t* No debe tener ningún número.\n\
        {FFFFFF}\t* Recuerde que debe utilizar un nombre real con formato Nombre_Apellido.\n\
		{FFFFFF}\t* Ejemplo: Daniel_Casanova";
		ShowPlayerDialog(playerid, DIALOG_PEDIDO_NOMBRE, DIALOG_STYLE_INPUT, "Información sobre los pedidos:",dialog,"Siguiente","Volver");
		return SendClientMessage(playerid,-1,"Nombre rechazado, por favor usa el formato {FBFE01}Nombre_Apellido{ffffff}.");
		}
		RegistrarPedido(playerid, "Cambio de Nombre", inputtext);
		return SendClientMessage(playerid,-1,"El pedido de cambio de nombre fue enviado, por favor espera.");
		}
		case MENU_PEDIDOS:
		{
		if(!response) return 1;
		    
	    new PEDIDO_ID = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
	    if(PEDIDO_INFO[PEDIDO_ID][pi_ID] == 0) return 1;

	    new ID;
	    SendClientMessage(playerid, -1,"El pedido una vez este revisado se borrará automaticamente en 1 minuto.");
	    SendClientMessageEx(playerid, -1,"ID: {FFCA00}%d{ffffff} | Nombre: {FFCA00}%s{ffffff} | Pedido: {FFCA00}%s{ffffff} | Info: {FFCA00}%s.",PEDIDO_ID, PEDIDO_INFO[PEDIDO_ID][pt_NAME], PEDIDO_INFO[PEDIDO_ID][pi_TEXT], PEDIDO_INFO[PEDIDO_ID][pt_TIPO]);
	    PEDIDO_INFO[PEDIDO_ID][pt_TIME] = gettime() + 60;
	    PEDIDO_INFO[PEDIDO_ID][pi_ESTADO] = 0;

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `pedidos` SET `ESTADO`='%d' WHERE `ID`='%d'", PEDIDO_INFO[PEDIDO_ID][pi_ESTADO],PEDIDO_INFO[PEDIDO_ID][pi_DB]);
		mysql_query(handle_db, Query, false);

		if(!sscanf(PEDIDO_INFO[PEDIDO_ID][pt_NAME], "u", ID))
		{
		if(!IsPlayerConnected(ID)) SendClientMessage(playerid,-1,"El jugador se encuentra desconectado.");
		}
	    if(PEDIDO_INFO[PEDIDO_ID][pt_POS][0] != 0) SetPosEx(playerid, PEDIDO_INFO[PEDIDO_ID][pt_POS][0],PEDIDO_INFO[PEDIDO_ID][pt_POS][1],PEDIDO_INFO[PEDIDO_ID][pt_POS][2],0, 0, 0);
	    return 1;
		}
		case DIALOG_INACTIVOS:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0:ShowDialog(playerid, DIALOG_DESOCUPAR_CASAS);
		case 1: ShowDialog(playerid, DIALOG_DESOCUPAR_FABRICAS);
		}
		return 1;
		}
		case DIALOG_DESOCUPAR_CASAS:
		{
		if(!response) return ShowDialog(playerid, DIALOG_INACTIVOS);
		if(PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] == -1) return 1;

		new ID = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
			
		format(PropInfo[ID][pPropietario], 40, "Nadie");
		PropInfo[ID][pAbierta] = 1;
		PropInfo[ID][pRoperoAbierto] = 0;
		PropInfo[ID][pIDPropietario] = 0;
		PropInfo[ID][pGX] = 0.0;
	    PropInfo[ID][pGY] = 0.0;
	    PropInfo[ID][pGZ] = 0.0;
	    PropInfo[ID][pGA] = 0.0;
		PropInfo[ID][pEnVenta] = 1;

		mysql_format(handle_db, Query,sizeof(Query),"UPDATE `propiedades` SET `Propietario`='Nadie',`IDPropietario`='0',`EnVenta`='1',`GX`='0',`GY`='0',`GZ`='0',`GA`='0' WHERE `ID`='%d'", PropInfo[ID][pID]);
		mysql_query(handle_db, Query, false);
	
		GuardarPropiedad(ID);
		BorrarLabelCasa(ID);
		CargarPropiedad(ID);
		    
		SendClientMessageEx(playerid,-1, "Editaste el estado de la casa con id: {FFFF04}%d", ID);
		ShowDialog(playerid, DIALOG_DESOCUPAR_CASAS);
		return 1;
		}
		case DIALOG_DESOCUPAR_FABRICAS:
		{
		if(!response) return ShowDialog(playerid, DIALOG_INACTIVOS);
		if(PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem] == -1) return 1;
		    
		new ID = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
		PLAYER_TEMP[playerid][pt_FABRICA_ID] = ID;
		    
		if(FABRICAS_INFO[ID][f_VENTA] == 0)
		{
		SetPosEx(playerid, FABRICAS_INFO[ID][f_POS][0], FABRICAS_INFO[ID][f_POS][1], FABRICAS_INFO[ID][f_POS][2],FABRICAS_INFO[ID][f_POS][3], 0, 0);
		return 1;
		}
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Faccion`='%d'",FABRICAS_INFO[ID][f_FACCION_ID]);
		mysql_query(handle_db, Query, true);

		new dialog[115 * 25 + 1], line_str[115],Conexion[90],rango,name[24],online,time;
		dialog = "Nombre\tRango\tÚlt. conexión\n";

		for(new i = 0; i < cache_num_rows(); i++)
		{
		cache_get_value_name(i, "Username", name);
		cache_get_value_name_int(i, "Rango", rango);
		cache_get_value_name(i, "Conexion",Conexion);
		cache_get_value_name_int(i, "Online",online);
        cache_get_value_name_int(i, "TiempoOffline", time);
				
		if(online == 0) format(line_str, sizeof line_str, "%s\t%s\t%s\n", name, RangoBanda(FABRICAS_INFO[ID][f_FACCION_ID], rango),FormatTimeleft(gettime() - time));
		else format(line_str, sizeof line_str, "%s\t%s\t{80D465}Conectado{FFFFFF}\n", name, RangoBanda(PLAYER_INFO[playerid][pFaccion], rango));
		strcat(dialog, line_str);
		}
		ShowPlayerDialog(playerid, DIALOG_DESOCUPAR_FABRICAS_2, DIALOG_STYLE_TABLIST_HEADERS, "Bandas: Miembros", dialog, "Desocupar", "Atras");
		return 1;
		}
		case DIALOG_DESOCUPAR_FABRICAS_2:
		{
		if(!response) return ShowDialog(playerid, DIALOG_DESOCUPAR_FABRICAS);
		new ID = PLAYER_TEMP[playerid][pt_FABRICA_ID];
		DesocuparFabrica(ID, true);         
		SendClientMessageEx(playerid,-1,"La fábrica {f21111}%d{FFFFFF} fue desocupada", ID);
		ShowDialog(playerid, DIALOG_DESOCUPAR_FABRICAS);
		return 1;
		}
		case MENU_BORRAR_AUTO:
		{
		if(response)
		{
		switch(listitem)
		{
		case 0:
		{
		if(autos[PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID]] == 0)
		{
		SendClientMessage(playerid,-1,"No puedes eliminar un vehículo que no existe.");
       	return 1;
		}
		new ID = PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID];
		new DB_Query[128];
		mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[ID][vID1]);
		mysql_tquery(handle_db, DB_Query);
		mysql_format(handle_db, Query, 900, "DELETE FROM `p_vehicles` WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[ID][pID], 1);
		mysql_query(handle_db, Query, false);
		LimpiarMaletero(autos[ID]);
		MotorAuto[autos[ID]] = 0;
		QuitarAuto(ID, 1, autos[ID]);
		autos[PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID]] = 0;
		return 1;
		}
		case 1:
		{
		if(autos2[PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID]] == 0)
		{
		SendClientMessage(playerid,-1,"No puedes eliminar un vehículo que no existe.");
		return 1;
		}
		new ID = PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID];
		new DB_Query[128];
		mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[ID][vID2]);
		mysql_tquery(handle_db, DB_Query);
		mysql_format(handle_db, Query, 900, "DELETE FROM `p_vehicles` WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[ID][pID], 2);
		mysql_query(handle_db, Query, false);
		LimpiarMaletero(autos2[ID]);
		MotorAuto[autos2[ID]] = 0;
		QuitarAuto(ID, 2, autos2[ID]);
		autos2[ID] = 0;
		}
		case 2:
		{
		if(autos3[PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID]] == 0)
		{
		SendClientMessage(playerid,-1,"No puedes eliminar un vehículo que no existe.");
		return 1;
		}
		new ID = PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID];
		new DB_Query[128];
		mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[ID][vID3]);
		mysql_tquery(handle_db, DB_Query);

		mysql_format(handle_db, Query, 900, "DELETE FROM `p_vehicles` WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[ID][pID], 3);
		mysql_query(handle_db, Query, false);

		LimpiarMaletero(autos3[ID]);
		MotorAuto[autos3[ID]] = 0;
		QuitarAuto(ID, 3, autos3[ID]);
		autos3[ID] = 0;
		}
		case 3:
		{
		if(autos4[PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID]] == 0)
		{
		SendClientMessage(playerid,-1,"No puedes eliminar un vehículo que no existe.");
		return 1;
		}
		new ID = PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID];
		new DB_Query[128];
		mysql_format(handle_db, DB_Query, sizeof(Query), "DELETE FROM `tuning_objects` WHERE `ID_VEHICLE` = '%d';", PLAYER_INFO[ID][vID4]);
		mysql_tquery(handle_db, DB_Query);
		mysql_format(handle_db, Query, 900, "DELETE FROM `p_vehicles` WHERE `Propietario` = '%d' AND `Slot` = '%d'",PLAYER_INFO[ID][pID], 4);
		mysql_query(handle_db, Query, false);
		LimpiarMaletero(autos4[ID]);
		MotorAuto[autos4[ID]] = 0;
		QuitarAuto(ID, 4, autos4[ID]);
		autos4[ID] = 0;
		}
		}
		}
		return 1;
		}
		case DIALOG_ACTIVIDAD:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0:	//pedir quimicos
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_NONE)
		{
	    for(new i = 0; i < sizeof CP_Fabricas_Barril; i++)
		{
		if(i == FABRICAS_INFO[ID][f_ID])
		{
		MandarMensajeFabrica(ID, "Ve con el {f21111}vehículo de la fábrica{FFFFFF} hasta el {FF0000}punto marcado{FFFFFF} en el mapa.");
		SetPlayerCheckpoint(playerid, CP_Fabricas_Barril[i][0], CP_Fabricas_Barril[i][1], CP_Fabricas_Barril[i][2], 5.0);
		Streamer_Update(playerid);
		break;
		}
		}
		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_QUIMICOS;
		break;
		}
		else return SendClientMessage(playerid, -1,"Primero termina la actividad pendiente.");
		}
		return 1;
		}
		case 1:
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;

		if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_NONE)
		{
		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_VENDER;
		MandarMensajeFabrica(ID, "Carga el {f21111}vehículo de la fábrica{FFFFFF} con metanfetamina y llévalo al {EB0000}punto marcado{FFFFFF} en el mapa.");
		new pos = random( sizeof CP_Fabricas_Ventas);
		FABRICAS_INFO[ID][f_VENTA_ID] = pos;
	    SetPlayerCheckpoint(playerid, CP_Fabricas_Ventas[pos][0], CP_Fabricas_Ventas[pos][1], CP_Fabricas_Ventas[pos][2], 5.0);
		break;
		}
		else return SendClientMessage(playerid, -1,"Primero termina la actividad pendiente.");
		}
		return 1;
		}
		case 2:
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;

		if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_NONE)
		{
		if(FABRICAS_INFO[ID][f_SOBORNO_TIME] > gettime())
		{
		SendClientMessageEx(playerid,-1,"Aún no puedes pagar el soborno, intenta en {EB0000}%s{ffffff}.", FormatTimeleft(FABRICAS_INFO[ID][f_SOBORNO_TIME] - gettime()));
		return ShowDialog(playerid, DIALOG_ACTIVIDAD);
		}
		if(FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] == 0)
		{
		FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 1;
		SetPlayerCheckpoint(playerid,1543.1437,-1675.5537,13.5559,5.0);
		}
		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_SOBORNO;
		SendClientMessage(playerid,-1,"Agarra un {f21111}bolso de dinero{FFFFFF} y llévalo a la{3399FF} oficina del comandante{FFFFFF} en el Departamento de policía de Los Santos.");
		break;
		}
		else return SendClientMessage(playerid, -1,"Primero termina la actividad pendiente.");
		}
		return 1;
		}
		case 3: //ver pedidos
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;

		switch(FABRICAS_INFO[ID][f_ACTIVIDAD])
		{
		case ACTIVIDAD_QUIMICOS:
		{
		for(new i = 0; i < sizeof CP_Fabricas_Barril; i++)
		{
		if(i == FABRICAS_INFO[ID][f_ID])
		{
		SendClientMessage(playerid, -1, "Ve con el {f21111}vehículo de la fábrica{FFFFFF} hasta el {FF0000}punto marcado{FFFFFF} en el mapa.");
		SetPlayerCheckpoint(playerid, CP_Fabricas_Barril[i][0], CP_Fabricas_Barril[i][1], CP_Fabricas_Barril[i][2], 5.0);
		return 1;
		}
		}
		}
		case ACTIVIDAD_VENDER:
		{
		SendClientMessage(playerid, -1, "Carga el {f21111}vehículo de la fábrica{FFFFFF} con metanfetamina y llévalo al {EB0000}punto marcado{FFFFFF} en el mapa.");
		new pos = FABRICAS_INFO[ID][f_VENTA_ID];
		SetPlayerCheckpoint(playerid, CP_Fabricas_Ventas[pos][0], CP_Fabricas_Ventas[pos][1], CP_Fabricas_Ventas[pos][2], 5.0);
		return 1;
	    }
	    case ACTIVIDAD_SOBORNO:
	    {
	    if(FABRICAS_INFO[ID][f_SOBORNO_TIME] > gettime())
		{
		SendClientMessageEx(playerid,-1,"Aún no puedes pagar el soborno, intenta en {EB0000}%s{ffffff}.", FormatTimeleft(FABRICAS_INFO[ID][f_SOBORNO_TIME] - gettime()));
		return ShowDialog(playerid, DIALOG_ACTIVIDAD);
		}
	    if(FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] == 1)
		{
		SetPlayerCheckpoint(playerid,1543.1437,-1675.5537,13.5559,5.0);
		return SendClientMessage(playerid,-1,"Agarra un {f21111}bolso de dinero{FFFFFF} y llévalo a la{3399FF} oficina del comandante{FFFFFF} en el Departamento de policía de Los Santos.");
	    }
	    }
	    default: return 1;
		}
		}
		return 1;
		}
		case 4: //cancelar pedidos
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		switch(FABRICAS_INFO[ID][f_ACTIVIDAD])
		{
		case ACTIVIDAD_QUIMICOS:
		{
		SendClientMessage(playerid, -1,"La actividad actual fue cancelada.");
        FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
        Streamer_Update(playerid);
        return 1;
		}
		case ACTIVIDAD_VENDER:
		{
		FABRICAS_INFO[ID][f_VENTA_ID] = 0;
		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
		SendClientMessage(playerid, -1,"La actividad actual fue cancelada.");
		return 1;
	    }
	    case ACTIVIDAD_SOBORNO:
		{
	    if(FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] == 1)
		{
		FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
	    }
	    FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
	    SendClientMessage(playerid, -1,"La actividad actual fue cancelada.");
	    }
	    default: return 1;
		}
		}
		return 1;
		}
		}
		}
		case DIALOG_ADMINISTRACION:
		{
		if(!response) return 1;
		switch(listitem)
		{
		case 0: ShowDialog(playerid, DIALOG_EMPLEADOS);
		case 1: ShowDialog(playerid, DIALOG_ARMAS_FABRICA);
		case 2: ShowDialog(playerid, DIALOG_CHALE_FABRICA);
		case 3: ShowDialog(playerid, DIALOG_FABRICA_VEH);
		case 4://Distración
		{
        for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
		{
		new vehicleid = FABRICAS_INFO[ID][f_VEHICLES][1];
		if(IsVehicleOccupied(vehicleid)) return SendClientMessage(playerid,-1,"Este auto está ocupado.");
		SetVehiclePosEx(vehicleid, -2000.0254,208.3542,1035.9175);
		SetVehicleZAngle(vehicleid, 291.0907); 
		RepairVehicle(vehicleid);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
		FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;
        FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;                  
		LinkVehicleToInterior(vehicleid, FABRICAS_INFO[ID][f_INTERIOR]);
		SetVehicleVirtualWorldEx(vehicleid, FABRICAS_INFO[ID][f_VW]);
		SetVehicleHealth(vehicleid, 5000.0);
		SendClientMessage(playerid,-1,"Regresaste el vehículo de {f21111}distracción{FFFFFF} a la {FF0000}fábrica de metanfetamina");
		return 1;
		}
		}
		}
		}
		}
		case DIALOG_EMPLEADOS:
		{
		if(!response) return ShowDialog(playerid, DIALOG_ADMINISTRACION);
		switch(listitem)
		{
		case 0: ShowDialog(playerid, DIALOG_EMPLEADOS2);
		case 1:
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][10] != 0) return SendClientMessage(playerid,-1,"Tu fábrica ya cuenta con atención médica.");
		if(2000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid, -1,"La fabrica no cuenta con el dinero necesario.");
		FABRICAS_INFO[ID][f_TIPO_ACTOR][10] = 276;
		if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][10]))
		{
		FABRICAS_INFO[ID][f_ACTORES][10] = CreateDynamicActor(276, -2022.5638,215.6430,1035.8162,302.6615,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		}
		ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][10], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		SendClientMessage(playerid,-1,"Contrataste un {f21111}nuevo empleado {FFFFFF}para la fábrica, el costo fue de {f21111}$2.000.000");
		QuitarDineroFabrica(ID, 2000000);
		SetDynamicActorInvulnerable(FABRICAS_INFO[ID][f_ACTORES][10], false);
		ActualizarLabelsFabrica(ID);
		return 1;
		}
		}
		case 2:
		{
        for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		if(800000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid, -1,"La fabrica no cuenta con el dinero necesario.");
        new count;
		for(new i = 5; i < 10; i++)
		{
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][i] == 0)
		{
		if(i == 0) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(66, -1983.3815,207.0429,1040.0468,76.4343, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 1) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(163, -2010.1060,208.9797,1035.8162,272.1400, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 2) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(223, -2016.1063,233.2106,1035.8162,229.3722, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
        if(i == 3) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(166, -2022.6560,243.8168,1035.8162,145.2300, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 4) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(124, -2023.5002,244.8579,1035.8389,1.5771, 1, 100.0, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
        FABRICAS_INFO[ID][f_TIPO_ACTOR][i] = 1;

        SendClientMessage(playerid,-1,"Contrataste un {f21111}nuevo empleado {FFFFFF}para la fábrica.");
        QuitarDineroFabrica(ID, 800000);
        SetDynamicActorInvulnerable(FABRICAS_INFO[ID][f_ACTORES][i], false);
        ActualizarLabelsFabrica(ID);
        count ++;
        return 1;
		}
		}
		if(count == 0) return SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
		}
		}
        }
		}
		case DIALOG_EMPLEADOS2:
		{
		if(!response) return ShowDialog(playerid, DIALOG_EMPLEADOS);
		switch(listitem)
		{
		case 0:
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
        if(1000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid, -1,"La fabrica no cuenta con el dinero necesario.");
	    new count;
		for(new i = 0; i < 5; i++)
		{
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][i] == 0)
		{
		if(i == 0) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(146, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 1) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(146, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 2) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(146, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 3) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(146, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 4) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(146, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		FABRICAS_INFO[ID][f_TIPO_ACTOR][i] = 1;
        FABRICAS_INFO[ID][f_ESTADO_COCINERO][i] = 1;
        ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][i], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		SendClientMessage(playerid,-1,"Has contratado {3399FF}un moledor de cristal{FFFFFF}, el costo fue de {f21111}$1.000.000");
        QuitarDineroFabrica(ID, 1000000);
        SetDynamicActorInvulnerable(FABRICAS_INFO[ID][f_ACTORES][i], false);
        ActualizarLabelsFabrica(ID);
        count ++;
        return 1;
		}
		}
		if(count == 0) return SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
		}
		}
		case 1:
		{
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
        if(1000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid, -1,"La fabrica no cuenta con el dinero necesario.");
		new count;
		for(new i = 0; i < 5; i++)
		{
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][i] == 0)
		{
		if(i == 0) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(145, -2016.4310,227.9705,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 1) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(145, -2012.5667,226.0623,1035.8225,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 2) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(145, -2008.7354,227.9745,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 3) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(145, -2004.8615,226.0628,1035.8162,0.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		if(i == 4) if(!IsValidDynamicActor(FABRICAS_INFO[ID][f_ACTORES][i])) FABRICAS_INFO[ID][f_ACTORES][i] = CreateDynamicActor(145, -2001.0369,227.9719,1035.8162,180.0000,1,100,FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
		FABRICAS_INFO[ID][f_TIPO_ACTOR][i] = 2;
        FABRICAS_INFO[ID][f_ESTADO_COCINERO][i] = 1;
        ApplyDynamicActorAnimation(FABRICAS_INFO[ID][f_ACTORES][i], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
		SendClientMessage(playerid,-1,"Has contratado {3399FF}un moledor de cristal{FFFFFF}, el costo fue de {f21111}$1.000.000");
        QuitarDineroFabrica(ID, 1000000);
        SetDynamicActorInvulnerable(FABRICAS_INFO[ID][f_ACTORES][i], false);
        ActualizarLabelsFabrica(ID);
        count ++;
        return 1;
		}
		}
		if(count == 0) return SendClientMessage(playerid,-1,"{EB0000}No puedes{FFFFFF} contratar más empleados de esta clase.");
		}
		}
		}
		}
		case DIALOG_FABRICA_VEH:
		{
		if(!response) return ShowDialog(playerid, DIALOG_ADMINISTRACION);
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
       	if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
        {
        new vehicleid = FABRICAS_INFO[ID][f_VEHICLES][0];
        if(IsVehicleOccupied(vehicleid)) return SendClientMessage(playerid,-1,"Este auto está ocupado.");	    
		FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
        SetVehiclePosEx(vehicleid, -2004.7108,213.2912,1035.9205);
		SetVehicleZAngle(vehicleid, 269.5182);
        RepairVehicle(vehicleid);
	    FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
		FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
		FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
        FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;
	    for(new slot = 0; slot < MAX_OBJETOS; slot++)
	    {
	    VEHICLE_OBJECTS[ vehicleid ][slot][vobject_ATTACHED] = false;
		UpdateVehicleAttachedObject(vehicleid, slot);
		}
		SetVehicleHealth(vehicleid, 5000.0);
		LinkVehicleToInterior(vehicleid, FABRICAS_INFO[ID][f_INTERIOR]);
		SetVehicleVirtualWorldEx(vehicleid, FABRICAS_INFO[ID][f_VW]);
		SendClientMessage(playerid,-1,"Regresaste el vehículo a la {FF0000}fábrica de metanfetamina");
		Streamer_Update(playerid);
		return 1;
		}
	    }
		return 1;
		}
		case DIALOG_CHALE_FABRICA:
		{
		if(!response) return ShowDialog(playerid, DIALOG_ADMINISTRACION);
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
        {
		new cantidadchale, cantidadmaxima = 23, cantidadxchale = 50000;
	    if(FABRICAS_INFO[ID][f_CHALECOS] > 14 && FABRICAS_INFO[ID][f_CHALECOS] <= 23)
	    {
	    cantidadchale = cantidadmaxima - FABRICAS_INFO[ID][f_CHALECOS];
		cantidadxchale = cantidadxchale * cantidadchale;
	    }
	    else
		{
		cantidadchale = 10;
		cantidadxchale = 500000;
		}
		if(FABRICAS_INFO[ID][f_CHALECOS] >= 23) return SendClientMessage(playerid,-1,"La chalequería está llena.");
		if(cantidadxchale > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {FF0000}fabrica de metanfetamina");
	    SendClientMessageEx(playerid,-1,"Compraste un paquete de {f21111}%d{ffffff} chalecos anti-balas para la fábrica, el costo fue de {f21111}$%s", cantidadchale, number_format(cantidadxchale));
		FABRICAS_INFO[ID][f_CHALECOS] += cantidadchale;
		CargarChalecosFabrica(ID);
		QuitarDineroFabrica(ID, cantidadxchale);
     	ActualizarLabelsFabrica(ID);
     	return 1;
        }
		}
		}
		case DIALOG_ARMAS_FABRICA:
		{
		if(!response) return ShowDialog(playerid, DIALOG_ADMINISTRACION);
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
        {
		switch(listitem)
		{
		case 0:
		{
		if(10000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {FF0000}fabrica de metanfetamina");
		if(FABRICAS_INFO[ID][f_SNIPER] > 0)
		{
		SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
		return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos los Snipers de el estante.");
		}
		QuitarDineroFabrica(ID, 10000000);
		FABRICAS_INFO[ID][f_SNIPER] = 10;
		CargarSniperFabrica(ID);
		SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fábrica.");
		}
		case 1:
		{
		if(4000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {FF0000}fabrica de metanfetamina");
		if(FABRICAS_INFO[ID][f_RECORTADA] > 0)
		{
		SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
		return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Escopetas recortadas de el estante.");
		}
		QuitarDineroFabrica(ID, 4000000);
		FABRICAS_INFO[ID][f_RECORTADA] = 10;
		CargarRecortadasFabrica(ID);
		SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fábrica.");
		}
		case 2:
		{
		if(2000000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {FF0000}fabrica de metanfetamina");
		if(FABRICAS_INFO[ID][f_UZI] > 0)
		{
		SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
		return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Uzi de el estante.");
		}
		QuitarDineroFabrica(ID, 2000000);
		FABRICAS_INFO[ID][f_UZI] = 10;
		CargarUziFabrica(ID);
		SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fábrica.");
		}
		case 3:
		{
		if(2500000 > FABRICAS_INFO[ID][f_DINERO]) return SendClientMessage(playerid,-1,"No hay el dinero suficiente en tu {FF0000}fabrica de metanfetamina");
		if(FABRICAS_INFO[ID][f_TEC9] > 0)
		{
		SendClientMessage(playerid,-1,"No puedes comprar más armas, el límite es de 10");
		return SendClientMessage(playerid,-1,"Si quieres comprar más armas, saca todos las Tec9 de el estante.");
		}
		QuitarDineroFabrica(ID, 2500000);
		FABRICAS_INFO[ID][f_TEC9] = 10;
		CargarTec9Fabrica(ID);
		SendClientMessage(playerid,-1,"Compraste un paquete de armas para la fábrica.");
	    }
		}
        return 1;
		}
		}
		}
		case DIALOG_SACAR_ARMAS_FABRICA:
		{
		if(!response) return 1;
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
        {
		switch(listitem)
		{
		case 0:
		{
		if(FABRICAS_INFO[ID][f_SNIPER] == 0) return SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(34)] == 34) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");

		DarArma(playerid, 34);
		CargarSniperFabrica(ID, true);
		}
		case 1:
		{
		if(FABRICAS_INFO[ID][f_RECORTADA] == 0) return SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(26)] == 26) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
		DarArma(playerid, 26);
		CargarRecortadasFabrica(ID, true);
		}
		case 2:
		{
		if(FABRICAS_INFO[ID][f_UZI] == 0) return SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(28)] == 28) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");

		DarArma(playerid, 28);
		CargarUziFabrica(ID);
		}
		case 3:
		{
		if(FABRICAS_INFO[ID][f_TEC9] == 0) return SendClientMessage(playerid,-1,"{FF0000}No quedan{FFFFFF} más armas de esta clase.");
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(32)] == 32) return SendClientMessage(playerid,-1,"Ya tienes equipada un arma de estas.");
		DarArma(playerid, 32);
		CargarTec9Fabrica(ID);
		}
		}
		return 1;
		}
		}
		}
		case DIALOG_FABRICA_DESBUG:
		{
		if(!response) return 1;
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
	    {
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(PLAYER_INFO[playerid][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
        {
		switch(listitem)
		{
		case 0://Cajas del almacen
		{
		SendClientMessage(playerid,-1,"Las cajas de la fabrica fueron actualizadas.");
		ActualizarAlmacenFabrica(ID);
		ActualizarLabelsFabrica(ID);
		return 1;
		}
		case 1://Recargar moledores de cristal
		{
		SendClientMessage(playerid,-1,"Los empleados de la fabrica fueron actualizados.");
		CargarActoresFabrica(ID);
		ActualizarLabelsFabrica(ID);
		return 1;
		}
		case 2://Recargar cocinas de cristal
		{
		SendClientMessage(playerid,-1,"Las cocinas de la fabrica fueron actualizadas.");
		CargarCocinaFabrica(ID);
		ActualizarLabelsFabrica(ID);
		return 1;
		}
		case 3://Dinero fabrica
		{
		SendClientMessage(playerid,-1,"El dinero de la fabrica fue actualizado.");
		ActualizarDineroFabrica(ID);
		ActualizarLabelsFabrica(ID);
		return 1;
		}
		}
		}
		}
		return 1;
		}
		case DIALOG_MENU_DESBAN:
		{
	    if(!response) return 1;
		    
		mysql_format(handle_db, Query,sizeof(Query),"UPDATE `usuarios` SET `Baneado`='0' WHERE `ID`='%d'", PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][listitem]);
		mysql_query(handle_db, Query, false);
			
		SendClientMessage(playerid, -1, "El usuario ha sido desbaneado.");
		ShowDialog(playerid, DIALOG_MENU_DESBAN);
		return 1;
		}
		case DIALOG_ACENTO:
		{
		if(!response) return 1;
		SendClientMessageEx(playerid, -1, "Ahora tu acento es {f21111}%s{FFFFFF}, usa {f21111}/acento{FFFFFF} para cambiarlo.", GetNameAcento(listitem));
		PLAYER_INFO[playerid][pAcento] = PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][listitem];
		    
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Acento`='%d' WHERE `Username`='%e'", PLAYER_INFO[playerid][pAcento], PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);
		return 1;
		}
		//new dialog
	}
	return 0;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(areaid == AREA_DISCOTEC[0])
	{
	    if(DISCOTEC_INFO[d_USED])
        {
	        PLAYER_TEMP[playerid][p_IN_DISCOTEC] = true;
            PlayAudioStreamForPlayerEx(playerid, DISCOTEC_INFO[d_URL]);
		}
		else if(!DISCOTEC_INFO[d_USED])
		{
		    StopAudioStreamForPlayer(playerid);
		    PLAYER_TEMP[playerid][p_IN_DISCOTEC] = false;
		}
	}
    if(areaid == AreaCabinas[1])
	{
		if(CabinasOcupadasEmisoras[1][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[1][1];
			if(Emisoras[id][CabinaOcupada] == 1)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					new stringa[128];
					CabinasOcupadasEmisoras[1][2]++;
					format(stringa, sizeof(stringa), "Emisora: 1 {f21111}- %s", Emisoras[id][NombreEmisora]);
					SendClientMessage(playerid, -1, stringa);
					format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
					PlayAudioStreamForPlayerEx(playerid, stringa);
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[2])
	{
		if(CabinasOcupadasEmisoras[2][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[2][1];
			if(Emisoras[id][CabinaOcupada] == 2)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					new stringa[128];
					CabinasOcupadasEmisoras[2][2]++;
					format(stringa, sizeof(stringa), "Emisora: 2 {f21111}- %s", Emisoras[id][NombreEmisora]);
					SendClientMessage(playerid, -1, stringa);
					format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
					PlayAudioStreamForPlayerEx(playerid, stringa);
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[3])
	{
		if(CabinasOcupadasEmisoras[3][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[3][1];
			if(Emisoras[id][CabinaOcupada] == 3)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					new stringa[128];
					CabinasOcupadasEmisoras[3][2]++;
					format(stringa, sizeof(stringa), "Emisora: 3 {f21111}- %s", Emisoras[id][NombreEmisora]);
					SendClientMessage(playerid, -1, stringa);
					format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
					PlayAudioStreamForPlayerEx(playerid, stringa);
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[4])
	{
	if(CabinasOcupadasEmisoras[4][0] != 0)
	{
	new id = CabinasOcupadasEmisoras[4][1];
	if(Emisoras[id][CabinaOcupada] == 4)
	{
	if(Emisoras[id][TransEmisora] == 1)
	{
	new stringa[128];
	CabinasOcupadasEmisoras[4][2]++;
	format(stringa, sizeof(stringa), "Emisora: 4 {f21111}- %s", Emisoras[id][NombreEmisora]);
	SendClientMessage(playerid, -1, stringa);
	format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
	PlayAudioStreamForPlayerEx(playerid, stringa);
	return 1;
	}
	}
	}
	}
    foreach(new id : Player)
	{
	if(IsPlayerConnected(id))
	{
	for(new i = 0; i != MAX_T; i ++)
	{
	if(!TERRITORIOS_INFO[i][Territorio_Valido]) continue;
	if(IsPlayerInDynamicArea(id, TERRITORIOS_INFO[i][Territorio_Area]))
	{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, TERRITORIOS_INFO[i][Territorio_Area], E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
	case AREA_TYPE_GANGZONE:
    {
	new index = info[1];
	if(TERRITORIOS_INFO[index][Territorio_Valido])
    {
	new message[145];
	if(PLAYER_INFO[id][pt_LAST_TERRITORY] == index) continue;
	PLAYER_INFO[id][pt_LAST_TERRITORY] = index;							
	if(BandasInfo[PLAYER_INFO[id][pFaccion]][UltimoAtaque] > gettime()) return 1;
	if(PLAYER_INFO[id][pFaccion] > 1)
	if(PLAYER_INFO[id][pFaccion] > 2)
	{
	if(TERRITORIOS_INFO[index][Territorio_BandaID2])
	{
	format(message, sizeof message, "Entraste a un territorio dominado por {%06x}%s", BandasInfo[TERRITORIOS_INFO[index][Territorio_BandaID2]][BColor] >>> 8, BandasInfo[TERRITORIOS_INFO[index][Territorio_BandaID]][BNombre]);
    SendClientMessage(id, -1, message);
	}
	if(TERRITORIOS_INFO[index][Territorio_EnGuerra])
	{
	format(message, sizeof message, "{FFFFFF}Este barrio está siendo atacado por la banda {%06x}%s", BandasInfo[TERRITORIOS_INFO[index][Territorio_BandaID2]][BColor] >>> 8, BandasInfo[TERRITORIOS_INFO[index][Territorio_AtacanteID]][BNombre]);
	SendClientMessage(id, -1, message);
	new r, g, b, a;
	HexToRGBA(BandasInfo[PLAYER_INFO[id][pFaccion]][BColor], r, g, b, a);
	TextDrawShowForPlayer(id, Territorio_TD[0]);
	TextDrawShowForPlayer(id, Territorio_TD[1]);
	}
	}
	}
	}
	}
	}
	}
	}
	}
	if(areaid == AreaQuimicos)
	{
		if(TienePrendaFabrica(playerid)) return 1;
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
		{
		    if(!FABRICAS_INFO[ID][f_VALID]) continue;
            if(FABRICAS_INFO[ID][f_INTERIOR] == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(playerid) == FABRICAS_INFO[ID][f_VW])
            {
				if(FABRICAS_INFO[ID][f_CESTADO][0] == 1 || FABRICAS_INFO[ID][f_CESTADO][1] == 1 || FABRICAS_INFO[ID][f_CESTADO][2] == 1)
				{
					TextDrawShowForPlayer(playerid, Sangre2);
					FabricaToxica[playerid] = 999999999;
					SendClientMessage(playerid,-1,"Entraste en un area de {00db00}gases tóxicos{FFFFFF}, perderás {FF0000}salud{FFFFFF} por no usar una {FFFF04}mascara anti-gas");
					return 1;
				}
			}
 		}
	}
	return 1;
}
public OnGameModeExit()
{
	mysql_close(handle_db);
	return 1;
}
public OnGameModeInit()
{
	for(new t=0; t < MAX_NPC_ROBOS; t++)
	{
		RoboTiendas[t][TiendaLadron] = INVALID_PLAYER_ID;
		RoboTiendas[t][TiendaRobada] = 0;
	}
	for(new i = 0; i < GetVehiclePoolSize(); i++)
	{
		VehicleFuel[i] = 100;
	}
	for(new e=1; e<MAX_ENCARGOS; e++)
	{
		Encargo[e][MisionActiva] = 0;
		Encargo[e][ObjetivoTake] = 0;
		Encargo[e][Bajas] = 0;
		Encargo[e][Tiene9mm] = 0;
	}
	for(new i; i < MAX_MARIHUANA; i++)
	{
		Marihuana[i][Status] = 0;
		Marihuana[i][Created] = 0;
		format(Marihuana[i][Owner], 24, "Nadie");
	}
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
    {
        for(new TDN = 0; TDN < 4; TDN++)
        {
            TextDrawsNotification[playerid][TDN][TextDraw] = PlayerText:-1;
            TextDrawsNotification[playerid][TDN][Hide] = -1;
            TextDrawsNotification[playerid][TDN][Timer] = -1;
        }
    }
    LoadNPCs();
    SetTimer("OneSecTimer",1000,1);
	new horas,minutos,segundos, day, month,year;
	getdate(year, month, day);
	mysql_log(ERROR);
	EnableVehicleFriendlyFire();
	PaydayDado = 0;
	ExpObj = 0;
	BoxObj = 0;
	ConObj = 0;
	Humo1Ojb = 0;
	Humo2Ojb = 0;
	ShowPlayerMarkers(1);
	gettime(horas,minutos,segundos);
	CrackCamello = 15000;
	MarihuanaCamello = 15000;
	MedicamentosCamello = 15000;
	DineroCamello = 1000000;
	CocainaCamello = 15000;
	HeroinaCamello = 15000;
	/*******************************OBJETOS*******************************/
	CabinasOcupadasEmisoras[1][0] = 0;
	CabinasOcupadasEmisoras[1][1] = -1;
	CabinasOcupadasEmisoras[2][0] = 0;
	CabinasOcupadasEmisoras[2][1] = -1;
	CabinasOcupadasEmisoras[3][0] = 0;
	CabinasOcupadasEmisoras[3][1] = -1;
	CabinasOcupadasEmisoras[4][0] = 0;
	CabinasOcupadasEmisoras[4][1] = -1;
	AreaCabinas[1] = CreateDynamicRectangle(348.7999,189.7051, 334.6652,175.9970);
	AreaCabinas[2] = CreateDynamicRectangle(348.8812,163.4289, 334.2779,154.2770);
	AreaCabinas[3] = CreateDynamicRectangle(348.8767,153.6340, 341.2415,143.9793);
	AreaCabinas[4] = CreateDynamicRectangle(360.3442,152.6125, 366.6700,162.1205);
	CabinasTextos[1] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N1]", COLOR_WHITE, 349.4757, 179.4740, 1041.7256, 6);
	CabinasTextos[2] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N2]", COLOR_WHITE, 349.5319, 161.5695, 1041.6917, 6);
	CabinasTextos[3] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N3]", COLOR_WHITE, 349.5096, 150.0904, 1041.7167, 6);
	CabinasTextos[4] = CreateDynamic3DTextLabel("{FFFFFF}Radio disponible {C0C0C0}[N4]", COLOR_WHITE, 361.9887, 152.0883, 1041.7084, 6);
	AreaQuimicos = CreateDynamicRectangle(-1985.6500,189.3372,-2003.8066,204.9793);
	AREA_SANCION = CreateDynamicCube(-1002.3224, -6646.6099, 51.8400, -982.2141, -6666.8076, 57.8839, 0, -1);
	TEX_CV[0] = CreateDynamicObject(18660, 275.96750, 1864.31372, 10.09290,   0.00000, 0.00000, -90.00000);
    TEX_CV[1] = CreateDynamicObject(18660, 277.2173, 1864.31372, 9.000000,   0.00000, 0.00000, -90.00000);
    TEX_CV[2] = CreateDynamicObject(18660, 275.96750, 1864.31372, 9.000000,   0.00000, 0.00000, -90.00000);
    TEX_CV[3] = CreateDynamicObject(18660, 274.66751, 1864.31372, 9.00000,   0.00000, 0.00000, -90.00000);
    TEX_CV[7] = CreateDynamicObject(18660, 258.45331, 107.15300, 1003.65863,   0.00000, 0.00000, -90.00000);
    TEX_CV[8] = CreateDynamicObject(18660, 257.17542, 107.21350, 1003.62000,   0.00000, 0.00000, -90.00000);
	TEX_CV[9] = CreateDynamicObject(18660, 255.89540, 107.21350, 1003.62000,   0.00000, 0.00000, -90.00000);
    TEX_CV[10] = CreateDynamicObject(18660, 257.17542, 107.21350, 1004.79999,   0.00000, 0.00000, -90.00000);
    
    TEX_CV[4] = CreateDynamicObject(2737, 257.37573, 107.20682, 1003.40790,   0.00000, 90.00000, 180.00000, 1, 10);
    TEX_CV[5] = CreateDynamicObject(2737, 256.04581, 107.16520, 1003.40790,   0.00000, 90.00000, 180.00000, 1, 10);
	TEX_CV[6] = CreateDynamicObject(2737, 258.62689, 107.16520, 1003.40790,   0.00000, 90.00000, 180.00000, 1, 10);

    SetDynamicObjectMaterialText(TEX_CV[0], 0, "Curriculum", 90, "Comic Sans MS", 18, 0, 0xFFFFFFFF, 0, 1);
	SetDynamicObjectMaterialText(TEX_CV[10], 0, "Curriculums", 90, "Comic Sans MS", 18, 0, 0xFFFFFFFF, 0, 1);
	
	for(new i = 0; i < sizeof PointVehicleTunnin; i++) CreateDynamic3DTextLabel("Usa {f21111}'H' {ffffff}para tunear tu vehículo", 0xFFFFFFFF, PointVehicleTunnin[i][0], PointVehicleTunnin[i][1], PointVehicleTunnin[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
    for(new i; i < sizeof compraMochila; i++) CreateDynamic3DTextLabel("{f21111}Mochila{FFFFFF}\n\nCosto: {00FF00}25"SERVER_COIN"{FFFFFF}\nUsa {f21111}/comprar mochila{FFFFFF} para aquirir.", COLOR_WHITE, compraMochila[i][0], compraMochila[i][1], compraMochila[i][2], 15.0, .testlos = true, .worldid = 0, .interiorid = 0);
	//discoteca
	AREA_DISCOTEC[0] = CreateDynamicRectangle(473.35083, -27.16781, 507.53796, -0.76203, -1, 17);   //area discoteca
	AREA_DISCOTEC[1] = CreateDynamicRectangle(477.21097, -21.18265, 473.36618, -10.23780, -1, 17);	//area dj
	Boton_discoteca[0] = CreateButton(475.56113, -21.06126, 1003.93793, 180.0);
	Boton_discoteca[1] = CreateButton(475.56110, -21.42130, 1003.5,90.0);
	puerta_discoteca[0] = CreateDynamicObject(1495, 473.81259, -21.23030, 1002.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14820, 476.45499, -14.96500, 1003.54761,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2229, 477.09271, -13.92470, 1002.33807,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 477.09271, -16.66680, 1002.33807,   0.00000, 0.00000, -90.00000);
	DISCOTEC_INFO[d_USED] = false;
	DISCOTEC_INFO[d_DJ] = -1;
	
	// Entrada
	CreateDynamicObject(19273, 386.730011, 174.699997, 1040.550049, 0.000000, 0.000000, 177.910004);
	CreateDynamicObject(19273, 386.700012, 174.199997, 1040.550049, 0.000000, 0.000000, 358.700012);
	Botones[2] = CreateButton(386.7000, 174.4800, 1040.5500);
	// Sala 1
	CreateDynamicObject(19273, 349.359985, 178.309998, 1040.449951, 0.000000, 0.000000, 89.040001);
	CreateDynamicObject(19273, 348.660004, 178.289993, 1040.449951, 0.000000, 0.000000, 268.260010);
	Botones[4] = CreateButton(349.0600, 178.2900, 1040.4500);
	// Sala 2
	CreateDynamicObject(19273, 349.369995, 160.309998, 1040.449951, 0.000000, 0.000000, 89.040001);
	CreateDynamicObject(19273, 348.790009, 160.309998, 1040.449951, 0.000000, 0.000000, 268.260010);
	Botones[6] = CreateButton(349.0272, 160.3499, 1040.4500);
	// Sala 3
	CreateDynamicObject(19273, 349.380005, 148.850006, 1040.449951, 0.000000, 0.000000, 90.190002);
	CreateDynamicObject(19273, 348.779999, 148.839996, 1040.449951, 0.000000, 0.000000, 269.869995);
	Botones[8] = CreateButton(349.0400, 148.8500, 1040.4500);
	// Sala 4
	CreateDynamicObject(19273, 363.119995, 152.690002, 1040.449951, 0.000000, 0.000000, 179.509995);
	CreateDynamicObject(19273, 363.160004, 152.210007, 1040.449951, 0.000000, 0.000000, 0.000000);
	Botones[10] = CreateButton(363.1623, 152.4068, 1040.4500, 179.5100);
	// Sala de entrada
	PuertasDeBotones[0] = CreateDynamicObject(1500, 390.000000, 174.539993, 1039.109985, 0.000000, 0.000000, 180.139999);
	// Sala 1
	PuertasDeBotones[1] = CreateDynamicObject(1500, 349.260010, 178.690002, 1039.109985, 0.000000, 0.000000, 90.699997);
	// Sala 2
	PuertasDeBotones[2] = CreateDynamicObject(1500, 349.260010, 160.729996, 1039.109985, 0.000000, 0.000000, 90.699997);
	// Sala 3
	PuertasDeBotones[3] = CreateDynamicObject(1500, 349.179993, 149.229996, 1039.109985, 0.000000, 0.000000, 90.699997);
	// Sala 4
	PuertasDeBotones[4] = CreateDynamicObject(1500, 361.209991, 152.330002, 1039.109985, 0.000000, 0.000000, 0.330000);
	//LVPD+BARRERAS+PUERTAS
	Puerta[0] = CreateObject(1493,-1256.8500, 2096.6799, 1245.5300,0.0000, 0.0000, 0.0000);
	Puerta[1] = CreateObject(1493,-1244.6700, 2115.6001, 1245.5200,0.0000, 0.0000, 90.0000);
	Puerta[2] = CreateObject(1493,-1244.7400, 2085.0000, 1245.5300,0.0000, 0.0000, 90.0000);
	Puerta[3] = CreateObject(1493,-1244.4800, 2087.7700, 1245.5300,0.0000, 0.0000, 0.0000);
	Puerta[4] = CreateObject(1493,-1232.5699, 2027.9100, 1245.5300,0.0000, 0.0000, 90.0000);
	barrera = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90);
	porton = CreateDynamicObject(11327, 1589.267700, -1638.286499, 14.816412, 0, 0, -89.800231);
	porton1 = CreateDynamicObject(19912, -53.50741, 2643.39600, 65.24223,   0.00000, 0.00000, 93.01223);
	porton2 = CreateDynamicObject(19912, -391.41895, 2713.40015, 64.22679,  -4.08000, 1.62000, 52.88310);
	porton3 = CreateDynamicObject(19912, 2423.85425, -2083.68237, 15.03730,  0.00000, 0.00000, 92.00000);
	reja1 = CreateDynamicObject(971, 288.95001, 1415.96997, 12.90000,   0.00000, 0.00000, 90.00000);
	reja2 = CreateDynamicObject(971, 288.95001, 1407.13000, 12.90000,   0.00000, 0.00000, -90.00000);
	reja3 = CreateDynamicObject(971, 263.14999, 1416.05005, 13.05000,   0.00000, 0.00000, 90.00000);
	reja4 = CreateDynamicObject(971, 263.14999, 1407.20996, 13.05000,   0.00000, 0.00000, -90.00000);
	reja5 = CreateDynamicObject(971, 232.39000, 1420.75000, 13.17000,   0.00000, 0.00000, 0.00000);
	reja6 = CreateDynamicObject(971, 223.59000, 1420.75000, 13.17000,   0.00000, 0.00000, 180.00000);
	CreateButton(1582.40552, -1637.85229, 13.70560, 182);
	CreateButton(1582.40283, -1638.34985, 13.70560, 0.0);
	CreateButton(216.32980, 116.65350, 999.39240, 180);
	CreateButton(216.28259, 116.40660, 999.39240, 0.0);
	puerta_1 = CreateDynamicObject(1495, 1582.63, -1638.02, 12.41,   0.00, 0.00, 0.00);
	puerta_2 = CreateDynamicObject(1495, 216.32820, 116.53640, 998.04547,   0.00, 0.00, 0.00);
	puerta_3 = CreateDynamicObject(1495, 219.33839, 116.53640, 998.04547,   0.00, 0.00, 180.00);
	PuertasLVPD[1] = CreateDynamicObject(19302, 208.9700, 178.2600, 1003.2800, 0.0000, 0.0000, 90.0000);
	PuertasLVPD[2] = CreateDynamicObject(19303, 209.0100, 159.1100, 1003.2800, 0.0000, 0.0000, 90.0000);
	BotonesACA[1] = CreateButton(639.9840, -187.0800, 1277.1400);
	BotonesACA[2] = CreateButton(643.1800, -210.3840, 1277.1400);
	BotonesACA[3] = CreateButton(645.2700, -217.0220, 1277.1400);
	BotonesACA[4] = CreateButton(642.7260, -224.4200, 1277.1400, 90);
	BotonesACA[5] = CreateButton(642.6900, -237.2600, 1277.1400, 90);
	BotonesACA[6] = CreateButton(645.1000, -239.8460, 1277.1400, 180);
	PuertasACA[1] = CreateDynamicObject(1495, 638.090027, -187.119995, 1275.800049, 0.000000, 0.000000, 0.000000);      // 636.8300, -187.1200, 1275.8000
	PuertasACA[2] = CreateDynamicObject(1495, 645.059998, -210.229996, 1275.800049, 0.000000, 0.000000, 180.000000);    // 646.3500, -210.2300, 1275.8000
	PuertasACA[3] = CreateDynamicObject(1495, 645.114014, -217.080002, 1275.760010, 0.000000, 0.000000, 180.000000);    // 646.3920, -217.0800, 1275.7600
	PuertasACA[4] = CreateDynamicObject(1495, 642.770020, -226.110001, 1275.760010, 0.000000, 0.000000, 90.000000);     // 642.7700, -227.3580, 1275.7600
	PuertasACA[5] = CreateDynamicObject(1495, 642.750000, -237.466003, 1275.760010, 0.000000, 0.000000, -90.000000);    // 642.7500, -236.2000, 1275.7600
	PuertasACA[6] = CreateDynamicObject(1495, 645.270020, -239.779999, 1275.760010, 0.000000, 0.000000, 0.000000);      // 643.9860, -239.7800, 1275.7600
	controls[8] = CreateDynamicObject(968,833.4200, -2963.8000, 11.7460 , 0.0000, -90.0000, 0.0000 );
	controls[9] = CreateDynamicObject(968,833.4100, -2954.5200, 12.1000 , 0.0000, 90.0000, 0.0000 );
	controls[10] = CreateDynamicObject(969, -87.67600, -1127.18213, 0.28050,   0.00000, 0.00000, 69.50000);

	CargarCasa1();
	CargarCasa2();
	CargarCasa3();
	CargarCasa4();
	CargarCasa5();
	CargarCasa6();
	CargarCasa7();
	CargarCasa8();
	CargarCasa9();
	CargarCasa10();
	CargarCasa11();
	CargarCasa12();

	PuertasRobo[0] = CreateDynamicObject(1506, -2277.5667, -9.4666, 37.2482, 0.0000, 0.0000, 269.1064);
	PuertasRobo[1] = CreateDynamicObject(1506, 931.28186, 1974.06372, 10.61430,   0.00000, 0.00000, 0.00000);
	PuertasRobo[2] = CreateDynamicObject(1506, -2395.22778, -15.07700, 34.90210,   0.00000, 0.00000, 90.00000);
	PuertasRobo[3] = CreateDynamicObject(1498, 2373.00244, -1138.55103, 29.03120,   0.00000, 0.00000, -0.95999);
	PuertasRobo[4] = CreateDynamicObject(1504, -2728.5708, -50.4009, 6.0173,   0.00000, 0.00000, 269.9400);
	PuertasRobo[5] = CreateDynamicObject(1506, -2728.5442, -155.0267, 6.2020,   0.00000, 0.00000, 269.7597);
	PuertasRobo[6] = CreateDynamicObject(1498, 1762.12488, -2100.72290, 12.96590,   0.00000, 0.00000, 0.00000);
	PuertasRobo[7] = CreateDynamicObject(1498, 2485.149902, -1997.630005, 13.030000, 0.000000, 0.000000, 0.000000, -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD); // 0
	PuertasRobo[8] = CreateDynamicObject(1506, 1844.1000, 770.1200, 10.4400,   0.0000, 0.0000, 90.0000);
	PuertasRobo[9] = CreateDynamicObject(1506, -1449.19824, 2647.20459, 55.48900,   0.00000, 0.00000, 90.00000);
	PuertasRobo[10] = CreateDynamicObject(1506, 1343.9200, 2610.7400, 10.4000,   0.0000, 0.0000, 0.0000);
	PuertasRobo[11] = CreateDynamicObject(1506, 1666.2400, 2610.7400, 10.4000,   0.0000, 0.0000, 0.0000);
	/************************LABEL's*********************************/
 	TextoSalon = Create3DTextLabel("{FFFFFF}Puedes {F6F61D}/alquilar salon{FFFFFF} de eventos.\nCosto por hora: {00D61C}$20.000", COLOR_WHITE, -1250.3397,2093.7437,1246.6360, 7, 1, 0);
	for(new i = 0; i < sizeof(ComprarRopa);i++)
	{
		CreateDynamic3DTextLabel("{00CE00}Tienda de Ropa\n{FFFFFF}Pulsa {FFFF04}'Y'{FFFFFF} para comprar ropa",COLOR_WHITE,ComprarRopa[i][0],ComprarRopa[i][1],ComprarRopa[i][2],2,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
    }
	for(new i = 0; i < sizeof(OperacionesPositions);i++)
	{
		CreateDynamic3DTextLabel("{f21111}Operaciones bancarias\n{FFFFFF}Pulsa {FFFF04}'Y'{FFFFFF} para interactuar.",COLOR_WHITE,OperacionesPositions[i][0],OperacionesPositions[i][1],OperacionesPositions[i][2],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	for(new i = 0; i < sizeof(ActoresTunning);i++)
	{
		CreateDynamic3DTextLabel("{f21111}Recuerda no abusar del tunning\n{FFFFFF}o su vehiculo sera {f21111}borrado{FFFFFF} recuerda leer las reglas.",COLOR_WHITE,ActoresTunning[i][0],ActoresTunning[i][1],ActoresTunning[i][2],15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,-2029.7225,-119.6245,1035.1719+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,3,-1,100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'Y'{FFFFFF} para ver el listado de productos.",COLOR_WHITE,-28.0060,-89.9514,1003.5469,7.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
	CreateDynamic3DTextLabel("{FFFF04}/vender objeto",COLOR_WHITE, 216.8291,-232.7234,1.7786,7,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	CreateDynamic3DTextLabel("{FFFFFF}Compra y venta de objetos\n{FFFF04}/comprar objetos{FFFFFF} - {FFFF04}/vender objetos",COLOR_WHITE,196.3872,-231.1294,1.7786,5.0);
	EscaparLabel[0] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2277.9897,-10.2257,38.2993,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[1] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2396.0605,-14.3567,36.0650,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[2] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,2373.7302,-1136.8610,30.0583,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[3] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-1449.7598,2647.9287,56.5345,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[4] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,932.2437,1975.8787,11.6227,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[5] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2729.9800,-50.8513,7.0453,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,-2729.9695,-155.6657,7.2174,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[7] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,2485.0527,-1995.0458,14.0434,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	EscaparLabel[8] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1762.7701,-2098.9631,13.9989,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C7
	EscaparLabel[9] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1841.8738,770.7863,11.5959,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C9
	EscaparLabel[10] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1344.4647,2612.5925,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C11
	EscaparLabel[11] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/escapar{FFFFFF} para salir de la casa.",COLOR_WHITE,1666.9180,2612.6965,11.5559,23,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0); // C12
	for(new i = 0; i < sizeof(ForzarCerradurasPositions);i++)
	{
		ForzarTD[i] = CreateDynamic3DTextLabel("{FFFFFF}Para entrar a esta casa necesitas {FFFF04}/forzar cerradura",COLOR_WHITE, ForzarCerradurasPositions[i][0],ForzarCerradurasPositions[i][1],ForzarCerradurasPositions[i][2], 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	for(new i = 0; i < sizeof(RadiosPos);i++)
	{
		CreateDynamic3DTextLabel("{FFFFFF}Radio\n {FFFF04}/emisoras {FFFFFF}- {FFFF04}/apagar radio",COLOR_WHITE,RadiosPos[i][0],RadiosPos[i][1],RadiosPos[i][2],8.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	for(new i = 0; i < sizeof(RobarObjetoPositions);i++)
	{
		CreateDynamic3DTextLabel("{FFFFFF}Objetos de valor\n{FFFFFF}Pulsa {FFFF04}'H' {FFFFFF}para agarrar uno",COLOR_WHITE, RobarObjetoPositions[i][0],RobarObjetoPositions[i][1],RobarObjetoPositions[i][2], 2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	for(new sc = 0; sc < sizeof(ServicioMedicoPos);sc++)
	{
		CreateDynamicPickup(1314, 1, ServicioMedicoPos[sc][0],ServicioMedicoPos[sc][1],ServicioMedicoPos[sc][2],-1,-1,-1,100.0); 	//Dentro del Hospital
		CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/socio{FFFFFF} para hacerte socio de este hospital.\n{FFFF04}/socio ayuda{FFFFFF} para recibir ayuda.\n{FFFF04}/servicio medico{FFFFFF} para ser atendido.",COLOR_WHITE,ServicioMedicoPos[sc][0],ServicioMedicoPos[sc][1],ServicioMedicoPos[sc][2],7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, -1,-1,-1, 100.0);
	}
	for(new i = 0; i < sizeof(CosecharPositions);i++)
	{
		CreateDynamic3DTextLabel("{FFFFFF}Trabajo de cosechador\nUsa {FFFF04}/cosechar{FFFFFF} para trabajar ahora mismo.",COLOR_WHITE,CosecharPositions[i][0],CosecharPositions[i][1],CosecharPositions[i][2]+0.7,10,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0,0,-1,100.0);
		CreateDynamicPickup(1239, 23, CosecharPositions[i][0],CosecharPositions[i][1],CosecharPositions[i][2], 0, 0, -1, 100.0);
	}
	for(new i = 0; i < sizeof(VerMapasPositions);i++)
	{
		CreateDynamic3DTextLabel("{f21111}Puntos de interés{FFFFFF}\nPulsa {FFFF04}'Y'{FFFFFF} para ver el mapa.",COLOR_WHITE,VerMapasPositions[i][0],VerMapasPositions[i][1],VerMapasPositions[i][2]+0.7,10,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,0,0,0,-1,100.0);
		CreateDynamicObject(1444, VerMapasPositions[i][0],VerMapasPositions[i][1],VerMapasPositions[i][2], VerMapasPositions[i][3], VerMapasPositions[i][4], VerMapasPositions[i][5],-1,-1,-1,500.0);
	}
	for(new i = 0; i < sizeof(LlenarBaldePos); i++) CreateDynamic3DTextLabel("{5DADFF}Agua\n{FFFFFF}Aquí puedes {FFFF04}/llenar balde",COLOR_WHITE,LlenarBaldePos[i][0],LlenarBaldePos[i][1],LlenarBaldePos[i][2], 5.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
	for(new i = 0; i < sizeof(GasolineraPositions);i++)
	{
		CreateDynamic3DTextLabel("{FFFFFF}Para llenar el tanque escribe {FFFF04}/llenar tanque\n{FFFFFF}Para cargar una cantidad diferente, usa {FFFF04}/combustible [litros]\n{FFFFFF}Para comprar un bidón de 5 litros usa {FFFF04}/comprar bidon",COLOR_WHITE,GasolineraPositions[i][0],GasolineraPositions[i][1],GasolineraPositions[i][2],20,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,0,0,-1,100.0);
	}
	/********************************Actores*****************************************************/
	//Actores Academia
	CreateDynamicActor(96,663.7415,-236.8033,1276.7600,43.9748, 1,100.0,9);
	CreateDynamicActor(266,664.5109,-219.4480,1276.7600,129.0393, 1,100.0,9);
	CreateDynamicActor(265,643.4172,-236.0282,1276.7600,357.3718, 1,100.0,9);
	CreateDynamicActor(280,647.9240,-190.3933,1276.7993,135.8160, 1,100.0,9);
	CreateDynamicActor(59,628.5812,-211.7128,1276.7863,267.7645, 1,100.0,9);
	CreateDynamicActor(40,627.1611,-208.5336,1276.7897,89.9853, 1,100.0,9);
	CreateDynamicActor(307,628.4916,-192.4982,1276.7865,221.3817, 1,100.0,9);
	//ACTORES ISLA
	new IslaActor1 = CreateDynamicActor(154,870.3842,-2998.8372,3.8814,358.4109, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor1, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	new IslaActor2 = CreateDynamicActor(136,827.7870,-3022.0591,5.7904,274.2031, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor2, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 1, 0);
	new IslaActor3 = CreateDynamicActor(92, 804.8068,-3033.8596,6.0631,87.2346, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor3, "SKATE","skate_idle", 4.1, 1, 0, 0, 1, 0);
	new IslaActor4 = CreateDynamicActor(45, 713.2985,-3003.8955,3.9369,139.8708, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor4, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
	new IslaActor5 = CreateDynamicActor(18, 789.5573,-3000.6533,4.0739,143.6871, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor5, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
	new IslaActor6 = CreateDynamicActor(138, 895.3869,-3004.3044,4.6576,62.4296, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor6, "SUNBATHE","ParkSit_W_idleA", 4.1, 1, 0, 0, 1, 0);
	new IslaActor7 = CreateDynamicActor(138, 788.1647,-3002.9846,4.3914,358.9342, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	ApplyDynamicActorAnimation(IslaActor7, "SUNBATHE", "ParkSit_M_in", 4.1, 1, 0, 0, 1, 0);
	new IslaActor8 = CreateDynamicActor(140, 890.8132,-3001.8557,4.3214,233.9699, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor8, "SUNBATHE", "Lay_Bac_in", 4.1, 1, 0, 0, 1, 0);
	new IslaActor9 = CreateDynamicActor(97,781.3519,-3001.0222,4.3688,347.9118, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD -1,0);
	ApplyDynamicActorAnimation(IslaActor9, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	//ACTORES ESCUELA DE STRIP
	CreateDynamicActor(249,956.9611,-54.3932,1001.1172,268.8569, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	new EscuelaStrip3 = CreateDynamicActor(257,956.8380,-52.8452,1002.0612,269.7083, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	ApplyDynamicActorAnimation(EscuelaStrip3, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 0);
	new Actorsxx = CreateDynamicActor(123, -2172.753173, 679.367126, 55.162170, 108.508644, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	ApplyDynamicActorAnimation(Actorsxx, "COP_AMBIENT", "Coplook_loop", 4.1 , 0 , 0 , 0 , 1 , 0 ) ;
	CreateDynamicActor(125, -2181.774658, 710.965881, 53.890625, 178.695983, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	CreateDynamicActor(112, -2187.197998, 716.059631, 53.899868, 224.153121, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	CreateDynamicActor(111, -2181.458740, 715.438049, 53.891841, 150.687530, 1,100.0, 0, -1,-1,STREAMER_ACTOR_SD, -1,0);
	new piloto = CreateDynamicActor(57,  1164.0037,-1.3924,1020.6459,198.3095,1,100.0, 1, 1,INVALID_PLAYER_ID, STREAMER_ACTOR_SD, -1, 0);
	SetDynamicActorVirtualWorld(piloto,1);
	ApplyDynamicActorAnimation(piloto, "ped", "SEAT_down", 4.1 , 0 , 0 , 0 , 1 , 0);
	//STRIPTEASE
	Strips[1] = CreateActor(87, 1213.2875,-3.9009,1001.3281,261.5670);
	ApplyActorAnimation(Strips[1], "STRIP","STR_Loop_A",4.1,7,5,1,1,0);
	Strips[2] = CreateActor(178, 1219.3636,-6.2801,1001.3281,266.2902);
	Strips[3] = CreateActor(244, 1202.9968,-8.4485,1002.0255,266.6595);
	Strips[4] = CreateActor(245, 1202.8573,8.9183,1000.9219,133.9969);
	Strips[5] = CreateActor(124, 1206.0651,-13.5290,1000.9219,0.0000);
	ApplyActorAnimation(Strips[5],"COP_AMBIENT", "Coplook_loop",4.1,7,5,1,1,0);
	Strips[7] = CreateActor(152, 1208.3020,-6.1708,1001.3281,176.0823+45);
	Strips[8] = CreateActor(87, 1213.2875,-3.9009,1001.3281,261.5670);
	Strips[9] = CreateActor(246, 1221.3643,8.4586,1001.3356,261.5670);
	Strips[10] = CreateActor(90,1206.2085,-0.9576,1000.9219,174.0048);
	ApplyActorAnimation(Strips[10], "STRIP","PUN_LOOP", 4.1,7,5,1,1,0);
	Strips[11] = CreateActor(171, 501.7544,-20.4735,1000.6797,85.9272);
	SetActorVirtualWorld(Strips[11], 3);
	Stripx[2] = CreateActor(178,1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[2], 9999);
	Stripx[3] = CreateActor(244, 1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[3], 9999);
	Stripx[4] = CreateActor(245, 1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[4], 9999);
	Stripx[7] = CreateActor(152, 1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[7], 9999);
	Stripx[8] = CreateActor(87, 1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[8], 9999);
	Stripx[9] = CreateActor(246, 1203.4559,16.1060,1000.9219,325.5020);
	SetActorVirtualWorld(Stripx[9], 9999);
	
	for(new b = 0, bj = sizeof(Strips); b < bj; b++)
	{
		if(IsValidActor(Strips[b])) SetActorVirtualWorld(Strips[b], 5);
	}
	// Actores
	actors[1] = CreateActor(280, 246.404174,120.395568,1003.266967,178.847152);
	actors[2] = CreateActor(307, 238.564437,112.894973,1003.218750,268.148071);
	actors[3] = CreateActor(300, 253.797485,117.371421,1003.218750,93.306335);
	actors[4] = CreateActor(71, 219.338485,116.030166,999.015625,180.895050);
	actors[5] = CreateActor(64, 1208.2064,-6.2447,1001.3281,180.9896);
	actors[6] = CreateActor(85, 1221.3612,8.5217,1001.3356,131.3608);
	actors[7] = CreateActor(152, 1215.6638,-6.3362,1001.3281,95.1821);
	actors[8] = CreateActor(178, 1219.7606,-6.4455,1001.3281,178.2887);
	actors[9] = CreateActor(25, -1253.4526,2118.3821,1246.5457,175.7945);
	actors[10] = CreateActor(163, -1245.2422,2116.1465,1246.5457,29.4371);
	actors[11] = CreateActor(223, -1248.9423,2095.2004,1246.6360,72.3647);
	actors[12] = CreateActor(29, 2113.6404,-1872.2035,13.5469,57.5343);
	actors[13] = CreateActor(163, -1245.2422,2116.1465,1246.5457,29.4371);
	actors[14] = CreateActor(223, -1248.9423,2095.2004,1246.6360,72.3647);
	actors[15] = CreateActor(105, 2178.0217,-1773.6434,13.5420,267.4392);
	actors[16] = CreateActor(106, 2178.0293,-1779.7426,13.5317,267.6617);
	actors[17] = CreateActor(106, 2178.0220,-1776.3129,13.5368,270.2901);

	//Guardia3 LVPD
	Guardia3 = CreateActor(282, 2238.222412, 2449.497802, 11.037217, 89.597267);
	SetActorVirtualWorld(Guardia3, 0);
	//Guardia4 camionero
	Guardia4 = CreateActor(71, -1674.989624, 5.721164, 3.554687, 226.057571);
	SetActorVirtualWorld(Guardia4, 0);
	Guardia6 = CreateActor(267, -1701.200439, 688.873352, 24.890625, 84.270515);
	SetActorVirtualWorld(Guardia6, 0);
	Guardia7 = CreateActor(301, -1572.609497, 657.566528, 7.187500, 274.657836);
	SetActorVirtualWorld(Guardia7, 0);
	Guardia8 = CreateActor(281, 233.047821, 166.339050, 1003.023437, 268.459442);
	SetActorVirtualWorld(Guardia8, 7);
	Entrenador = CreateActor(49, 761.044006, -31.975740, 1000.585937, 268.381744);
	SetActorVirtualWorld(Entrenador, 0);
	Entrenador2 = CreateActor(81, 763.955139, -75.041831, 1000.656250, 357.676940);
	SetActorVirtualWorld(Entrenador2, 0);

	//actores by Prócton
	CreateActor(57, 1810.978393, -1300.798950, 65.812500, 51.239631);
	CreateActor(3, 1804.497436, -1303.756591, 93.039062, 87.539863);
	CreateActor(141, 1803.932373, -1287.233032, 13.642095, 114.823440);
	CreateActor(80, 767.066894, 14.329621, 1000.700012, 181.610961);
	CreateActor(71, 2704.813964, -2514.520263, 13.649707, 89.008201);
	CreateActor(131, -32.635578, 53.932895, 3.117187, 341.870483);
	CreateActor(128, 216.828369, -233.098983, 1.778618, 358.369598);
	CreateActor(261, 194.831649, -231.076309, 1.778618, 273.142181);
	//actores fabrica
	CreateActor(30, 35.614139, -292.886352, 2.114686, 283.343627);
	CreateActor(47, 59.118892, -294.536254, 1.578125, 2.304267);
	CreateActor(183, 83.618896, -315.884796, 1.578125, 359.315856);
	CreateActor(202, 93.779579, -311.980926, 1.578125, 89.556777);
	Guardia12 = CreateActor(71, -76.284889, -382.248352, 5.366365, 92.477394);
	SetActorVirtualWorld(Guardia12, 0);
	Hombreemisora = CreateActor(3, 393.601165, 183.666946, 1040.115600, 358.571380);
	SetActorVirtualWorld(Hombreemisora, 5);
	IslaSeguridad = CreateActor(71, 833.686462, -2958.572998, 12.137064, 55.661621);
	SetActorVirtualWorld(IslaSeguridad, 0);
	IslaSeguridad2 = CreateActor(71, 833.256469, -2959.604736, 12.121186, 218.549713);
	SetActorVirtualWorld(IslaSeguridad2, 0);

	Guardia8 = CreateActor(306, 219.108505, 1416.221191, 1091.199951, 76.925292);
	SetActorVirtualWorld(Guardia8, 15);
	Avionista = CreateActor(61, 415.143218, 2537.129150, 19.148437, 151.044891);
	SetActorVirtualWorld(Avionista, 0);
	CreateActor(163, 1222.399536, 4.901185, 1000.921875, 99.739120);  //Seguridad
	CreateActor(163, 1200.141601, 12.485798, 1000.921875, 268.917297);  //Seguridad
	Chicataxista = CreateActor(150, -2023.212890, -113.827125, 1038.818725, 114.691848);
	ApplyActorAnimation(Chicataxista, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
	SetActorVirtualWorld(Chicataxista, 5);

	SetActorVirtualWorld(actors[1], 1);
	SetActorVirtualWorld(actors[2], 1);
	SetActorVirtualWorld(actors[3], 1);
	SetActorVirtualWorld(actors[4], 1);
	SetActorVirtualWorld(actors[5], 0);
	SetActorVirtualWorld(actors[12], 1);
	SetActorVirtualWorld(actors[13], 1);

	SetActorVirtualWorld(actors[6], 12);
	ApplyActorAnimation(actors[6], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
	SetActorVirtualWorld(actors[7], 12);
	ApplyActorAnimation(actors[7], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
	SetActorVirtualWorld(actors[8], 12);
	ApplyActorAnimation(actors[8], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
	SetActorVirtualWorld(actors[9], 12);
	ApplyActorAnimation(actors[9], "STRIP","STR_Loop_A", 4.1,1,0,0,1,0);
	SetActorVirtualWorld(actors[14], 1);
	ApplyActorAnimation(actors[14], "ped", "SEAT_down", 4.1,0,0,0,1,0);
	/**************************GANGZONES**********************************/
	ModoCombate = GangZoneCreate(-2989.536, -3328.195, 2989.536, 2989.536);
	muelles[1] = GangZoneCreate(2722.127685, -2629.471923 ,2762.454345, -2565.765380);
	muelles[2] = GangZoneCreate(2762.527832, -2565.853027 ,2797.997558, -2579.947021);
	muelles[3] = GangZoneCreate(2798.801757, -2577.302246 ,2832.094482, -2573.255859);
	muelles[4] = GangZoneCreate(2832.615722, -2573.807617 ,2828.321777, -2627.952392);
	isla[1] = GangZoneCreate(922.038452, -3452.668701 ,700.301208, -3783.534179);
	isla[2] = GangZoneCreate(717.393859, -3767.105468 ,906.093017, -3469.562988);
	isla[3] = GangZoneCreate(701.250549, -3369.013916 ,937.183837, -2993.267578);
	isla[4] = GangZoneCreate(921.261047, -3008.844726 ,717.734008, -3351.821044);
	isla[5] = GangZoneCreate(656.801879, -3007.734619 ,544.053894, -3355.595947);
	isla[6] = GangZoneCreate(562.668457, -3337.038330 ,640.362731, -3024.862304);
	pistas[1] = GangZoneCreate(843.070678, -1793.588989 ,826.174377, -2283.069091);
	pistas[2] = GangZoneCreate(843.070678, -2283.069091 ,826.174377, -2841.717285);
	pistas[3] = GangZoneCreate(843.070678, -2841.717285 ,826.174377, -3034.797600);
	pistas[4] = GangZoneCreate(616.404907, -3048.325927 ,586.677856, -3313.127685);
	pistas[5] = GangZoneCreate(614.571105, -3188.577880 ,755.057922, -3173.222167);
	pistas[6] = GangZoneCreate(775.670166, -3594.243652 ,755.216369, -3609.036865);
	pistas[7] = GangZoneCreate(756.460815, -3326.789062 ,741.555236, -3743.376220);
	pistas[8] = GangZoneCreate(741.840209, -3328.061279 ,895.941589, -3033.796142);
	suelo[1] = GangZoneCreate(856.066711, -3511.261718 ,775.566467, -3711.788085);
	suelo[2] = GangZoneCreate(882.908630, -3046.814453 ,755.163879, -3174.530029);
	suelo[3] = GangZoneCreate(882.821411, -3186.812744 ,755.291809, -3314.463378);
	nuevoszonesmap[1] = GangZoneCreate(937.9760,-3049.9661 ,923.1607,-3145.1191);
	nuevoszonesmap[2] = GangZoneCreate(1006.4476,-3089.2095 ,931.1815,-3121.8298);
	nuevoszonesmap[3] = GangZoneCreate(937.5342,-3197.9429 ,923.5303,-3292.5376);
	nuevoszonesmap[4] = GangZoneCreate(1006.5470,-3236.9585,929.6905,-3269.4004);
	nuevoszonesmap[5] = GangZoneCreate(843.4049,-3355.4021,831.0949,-3402.6936);
	nuevoszonesmap[6] = GangZoneCreate(920.1868,-3488.4932,909.5975,-3583.3630);
	nuevoszonesmap[7] = GangZoneCreate(989.2953,-3527.5352,919.3427,-3560.0564);
	nuevoszonesmap[8] = GangZoneCreate(920.0563,-3641.2229,910.7339,-3736.0823);
	nuevoszonesmap[9] = GangZoneCreate(988.9786,-3680.2793,917.2717,-3712.8728);
	nuevoszonesmap[10] = GangZoneCreate(888.6401,-3770.6287,794.2590,-3789.8245);
	nuevoszonesmap[11] = GangZoneCreate(850.4891,-3785.5850,818.0027,-3854.3125);
	//

	//Tienda DP By Dark
	CreateDynamicActor(37,1205.3292,-1561.4320,13.5469,183.3104, 1,100.0,0);
	CreateDynamicActor(12,1207.7299,-1553.8644,13.5764,293.9492, 1,100.0,0);
	CreateDynamicActor(20,1219.5779,-1548.1671,13.5664,139.9990, 1,100,0,0);
	CreateDynamicActor(40,1208.0865,-1547.6019,13.6074,218.7487, 1,100,0,0);
   	//Taller Tunning Labels And Actors by Dark

   	//ACTORES SAEM
   	CreateDynamicActor(49,1322.9335,11680.2998,294.1745,182.2921, 1,100.0,0);
   	CreateDynamicActor(73,1410.1971,-1588.4276,512.5709,267.3482, 1,100.0,0);
   	CreateDynamicActor(179,1410.2018,-1594.1650,512.5807,266.2200, 1,100.0,0);
   	CreateDynamicActor(191,1410.2025,-1599.8757,512.5807,266.9718, 1,100.0,0);
   	CreateDynamicActor(287,1415.6429,-1584.7358,512.5901,187.3178, 1,100.0,0);
   	//Tienda DP
   	CreateDynamicActor(173,1220.9674,-1557.8693,13.5564,22.9694, 1,100.0,0);
   	//
    CreateDynamicPickup(1272, 1,2426.2285,-2089.3613,13.5469,-1,-1,-1,25.0);
    CreateDynamicPickup(2061, 1,892.9055,10264.3760,18.1551,-1,-1,-1,25.0);

    CreateDynamicActor(50,2437.7014,-2073.7307,13.6045,121.0357, 1,100.0,0);

    CreateDynamicActor(50,2525.7058,-2138.2351,13.5469,341.6855, 1,100.0,0);

    CreateDynamicActor(50,2532.1465,-2116.3079,13.5469,315.5765, 1,100.0,0);

    CreateDynamicActor(309,2445.9851,-2073.8723,13.6045,119.9077, 1,100.0,0);

    CreateDynamicActor(50,2455.6577,-2073.7788,13.6045,124.0437, 1,100.0,0);

    CreateDynamicActor(309,2463.6279,-2074.0227,13.6045,119.1557, 1,100.0,0);

    CreateDynamicActor(50,2474.0122,-2073.7769,13.6124,137.0392, 1,100.0,0);

    CreateDynamicActor(309,2482.4316,-2074.5574,13.6124,128.0151, 1,100.0,0);

    CreateDynamicActor(50,2491.7036,-2074.2969,13.6124,130.6471, 1,100.0,0);

    CreateDynamicActor(309,2500.1697,-2073.9268,13.6124,136.6633, 1,100.0,0);

    CreateDynamicActor(50,2511.4055,-2073.5059,13.5923,128.2265, 1,100.0,0);

    CreateDynamicActor(309,2520.2380,-2073.5156,13.5923,130.1065, 1,100.0,0);

    CreateDynamicActor(50,2528.7019,-2073.5522,13.5923,144.0187, 1,100.0,0);

    CreateDynamicActor(309,2537.3877,-2074.1941,13.5923,112.0584, 1,100.0,0);

    CreateDynamicActor(50,2518.5200,-2110.7686,13.5983,5.1087, 1,100.0,0);

    CreateDynamicActor(309,2513.2986,-2117.5681,13.5983,335.4044, 1,100.0,0);

    CreateDynamicActor(50,2508.0659,-2125.0798,13.5983,352.3246, 1,100.0,0);

    CreateDynamicActor(309,2503.2495,-2132.1907,13.5983,351.9486, 1,100.0,0);

    CreateDynamicActor(50,2487.1462,-2137.0603,13.6124,332.0204, 1,100.0,0);

    CreateDynamicActor(309,2478.0247,-2136.4961,13.6124,301.5642, 1,100.0,0);

    CreateDynamicActor(50,2468.8545,-2136.6252,13.6124,300.4362, 1,100.0,0);

    CreateDynamicActor(309,2460.7732,-2136.5596,13.6124,300.0602, 1,100.0,0);

    CreateDynamicActor(50,2448.1790,-2125.4045,13.6522,253.2711, 1,100.0,0);

    CreateDynamicActor(309,2443.5256,-2118.2383,13.6522,231.0869, 1,100.0,0);

    CreateDynamicActor(50,2438.7405,-2110.4429,13.6522,230.7109, 1,100.0,0);

    CreateDynamicActor(309,2433.7673,-2102.9631,13.6522,223.5668, 1,100.0,0);
   	//Actores chalequero
    CreateDynamicActor(29,2224.7598,-1740.1180,13.5519,173.2533, 1,100.0,0);
    CreateDynamicActor(29,2224.5723,-1745.0914,13.5552,1.6310, 1,100.0,0);
   	//
    // Tiempos
	SetTimer("cargartodo",2000, false);
	SetTimer("AutoCheats2",7000,true);
    SetTimer("BorrarMochilas",1000*60,true);
	new MySQLOpt:option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
	mysql_set_option(option_id, SERVER_PORT, 3306);
	handle_db = mysql_connect(HOST_DB, USER_DB, PASS_DB, SELE_DB,option_id);
	mysql_set_charset("latin1",handle_db);

	if(mysql_errno(handle_db) == 0)
	{
		print("-------------------------------------------");
		print("| Conexion correcta con la base de datos  |");
		print("-------------------------------------------");
	}
	else
	{
		print("|-----------------------------------------");
		print("| Conexion fallida con la base de datos   |");
		print("| El servidor se cerrara en 5 segundos... |");
		print("|-----------------------------------------");
		SendRconCommand("exit");
		return 1;
	}
    
	PrendasVIP = LoadModelSelectionMenu("PrendasVIP.txt");
	Prendas = LoadModelSelectionMenu("Prendas.txt");
	Alquilado = false;
	HorasSalon = 0;
	Personas = 0;
	PrecioSalon = 0;
	NivelSalon = 0;
	TipoEvento = 0;
	format(Alquilador,sizeof(Alquilador),"Nadie");
	format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
	format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
	AddPlayerClass(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);


	SendRconCommand("hostname RootZone Roleplay | En español ");
	SetGameModeText("RZ:RP "SERVER_VERSION"");
	SendRconCommand("mapname San Andreas");
	SendRconCommand("weburl discord.gg/DcZmpwU45q");
	SendRconCommand("language Español - Spanish");
	SendRconCommand("rcon_password "RCON_PSSWRD"");
	SendRconCommand("password  ");


	SetNameTagDrawDistance(35.0);
	ShowNameTags(1);
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	EnableStuntBonusForAll(0);
	UsePlayerPedAnims();
	AntiDeAMX();

	// Tienda
	RopaHombre = LoadModelSelectionMenu("RopaHombre.txt");
	RopaMujer = LoadModelSelectionMenu("RopaMujer.txt");
	RopaHombreEZ = LoadModelSelectionMenu("RopaHombreEZ.txt");
	RopaMujerEZ = LoadModelSelectionMenu("RopaMujerEZ.txt");
    Helrp = LoadModelSelectionMenu("helirc.txt");
    barp = LoadModelSelectionMenu("botesar.txt");
    Motosrp = LoadModelSelectionMenu("motosar.txt");
    vehrp = LoadModelSelectionMenu("vehrc.txt");

	new Dialog_Lines_String[256];
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}Color #%d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}
	Sangre = TextDrawCreate(430.000000, 100.000000, "particle:bloodpool_64");
	TextDrawLetterSize(Sangre, 0.480000, 1.120000);
	TextDrawTextSize(Sangre, 160.000000, 200.000000);
	TextDrawAlignment(Sangre, 0);
	TextDrawColor(Sangre, 0xE1E1E1FF);
	TextDrawUseBox(Sangre, 0);
	TextDrawBoxColor(Sangre, 0x80808080);
	TextDrawSetShadow(Sangre, 2);
	TextDrawSetOutline(Sangre, 0);
	TextDrawBackgroundColor(Sangre, 0x000000FF);
	TextDrawFont(Sangre, 4);
	TextDrawSetProportional(Sangre, 1);
	TextDrawSetSelectable(Sangre, 0);

	Sangre2 = TextDrawCreate(430.000000, 100.000000, "particle:bloodpool_64");
	TextDrawLetterSize(Sangre2, 0.480000, 1.120000);
	TextDrawTextSize(Sangre2, 160.000000, 200.000000);
	TextDrawAlignment(Sangre2, 0);
	TextDrawColor(Sangre2, 0x02FB00FF);
	TextDrawUseBox(Sangre2, 0);
	TextDrawBoxColor(Sangre2, 0x80808080);
	TextDrawSetShadow(Sangre2, 2);
	TextDrawSetOutline(Sangre2, 0);
	TextDrawBackgroundColor(Sangre2, 0x000000FF);
	TextDrawFont(Sangre2, 4);
	TextDrawSetProportional(Sangre2, 1);
	TextDrawSetSelectable(Sangre2, 0);

	Completonegro = TextDrawCreate(642.000000, 0.000000, "_");
	TextDrawLetterSize(Completonegro, 0.800000, 49.499992);
	TextDrawTextSize(Completonegro, -3.000000, 4.000000);
	TextDrawAlignment(Completonegro, 0);
	TextDrawColor(Completonegro, 0xFFFFFFFF);
	TextDrawUseBox(Completonegro, 1);
	TextDrawBoxColor(Completonegro, 0x000000FF);
	TextDrawSetShadow(Completonegro, 1);
	TextDrawSetOutline(Completonegro, 0);
	TextDrawBackgroundColor(Completonegro, 0x000000FF);
	TextDrawFont(Completonegro, 1);
	TextDrawSetProportional(Completonegro, 1);
	TextDrawSetSelectable(Completonegro, 0);

	LuegoDe = TextDrawCreate(214.000000, 211.000000, "Luego de algunos minutos...");
	TextDrawLetterSize(LuegoDe, 0.500000, 1.000000);
	TextDrawTextSize(LuegoDe, 1280.000000, 1280.000000);
	TextDrawAlignment(LuegoDe, 0);
	TextDrawColor(LuegoDe, 0xFFFFFFFF);
	TextDrawUseBox(LuegoDe, 0);
	TextDrawBoxColor(LuegoDe, 0x80808080);
	TextDrawSetShadow(LuegoDe, 1);
	TextDrawSetOutline(LuegoDe, 0);
	TextDrawBackgroundColor(LuegoDe, 0x000000FF);
	TextDrawFont(LuegoDe, 3);
	TextDrawSetProportional(LuegoDe, 1);
	TextDrawSetSelectable(LuegoDe, 0);

	PuticlubMedia = TextDrawCreate(305.000000, 411.000000, "Media");
	TextDrawLetterSize(PuticlubMedia, 0.250000, 0.899999);
	TextDrawTextSize(PuticlubMedia, 1280.000000, 1280.000000);
	TextDrawAlignment(PuticlubMedia, 0);
	TextDrawColor(PuticlubMedia, 0xFFFFFFFF);
	TextDrawUseBox(PuticlubMedia, 0);
	TextDrawBoxColor(PuticlubMedia, 0x80808080);
	TextDrawSetShadow(PuticlubMedia, 1);
	TextDrawSetOutline(PuticlubMedia, 0);
	TextDrawBackgroundColor(PuticlubMedia, 0x000000FF);
	TextDrawFont(PuticlubMedia, 2);
	TextDrawSetProportional(PuticlubMedia, 1);
	TextDrawSetSelectable(PuticlubMedia, 0);

	PuticlubAlta = TextDrawCreate(375.000000, 411.000000, "Alta");
	TextDrawLetterSize(PuticlubAlta, 0.250000, 0.899999);
	TextDrawTextSize(PuticlubAlta, 1280.000000, 1280.000000);
	TextDrawAlignment(PuticlubAlta, 0);
	TextDrawColor(PuticlubAlta, 0xFFFFFFFF);
	TextDrawUseBox(PuticlubAlta, 0);
	TextDrawBoxColor(PuticlubAlta, 0x80808080);
	TextDrawSetShadow(PuticlubAlta, 1);
	TextDrawSetOutline(PuticlubAlta, 0);
	TextDrawBackgroundColor(PuticlubAlta, 0x000000FF);
	TextDrawFont(PuticlubAlta, 2);
	TextDrawSetProportional(PuticlubAlta, 1);
	TextDrawSetSelectable(PuticlubAlta, 0);

	Cuadroputi = TextDrawCreate(222.000000, 386.000000, "_");
	TextDrawLetterSize(Cuadroputi, 0.340000, -0.200000);
	TextDrawTextSize(Cuadroputi, 419.000000, 2.000000);
	TextDrawAlignment(Cuadroputi, 0);
	TextDrawColor(Cuadroputi, 0xFFFFFFFF);
	TextDrawUseBox(Cuadroputi, 1);
	TextDrawBoxColor(Cuadroputi, 0xFF00FFFF);
	TextDrawSetShadow(Cuadroputi, 1);
	TextDrawSetOutline(Cuadroputi, 0);
	TextDrawBackgroundColor(Cuadroputi, 0x000000FF);
	TextDrawFont(Cuadroputi, 1);
	TextDrawSetProportional(Cuadroputi, 1);
	TextDrawSetSelectable(Cuadroputi, 0);

	Cuadroputi1 = TextDrawCreate(222.000000, 387.000000, "_");
	TextDrawLetterSize(Cuadroputi1, 0.340000, 2.599999);
	TextDrawTextSize(Cuadroputi1, 419.000000, 2.000000);
	TextDrawAlignment(Cuadroputi1, 0);
	TextDrawColor(Cuadroputi1, 0xFFFFFFFF);
	TextDrawUseBox(Cuadroputi1, 1);
	TextDrawBoxColor(Cuadroputi1, 0x000000FF);
	TextDrawSetShadow(Cuadroputi1, 1);
	TextDrawSetOutline(Cuadroputi1, 0);
	TextDrawBackgroundColor(Cuadroputi1, 0x000000FF);
	TextDrawFont(Cuadroputi1, 1);
	TextDrawSetProportional(Cuadroputi1, 1);
	TextDrawSetSelectable(Cuadroputi1, 0);

	FlechasArribaPuti = TextDrawCreate(317.299988, 401.000000, "~u~");
	TextDrawLetterSize(FlechasArribaPuti, 0.689999, 1.000000);
	TextDrawTextSize(FlechasArribaPuti, 1280.000000, 1280.000000);
	TextDrawAlignment(FlechasArribaPuti, 0);
	TextDrawColor(FlechasArribaPuti, 0xFFFF00FF);
	TextDrawUseBox(FlechasArribaPuti, 0);
	TextDrawBoxColor(FlechasArribaPuti, 0x80808080);
	TextDrawSetShadow(FlechasArribaPuti, 1);
	TextDrawSetOutline(FlechasArribaPuti, 0);
	TextDrawBackgroundColor(FlechasArribaPuti, 0x000000FF);
	TextDrawFont(FlechasArribaPuti, 1);
	TextDrawSetProportional(FlechasArribaPuti, 1);
	TextDrawSetSelectable(FlechasArribaPuti, 0);

	FlechasArribaPuti2 = TextDrawCreate(384.899994, 401.000000, "~u~");
	TextDrawLetterSize(FlechasArribaPuti2, 0.689999, 1.000000);
	TextDrawTextSize(FlechasArribaPuti2, 1280.000000, 1280.000000);
	TextDrawAlignment(FlechasArribaPuti2, 0);
	TextDrawColor(FlechasArribaPuti2, 0xFFFF00FF);
	TextDrawUseBox(FlechasArribaPuti2, 0);
	TextDrawBoxColor(FlechasArribaPuti2, 0x80808080);
	TextDrawSetShadow(FlechasArribaPuti2, 1);
	TextDrawSetOutline(FlechasArribaPuti2, 0);
	TextDrawBackgroundColor(FlechasArribaPuti2, 0x000000FF);
	TextDrawFont(FlechasArribaPuti2, 1);
	TextDrawSetProportional(FlechasArribaPuti2, 1);
	TextDrawSetSelectable(FlechasArribaPuti2, 0);
	return 1;
}

public TimerPlantas()
{
	new string[256], query[254];
	for(new e; e < MAX_MARIHUANA; e++)
	{
		if(Marihuana[e][Created] > 0)
		{
			Marihuana[e][Time] --;
			if(TimerMaria > 300) GuardarPlanta(e),TimerMaria = 0;
			TimerMaria ++;
			switch(Marihuana[e][Status])
			{
				case 1:
				{
					if(Marihuana[e][Time] < 1)
					{
						Marihuana[e][Status] = 0;
						Marihuana[e][Created] = 0;
						if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
						if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
						mysql_format(handle_db, query, sizeof(query), "DELETE FROM marihuana WHERE ID = '%d'", Marihuana[e][mID]);
						mysql_tquery(handle_db, query);
						format(Marihuana[e][Owner], 24, "Nadie");
						return true;
					}
					format(string, sizeof(string), "{91ed00}Semillas de Marihuana{FFFFFF}\nSembradas por {4C94F6}%s{FFFFFF}\nSe seca en %dm %ds\n{FFFF04}/regar{FFFFFF}", Marihuana[e][Owner], Marihuana[e][Time]/60,Marihuana[e][Time]%(60));
					if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_WHITE, string);
				}
				case 2:
				{
					new hora = Marihuana[e][Time]/3600;
					new minuto = Marihuana[e][Time]/60%(60);
					if(hora > 0 && minuto == 0)
					{
						if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
						switch(hora)
						{
							case 2: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.52, 0.000000, 0.000000, -0.000000);
							case 3: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.26, 0.000000, 0.000000, -0.000000);
							case 4: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1.78, 0.000000, 0.000000, -0.000000);
							case 5: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-2.4, 0.000000, 0.000000, -0.000000);
							default: Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1, 0.000000, 0.000000, -0.000000);
						}
					}
					if(Marihuana[e][Time] <= 0)
					{
						Marihuana[e][Status] = 3;
						Marihuana[e][Time] = 86400;
						if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
						if(!IsValidDynamicObject(Marihuana[e][Object])) Marihuana[e][Object] = CreateDynamicObject(19473, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]-1, 0.000000, 0.000000, -0.000000);
						format(string, sizeof(string), "{f21111}Planta de Marihuana{FFFFFF}\nSembrada por {f21111}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{FFFF04}/cosechar planta{FFFFFF}", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60%(60),Marihuana[e][Time]%(60));
					}
					else format(string, sizeof(string), "{f21111}Planta de Marihuana{FFFFFF}\nSembrada por {f21111}%s{FFFFFF}\nMadura en %dh %dm %ds", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60%(60),Marihuana[e][Time]%(60));
					if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_WHITE, string);
				}
				case 3:
				{
					if(Marihuana[e][Time] <= 0)
					{
						Marihuana[e][Created] = 0;
						if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
						if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
						mysql_format(handle_db, query, sizeof(query), "DELETE FROM marihuana WHERE ID = '%d'", Marihuana[e][mID]);
						mysql_tquery(handle_db, query);
						format(Marihuana[e][Owner], 24, "Nadie");
					}
					else
					{
						format(string, sizeof(string), "{f21111}Planta de Marihuana{FFFFFF}\nSembrada por {f21111}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{FFFF04}/cosechar planta{FFFFFF}", Marihuana[e][Owner],Marihuana[e][Time]/3600, Marihuana[e][Time]/60,Marihuana[e][Time]%(60));
						if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) UpdateDynamic3DTextLabelText(Marihuana[e][Etiqueta], COLOR_WHITE, string);
					}
				}
			}
		}
	}
	return 1;
}
public cargartodo()
{

	//
	SetTimer("MensajesAleatorios",100000, 1);
	//
    CV_ACTIVATE = 0;

    CargarUsers();
	CargarActores();
	CargarPuertas();
	CargarFacciones();
	CargarFabricas();
	CargarVehiculos();
	CargarTerritorios();
    CargarTablero();
    CargarCasas();
    CargarEstacionamientos();
    print(" ");
    
	mysql_query(handle_db, "UPDATE `usuarios` SET `Online` = '0'", false);

	PlayerBackGround[ _string ] = TextDrawCreate(297.000000, 158.000000, "NAME:STRING");    // Titulo (SELECTOR)
	TextDrawLetterSize(PlayerBackGround[ _string ], 0.320000, 1.000000);
	TextDrawTextSize(PlayerBackGround[ _string ], 27.000000, 178.000000);
	TextDrawAlignment(PlayerBackGround[ _string ], 2);
	TextDrawColor(PlayerBackGround[ _string ], 0xFFFFFFFF);
	TextDrawUseBox(PlayerBackGround[ _string ], 1);
	TextDrawBoxColor(PlayerBackGround[ _string ], 0x000000FF);
	TextDrawSetShadow(PlayerBackGround[ _string ], 1);
	TextDrawSetOutline(PlayerBackGround[ _string ], 0);
	TextDrawBackgroundColor(PlayerBackGround[ _string ], 0x000000FF);
	TextDrawFont(PlayerBackGround[ _string ], 1);
	TextDrawSetProportional(PlayerBackGround[ _string ], 1);
	TextDrawSetSelectable(PlayerBackGround[ _string ], 0);

	PlayerBackGround[ _button_close ] = TextDrawCreate(379.000000, 158.000000, Button_Close); // Boton para cerrar (SELECTOR)
	TextDrawLetterSize(PlayerBackGround[ _button_close ], 0.290000, 1.000000);
	TextDrawTextSize(PlayerBackGround[ _button_close ], 9.000000, 9.000000);
	TextDrawAlignment(PlayerBackGround[ _button_close ], 2);
	TextDrawColor(PlayerBackGround[ _button_close ], 0xFF0000FF);
	TextDrawUseBox(PlayerBackGround[ _button_close ], 1);
	TextDrawBoxColor(PlayerBackGround[ _button_close ], 0x000000FF);
	TextDrawSetShadow(PlayerBackGround[ _button_close ], 1);
	TextDrawSetOutline(PlayerBackGround[ _button_close ], 0);
	TextDrawBackgroundColor(PlayerBackGround[ _button_close ], 0x0B0B0B99);
	TextDrawFont(PlayerBackGround[ _button_close ], 1);
	TextDrawSetProportional(PlayerBackGround[ _button_close ], 0);
	TextDrawSetSelectable(PlayerBackGround[ _button_close ], 1);

	PlayerBackGround[ _background ][ 0 ] = TextDrawCreate(297.000000, 170.000000, "_");
	TextDrawLetterSize(PlayerBackGround[ _background ][ 0 ], 0.320000, 21.100000);
	TextDrawTextSize(PlayerBackGround[ _background ][ 0 ], 27.000000, 178.000000);
	TextDrawAlignment(PlayerBackGround[ _background ][ 0 ], 2);
	TextDrawColor(PlayerBackGround[ _background ][ 0 ], 0xFFFFFFFF);
	TextDrawUseBox(PlayerBackGround[ _background ][ 0 ], 1);
	TextDrawBoxColor(PlayerBackGround[ _background ][ 0 ], 0x000000FF);
	TextDrawSetShadow(PlayerBackGround[ _background ][ 0 ], 1);
	TextDrawSetOutline(PlayerBackGround[ _background ][ 0 ], 0);
	TextDrawBackgroundColor(PlayerBackGround[ _background ][ 0 ], 0x000000FF);
	TextDrawFont(PlayerBackGround[ _background ][ 0 ], 1);
	TextDrawSetProportional(PlayerBackGround[ _background ][ 0 ], 1);
	TextDrawSetSelectable(PlayerBackGround[ _background ][ 0 ], 0);

	PlayerBackGround[ _background ][ 1 ] = TextDrawCreate(297.000000, 170.000000, "_");
	TextDrawLetterSize(PlayerBackGround[ _background ][ 1 ], 0.320000, 10.500000);
	TextDrawTextSize(PlayerBackGround[ _background ][ 1 ], 27.000000, 178.000000);
	TextDrawAlignment(PlayerBackGround[ _background ][ 1 ], 2);
	TextDrawColor(PlayerBackGround[ _background ][ 1 ], 0xFFFFFFFF);
	TextDrawUseBox(PlayerBackGround[ _background ][ 1 ], 1);
	TextDrawBoxColor(PlayerBackGround[ _background ][ 1 ], 0x000000FF);
	TextDrawSetShadow(PlayerBackGround[ _background ][ 1 ], 1);
	TextDrawSetOutline(PlayerBackGround[ _background ][ 1 ], 0);
	TextDrawBackgroundColor(PlayerBackGround[ _background ][ 1 ], 0x000000FF);
	TextDrawFont(PlayerBackGround[ _background ][ 1 ], 1);
	TextDrawSetProportional(PlayerBackGround[ _background ][ 1 ], 1);
	TextDrawSetSelectable(PlayerBackGround[ _background ][ 1 ], 0);
	
 	//
    //
    LogoBZ[0] = TextDrawCreate(558.000000, 13.000000, "R");
	TextDrawFont(LogoBZ[0], 3);
	TextDrawLetterSize(LogoBZ[0], 0.629166, 2.649999);
	TextDrawTextSize(LogoBZ[0], 388.000000, 24.000000);
	TextDrawSetOutline(LogoBZ[0], 1);
	TextDrawSetShadow(LogoBZ[0], 3);
	TextDrawAlignment(LogoBZ[0], 1);
	TextDrawColor(LogoBZ[0], -1);
	TextDrawBackgroundColor(LogoBZ[0], 255);
	TextDrawBoxColor(LogoBZ[0], 0);
	TextDrawUseBox(LogoBZ[0], 0);
	TextDrawSetProportional(LogoBZ[0], 1);
	TextDrawSetSelectable(LogoBZ[0], 0);

	LogoBZ[1] = TextDrawCreate(569.000000, 25.000000, "oot");
	TextDrawFont(LogoBZ[1], 3);
	TextDrawLetterSize(LogoBZ[1], 0.374999, 1.199998);
	TextDrawTextSize(LogoBZ[1], 390.500000, 13.000000);
	TextDrawSetOutline(LogoBZ[1], 1);
	TextDrawSetShadow(LogoBZ[1], 0);
	TextDrawAlignment(LogoBZ[1], 1);
	TextDrawColor(LogoBZ[1], 0xEB0000FF);
	TextDrawBackgroundColor(LogoBZ[1], 255);
	TextDrawBoxColor(LogoBZ[1], 0);
	TextDrawUseBox(LogoBZ[1], 0);
	TextDrawSetProportional(LogoBZ[1], 1);
	TextDrawSetSelectable(LogoBZ[1], 0);

	LogoBZ[2] = TextDrawCreate(607.000000, 12.000000, "ld_pool:ball");
	TextDrawFont(LogoBZ[2], 4);
	TextDrawLetterSize(LogoBZ[2], 0.600000, 2.000000);
	TextDrawTextSize(LogoBZ[2], 4.500000, 4.500000);
	TextDrawSetOutline(LogoBZ[2], 1);
	TextDrawSetShadow(LogoBZ[2], 0);
	TextDrawAlignment(LogoBZ[2], 1);
	TextDrawColor(LogoBZ[2], 255);
	TextDrawBackgroundColor(LogoBZ[2], 255);
	TextDrawBoxColor(LogoBZ[2], 50);
	TextDrawUseBox(LogoBZ[2], 1);
	TextDrawSetProportional(LogoBZ[2], 1);
	TextDrawSetSelectable(LogoBZ[2], 0);

	LogoBZ[3] = TextDrawCreate(618.000000, 25.000000, "ld_pool:ball");
	TextDrawFont(LogoBZ[3], 4);
	TextDrawLetterSize(LogoBZ[3], 0.600000, 2.000000);
	TextDrawTextSize(LogoBZ[3], 4.500000, 4.500000);
	TextDrawSetOutline(LogoBZ[3], 1);
	TextDrawSetShadow(LogoBZ[3], 0);
	TextDrawAlignment(LogoBZ[3], 1);
	TextDrawColor(LogoBZ[3], -1962934017);
	TextDrawBackgroundColor(LogoBZ[3], 255);
	TextDrawBoxColor(LogoBZ[3], 50);
	TextDrawUseBox(LogoBZ[3], 1);
	TextDrawSetProportional(LogoBZ[3], 1);
	TextDrawSetSelectable(LogoBZ[3], 0);

	LogoBZ[4] = TextDrawCreate(543.000000, 25.000000, "ld_pool:ball");
	TextDrawFont(LogoBZ[4], 4);
	TextDrawLetterSize(LogoBZ[4], 0.600000, 2.000000);
	TextDrawTextSize(LogoBZ[4], 4.500000, 4.500000);
	TextDrawSetOutline(LogoBZ[4], 1);
	TextDrawSetShadow(LogoBZ[4], 0);
	TextDrawAlignment(LogoBZ[4], 1);
	TextDrawColor(LogoBZ[4], -1962934017);
	TextDrawBackgroundColor(LogoBZ[4], 255);
	TextDrawBoxColor(LogoBZ[4], 50);
	TextDrawUseBox(LogoBZ[4], 1);
	TextDrawSetProportional(LogoBZ[4], 1);
	TextDrawSetSelectable(LogoBZ[4], 0);

	LogoBZ[5] = TextDrawCreate(559.000000, 11.000000, "ld_pool:ball");
	TextDrawFont(LogoBZ[5], 4);
	TextDrawLetterSize(LogoBZ[5], 0.600000, 2.000000);
	TextDrawTextSize(LogoBZ[5], 4.500000, 4.500000);
	TextDrawSetOutline(LogoBZ[5], 1);
	TextDrawSetShadow(LogoBZ[5], 0);
	TextDrawAlignment(LogoBZ[5], 1);
	TextDrawColor(LogoBZ[5], 255);
	TextDrawBackgroundColor(LogoBZ[5], 255);
	TextDrawBoxColor(LogoBZ[5], 50);
	TextDrawUseBox(LogoBZ[5], 1);
	TextDrawSetProportional(LogoBZ[5], 1);
	TextDrawSetSelectable(LogoBZ[5], 0);

	LogoBZ[6] = TextDrawCreate(585.000000, 26.000000, "_");
	TextDrawFont(LogoBZ[6], 1);
	TextDrawLetterSize(LogoBZ[6], 0.600000, -0.299996);
	TextDrawTextSize(LogoBZ[6], 263.000000, 25.000000);
	TextDrawSetOutline(LogoBZ[6], 1);
	TextDrawSetShadow(LogoBZ[6], 0);
	TextDrawAlignment(LogoBZ[6], 2);
	TextDrawColor(LogoBZ[6], -1962934017);
	TextDrawBackgroundColor(LogoBZ[6], 255);
	TextDrawBoxColor(LogoBZ[6], 130);
	TextDrawUseBox(LogoBZ[6], 1);
	TextDrawSetProportional(LogoBZ[6], 1);
	TextDrawSetSelectable(LogoBZ[6], 0);

	LogoBZ[7] = TextDrawCreate(585.000000, 24.000000, "_");
	TextDrawFont(LogoBZ[7], 1);
	TextDrawLetterSize(LogoBZ[7], 0.600000, -0.299996);
	TextDrawTextSize(LogoBZ[7], 263.000000, 16.000000);
	TextDrawSetOutline(LogoBZ[7], 1);
	TextDrawSetShadow(LogoBZ[7], 0);
	TextDrawAlignment(LogoBZ[7], 2);
	TextDrawColor(LogoBZ[7], -1962934017);
	TextDrawBackgroundColor(LogoBZ[7], 255);
	TextDrawBoxColor(LogoBZ[7], -1962934142);
	TextDrawUseBox(LogoBZ[7], 1);
	TextDrawSetProportional(LogoBZ[7], 1);
	TextDrawSetSelectable(LogoBZ[7], 0);

	LogoBZ[8] = TextDrawCreate(587.000000, 35.000000, "Zone");
	TextDrawFont(LogoBZ[8], 3);
	TextDrawLetterSize(LogoBZ[8], 0.374999, 1.199998);
	TextDrawTextSize(LogoBZ[8], 390.500000, 13.000000);
	TextDrawSetOutline(LogoBZ[8], 1);
	TextDrawSetShadow(LogoBZ[8], 0);
	TextDrawAlignment(LogoBZ[8], 1);
	TextDrawColor(LogoBZ[8], -1);
	TextDrawBackgroundColor(LogoBZ[8], 255);
	TextDrawBoxColor(LogoBZ[8], 0);
	TextDrawUseBox(LogoBZ[8], 0);
	TextDrawSetProportional(LogoBZ[8], 1);
	TextDrawSetSelectable(LogoBZ[8], 0);

	LogoBZ[9] = TextDrawCreate(584.000000, 12.000000, "ld_pool:ball");
	TextDrawFont(LogoBZ[9], 4);
	TextDrawLetterSize(LogoBZ[9], 0.600000, 2.000000);
	TextDrawTextSize(LogoBZ[9], 4.500000, 4.500000);
	TextDrawSetOutline(LogoBZ[9], 1);
	TextDrawSetShadow(LogoBZ[9], 0);
	TextDrawAlignment(LogoBZ[9], 1);
	TextDrawColor(LogoBZ[9], -1962934017);
	TextDrawBackgroundColor(LogoBZ[9], 255);
	TextDrawBoxColor(LogoBZ[9], 50);
	TextDrawUseBox(LogoBZ[9], 1);
	TextDrawSetProportional(LogoBZ[9], 1);
	TextDrawSetSelectable(LogoBZ[9], 0);
    //


	//
	LoginTD[0] = TextDrawCreate(769.199951, -13.433332, "usebox");
	TextDrawLetterSize(LoginTD[0], 0.000000, 15.206295);
	TextDrawTextSize(LoginTD[0], -18.799999, 0.000000);
	TextDrawAlignment(LoginTD[0], 1);
	TextDrawColor(LoginTD[0], 0);
	TextDrawUseBox(LoginTD[0], true);
	TextDrawBoxColor(LoginTD[0], 120);
	TextDrawSetShadow(LoginTD[0], 0);
	TextDrawSetOutline(LoginTD[0], 0);
	TextDrawFont(LoginTD[0], 0);

	LoginTD[1] = TextDrawCreate(689.199951, 333.766723, "usebox");
	TextDrawLetterSize(LoginTD[1], 0.000000, 12.489257);
	TextDrawTextSize(LoginTD[1], -18.000000, 0.000000);
	TextDrawAlignment(LoginTD[1], 1);
	TextDrawColor(LoginTD[1], 0);
	TextDrawUseBox(LoginTD[1], true);
	TextDrawBoxColor(LoginTD[1], 120);
	TextDrawSetShadow(LoginTD[1], 0);
	TextDrawSetOutline(LoginTD[1], 0);
	TextDrawFont(LoginTD[1], 0);

	LoginTD[2] = TextDrawCreate(0.000000, 123.946670, "LD_SPAC:white");
	TextDrawLetterSize(LoginTD[2], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[2], 640.000000, 3.733329);
	TextDrawAlignment(LoginTD[2], 1);
	TextDrawColor(LoginTD[2], 0xEB0000FF);
	TextDrawSetShadow(LoginTD[2], 0);
	TextDrawSetOutline(LoginTD[2], 0);
	TextDrawFont(LoginTD[2], 4);

	LoginTD[3] = TextDrawCreate(0.000000, 331.520019, "LD_SPAC:white");
	TextDrawLetterSize(LoginTD[3], 0.000000, 0.000000);
	TextDrawTextSize(LoginTD[3], 640.000000, 3.733306);
	TextDrawAlignment(LoginTD[3], 1);
	TextDrawColor(LoginTD[3], 0xEB0000FF);
	TextDrawSetShadow(LoginTD[3], 0);
	TextDrawSetOutline(LoginTD[3], 0);
	TextDrawFont(LoginTD[3], 4);

	LoginTD[4] = TextDrawCreate(243.200073, 53.013355, "RootZone RolePlay");
	TextDrawLetterSize(LoginTD[4], 0.529200, 1.898666);
	TextDrawAlignment(LoginTD[4], 1);
	TextDrawColor(LoginTD[4], -1);
	TextDrawSetShadow(LoginTD[4], 0);
	TextDrawSetOutline(LoginTD[4], 1);
	TextDrawBackgroundColor(LoginTD[4], 51);
	TextDrawFont(LoginTD[4], 3);
	TextDrawSetProportional(LoginTD[4], 1);

	LoginTD[5] = TextDrawCreate(231.200225, 370.346710, "Bienvenido A RootZone");
	TextDrawLetterSize(LoginTD[5], 0.469999, 1.413332);
	TextDrawAlignment(LoginTD[5], 1);
	TextDrawColor(LoginTD[5], -1);
	TextDrawSetShadow(LoginTD[5], 0);
	TextDrawSetOutline(LoginTD[5], 1);
	TextDrawBackgroundColor(LoginTD[5], 51);
	TextDrawFont(LoginTD[5], 0);
	TextDrawSetProportional(LoginTD[5], 1);

	LoginTD[6] = TextDrawCreate(517.600036, 434.559906, "Cargando...");
	TextDrawLetterSize(LoginTD[6], 0.378800, 1.092266);
	TextDrawAlignment(LoginTD[6], 1);
	TextDrawColor(LoginTD[6], -1);
	TextDrawSetShadow(LoginTD[6], 0);
	TextDrawSetOutline(LoginTD[6], 1);
	TextDrawBackgroundColor(LoginTD[6], 51);
	TextDrawFont(LoginTD[6], 3);
	TextDrawSetProportional(LoginTD[6], 1);

	LoginTD[7] = TextDrawCreate(394.399993, 54.506656, "]");
	TextDrawLetterSize(LoginTD[7], 0.449999, 1.600000);
	TextDrawAlignment(LoginTD[7], 1);
	TextDrawColor(LoginTD[7], -1);
	TextDrawSetShadow(LoginTD[7], 0);
	TextDrawSetOutline(LoginTD[7], 1);
	TextDrawBackgroundColor(LoginTD[7], 51);
	TextDrawFont(LoginTD[7], 2);
	TextDrawSetProportional(LoginTD[7], 1);

	LoginTD[8] = TextDrawCreate(222.400039, 54.506668, "]");
	TextDrawLetterSize(LoginTD[8], 0.449999, 1.600000);
	TextDrawAlignment(LoginTD[8], 1);
	TextDrawColor(LoginTD[8], -1);
	TextDrawSetShadow(LoginTD[8], 0);
	TextDrawSetOutline(LoginTD[8], 1);
	TextDrawBackgroundColor(LoginTD[8], 51);
	TextDrawFont(LoginTD[8], 2);
	TextDrawSetProportional(LoginTD[8], 1);

	Territorio_TD[1] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
	TextDrawLetterSize(Territorio_TD[1], 0.286000, 1.276444);
	TextDrawAlignment(Territorio_TD[1], 2);
	TextDrawColor(Territorio_TD[1], -76);
	TextDrawSetShadow(Territorio_TD[1], 0);
	TextDrawSetOutline(Territorio_TD[1], 0);
	TextDrawBackgroundColor(Territorio_TD[1], 255);
	TextDrawFont(Territorio_TD[1], 1);
	TextDrawSetProportional(Territorio_TD[1], 1);
	TextDrawSetShadow(Territorio_TD[1], 0);

	SeleccionaPuerta = TextDrawCreate(297.000000, 158.000000, "Selecciona la puerta");
	TextDrawLetterSize(SeleccionaPuerta, 0.320000, 1.000000);
	TextDrawTextSize(SeleccionaPuerta, 27.000000, 178.000000);
	TextDrawAlignment(SeleccionaPuerta, 2);
	TextDrawColor(SeleccionaPuerta, 0xFFFFFFFF);
	TextDrawUseBox(SeleccionaPuerta, 1);
	TextDrawBoxColor(SeleccionaPuerta, 0x000000FF);
	TextDrawSetShadow(SeleccionaPuerta, 1);
	TextDrawSetOutline(SeleccionaPuerta, 0);
	TextDrawBackgroundColor(SeleccionaPuerta, 0x000000FF);
	TextDrawFont(SeleccionaPuerta, 1);
	TextDrawSetProportional(SeleccionaPuerta, 1);
	TextDrawSetSelectable(SeleccionaPuerta, 0);

	BoxRobar = TextDrawCreate(297.000000, 170.000000, "_");
	TextDrawLetterSize(BoxRobar, 0.320000, 21.100000);
	TextDrawTextSize(BoxRobar, 27.000000, 178.000000);
	TextDrawAlignment(BoxRobar, 2);
	TextDrawColor(BoxRobar, 0xFFFFFFFF);
	TextDrawUseBox(BoxRobar, 1);
	TextDrawBoxColor(BoxRobar, 0x000000FF);
	TextDrawSetShadow(BoxRobar, 1);
	TextDrawSetOutline(BoxRobar, 0);
	TextDrawBackgroundColor(BoxRobar, 0x000000FF);
	TextDrawFont(BoxRobar, 1);
	TextDrawSetProportional(BoxRobar, 1);
	TextDrawSetSelectable(BoxRobar, 0);

	EquisCerrar = TextDrawCreate(379.000000, 158.000000, "X");
	TextDrawLetterSize(EquisCerrar, 0.290000, 1.000000);
	TextDrawTextSize(EquisCerrar, 9.000000, 9.000000);
	TextDrawAlignment(EquisCerrar, 2);
	TextDrawColor(EquisCerrar, 0xFF0000FF);
	TextDrawUseBox(EquisCerrar, 1);
	TextDrawBoxColor(EquisCerrar, 0x000000FF);
	TextDrawSetShadow(EquisCerrar, 1);
	TextDrawSetOutline(EquisCerrar, 0);
	TextDrawBackgroundColor(EquisCerrar, 0x0B0B0B99);
	TextDrawFont(EquisCerrar, 1);
	TextDrawSetProportional(EquisCerrar, 0);
	TextDrawSetSelectable(EquisCerrar, 1);

	//TREN VER MAPA
	MapaLateral[0] = TextDrawCreate(630.000000, 14.000000, "_");
	TextDrawLetterSize(MapaLateral[0], 0.539999, 31.200006);
	TextDrawTextSize(MapaLateral[0], 354.000000, 0.000000);
	TextDrawAlignment(MapaLateral[0], 0);
	TextDrawColor(MapaLateral[0], 0xFFFFFFFF);
	TextDrawUseBox(MapaLateral[0], 1);
	TextDrawBoxColor(MapaLateral[0], 0x000000FF);
	TextDrawSetShadow(MapaLateral[0], 1);
	TextDrawSetOutline(MapaLateral[0], 0);
	TextDrawBackgroundColor(MapaLateral[0], 0x000000FF);
	TextDrawFont(MapaLateral[0], 1);
	TextDrawSetProportional(MapaLateral[0], 1);
	TextDrawSetSelectable(MapaLateral[0], 0);

	MapaLateral[1] = TextDrawCreate(364.000000, 30.000000, "samaps:map");
	TextDrawLetterSize(MapaLateral[1], 0.500000, 1.000000);
	TextDrawTextSize(MapaLateral[1], 256.000000, 256.000000);
	TextDrawAlignment(MapaLateral[1], 0);
	TextDrawColor(MapaLateral[1], 0xE1E1E1FF);
	TextDrawUseBox(MapaLateral[1], 1);
	TextDrawBoxColor(MapaLateral[1], 0x000000FF);
	TextDrawSetShadow(MapaLateral[1], 1);
	TextDrawSetOutline(MapaLateral[1], 0);
	TextDrawBackgroundColor(MapaLateral[1], 0x000000FF);
	TextDrawFont(MapaLateral[1], 4);
	TextDrawSetProportional(MapaLateral[1], 1);
	TextDrawSetSelectable(MapaLateral[1], 0);

	MapaLateral[2] = TextDrawCreate(359.000000, 13.000000, "GPS");
	TextDrawLetterSize(MapaLateral[2], 0.400000, 1.600000);
	TextDrawTextSize(MapaLateral[2], 1280.000000, 1280.000000);
	TextDrawAlignment(MapaLateral[2], 0);
	TextDrawColor(MapaLateral[2], 0xFFFFFFFF);
	TextDrawUseBox(MapaLateral[2], 0);
	TextDrawBoxColor(MapaLateral[2], 0x80808080);
	TextDrawSetShadow(MapaLateral[2], 1);
	TextDrawSetOutline(MapaLateral[2], 0);
	TextDrawBackgroundColor(MapaLateral[2], 0x000000FF);
	TextDrawFont(MapaLateral[2], 2);
	TextDrawSetProportional(MapaLateral[2], 1);
	TextDrawSetSelectable(MapaLateral[2], 0);

	MapaLateral[3] = TextDrawCreate(570.000000, 19.500000, "~w~Usa ~b~~y~/ocultar gps~w~ para cerrar");
	TextDrawLetterSize(MapaLateral[3], 0.150000, 0.450000);
	TextDrawTextSize(MapaLateral[3], 1280.000000, 1280.000000);
	TextDrawAlignment(MapaLateral[3], 2);
	TextDrawColor(MapaLateral[3], 0xFFFFFFBF);
	TextDrawUseBox(MapaLateral[3], 0);
	TextDrawBoxColor(MapaLateral[3], 0x80808080);
	TextDrawSetShadow(MapaLateral[3], 1);
	TextDrawSetOutline(MapaLateral[3], 0);
	TextDrawBackgroundColor(MapaLateral[3], 0x000000FF);
	TextDrawFont(MapaLateral[3], 2);
	TextDrawSetProportional(MapaLateral[3], 1);
	TextDrawSetSelectable(MapaLateral[3], 0);

	NewPlayer[0] = TextDrawCreate(130.000000, 394.000000, "l");
	TextDrawLetterSize(NewPlayer[0], 44.499886, 2.799998);
	TextDrawTextSize(NewPlayer[0], 1280.000000, 1280.000000);
	TextDrawAlignment(NewPlayer[0], 0);
	TextDrawColor(NewPlayer[0], 0x00000020);
	TextDrawUseBox(NewPlayer[0], 0);
	TextDrawBoxColor(NewPlayer[0], 0x80808080);
	TextDrawSetShadow(NewPlayer[0], 0);
	TextDrawSetOutline(NewPlayer[0], 0);
	TextDrawBackgroundColor(NewPlayer[0], 0x000000FF);
	TextDrawFont(NewPlayer[0], 1);
	TextDrawSetProportional(NewPlayer[0], 1);
	TextDrawSetSelectable(NewPlayer[0], 0);

	NewPlayer[2] = TextDrawCreate(191.156677, 400.750000, "       Pulsa ~y~'H'~w~ para abrir el menu de opciones.");
	TextDrawLetterSize(NewPlayer[2], 0.320219, 1.320001);
	TextDrawAlignment(NewPlayer[2], 1);
	TextDrawColor(NewPlayer[2], -1);
	TextDrawSetShadow(NewPlayer[2], 1);
	TextDrawSetOutline(NewPlayer[2], 0);
	TextDrawBackgroundColor(NewPlayer[2], 255);
	TextDrawFont(NewPlayer[2], 1);
	TextDrawSetProportional(NewPlayer[2], 1);

	TAXIMET3 = TextDrawCreate(549.150024, 423.149994, "_");
	TextDrawLetterSize(TAXIMET3, 1.000000, -0.200000);
	TextDrawTextSize(TAXIMET3, 547.000000, 0.000000);
	TextDrawAlignment(TAXIMET3, 0);
	TextDrawColor(TAXIMET3, 0xE1E1E1FF);
	TextDrawUseBox(TAXIMET3, 0);
	TextDrawBoxColor(TAXIMET3, 0xFF9900FF);
	TextDrawSetShadow(TAXIMET3, 2);
	TextDrawSetOutline(TAXIMET3, 0);
	TextDrawBackgroundColor(TAXIMET3, 0x000000FF);
	TextDrawFont(TAXIMET3, 1);
	TextDrawSetProportional(TAXIMET3, 1);
	TextDrawSetSelectable(TAXIMET3, 0);

	TAXIMET4 = TextDrawCreate(549.150024, 376.149994, "_");
	TextDrawLetterSize(TAXIMET4, 1.000000, -0.200000);
	TextDrawTextSize(TAXIMET4, 613.349976, 0.000000);
	TextDrawAlignment(TAXIMET4, 0);
	TextDrawColor(TAXIMET4, 0xE1E1E1FF);
	TextDrawUseBox(TAXIMET4, 1);
	TextDrawBoxColor(TAXIMET4, 0x00B7C2FF);
	TextDrawSetShadow(TAXIMET4, 2);
	TextDrawSetOutline(TAXIMET4, 0);
	TextDrawBackgroundColor(TAXIMET4, 0x000000FF);
	TextDrawFont(TAXIMET4, 1);
	TextDrawSetProportional(TAXIMET4, 1);
	TextDrawSetSelectable(TAXIMET4, 0);

	TAXIMET = TextDrawCreate(499.000000, 387.000000, "Taximetro");
	TextDrawLetterSize(TAXIMET, 0.340000, 1.000000);
	TextDrawTextSize(TAXIMET, 50.000000, 74.000000);
	TextDrawAlignment(TAXIMET, 2);
	TextDrawColor(TAXIMET, 0xFFFFFFFF);
	TextDrawUseBox(TAXIMET, 1);
	TextDrawBoxColor(TAXIMET, 0x00000099);
	TextDrawSetShadow(TAXIMET, 1);
	TextDrawSetOutline(TAXIMET, 0);
	TextDrawBackgroundColor(TAXIMET, 0x00000033);
	TextDrawFont(TAXIMET, 1);
	TextDrawSetProportional(TAXIMET, 1);
	TextDrawSetSelectable(TAXIMET, 0);

	AlertaRefuerzos[0] = TextDrawCreate(264.000000, 351.000000, "_");
	TextDrawBackgroundColor(AlertaRefuerzos[0], 255);
	TextDrawFont(AlertaRefuerzos[0], 1);
	TextDrawLetterSize(AlertaRefuerzos[0], 0.420000, 1.200000);
	TextDrawColor(AlertaRefuerzos[0], -1);
	TextDrawSetOutline(AlertaRefuerzos[0], 0);
	TextDrawSetProportional(AlertaRefuerzos[0], 1);
	TextDrawSetShadow(AlertaRefuerzos[0], 1);
	TextDrawUseBox(AlertaRefuerzos[0], 1);
	TextDrawBoxColor(AlertaRefuerzos[0], 255);
	TextDrawTextSize(AlertaRefuerzos[0], 364.000000, 12.000000);
	TextDrawSetSelectable(AlertaRefuerzos[0], 0);

	AlertaRefuerzos[1] = TextDrawCreate(274.000000, 351.000000, "Enviando alertas");
	TextDrawBackgroundColor(AlertaRefuerzos[1], 255);
	TextDrawFont(AlertaRefuerzos[1], 1);
	TextDrawLetterSize(AlertaRefuerzos[1], 0.340000, 1.000000);
	TextDrawColor(AlertaRefuerzos[1], -1);
	TextDrawSetOutline(AlertaRefuerzos[1], 0);
	TextDrawSetProportional(AlertaRefuerzos[1], 1);
	TextDrawSetShadow(AlertaRefuerzos[1], 1);
	TextDrawSetSelectable(AlertaRefuerzos[1], 0);

	AlertaRefuerzos[2] = TextDrawCreate(261.000000, 345.000000, "~r~~h~.");
	TextDrawBackgroundColor(AlertaRefuerzos[2], 255);
	TextDrawFont(AlertaRefuerzos[2], 1);
	TextDrawLetterSize(AlertaRefuerzos[2], 0.460000, 1.700000);
	TextDrawColor(AlertaRefuerzos[2], -1);
	TextDrawSetOutline(AlertaRefuerzos[2], 0);
	TextDrawSetProportional(AlertaRefuerzos[2], 1);
	TextDrawSetShadow(AlertaRefuerzos[2], 1);
	TextDrawSetSelectable(AlertaRefuerzos[2], 0);

	AlertaRefuerzos[3] = TextDrawCreate(264.000000, 351.000000, "~r~~h~)");
	TextDrawBackgroundColor(AlertaRefuerzos[3], 255);
	TextDrawFont(AlertaRefuerzos[3], 1);
	TextDrawLetterSize(AlertaRefuerzos[3], 0.380000, 1.000000);
	TextDrawColor(AlertaRefuerzos[3], -1);
	TextDrawSetOutline(AlertaRefuerzos[3], 0);
	TextDrawSetProportional(AlertaRefuerzos[3], 1);
	TextDrawSetShadow(AlertaRefuerzos[3], 1);
	TextDrawSetSelectable(AlertaRefuerzos[3], 0);

	AlertaRefuerzos[4] = TextDrawCreate(267.000000, 349.000000, "~r~~h~)");
	TextDrawBackgroundColor(AlertaRefuerzos[4], 255);
	TextDrawFont(AlertaRefuerzos[4], 1);
	TextDrawLetterSize(AlertaRefuerzos[4], 0.410000, 1.400000);
	TextDrawColor(AlertaRefuerzos[4], -1);
	TextDrawSetOutline(AlertaRefuerzos[4], 0);
	TextDrawSetProportional(AlertaRefuerzos[4], 1);
	TextDrawSetShadow(AlertaRefuerzos[4], 1);
	TextDrawSetSelectable(AlertaRefuerzos[4], 0);

	FranjaCriminal = TextDrawCreate(-33.882381, 397.833251, "I");
	TextDrawLetterSize(FranjaCriminal, 64.748863, 2.842499);
	TextDrawAlignment(FranjaCriminal, 1);
	TextDrawColor(FranjaCriminal, 799);
	TextDrawSetShadow(FranjaCriminal, 0);
	TextDrawSetOutline(FranjaCriminal, 1);
	TextDrawBackgroundColor(FranjaCriminal, 170);
	TextDrawFont(FranjaCriminal, 1);
	TextDrawSetProportional(FranjaCriminal, 1);

	for(new c1=0;c1<MAX_ENCARGOS;c1++)
	{
		MisionCriminal[c1] = TextDrawCreate(320.941467, 401.916748, "Reunete con tu colega en el punto marcado");
		TextDrawLetterSize(MisionCriminal[c1], 0.308353, 1.740000);
		TextDrawAlignment(MisionCriminal[c1], 2);
		TextDrawColor(MisionCriminal[c1], -1);
		TextDrawSetShadow(MisionCriminal[c1], 0);
		TextDrawSetOutline(MisionCriminal[c1], 1);
		TextDrawBackgroundColor(MisionCriminal[c1], 51);
		TextDrawFont(MisionCriminal[c1], 1);
		TextDrawSetProportional(MisionCriminal[c1], 1);
	}
	for(new c2=0;c2<MAX_ENCARGOS;c2++)
	{
		MisionColega[c2] = TextDrawCreate(317.832366, 388.750213, "Pulsa la tecla ~b~T~w~ para hablar o ingresar un ~y~comandos~w~.");
		TextDrawLetterSize(MisionColega[c2], 0.258724, 1.241666);
		TextDrawTextSize(MisionColega[c2], -776.339355, 241.500518);
		TextDrawAlignment(MisionColega[c2], 2);
		TextDrawColor(MisionColega[c2], -1);
		TextDrawUseBox(MisionColega[c2], 1);
		TextDrawBoxColor(MisionColega[c2], 15);
		TextDrawSetShadow(MisionColega[c2], 1);
		TextDrawSetOutline(MisionColega[c2], 0);
		TextDrawBackgroundColor(MisionColega[c2], 255);
		TextDrawFont(MisionColega[c2], 1);
		TextDrawSetProportional(MisionColega[c2], 1);
	}
	for(new c3=0;c3<MAX_ENCARGOS;c3++)
	{

		TiempoMision[c3] = TextDrawCreate(294.588134, 422.333404, "05:00");
		TextDrawLetterSize(TiempoMision[c3], 0.525294, 2.008333);
		TextDrawAlignment(TiempoMision[c3], 1);
		TextDrawColor(TiempoMision[c3], -1);
		TextDrawSetShadow(TiempoMision[c3], 0);
		TextDrawSetOutline(TiempoMision[c3], 1);
		TextDrawBackgroundColor(TiempoMision[c3], 51);
		TextDrawFont(TiempoMision[c3], 1);
		TextDrawSetProportional(TiempoMision[c3], 1);
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && SpecJugador[i] == playerid)
		{
			SetPlayerInterior(i, newinteriorid);
			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerConnected(clickedplayerid))
	{
		new MsgReportar[64];
		for(new i=0;i<MAX_REPORTS;i++)
		{
			REPORT_INFO[i][ReportadoID] = clickedplayerid;
			format(MsgReportar, sizeof(MsgReportar), "{FFFF04}Reportar a %s", NombreJugador(clickedplayerid));
	    	ShowPlayerDialog(playerid, DIALOG_REPORTAR, DIALOG_STYLE_INPUT, MsgReportar, "{F0F0F0}Descríba brevemente la razón de su reporte", "Reportar", "Cancelar");
		}
	}
	else SendClientMessage(playerid, -1, "El jugador no esta conectado");
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	//ROBAR CASAS
	if(playertextid == RoboCasas[playerid][0])
	{
		if(ForzarCerraduraID[playerid] == 1) ForzarCerraduraPosiciones(playerid);
		else HideSelector(playerid);
	}
	if(playertextid == RoboCasas[playerid][1])
	{
		if(ForzarCerraduraID[playerid] == 2) ForzarCerraduraPosiciones(playerid);
		else HideSelector(playerid);
	}
	if(playertextid == RoboCasas[playerid][2])
	{
		if(ForzarCerraduraID[playerid] == 3) ForzarCerraduraPosiciones(playerid);
		else HideSelector(playerid);
	}
	if(playertextid == RoboCasas[playerid][3])
	{
		if(ForzarCerraduraID[playerid] == 4) ForzarCerraduraPosiciones(playerid);
		else HideSelector(playerid);
	}
	return 0;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid)) return 1;
	#if DEBUG_GM == 1
	printf("(OnPlayerStateChange) PlayerID: %d | NewState: %d | OldState: %d", playerid, newstate, oldstate);
	#endif
	if(newstate == PLAYER_STATE_ENTER_VEHICLE_DRIVER || newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(Objeto[playerid] > 0)
		{
			SendClientMessage(playerid,-1,"No puedes subir a un vehículo con un objeto, usa {FFFF04}/tirar objeto.");
			ClearAnimations(playerid);
			RemovePlayerFromVehicle(playerid);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(PLAYER_INFO[playerid][pVelocimetro] == 1)
		{
			EsconderVelocimetro(playerid);
			MostrarVelocimetro(playerid);
		}
		else if(PLAYER_INFO[playerid][pVelocimetro] == 0)
		{
			EsconderVelocimetro(playerid);
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
		if(GetPlayerWeapon(playerid) != 30 && GetPlayerWeapon(playerid) != 31 && GetPlayerWeapon(playerid) != 29 && GetPlayerWeapon(playerid) != 22)
		{
			SetPlayerArmedWeapon(playerid, 0);
		}
		if(PLAYER_INFO[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0)
		{
			RemovePlayerFromVehicle(playerid);
		}
		if(GetPlayerWeapon(playerid) == 0 || GetPlayerWeapon(playerid) == 29 || GetPlayerWeapon(playerid) == 25 || GetPlayerWeapon(playerid) == 31 || GetPlayerWeapon(playerid) == 30) return 1;
		else
		{
			if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] == 25 || PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(29)] == 29 || PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(30)] == 30 || PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] == 31)
			{
				DarArmas(playerid);
			}
			else
			{
				Manejando[playerid] = 1;
				SetPlayerArmedWeapon(playerid, 0);
			}
		}
		TrailerUpdate(playerid, GetPlayerVehicleID(playerid));
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(PLAYER_INFO[playerid][pAdmin] < 3)
		{
			if(PLAYER_INFO[playerid][pDuty] == 0 && (SAPD(GetPlayerVehicleID(playerid)) || HELISAPD(GetPlayerVehicleID(playerid))))
			{
				ExpulsarJugador(playerid,"Subirse a patrulla de conductor sin uniforme y sin facción SAPD.");
			}
			if(PLAYER_INFO[playerid][mDuty] == 0 && (MILI(GetPlayerVehicleID(playerid)) || HELIMILI(GetPlayerVehicleID(playerid))))
			{
				ExpulsarJugador(playerid,"Subirse a un vehiculo de conductor sin uniforme y sin facción militar.");
			}
			if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero && CAMION(GetPlayerVehicleID(playerid)))
			{
				ExpulsarJugador(playerid,"Subirse a camión de conductor sin trabajo.");
			}
			if(PLAYER_INFO[playerid][pTrabajo] != T_Taxista && PLAYER_INFO[playerid][pTrabajo2] != T_Taxista && TAXI(GetPlayerVehicleID(playerid)))
			{
				ExpulsarJugador(playerid,"Subirse a taxi de conductor sin trabajo.");
			}
		}
		SetPlayerArmedWeapon(playerid, 0);
		if(PLAYER_INFO[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0)
		{
			RemovePlayerFromVehicle(playerid);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(Specteado[playerid] == 1)
		{
			foreach(new i : Player)
			{
				if(SpecJugador[i] == playerid)
				{
					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
        PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 3;
    	PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 3;

		if(EsUnTren(GetPlayerVehicleID(playerid)))
		{
			Boletos[playerid] = 0;
		}
		foreach(new i : Player)
		{
			if(SpecJugador[i] == playerid) PlayerSpectatePlayer(i, playerid);
		}
		if(Specteado[playerid] == 1)
		{
			foreach(new i : Player)
			{
				if(SpecJugador[i] == playerid)
				{
					PlayerSpectatePlayer(i, playerid);
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid),color_1, color_2;
		if(CAMION(vehicleid))
		{
			GetVehicleColor(vehicleid, color_1, color_2);
			if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero)
			{
				SendClientMessage(playerid,-1,"Necesitas el empleo de camionero para usar este vehículo.");
				SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {FFFF04}/ayuda trabajos");
				RemovePlayerFromVehicle(playerid);
				new Float:sx, Float:sy, Float:sz;
				NoTeleportHack(playerid);
				GetPlayerPos(playerid, sx, sy, sz);
				SetPlayerPosEx(playerid, sx, sy, sz);
				EnAuto[playerid] = INVALID_PLAYER_ID;
			}
			else
			{
			    if(PLAYER_INFO[playerid][pVIP] < 2)
                {
                    if(color_1 == 0 && color_2 == 0)
                    {
                        SendClientMessage(playerid,-1,"Este camión es solamente para jugadores con cuenta {FFFF04}VIP2");
                        RemovePlayerFromVehicle(playerid);
                        EnAuto[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
				new string[256];
				switch(CamionCargado[vehicleid])
				{
					case 0: format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Ninguno {FFFFFF}| Chofer: {FFCA00}Ninguno", vehicleid);
					case 1: format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Productos 24/7{FFFFFF} {FFFFFF}| Chofer: {f21111}%s", vehicleid,PLAYER_INFO[Chofer[vehicleid]][Nickname]);
					case 2: format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Ropa{FFFFFF} | Chofer: {FFCA00}%s", vehicleid,PLAYER_INFO[Chofer[vehicleid]][Nickname]);
					case 3: format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Drogas{FFFFFF} | Chofer: {FFCA00}%s", vehicleid,PLAYER_INFO[Chofer[vehicleid]][Nickname]);
					case 4:	format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Armas{FFFFFF} | Chofer: {FFCA00}%s", vehicleid,PLAYER_INFO[Chofer[vehicleid]][Nickname]);
					default: format(string, sizeof(string), "Camión de carga número: {FFCA00}%d{FFFFFF} | Contenido: {FFCA00}Ninguno {FFFFFF}| Chofer: {FFCA00}Ninguno", vehicleid);
				}
				SendClientMessage(playerid, -1,string);
				if(CamionCargado[vehicleid] == 0) SendClientMessage(playerid, -1, "Escribe {FFFF04}/cargar camion{FFFFFF} para cargar el camión y {FFFF04}/arrancar{FFFFFF} para encender el motor.");
			}
		}
	}
	if(newstate & PLAYER_STATE_DRIVER || newstate & PLAYER_STATE_PASSENGER)
	{
		// Alarma
		if(IsPlayerInAnyVehicle(playerid))
		{
			new autoid = GetPlayerVehicleID(playerid);
			if(autos[playerid] == autoid || autos2[playerid] == autoid || autos3[playerid] == autoid || autos4[playerid] == autoid)
			{
				DesactivarAlarma(autoid);
				SendClientMessage(playerid, -1, "Este vehículo te pertenece.");
			}
			else
			{
				if(alarma[autoid] == 1 && alarmaon[autoid] == 0)
				{
					GetVehicleParamsEx(autoid,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(autoid,engine,lights,true,doors,bonnet,boot,objective);
					SetTimerEx("DesactivarAlarma", minutos(1), false, "d", autoid);
					TimerLuces[autoid] = SetTimerEx("TimerLucesIntermitentes", 500, false, "d", autoid);
					alarma[autoid] = 1;
				}
			}
			
			EnAuto[playerid] = GetPlayerVehicleID(playerid);
			if(bloqueado[GetPlayerVehicleID(playerid)] == 1 && PLAYER_INFO[playerid][pAdmin] < 3)
			{
				VirtualWorldAutos[playerid] = GetPlayerVirtualWorld(playerid);
				SetPlayerVirtualWorld(playerid,666);
				SetTimerEx("KickPlayerState",5000,false,"d",playerid);
				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 0);
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(autos[playerid] == vehicleid)
		{
			GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos[playerid], engine, lights, 0, doors, bonnet, boot, objective);
		}
		else if(autos2[playerid] == vehicleid)
		{
			GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos2[playerid], engine, lights, 0, doors, bonnet, boot, objective);
		}
		else if(autos3[playerid] == vehicleid)
		{
			GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos3[playerid], engine, lights, 0, doors, bonnet, boot, objective);
		}
		else if(autos4[playerid] == vehicleid)
		{
			GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(autos4[playerid], engine, lights, 0, doors, bonnet, boot, objective);
		}
	}
	fVehSpeed[playerid] = 0.0;
	if(oldstate == PLAYER_STATE_PASSENGER)
	{
	    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 3;
    	PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 2;
    	
		if(Manejando[playerid] == 1)
		{
			DarArmas(playerid);
			Manejando[playerid] = 0;
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 3;
    	PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 2;
    	
		new autoid = GetPlayerVehicleID(playerid);
		EnAuto[playerid] = autoid;
		if(PLAYER_INFO[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0)
		{
			RemovePlayerFromVehicle(playerid);
			EnAuto[playerid] = INVALID_PLAYER_ID;
		}
		SetPlayerArmedWeapon(playerid, 0);
		if(MotorAuto[autoid] == 0)
		{
			if(!CAMION(autoid) && !BICI(autoid))
			if(VehiculosInfo[autoid][vcomprable] != 1)
			{
			    if(autos[playerid] != autoid && alarma[autoid] == 1) SetTimerEx("AplicarAlarma",2000,false,"d",autoid);
				else if(autos2[playerid] != autoid && alarma[autoid] == 1) SetTimerEx("AplicarAlarma",2000,false,"d",autoid);
				else if(autos3[playerid] != autoid && alarma[autoid] == 1) SetTimerEx("AplicarAlarma",2000,false,"d",autoid);
				else if(autos4[playerid] != autoid && alarma[autoid] == 1) SetTimerEx("AplicarAlarma",2000,false,"d",autoid);

				SendClientMessage(playerid,-1,"Para encender el motor del vehículo, pulsa la tecla {FFFF04}'2'");
			}
		}
		if(VehiculosInfo[autoid][vcomprable] == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID] == 0)
				{
					SendClientMessage(playerid,-1,"Para escuchar alguna emisora de radio de San Andreas, escribe {FFFF04}/emisoras");
				}
			}
		}
		if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
		{
			if(GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID] != 0)
			{
				new emisoraid;
				emisoraid = GLOBAL_VEHICLES[autoid][gb_vehicle_EMISORA_ID];
				foreach(new id : Player)
				{
					if(Emisoras[id][CabinaOcupada] == emisoraid)
					{
						if(Emisoras[id][TransEmisora] == 1)
						{
						    new stringa[128];
							format(stringa, sizeof(stringa), "{FFFFFF}Escuchando radio {FFFF04}%s{FFFFFF}, para cambiar de emisora usa {f21111}/emisoras", Emisoras[id][NombreEmisora]);
							SendClientMessage(playerid, COLOR_WHITE, stringa);
							format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
							ReproducirEmisora(playerid, emisoraid, stringa);
						}
					}
				}
			}
		}
		if(VehiculosInfo[autoid][vcomprable] == 1)
		{
		    new string[128];
			format(string,sizeof(string),"{FFFFFF}Estas seguro de comprar este vehículo?");
			ShowPlayerDialog(playerid, CVEHICULO, DIALOG_STYLE_MSGBOX, "Información de compra", string, "Comprar", "Salir");
		}
		new veh = GetPlayerVehicleID(playerid);
		if(JugadorLogeado[playerid] == 1)
		{
			if(BajandoV[playerid] == 1)
			{
				if(MOTO(veh) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;
			}
		}
		new Float: fCurrentSpeed;
		fCurrentSpeed = player_get_speed(playerid);
		fVehSpeed[playerid] = fCurrentSpeed;
		iVehicle[playerid] = GetPlayerVehicleID(playerid);
		if(BICI(iVehicle[playerid]))
		{
			Manejando[playerid] = 1;
			KillTimer(Bajando[playerid]);
			return 1;
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		EnAuto[playerid] = INVALID_VEHICLE_ID;
		if(Ficha[playerid] != 0)
		{
			TextDrawHideForPlayer(playerid,TAXIMET);
			PlayerTextDrawHide(playerid,TAXIMET2[playerid]);
			TextDrawHideForPlayer(playerid,TAXIMET3);
			TextDrawHideForPlayer(playerid,TAXIMET4);
		}
		PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][0]);
		PlayerTextDrawHide(playerid, ContadorVelocimetro[playerid][1]);
		PlayerTextDrawHide(playerid, F_0[playerid]);
		PlayerTextDrawHide(playerid, F_1[playerid]);
		PlayerTextDrawHide(playerid, F_2[playerid]);
		PlayerTextDrawHide(playerid, FUELICON[playerid]);
		PlayerTextDrawHide(playerid, H_0[playerid]);
		PlayerTextDrawHide(playerid, S_1[playerid]);
		PlayerTextDrawHide(playerid, S_2[playerid]);
		PlayerTextDrawHide(playerid, SPEEDICON[playerid]);
		Bajando[playerid] = SetTimerEx("Maneja",5000,false,"d",playerid);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, const cmd[], const params[], flags)
{
    if(JugadorLogeado[playerid] == 0) return 1;
	SetPVarInt(playerid, "antiflood", GetTickCount());
	if(flags)
	{
		if(flags > PLAYER_INFO[playerid][pAdmin])
		{
			SendNotification(playerid, "Has escrito un comando desconocido, usa ~y~/ayuda ~w~para recibir ayuda.");
			return 0;
		}
	}
	if(!isnull(params) && DetectarSpam(params))
	{
	    DetectoSPAM(playerid, params);
	}
	printf("[CMD] [%s][DB: %d]: /%s %s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[playerid][pID], cmd, params);
	return 1;
}

public OnPlayerCommandPerformed(playerid, const cmd[], const params[], result, flags)
{
    if(JugadorLogeado[playerid] == 0) return 1;
    
	if(result == -1 || result == 0)
	{
		SendNotification(playerid, "Has escrito un comando desconocido, usa ~y~/ayuda ~w~para recibir ayuda.");
		return 0;
	}
	return 1;
}

public PayDay(value)
{
	new horas,minutos,segundos;
	gettime(horas,minutos,segundos);
	foreach(new i : Player)
	{
		if(LoggedYet[i] == 1){
			if(!IsPlayerNPC(i))	{
				new gastosest,ganaciasresta,paga = PLAYER_INFO[i][pNivel]*100+50, suma,intereses,seguro,sumat,seguro2,estacionamiento,gananciasest,seguro3,seguro4,seguros,gastos,total;
				PLAYER_INFO[i][horasjugadas]++;
				if(PLAYER_INFO[i][TiempoPD] < value) return SendClientMessage(i,COLOR_GREY,"No jugaste el tiempo suficiente para recibir tu pago diario");
				seguro = PLAYER_INFO[i][vPrecio]/100,	seguro2 = PLAYER_INFO[i][v2Precio]/100,	seguro3 = PLAYER_INFO[i][v3Precio]/100,	seguro4 = PLAYER_INFO[i][v4Precio]/100;
				seguros = seguro+seguro2+seguro3+seguro4,PLAYER_INFO[i][TiempoPD] = 0;
				for(new c = 0; c < MAX_PROPIEDADES; c++)
				estacionamiento = PLAYER_INFO[i][vEstacionado4];
				gastos = seguro+seguro2+seguro3+seguro4+estacionamiento;
				total = 1000;
				
				intereses = PLAYER_INFO[i][pBanco]/1000;
				if(intereses >= total) { intereses = total; }
				for(new p=1; p < MAX_PROPIEDADES; p++)
				{
		    		for(new n = 0; n < MAX_PCASAS; n++)
		    		{
				    	if(PropInfo[p][pID] == PLAYER_INFO[i][CasaID][n] && PropInfo[p][pTipo] == 3)
						{
							ganaciasresta += PropInfo[p][pGanancias];
							PropInfo[p][pGanancias] = 0;
						}
					}
				}
				for(new e = 0; e < MAX_GARAGES; e++){
					if(Estacionamientos[e][Dueno] == PLAYER_INFO[i][pID]){
						for(new v, h = GetVehiclePoolSize(); v <= h; v++){
							if(GetVehicleVirtualWorld(v) == Estacionamientos[e][eMundoVirtual] &&  GetVehicleInterior(v) == Estacionamientos[e][eInterior]) gananciasest += 150;
						}
					}
				}
				if(GetVehicleInterior(autos[i]) != 0 && PLAYER_INFO[i][vEstacionado1] > 0) { gastosest += 150; }
				if(GetVehicleInterior(autos2[i]) != 0 && PLAYER_INFO[i][vEstacionado2] > 0) { gastosest += 150; }
				if(GetVehicleInterior(autos3[i]) != 0 && PLAYER_INFO[i][vEstacionado3] > 0) { gastosest += 150; }
				if(GetVehicleInterior(autos4[i]) != 0 && PLAYER_INFO[i][vEstacionado4] > 0) { gastosest += 150; }
				PLAYER_INFO[i][pBanco] -= gastosest;
				PLAYER_INFO[i][pBanco] += gananciasest;
				suma = paga+gananciasest-estacionamiento-seguros,sumat = suma+intereses;
				SendClientMessage(i, COLOR_WHITE, "{F0F0F0}/_____________ RESUMEN DE TU CUENTA _____________/");
				if(gananciasest > 0) SendClientMessageEx(i,COLOR_WHITE," Ganancias de estacionamiento: {f21111}$%d", gananciasest);
				if(gastosest > 0) SendClientMessageEx(i, COLOR_WHITE, " Estacionamiento de vehículos: {FF3300}-$%d",Numeros(gastosest));
				if(ganaciasresta > 0) SendClientMessageEx(i,COLOR_WHITE, " Ganancias por restaurante: {f21111}$%s", Numeros(ganaciasresta));
				if(seguros > 0) SendClientMessageEx(i, COLOR_WHITE, " Seguro de vehículos: {FF3300}-$%d",seguros);
				if(PLAYER_INFO[i][pDuty] == 1 && PLAYER_INFO[i][mDuty] ==1) MensajeEx(i,COLOR_WHITE, " Pago por servir a la Ley: {f21111}$10.000"),sumat=sumat+10000;
				if(suma >= 0) {
					SendClientMessageEx(i,COLOR_WHITE, " Pago Diario: {f21111}$%d {FFFFFF}| Gastos: {FF3300}$%d {FFFFFF} | Total: {f21111}$%d", paga,gastos,suma);
					SendClientMessageEx(i,COLOR_WHITE, " Saldo Bancario: {f21111}$%d{FFFFFF} | Ganancias (intereses): {f21111}$%d",PLAYER_INFO[i][pBanco]+suma, intereses);
				}
				else if(suma < 0) {
					SendClientMessageEx(i,COLOR_WHITE, " Pago Diario: {f21111}$%d {FFFFFF}| Gastos: {FF3300}-$%d {FFFFFF} | Total: {FF3300}-$%d", paga,gastos,suma);
					SendClientMessageEx(i,COLOR_WHITE, " Saldo Bancario: {f21111}$%d{FFFFFF} | Ganancias (intereses): {f21111}$%d",PLAYER_INFO[i][pBanco]-suma, intereses);
				}
				new cuentaterris;
				for(new t = 0; t != MAX_T; t ++)
				{
					if(TERRITORIOS_INFO[t][Territorio_Valido] && TERRITORIOS_INFO[t][Territorio_BandaID] != 0)
					{
						if(TERRITORIOS_INFO[t][Territorio_BandaID] == PLAYER_INFO[i][pFaccion]){cuentaterris++;}
					}
				}
				if(Emisoras[i][TransEmisora] == 1)
				{
					new emisoraid, pagalocutor = 0, oyentes = 0;
					emisoraid = Emisoras[i][CabinaOcupada];
					oyentes = GetOyentesEmisora(emisoraid);
					pagalocutor = 3000+(oyentes*500);
					paga += pagalocutor;
					SendClientMessageEx(i, -1, "Ganancias por la emisora de radio: {f21111}$%d", pagalocutor);
				}
				if(cuentaterris != 0)
				{
					paga += cuentaterris*200;
					SendClientMessageEx(i,COLOR_WHITE," Ganancias por territorios(%d): {f21111}$%d",cuentaterris,cuentaterris*200);
				}
				SendClientMessage(i, COLOR_WHITE, "{f21111}/________________ FIN DEL RESUMEN ________________/");
				PayDayRZ = 1;
				SendClientMessage(i, COLOR_WHITE,"El primero en usar {f21111}/payday{FFFFFF} se lleva el regalo");
				PLAYER_INFO[i][pBanco] += sumat;
				if(PLAYER_INFO[i][pExperiencia] < PLAYER_INFO[i][ExperienciaTotal]) PLAYER_INFO[i][pExperiencia]++,BarraExp(i, 1);
			}
		}
	}
	return true;
}
public OnPlayerPressButton(playerid, buttonid)
{
	new accesoa=0;
	// Centro de emisoras
	if(buttonid == Botones[2])
	{
		if(Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2)
		{
			accesoa=1;
		}
		if(accesoa == 0) return 1;
		if(YaEstaAbierta[1] == 0)
		{
			YaEstaAbierta[1] = 1;
			return MoveDynamicObject(PuertasDeBotones[2],390.000000, 174.539993, 1039.109985, 3.0);
		}
		else
		{
			YaEstaAbierta[1] = 0;
			return MoveDynamicObject(PuertasDeBotones[2],388.7088, 174.3999, 1039.1100, 3.0);
		}
	}
	// Emisora 1
	if(buttonid == Botones[4])
	{
		if(CabinasOcupadasEmisoras[1][0] == 1)
		{
			if(CabinasOcupadasEmisoras[1][1] == playerid)
			{
				accesoa=1;
			}
		}
		else if(CabinasOcupadasEmisoras[1][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2))
		{
			accesoa=1;
		}
		if(accesoa == 0) return 1;
		if(YaEstaAbierta[1] == 0)
		{
			YaEstaAbierta[1] = 1;
			return MoveDynamicObject(PuertasDeBotones[4],349.2600, 177.4100, 1039.1100, 3.0);
		}
		else
		{
			YaEstaAbierta[1] = 0;
			return MoveDynamicObject(PuertasDeBotones[4],349.260010, 178.690002, 1039.109985, 3.0);
		}
	}
	// Emisora 2
	if(buttonid == Botones[6])
	{
		if(CabinasOcupadasEmisoras[2][0] == 1)
		{
			if(CabinasOcupadasEmisoras[2][1] == playerid)
			{
				accesoa=1;
			}
		}
		else if(CabinasOcupadasEmisoras[2][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2))
		{
			accesoa=1;
		}
		if(accesoa == 0) return 1;
		if(YaEstaAbierta[2] == 0)
		{
			YaEstaAbierta[2] = 1;
			return MoveDynamicObject(PuertasDeBotones[6],349.2600, 159.4300, 1039.1100, 3.0);
		}
		else
		{
			YaEstaAbierta[2] = 0;
			return MoveDynamicObject(PuertasDeBotones[6],349.260010, 160.729996, 1039.109985, 3.0);
		}
	}
	// Emisora 3
	if(buttonid == Botones[8])
	{
		if(CabinasOcupadasEmisoras[3][0] == 1)
		{
			if(CabinasOcupadasEmisoras[3][1] == playerid)
			{
				accesoa=1;
			}
		}
		else if(CabinasOcupadasEmisoras[3][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2))
		{
			accesoa=1;
		}
		if(accesoa == 0) return 1;
		if(YaEstaAbierta[3] == 0)
		{
			YaEstaAbierta[3] = 1;
			return MoveDynamicObject(PuertasDeBotones[8],349.1800, 147.9900, 1039.1100, 3.0);
		}
		else
		{
			YaEstaAbierta[3] = 0;
			return MoveDynamicObject(PuertasDeBotones[8],349.1800, 149.2300, 1039.1100, 3.0);
		}
	}
	// Emisora 4
	if(buttonid == Botones[10])
	{
		if(CabinasOcupadasEmisoras[4][0] == 1)
		{
			if(CabinasOcupadasEmisoras[4][1] == playerid)
			{
				accesoa=1;
			}
		}
		else if(CabinasOcupadasEmisoras[4][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2))
		{
			accesoa=1;
		}
		if(accesoa == 0) return 1;
		if(YaEstaAbierta[4] == 0)
		{
			YaEstaAbierta[4] = 1;
			return MoveDynamicObject(PuertasDeBotones[10],359.9500, 152.3300, 1039.1100, 3.0);
		}
		else
		{
			YaEstaAbierta[4] = 0;
			return MoveDynamicObject(PuertasDeBotones[10],361.2100, 152.3300, 1039.1100, 3.0);
		}
	}
	return false;
}
funcion DudaUser(playerid, const params[])
{
	if(sscanf(params, "s[300]", params[0])) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFFF04}/n [Pregunta]{FFFFFF} para preguntar/responder a otros jugadores");
	{
		new string[300];
		if(PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, -1, "No puedes utilizar el canal de dudas en una sanción");
		if(PLAYER_TIMES[playerid][TiempoDuda] > 0)
		{
			format(string,sizeof(string),"Debes esperar %d segundos para volver a utilizar el canal de dudas.",PLAYER_TIMES[playerid][TiempoDuda]);
			SendClientMessage(playerid, 0xff9a00FF,string);
			return 1;
		}
		format(string, sizeof(string), "({009966}Canal /n{009999}) [Nivel %d] %s (%d): %s", PLAYER_INFO[playerid][pNivel], PLAYER_INFO[playerid][Nickname], playerid, params);
		RecienDuda[playerid] = 1;
		foreach(new i : Player)
		{
			if(CanalDudas[i] == 1 && JugadorLogeado[i])
			{
				SendClientMessage(i,0x009999FF,string);
			}
		}
		DudaOff[playerid] = 1;
		PLAYER_TIMES[playerid][TiempoDuda] = 60;
	}
	return 1;
}
funcion DesactivarAlarma(vehicleid)
{
	if(alarma[vehicleid] == 1)
	{
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, false, false, doors, bonnet, boot, objective);
		Luces[vehicleid] = 0;
		KillTimer(TimerLuces[vehicleid]);
		KillTimer(TimerLuces2[vehicleid]);
		alarma[vehicleid] = 0;
	}
}
funcion ColgarLaLlamada(playerid)
{
	SendClientMessage(playerid,-1,"Cortaste la comunicación.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(playerid, 7);
	PLAYER_INFO[playerid][MobileSub] = -1;
	EnLlamada[playerid] = 0;
	finllamada(playerid);
	return 1;
}
funcion TimerLucesIntermitentes(vehicleid)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, true, alarm, doors, bonnet, boot, objective);
	TimerLuces2[vehicleid] = SetTimerEx("TimerLucesIntermitentes2", 500, false, "d", vehicleid);
}
funcion TimerLucesIntermitentes2(vehicleid)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, false, alarm, doors, bonnet, boot, objective);
	TimerLuces[vehicleid] = SetTimerEx("TimerLucesIntermitentes", 500, false, "d", vehicleid);
}
funcion Cerrar_Rejas1()
{
	MoveDynamicObject(reja1,  288.9500, 1415.9700, 12.9000, 2);
	MoveDynamicObject(reja2,  288.9500, 1407.1300, 12.9000, 2);
	return 1;
}
funcion Cerrar_Rejas2()
{
	MoveDynamicObject(reja3,  263.1500, 1416.0500, 13.0500, 2);
	MoveDynamicObject(reja4,  263.1500, 1407.2100, 13.0500, 2);
	return 1;
}
funcion Cerrar_Rejas3()
{
	MoveDynamicObject(reja5,  232.3900, 1420.7500, 13.1700, 2);
	MoveDynamicObject(reja6,  223.5900, 1420.7500, 13.1700, 2);
	return 1;
}
funcion Cerrar_Porton()
{
	MoveDynamicObject(porton, 1589.267700, -1638.286499, 14.816412, 2);
	return 1;
}
//
funcion Cerrar_porton1()
{
    MoveDynamicObject(porton1,  -53.50741, 2643.39600, 65.24223, 2);
	return 1;
}
funcion Cerrar_porton2()
{
    MoveDynamicObject(porton2,  -391.41895, 2713.40015, 64.22679, 2);
	return 1;
}
funcion Cerrar_porton3()
{
    MoveDynamicObject(porton3,  2423.85425, -2083.68237, 15.03730, 2);
	return 1;
}
funcion Cerrar_Barrera()
{
	MoveDynamicObject(barrera, 1544.6943359375, -1630.73046875, 13.27956199646-0.0001, 0.0001, 0, 90, 90);
	return 1;
}
funcion Cerrar_Puerta2()
{
	MoveDynamicObject(puerta_2,216.32820, 116.53640, 998.04547,1.5);
	MoveDynamicObject(puerta_3,219.33839, 116.53640, 998.04547,1.5);
	return 1;
}
funcion Cerrar_Puerta1()
{
	MoveDynamicObject(puerta_1,1582.63, -1638.02, 12.41,1.5);
	return 1;
}
funcion Cerrar_RejaLVPD2()
{
	MoveDynamicObject(PuertasLVPD[2],209.0100, 159.1100, 1003.2800,1.5);
	return 1;
}

ContarMiembrosEnTerritorio(banda_id, terri_id)
{
	new count;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_INFO[i][pFaccion] > 1)
			{
				if(PLAYER_INFO[i][pFaccion] == banda_id && PLAYER_INFO[i][Agonizando] == 0)
				{
					if(IsPlayerInDynamicArea(i, TERRITORIOS_INFO[terri_id][Territorio_Area])) count ++;
				}
			}
		}
	}
	return count;
}
ComenzarAtaqueTerritorio(banda_id, terri_id, time)
{
	BandasInfo[banda_id][B_Atacando] = true;
	BandasInfo[banda_id][UltimoAtaque] = gettime() + (60*3);
	TERRITORIOS_INFO[terri_id][Territorio_EnGuerra] = true;
	TERRITORIOS_INFO[terri_id][Territorio_AtacanteID] = banda_id;
	TERRITORIOS_INFO[terri_id][Territorio_Tiempo] = time;
	TERRITORIOS_INFO[terri_id][Territorio_UltimoA] = gettime();
	UpdateGangZoneColor(terri_id);
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIOS_INFO[terri_id][Territorio_Tiempo]));
	TextDrawSetString(Territorio_TD[1], message);
	KillTimer(TERRITORIOS_INFO[terri_id][Territorio_TimerEx]);
	TERRITORIOS_INFO[terri_id][Territorio_TimerEx] = SetTimerEx("UpdateTerritorio", 1000, false, "i", terri_id);
	
	new message_police[145];
	format(message_police, sizeof message_police, "{4286f4}[Central policía] {FFFFFF}%s comenzó a atacar un territorio en %s.", BandasInfo[banda_id][BNombre], TERRITORIOS_INFO[terri_id][Territorio_Lugar]);
    SendRadioPoliceMessage(-1, message);
    
	if(TERRITORIOS_INFO[terri_id][Territorio_Usado])
	{
		BandasInfo[ TERRITORIOS_INFO[terri_id][Territorio_BandaID2] ][B_Atacando] = true;
		format(message, sizeof message, "{FFFF04}[Banda] {FFFFFF}%s comenzó a atacar el barrio de la banda %s en %s.", BandasInfo[banda_id][BNombre], BandasInfo[ TERRITORIOS_INFO[terri_id][Territorio_BandaID2]][BNombre], TERRITORIOS_INFO[terri_id][Territorio_Lugar]);
        foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_INFO[i][pFaccion] == banda_id || (TERRITORIOS_INFO[terri_id][Territorio_Usado]) && (PLAYER_INFO[i][pFaccion] == TERRITORIOS_INFO[terri_id][Territorio_BandaID2]))
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIOS_INFO[terri_id][Territorio_Area]))
					{
						new r, g, b, a;
						HexToRGBA(BandasInfo[PLAYER_INFO[i][pFaccion]][BColor], r, g, b, a);
						TextDrawShowForPlayer(i, Territorio_TD[1]);
						TextDrawShowForPlayer(i, Territorio_TD[0]);
					}
				}
			}
		}
	}
	else
	{
		format(message, sizeof message, "{FFFF04}[Banda] {FFFFFF}%s comenzó a atacar un barrio en %s.", BandasInfo[banda_id][BNombre], TERRITORIOS_INFO[terri_id][Territorio_Lugar]);
    
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_INFO[i][pFaccion] == banda_id)
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIOS_INFO[terri_id][Territorio_Area]))
					{
						new r, g, b, a;
						HexToRGBA(BandasInfo[PLAYER_INFO[i][pFaccion]][BColor], r, g, b, a);
						TextDrawShowForPlayer(i, Territorio_TD[1]);
						TextDrawShowForPlayer(i, Territorio_TD[0]);
					}
				}
			}
		}
	}
	return 1;
}
HexToRGBA(colour, &r, &g, &b, &a)
{
	r = (colour >> 24) & 0xFF;
	g = (colour >> 16) & 0xFF;
	b = (colour >> 8) & 0xFF;
	a = colour & 0xFF;
}
RGBAToHex(r, g, b, a)
{
	return (r<<24 | g<<16 | b<<8 | a);
}
stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}
stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}
HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_T; i ++)
	{
		if(!TERRITORIOS_INFO[i][Territorio_Valido]) continue;
		GangZoneHideForPlayer(playerid, TERRITORIOS_INFO[i][Territorio_GZ]);
	}
	return 1;
}
SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_T; i ++)
	{
		if(!TERRITORIOS_INFO[i][Territorio_Valido]) continue;
		if(TERRITORIOS_INFO[i][Territorio_EnGuerra])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(BandasInfo[TERRITORIOS_INFO[i][Territorio_AtacanteID]][BColor], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);
			GangZoneFlashForPlayer(playerid, TERRITORIOS_INFO[i][Territorio_GZ], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIOS_INFO[i][Territorio_GZ], TERRITORIOS_INFO[i][Territorio_Color]);
	}
	return 1;
}
UpdateGangZoneColor(index)
{
	if(TERRITORIOS_INFO[index][Territorio_EnGuerra])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(BandasInfo[TERRITORIOS_INFO[index][Territorio_AtacanteID]][BColor], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_INFO[i][pFaccion] > 1)
				{
					GangZoneFlashForPlayer(i, TERRITORIOS_INFO[index][Territorio_GZ], flash_color);
				}
			}
		}
	}
	else
	{
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_INFO[i][pFaccion] > 1)
				{
					GangZoneShowForPlayer(i, TERRITORIOS_INFO[index][Territorio_GZ], TERRITORIOS_INFO[index][Territorio_Color]);
				}
			}
		}
	}
	return 1;
}
public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float:amount, weaponid, bodypart)
{
	if(TieneEncargo[playerid] > 0)
	{
		if(damaged_actorid == Encargo[TieneEncargo[playerid]][Objetivo] && IsValidActor(Encargo[TieneEncargo[playerid]][Objetivo]) && Encargo[TieneEncargo[playerid]][ObjetivoTake] == 1)
		{
			ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Objetivo], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
			SetTimerEx("AdiosObjetivo",20000,false,"d",TieneEncargo[playerid]);
			Encargo[TieneEncargo[playerid]][ObjetivoTake] = 2;
			SetPlayerCheckpoint(Encargo[TieneEncargo[playerid]][IdColega],-2157.8093,654.7702,51.9927, 3.0);
			Encargo[TieneEncargo[playerid]][SegundosMision] = 300;
			TextDrawSetString(MisionCriminal[TieneEncargo[playerid]], "~r~Huye~w~ con tu colega.");
			TextDrawSetString(MisionColega[TieneEncargo[playerid]], "~g~Huye~w~ en el vehiculo de tu colega.");
			SendClientMessage(Encargo[TieneEncargo[playerid]][IdCriminal],-1,"Huye en el vehículo de tu colega, la policía los está buscando.");
			SendClientMessage(Encargo[TieneEncargo[playerid]][IdColega],-1,"Huye con tu colega, la policía los está buscando.");
			SetPlayerWantedLevel(Encargo[TieneEncargo[playerid]][IdCriminal], 2);
			SetPlayerWantedLevel(Encargo[TieneEncargo[playerid]][IdColega], 2);
		}
		if(damaged_actorid == Encargo[TieneEncargo[playerid]][Objetivo] && IsValidActor(Encargo[TieneEncargo[playerid]][Objetivo]) && Encargo[TieneEncargo[playerid]][ObjetivoTake] == 0)
		{
			if(IsValidActor(Encargo[TieneEncargo[playerid]][Actor1])) ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Actor1], "ped","cower", 4.1,1,0,0,1,0);
			if(IsValidActor(Encargo[TieneEncargo[playerid]][Actor2])) ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Actor2], "ped","cower", 4.1,1,0,0,1,0);
			ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Objetivo], "SWEET","Sweet_injuredloop", 4.1,1,0,0,1,0);
			Encargo[TieneEncargo[playerid]][ObjetivoTake] = 1;
		}
		if(damaged_actorid == Encargo[TieneEncargo[playerid]][Actor1] && IsValidActor(Encargo[TieneEncargo[playerid]][Objetivo]))
		{
			ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Actor1], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
			Encargo[TieneEncargo[playerid]][Bajas]++;
		}
		if(damaged_actorid == Encargo[TieneEncargo[playerid]][Actor2] && IsValidActor(Encargo[TieneEncargo[playerid]][Objetivo]))
		{
			ApplyActorAnimation(Encargo[TieneEncargo[playerid]][Actor2], "WUZI","CS_Dead_Guy", 4.1,1,0,0,1,0);
			Encargo[TieneEncargo[playerid]][Bajas]++;
		}
	}
	return 1;
}
timer KickFix[350](playerid) return Kick(playerid);

resetearcoches()
{
	for(new i = 0; i <= GetVehiclePoolSize(); i++)
	{
	    new bool:respawn = true;
		foreach(new u : Player)
		{
			if(i == autos[u] || i == autos2[u] || i == autos3[u] || i == autos4[u] || IsPlayerInVehicle(u, i))
			{
			    respawn = false;
			    break;
			}
		}
		if(respawn) SetVehicleToRespawn(i);
	}
	return 1;
}

resetearcochesall()
{
	for(new v = 0; v <= GetVehiclePoolSize(); v++)
	{
	    new bool:respawn = true;
		foreach(new i : Player)
		{
			if(IsPlayerInVehicle(i, v))
			{
			    respawn = false;
			    break;
			}
		}
		if(respawn) SetVehicleToRespawn(v);
	}
	return 1;
}

ActualizarRadar()
{
	foreach(new playerid : Player)
	{
		if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][pCargos] >= 1||PLAYER_INFO[playerid][mDuty] == 1 && PLAYER_INFO[playerid][pCargos] >= 1)
	    {
	        PLAYER_INFO[playerid][pCargos] = 0;
			SetPlayerWantedLevel(playerid, 0);
	    }
		if(PLAYER_INFO[playerid][pFaccion] == 1 && PLAYER_INFO[playerid][pDuty] == 1||PLAYER_INFO[playerid][pFaccion] == 2 && PLAYER_INFO[playerid][mDuty] == 1)
		{
			foreach(new i : Player)
			{
			    if(PLAYER_INFO[i][pDuty] == 0 && PLAYER_TEMP[i][VariableCaido] == 0||PLAYER_INFO[i][mDuty] == 0 && PLAYER_TEMP[i][VariableCaido] == 0)
			    {
					switch(PLAYER_INFO[i][pCargos])
					{
						case 0: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO0);
						case 1: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO1);
						case 2: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO2);
						case 3: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO3);
						case 4: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO4);
						case 5: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO5);
						case 6: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
						default: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
					}
				}
				else if(PLAYER_TEMP[i][VariableCaido] == 1  || (Esposando[i] == 2 || PLAYER_INFO[i][pCargos] > 0) && EnPatrulla[i] == 1)
				{
				    SetPlayerMarkerForPlayer(playerid, i, COLORCARGO7);
				}
			}
		}
		// Trabajo Medico
		if(LlamadaMedicos[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if(Reanimado[x] == 0 && RopaMedi[x] == 1 && (PLAYER_INFO[x][pTrabajo] == T_Medico || PLAYER_INFO[x][pTrabajo2] == T_Medico))
				{
					GetPlayerPos(x, DeathXH[x],DeathYH[x],DeathZH[x]);
					SetPlayerMarkerForPlayer(x, playerid, COLORABATIDO);
				}
			}
		}
		// Trabajo Taxi
		if(LlamadaTaxi[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if((PLAYER_INFO[x][pTrabajo] == T_Taxista || PLAYER_INFO[x][pTrabajo2] == T_Taxista) && EnTaxi[x] == 1)
				{
					SetPlayerMarkerForPlayer(x, playerid, COLOR_AMARILLO);
				}
			}
		}
		// Trabajo Mecanico
		if(LlamadaMeca[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if((RopaMeca[x] == 1) && (PLAYER_INFO[x][pTrabajo] == T_Mecanico || RopaMeca[x] == 1 && PLAYER_INFO[x][pTrabajo2] == T_Mecanico))
				{
					SetPlayerMarkerForPlayer(x, playerid, COLOR_AZUL);
				}
			}
		}
	}
	return 1;
}

public AutoCheats2()
{
	contadoravion += 7;
	if(contadoravion == 301)
	{
		if(IsValidObject(avion[0])) DestroyObject(avion[0]);
		if(IsValidObject(avion[1])) DestroyObject(avion[1]);
		avion[0] = CreateObject(14553, 133.52789, 2329.73804, 1954.93250,   0.00000, 0.00000, 0.00000);
		avion[1] = CreateObject(14548, 133.52789, 2329.73804, 1954.93250,   0.00000, 0.00000, 0.00000);
		contadoravion = 0;
		foreach(new i : Player)
		{
			if(ViajeAvion[i] == 1 && IsPlayerInRangeOfPoint(i, 20.0, 414.7434, 2533.9641, 19.1484))
			{
				NoTeleportHack(i);
				SendClientMessage(i, -1, "Por favor evita saltar y correr dentro del avión.");
				DarArma(i, 46);
				ViajeAvion[i] = 0;
				new vR = random(sizeof(Saltos));
				SetPlayerPosEx(i, Saltos[vR][0], Saltos[vR][1], Saltos[vR][2]);
				SetTimerEx("QuitarCargando", 3000, false, "d", i);
			}
		}
		SetTimer("MoverAvion", 3000, false);
	}
	return 1;
}

funcion ReJoinNPC(number)
{
    switch(number)
	{
	    case 0: { ConnectNPC("Marcelo","Marcelo"); }
	    case 2: { ConnectNPC("MrBeast","MrBeast"); }
	    case 1: { ConnectNPC("Alejandro","Alejandro"); }
	    case 3: { ConnectNPC("HippePepe","HippePepe"); }
	    case 4: { ConnectNPC("Jorge","Jorge"); }
	    case 5: { ConnectNPC("Ignacio","Ignacio"); }
	    case 6: { ConnectNPC("Hugo","Hugo"); }
	    case 7: { ConnectNPC("Mao","Mao"); }
	    case 8: { ConnectNPC("Brayan","Brayan"); }
	}
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}
public TiempoArresto(playerid)
{
	new string[258];
	if(Esposando[playerid] == 0) return 1;
	if(GetPlayerInterior(playerid) > 0)
	{
		SetTimerEx("Encerrando2",500,false,"d",playerid);
	}
	GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
	Esposando[playerid] = 2;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(playerid,0);
	SetPVarInt(playerid, "IsFrozen", 0);
	format(string, sizeof(string), "{3399FF}[Radio de policía]{FFFFFF} %s reportando: {009BE4}%s{FFFFFF}[%d] ha sido capturado, procedo a entregarlo.",NombreJugador(Oficial[playerid]), NombreJugador(playerid), playerid);
	SendRadioMessage(1, -1, string,INVALID_PLAYER_ID);
	//
	ProxDetector(15.0,Oficial[playerid],string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	SetPlayerChatBubble(Oficial[playerid],string,COLOR_FADE3,15.0,5000);
	Oficial[playerid] = INVALID_PLAYER_ID;
 	foreach(new i : Player)
 	{
		if(PLAYER_INFO[i][pDuty] == 1||PLAYER_INFO[i][mDuty] == 1)
		{
			SetPlayerMarkerForPlayer(i, playerid, c7_color);
		}
	}
	return 1;
}
BICI(carid)
{
	if(GetVehicleModel(carid) == 481 ||GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}
MOTO(carid)
{
	new MotoVeh[] = { 448, 461, 462, 463, 468, 471, 521, 522, 581, 586 };
	for(new i = 0; i < sizeof(MotoVeh); i++)
	{
		if(GetVehicleModel(carid) == MotoVeh[i]) return 1;
	}
	return 0;
}
SAPD(carid)
{
	new SAPDVeh[] = { 427, 430, 490, 523, 528, 596, 597, 598, 599, 601 };
	for(new i = 0; i < sizeof(SAPDVeh); i++)
	{
		if(GetVehicleModel(carid) == SAPDVeh[i]) return 1;
	}
	return 0;
}
HELISAPD(carid)
{
	if(GetVehicleModel(carid) == 497) return 1;
	return 0;
}
//
MILI(carid)
{
	new MILIVeh[] = { 470, 432, 433 };
	for(new i = 0; i < sizeof(MILIVeh); i++)
	{
		if(GetVehicleModel(carid) == MILIVeh[i]) return 1;
	}
	return 0;
}
HELIMILI(carid)
{
    new HELIMILIVeh[] = { 548, 520, 425 };
	for(new i = 0; i < sizeof(HELIMILIVeh); i++)
	{
	   if(GetVehicleModel(carid) == HELIMILIVeh[i]) return 1;
	}
	return 0;
}
//
XD1(carid)
{
	new XD1Veh[] = { 588 };
	for(new i = 0; i < sizeof(XD1Veh); i++)
	{
		if(GetVehicleModel(carid) == XD1Veh[i]) return 1;
	}
	return 0;
}
//
AMBU(carid)
{
	if(GetVehicleModel(carid) == 416) return 1;
	return 0;
}
CAMION(carid)
{
	if(GetVehicleModel(carid) == 609 ||GetVehicleModel(carid) == 456) return 1;
	return 0;
}
EsUnTren(carid)
{
	if(GetVehicleModel(carid) == 570 || GetVehicleModel(carid) == 538) return 1;
	return 0;
}
BOTE(carid)
{
	if(GetVehicleModel(carid) == 453) return 1;
	return 0;
}
AVION(carid)
{
	new AirVeh[] = { 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469 };
	for(new i = 0; i < sizeof(AirVeh); i++)
	{
		if(GetVehicleModel(carid) == AirVeh[i]) return 1;
	}
	return 0;
}
BAUL6(carid)
{
	new v = GetVehicleModel(carid);
	if(v == 400||v == 404||v == 418||v == 422||v == 470||v == 478||v == 489||v == 495||v == 505||v == 543||v == 554||v == 579||v == 605) return 1;
	return 0;
}
BAUL8(carid)
{
	new v = GetVehicleModel(carid);
	if(v == 403||v == 413||v == 414||v == 431||v == 437||v == 440||v == 443||v == 459||v == 482||v == 499||v == 514||v == 515||v == 578) return 1;
	return 0;
}
DFT(carid)
{
	if(GetVehicleModel(carid) == 578) return 1;
	return 0;
}
COSECHA(carid)
{
	if(GetVehicleModel(carid) == 532) return 1;
	return 0;
}
BASU(carid)
{
	if(GetVehicleModel(carid) == 408) return 1;
	return 0;
}
TAXI(carid)
{
	if(GetVehicleModel(carid) == 420) return 1;
	return 0;
}
public DesCargarMapeosEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetPVarInt(playerid, "IsFrozen", 1);
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(PLAYER_INFO[playerid][pNivel] <= 2) DisableRemoteVehicleCollisions(playerid,1);
	new Float:VHealth;
	GetVehicleHealth(vehicleid,VHealth);
	if(VHealth > 365) vehaveriado[vehicleid] = 0;
	if(VHealth <= 365) vehaveriado[vehicleid] = 1;
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	#if DEBUG_GM == 1
	printf("(OnVehicleSpawn) VehicleID: %d", vehicleid);
	#endif
	foreach(new i : Player)
	{
		if(vehicleid == autos[i])	return Auto1(i, 3);
		if(vehicleid == autos2[i])	return Auto2(i, 3);
		if(vehicleid == autos3[i])	return Auto3(i, 3);
		if(vehicleid == autos4[i])	return Auto4(i, 3);
	}
	ROBO_COCHE[vehicleid][EsRobo] = 0;
	if(SAPD(vehicleid)) bloqueado[vehicleid] = 0;
	new vehiclefuel = CombustibleCoche(GetVehicleModel(vehicleid));
	
	for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
  		if(!FABRICAS_INFO[ID][f_VALID]) continue;
  		if(FABRICAS_INFO[ID][f_VEHICLES][0] == vehicleid)
  		{
	        FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
  		    SetVehiclePosEx(vehicleid, -2004.7108,213.2912,1035.9205);
			SetVehicleZAngle(vehicleid, 269.5182);
  		    RepairVehicle(vehicleid);
      		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;

			FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
			FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
     		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;

      		for(new slot = 0; slot < MAX_OBJETOS; slot++)
      		{
      			VEHICLE_OBJECTS[ vehicleid ][slot][vobject_ATTACHED] = false;
				UpdateVehicleAttachedObject(vehicleid, slot);
			}
			LinkVehicleToInterior(vehicleid, FABRICAS_INFO[ID][f_INTERIOR]);
			SetVehicleVirtualWorldEx(vehicleid, FABRICAS_INFO[ID][f_VW]);
			SetVehicleHealth(vehicleid, 5000.0);
		}
		else if(vehicleid == FABRICAS_INFO[ID][f_VEHICLES][1])
		{
  		    SetVehiclePosEx(vehicleid, -2000.0254,208.3542,1035.9175);
			SetVehicleZAngle(vehicleid, 291.0907);
  		    RepairVehicle(vehicleid);
  		    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleHealth(vehicleid, 5000.0);
            
      		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
      		FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
      		FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
      		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;

			LinkVehicleToInterior(vehicleid, FABRICAS_INFO[ID][f_INTERIOR]);
			SetVehicleVirtualWorldEx(vehicleid, FABRICAS_INFO[ID][f_VW]);
		}
    }
	VehicleFuel[vehicleid] = vehiclefuel;
	MotorAuto[vehicleid] = 0;
	Balde[vehicleid] = 0;
	Luces[vehicleid] = 0;
	return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	#if DEBUG_GM == 1
	printf("(OnVehiclePaintjob) PlayerID: %d | VehicleID: %d | PaintJobID: %d", playerid, vehicleid, paintjobid);
	#endif
	if(vehicleid == autos[playerid])
	{
		new Query[680];
		PLAYER_INFO[playerid][vPJ] = paintjobid;
		mysql_format(handle_db, Query, 200, "UPDATE `p_vehicles` SET `PaintJob`='%d' WHERE `Propietario`='%d' AND `Slot` = '1'",paintjobid, PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	if(vehicleid == autos2[playerid])
	{
		new Query[680];
		PLAYER_INFO[playerid][vPJ2] = paintjobid;
		mysql_format(handle_db, Query, 200, "UPDATE `p_vehicles` SET `PaintJob`='%d' WHERE `Propietario`='%d' AND `Slot` = '2'",paintjobid, PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	if(vehicleid == autos3[playerid])
	{
		new Query[680];
		PLAYER_INFO[playerid][vPJ3] = paintjobid;
		mysql_format(handle_db, Query, 200, "UPDATE `p_vehicles` SET `PaintJob`='%d' WHERE `Propietario`='%d' AND `Slot` = '3'",paintjobid, PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	if(vehicleid == autos4[playerid])
	{
		new Query[680];
		PLAYER_INFO[playerid][vPJ4] = paintjobid;
		mysql_format(handle_db, Query, 200, "UPDATE `p_vehicles` SET `PaintJob`='%d' WHERE `Propietario`='%d' AND `Slot` = '4'",paintjobid, PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	return 1;
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new Query[680];
	#if DEBUG_GM == 1
	printf("(OnVehicleRespray) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
	#endif
	if(IsPlayerInVehicle(playerid, autos[playerid]))
	{
		mysql_format(handle_db, Query, 250, "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE `Propietario`='%d' AND `Slot` = '1'",color1,color2,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	else if(IsPlayerInVehicle(playerid, autos2[playerid]))
	{
		mysql_format(handle_db, Query, 250, "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE `Propietario`='%d' AND `Slot` = '2'",color1,color2,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	else if(IsPlayerInVehicle(playerid, autos3[playerid]))
	{
		mysql_format(handle_db, Query, 250, "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE `Propietario`='%d' AND `Slot` = '3'",color1,color2,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	else if(IsPlayerInVehicle(playerid, autos4[playerid]))
	{
		mysql_format(handle_db, Query, 250, "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE `Propietario`='%d' AND `Slot` = '4'",color1,color2,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
	}
	return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	#if DEBUG_GM == 1
	printf("(OnEnterExitModShop) PlayerID: %d | EnterExit: %d", playerid, enterexit);
	#endif
	new Query[256],color_1, color_2;
	
	GLOBAL_VEHICLES[GetPlayerVehicleID(playerid)][pt_INMUTE_VEH_TP] = gettime() + 3;
	
	if(enterexit == 0)
	{
		if(IsPlayerInVehicle(playerid, autos[playerid]))
		{
			GetVehicleColor(autos[playerid] , color_1, color_2);
			PLAYER_INFO[playerid][vColor1] = color_1;
			PLAYER_INFO[playerid][vColor2] = color_2;
			PLAYER_INFO[playerid][vComponentes0] = GetVehicleComponentInSlot(autos[playerid], 0);
			PLAYER_INFO[playerid][vComponentes1] = GetVehicleComponentInSlot(autos[playerid], 1);
			PLAYER_INFO[playerid][vComponentes2] = GetVehicleComponentInSlot(autos[playerid], 2);
			PLAYER_INFO[playerid][vComponentes3] = GetVehicleComponentInSlot(autos[playerid], 3);
			PLAYER_INFO[playerid][vComponentes4] = GetVehicleComponentInSlot(autos[playerid], 4);
			PLAYER_INFO[playerid][vComponentes5] = GetVehicleComponentInSlot(autos[playerid], 5);
			PLAYER_INFO[playerid][vComponentes6] = GetVehicleComponentInSlot(autos[playerid], 6);
			PLAYER_INFO[playerid][vComponentes7] = GetVehicleComponentInSlot(autos[playerid], 7);
			PLAYER_INFO[playerid][vComponentes8] = GetVehicleComponentInSlot(autos[playerid], 8);
			PLAYER_INFO[playerid][vComponentes9] = GetVehicleComponentInSlot(autos[playerid], 9);
			PLAYER_INFO[playerid][vComponentes10] = GetVehicleComponentInSlot(autos[playerid], 10);
			PLAYER_INFO[playerid][vComponentes11] = GetVehicleComponentInSlot(autos[playerid], 11);
			PLAYER_INFO[playerid][vComponentes12] = GetVehicleComponentInSlot(autos[playerid], 12);
			PLAYER_INFO[playerid][vComponentes13] = GetVehicleComponentInSlot(autos[playerid], 13);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes1`='%d',`Componentes2`='%d',`Componentes3`='%d',`Componentes4`='%d',`Componentes5`='%d',`Componentes6`='%d', `Componentes7`='%d' WHERE `Propietario`='%d' AND `Slot` = '1'",PLAYER_INFO[playerid][vComponentes1],PLAYER_INFO[playerid][vComponentes2],PLAYER_INFO[playerid][vComponentes3],PLAYER_INFO[playerid][vComponentes4],PLAYER_INFO[playerid][vComponentes5],PLAYER_INFO[playerid][vComponentes6],PLAYER_INFO[playerid][vComponentes7],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes8`='%d',`Componentes9`='%d',`Componentes10`='%d',`Componentes11`='%d',`Componentes12`='%d',`Componentes13`='%d',`Componentes0`='%d' WHERE `Propietario`='%d' AND `Slot` = '1'",PLAYER_INFO[playerid][vComponentes8],PLAYER_INFO[playerid][vComponentes9],PLAYER_INFO[playerid][vComponentes10],PLAYER_INFO[playerid][vComponentes11],PLAYER_INFO[playerid][vComponentes12],PLAYER_INFO[playerid][vComponentes13],PLAYER_INFO[playerid][vComponentes0],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE Propietario ='%d' AND `Slot` = '1'",color_1,color_2,PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		else if(IsPlayerInVehicle(playerid, autos2[playerid]))
		{
			GetVehicleColor(autos2[playerid] , color_1, color_2);
			PLAYER_INFO[playerid][v2Color1] = color_1;
			PLAYER_INFO[playerid][v2Color2] = color_2;
			PLAYER_INFO[playerid][v2Componentes0] = GetVehicleComponentInSlot(autos2[playerid], 0);
			PLAYER_INFO[playerid][v2Componentes1] = GetVehicleComponentInSlot(autos2[playerid], 1);
			PLAYER_INFO[playerid][v2Componentes2] = GetVehicleComponentInSlot(autos2[playerid], 2);
			PLAYER_INFO[playerid][v2Componentes3] = GetVehicleComponentInSlot(autos2[playerid], 3);
			PLAYER_INFO[playerid][v2Componentes4] = GetVehicleComponentInSlot(autos2[playerid], 4);
			PLAYER_INFO[playerid][v2Componentes5] = GetVehicleComponentInSlot(autos2[playerid], 5);
			PLAYER_INFO[playerid][v2Componentes6] = GetVehicleComponentInSlot(autos2[playerid], 6);
			PLAYER_INFO[playerid][v2Componentes7] = GetVehicleComponentInSlot(autos2[playerid], 7);
			PLAYER_INFO[playerid][v2Componentes8] = GetVehicleComponentInSlot(autos2[playerid], 8);
			PLAYER_INFO[playerid][v2Componentes9] = GetVehicleComponentInSlot(autos2[playerid], 9);
			PLAYER_INFO[playerid][v2Componentes10] = GetVehicleComponentInSlot(autos2[playerid], 10);
			PLAYER_INFO[playerid][v2Componentes11] = GetVehicleComponentInSlot(autos2[playerid], 11);
			PLAYER_INFO[playerid][v2Componentes12] = GetVehicleComponentInSlot(autos2[playerid], 12);
			PLAYER_INFO[playerid][v2Componentes13] = GetVehicleComponentInSlot(autos2[playerid], 13);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes1`='%d',`Componentes2`='%d',`Componentes3`='%d',`Componentes4`='%d',`Componentes5`='%d',`Componentes6`='%d',`Componentes7`='%d' WHERE `Propietario`='%d' AND `Slot` = '2'",PLAYER_INFO[playerid][v2Componentes1],PLAYER_INFO[playerid][v2Componentes2],PLAYER_INFO[playerid][v2Componentes3],PLAYER_INFO[playerid][v2Componentes4],PLAYER_INFO[playerid][v2Componentes5],PLAYER_INFO[playerid][v2Componentes6],PLAYER_INFO[playerid][v2Componentes7],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes8`='%d',`Componentes9`='%d',`Componentes10`='%d',`Componentes11`='%d',`Componentes12`='%d',`Componentes13`='%d',`Componentes0`='%d' WHERE `Propietario`='%d' AND `Slot` = '2'",PLAYER_INFO[playerid][v2Componentes8],PLAYER_INFO[playerid][v2Componentes9],PLAYER_INFO[playerid][v2Componentes10],PLAYER_INFO[playerid][v2Componentes11],PLAYER_INFO[playerid][v2Componentes12],PLAYER_INFO[playerid][v2Componentes13],PLAYER_INFO[playerid][v2Componentes0],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE Propietario ='%d' AND `Slot` = '2'",color_1,color_2,PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		else if(IsPlayerInVehicle(playerid, autos3[playerid]))
		{
			GetVehicleColor(autos3[playerid] , color_1, color_2);
			PLAYER_INFO[playerid][v3Color1] = color_1;
			PLAYER_INFO[playerid][v3Color2] = color_2;
			PLAYER_INFO[playerid][v3Componentes0] = GetVehicleComponentInSlot(autos3[playerid], 0);
			PLAYER_INFO[playerid][v3Componentes1] = GetVehicleComponentInSlot(autos3[playerid], 1);
			PLAYER_INFO[playerid][v3Componentes2] = GetVehicleComponentInSlot(autos3[playerid], 2);
			PLAYER_INFO[playerid][v3Componentes3] = GetVehicleComponentInSlot(autos3[playerid], 3);
			PLAYER_INFO[playerid][v3Componentes4] = GetVehicleComponentInSlot(autos3[playerid], 4);
			PLAYER_INFO[playerid][v3Componentes5] = GetVehicleComponentInSlot(autos3[playerid], 5);
			PLAYER_INFO[playerid][v3Componentes6] = GetVehicleComponentInSlot(autos3[playerid], 6);
			PLAYER_INFO[playerid][v3Componentes7] = GetVehicleComponentInSlot(autos3[playerid], 7);
			PLAYER_INFO[playerid][v3Componentes8] = GetVehicleComponentInSlot(autos3[playerid], 8);
			PLAYER_INFO[playerid][v3Componentes9] = GetVehicleComponentInSlot(autos3[playerid], 9);
			PLAYER_INFO[playerid][v3Componentes10] = GetVehicleComponentInSlot(autos3[playerid], 10);
			PLAYER_INFO[playerid][v3Componentes11] = GetVehicleComponentInSlot(autos3[playerid], 11);
			PLAYER_INFO[playerid][v3Componentes12] = GetVehicleComponentInSlot(autos3[playerid], 12);
			PLAYER_INFO[playerid][v3Componentes13] = GetVehicleComponentInSlot(autos3[playerid], 13);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes1`='%d',`Componentes2`='%d',`Componentes3`='%d',`Componentes4`='%d',`Componentes5`='%d',`Componentes6`='%d',`Componentes7`='%d' WHERE `Propietario`='%d' AND `Slot` = '3'",PLAYER_INFO[playerid][v3Componentes1],PLAYER_INFO[playerid][v3Componentes2],PLAYER_INFO[playerid][v3Componentes3],PLAYER_INFO[playerid][v3Componentes4],PLAYER_INFO[playerid][v3Componentes5],PLAYER_INFO[playerid][v3Componentes6],PLAYER_INFO[playerid][v3Componentes7],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes8`='%d',`Componentes9`='%d',`Componentes10`='%d',`Componentes11`='%d',`Componentes12`='%d',`Componentes13`='%d',`Componentes0`='%d' WHERE `Propietario`='%d' AND `Slot` = '3'",PLAYER_INFO[playerid][v3Componentes8],PLAYER_INFO[playerid][v3Componentes9],PLAYER_INFO[playerid][v3Componentes10],PLAYER_INFO[playerid][v3Componentes11],PLAYER_INFO[playerid][v3Componentes12],PLAYER_INFO[playerid][v3Componentes13],PLAYER_INFO[playerid][v3Componentes0],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE Propietario ='%d' AND `Slot` = '3'",color_1,color_2,PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		else if(IsPlayerInVehicle(playerid, autos4[playerid]))
		{
			GetVehicleColor(autos4[playerid] , color_1, color_2);
			PLAYER_INFO[playerid][v4Color1] = color_1;
			PLAYER_INFO[playerid][v4Color2] = color_2;
			PLAYER_INFO[playerid][v4Componentes0] = GetVehicleComponentInSlot(autos4[playerid], 0);
			PLAYER_INFO[playerid][v4Componentes1] = GetVehicleComponentInSlot(autos4[playerid], 1);
			PLAYER_INFO[playerid][v4Componentes2] = GetVehicleComponentInSlot(autos4[playerid], 2);
			PLAYER_INFO[playerid][v4Componentes3] = GetVehicleComponentInSlot(autos4[playerid], 3);
			PLAYER_INFO[playerid][v4Componentes4] = GetVehicleComponentInSlot(autos4[playerid], 4);
			PLAYER_INFO[playerid][v4Componentes5] = GetVehicleComponentInSlot(autos4[playerid], 5);
			PLAYER_INFO[playerid][v4Componentes6] = GetVehicleComponentInSlot(autos4[playerid], 6);
			PLAYER_INFO[playerid][v4Componentes7] = GetVehicleComponentInSlot(autos4[playerid], 7);
			PLAYER_INFO[playerid][v4Componentes8] = GetVehicleComponentInSlot(autos4[playerid], 8);
			PLAYER_INFO[playerid][v4Componentes9] = GetVehicleComponentInSlot(autos4[playerid], 9);
			PLAYER_INFO[playerid][v4Componentes10] = GetVehicleComponentInSlot(autos4[playerid], 10);
			PLAYER_INFO[playerid][v4Componentes11] = GetVehicleComponentInSlot(autos4[playerid], 11);
			PLAYER_INFO[playerid][v4Componentes12] = GetVehicleComponentInSlot(autos4[playerid], 12);
			PLAYER_INFO[playerid][v4Componentes13] = GetVehicleComponentInSlot(autos4[playerid], 13);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes1`='%d',`Componentes2`='%d',`Componentes3`='%d',`Componentes4`='%d',`Componentes5`='%d',`Componentes6`='%d',`Componentes7`='%d' WHERE `Propietario`='%d' AND `Slot` = '4'",PLAYER_INFO[playerid][v4Componentes1],PLAYER_INFO[playerid][v4Componentes2],PLAYER_INFO[playerid][v4Componentes3],PLAYER_INFO[playerid][v4Componentes4],PLAYER_INFO[playerid][v4Componentes5],PLAYER_INFO[playerid][v4Componentes6],PLAYER_INFO[playerid][v4Componentes7],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Componentes8`='%d',`Componentes9`='%d',`Componentes10`='%d',`Componentes11`='%d',`Componentes12`='%d',`Componentes13`='%d',`Componentes0`='%d' WHERE `Propietario`='%d' AND `Slot` = '4'",PLAYER_INFO[playerid][v4Componentes8],PLAYER_INFO[playerid][v4Componentes9],PLAYER_INFO[playerid][v4Componentes10],PLAYER_INFO[playerid][v4Componentes11],PLAYER_INFO[playerid][v4Componentes12],PLAYER_INFO[playerid][v4Componentes13],PLAYER_INFO[playerid][v4Componentes0],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query, sizeof(Query), "UPDATE `p_vehicles` SET `Color1`='%d',`Color2`='%d' WHERE Propietario ='%d' AND `Slot` = '4'",color_1,color_2,PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
	}
	return 1;
}
CargarTerritorios()
{
	new Query[680], total;
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `territorios` WHERE `Z_Activa` = '1' LIMIT %d",MAX_T);
    mysql_query(handle_db, Query, true);
    
 	for(new i = 0; i < cache_num_rows(); i++)
	{
		new gang_color, content[39], territoriosn;
		TERRITORIOS_INFO[i][Territorio_Valido] = true;
		cache_get_value_name(i, "ID", content);			TERRITORIOS_INFO[i][Territorio_ID] = strval(content);
		cache_get_value_name(i, "Banda", content);		TERRITORIOS_INFO[i][Territorio_Banda] = strval(content);
		cache_get_value_name(i, "Nombre",				TERRITORIOS_INFO[i][Territorio_Lugar]);
		cache_get_value_name(i, "Min_X", content);		TERRITORIOS_INFO[i][Territorio_MinX] = floatstr(content);
		cache_get_value_name(i, "Min_Y", content);		TERRITORIOS_INFO[i][Territorio_MinY] = floatstr(content);
		cache_get_value_name(i, "Min_Z", content);		TERRITORIOS_INFO[i][Territorio_MinZ] = floatstr(content);
		cache_get_value_name(i, "Max_X", content);		TERRITORIOS_INFO[i][Territorio_MaxX] = floatstr(content);
		cache_get_value_name(i, "Max_Y", content);		TERRITORIOS_INFO[i][Territorio_MaxY] = floatstr(content);
		cache_get_value_name(i, "Max_Z", content);		TERRITORIOS_INFO[i][Territorio_MaxZ] = floatstr(content);
		cache_get_value_name(i, "Banda", content);		TERRITORIOS_INFO[i][Territorio_BandaID] = strval(content);
		
		TERRITORIOS_INFO[i][Territorio_BandaID2] = 		TERRITORIOS_INFO[i][Territorio_BandaID];
		if(TERRITORIOS_INFO[i][Territorio_Banda] == 0) 	TERRITORIOS_INFO[i][Territorio_Usado] = false;
		if(TERRITORIOS_INFO[i][Territorio_Banda] != 0)
		{
			TERRITORIOS_INFO[i][Territorio_Usado] = false;
			gang_color = 0;
			for(new BANDA_ID; BANDA_ID < MAX_BANDAS; BANDA_ID++)
			{
				if((TERRITORIOS_INFO[i][Territorio_Banda] == BandasInfo[BANDA_ID][bID]) && (BandasInfo[BANDA_ID][EnUso] == 1))
				{
				    cache_get_value_name(i, "Color", content);		gang_color = strval(content);
				    TERRITORIOS_INFO[i][Territorio_Usado] = true;
				    break;
				}
			}
		}
		TERRITORIOS_INFO[i][Territorio_EnGuerra] = false;
		TERRITORIOS_INFO[i][Territorio_AtacanteID] = 0;
		
		if(gang_color == 0) TERRITORIOS_INFO[i][Territorio_Color] = 0x252b2e55;
		else
		{
			new r, g, b, a;
			HexToRGBA(gang_color, r, g, b, a);
			TERRITORIOS_INFO[i][Territorio_Color] = RGBAToHex(r, g, b, 135);
		}
		TERRITORIOS_INFO[i][Territorio_GZ] = 		GangZoneCreate(TERRITORIOS_INFO[i][Territorio_MinX],TERRITORIOS_INFO[i][Territorio_MinY],TERRITORIOS_INFO[i][Territorio_MaxX],TERRITORIOS_INFO[i][Territorio_MaxY]);
		TERRITORIOS_INFO[i][Territorio_Area] = 	CreateDynamicCube(TERRITORIOS_INFO[i][Territorio_MinX],TERRITORIOS_INFO[i][Territorio_MinY],TERRITORIOS_INFO[i][Territorio_MinZ],TERRITORIOS_INFO[i][Territorio_MaxX],TERRITORIOS_INFO[i][Territorio_MaxY],TERRITORIOS_INFO[i][Territorio_MaxZ],0, 0);
		new info[2];
		info[0] = AREA_TYPE_GANGZONE;
		info[1] = i;
		Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIOS_INFO[i][Territorio_Area], E_STREAMER_EXTRA_ID, info);
		territoriosn ++; total++;
	}
	printf("[TERRITORIOS]: %d",total);
	return 1;
}
CargarVehiculos()
{
	new Query[680];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `vehicles`");
	mysql_query(handle_db, Query, true);

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new Float:POS[4],COLOR[2],MODELOW, stringinfovehiculo[70],vehicleid,ID_DB = 0;
	    cache_get_value_name_int(i, "ID",ID_DB);
	    if(ID_DB == 0) continue;

	    cache_get_value_name_int(i, "modelo", MODELOW);
		cache_get_value_name_float(i, "x", POS[0]);
		cache_get_value_name_float(i, "y", POS[1]);
		cache_get_value_name_float(i, "z", POS[2]);
		cache_get_value_name_float(i, "a", POS[3]);
		cache_get_value_name_int(i, "color1", COLOR[0]);
		cache_get_value_name_int(i, "color2", COLOR[1]);

		vehicleid = CreateVehicle(MODELOW, POS[0],POS[1],POS[2],POS[3], COLOR[0],COLOR[1], 300);
		VehiculosInfo[vehicleid][vmodelo] = MODELOW;
		VehiculosInfo[vehicleid][vx] = POS[0];
		VehiculosInfo[vehicleid][vy] = POS[1];
		VehiculosInfo[vehicleid][vz] = POS[2];
		VehiculosInfo[vehicleid][va] = POS[3];
        VehiculosInfo[vehicleid][vcolor2] = COLOR[1];
        VehiculosInfo[vehicleid][vcolor1] = COLOR[0];

        VehiculosInfo[vehicleid][vID] = ID_DB;
		cache_get_value_name(i, "propietario",VehiculosInfo[vehicleid][vpropietario]);
		cache_get_value_name_int(i, "precio", VehiculosInfo[vehicleid][vprecio]);
		cache_get_value_name_int(i, "moneda", VehiculosInfo[vehicleid][vmoneda]);
		cache_get_value_name_int(i, "comprable", VehiculosInfo[vehicleid][vcomprable]);
		cache_get_value_name_int(i, "faccion", VehiculosInfo[vehicleid][vfaccion]);
		cache_get_value_name_int(i, "trabajo", VehiculosInfo[vehicleid][vtrabajo]);

		VehicleFuel[vehicleid] = CombustibleCoche(VehiculosInfo[vehicleid][vmodelo]);
 		ROBO_COCHE[vehicleid][EsRobo] = 0;
		if(VehiculosInfo[vehicleid][vcomprable] == 1)
		{
			switch(VehiculosInfo[vehicleid][vmoneda])
			{
				case 0:	format(stringinfovehiculo, sizeof(stringinfovehiculo), "{FF0000}%s en venta\n{FFFFFF}Precio: {04B404}$%d", NombreAuto[VehiculosInfo[vehicleid][vmodelo]-400],VehiculosInfo[vehicleid][vprecio]);
				case 1:	format(stringinfovehiculo, sizeof(stringinfovehiculo), "{FF0000}%s en venta\n{FFFFFF}Precio: {04B404}%d "SERVER_COIN"", NombreAuto[VehiculosInfo[vehicleid][vmodelo]-400],VehiculosInfo[vehicleid][vprecio]);
			}
			CreateDynamic3DTextLabel(stringinfovehiculo,COLOR_WHITE,0.0,0.0,1.0,10.0,INVALID_PLAYER_ID,vehicleid, 1, 0,0,-1, 100.0);
		}
		AUTOS ++;
	}
	printf("[VEHICULOS]: %d",AUTOS);
	return 1;
}


CargarUsers()
{
    new Query[128];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios`;");
	mysql_query(handle_db, Query, true);
	
	new GET_USERS = cache_num_rows();

    print(" ");
	printf("[CUENTAS]: %d", GET_USERS);
	return 1;
}
public CargarFacciones()
{
	new Query[128], count;
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM facciones");
	mysql_query(handle_db, Query, true);

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    cache_get_value_name_int(i, "id", BandasInfo[i][bID]);
		cache_get_value_name(i, "Nombre", BandasInfo[i][BNombre]);
		cache_get_value_name(i, "Lider", BandasInfo[i][BLider]);
		cache_get_value_name(i, "Rango1", BandasInfo[i][bRango1]);
		cache_get_value_name(i, "Rango2", BandasInfo[i][bRango2]);
		cache_get_value_name(i, "Rango3", BandasInfo[i][bRango3]);
		cache_get_value_name(i, "Rango4", BandasInfo[i][bRango4]);
		cache_get_value_name(i, "Rango5", BandasInfo[i][bRango5]);
		cache_get_value_name(i, "Rango6", BandasInfo[i][bRango6]);
		cache_get_value_name(i, "Rango7", BandasInfo[i][bRango7]);
		cache_get_value_name(i, "Rango8", BandasInfo[i][bRango8]);
		cache_get_value_name_int(i, "EnUso",BandasInfo[i][EnUso]);
		cache_get_value_name_int(i, "Color",BandasInfo[i][BColor]);
		
		cache_get_value_name_int(i, "Rango1Exp", BandasInfo[i][RANK_EXP][0]);
		cache_get_value_name_int(i, "Rango2Exp", BandasInfo[i][RANK_EXP][1]);
		cache_get_value_name_int(i, "Rango3Exp", BandasInfo[i][RANK_EXP][2]);
		cache_get_value_name_int(i, "Rango4Exp", BandasInfo[i][RANK_EXP][3]);
		cache_get_value_name_int(i, "Rango5Exp", BandasInfo[i][RANK_EXP][4]);
		cache_get_value_name_int(i, "Rango6Exp", BandasInfo[i][RANK_EXP][5]);
		cache_get_value_name_int(i, "Rango7Exp", BandasInfo[i][RANK_EXP][6]);

		cache_get_value_name_int(i, "Rango1Edi", BandasInfo[i][RANK_EDIT][0]);
		cache_get_value_name_int(i, "Rango2Edi", BandasInfo[i][RANK_EDIT][1]);
		cache_get_value_name_int(i, "Rango3Edi", BandasInfo[i][RANK_EDIT][2]);
		cache_get_value_name_int(i, "Rango4Edi", BandasInfo[i][RANK_EDIT][3]);
		cache_get_value_name_int(i, "Rango5Edi", BandasInfo[i][RANK_EDIT][4]);
		cache_get_value_name_int(i, "Rango6Edi", BandasInfo[i][RANK_EDIT][5]);
		cache_get_value_name_int(i, "Rango7Edi", BandasInfo[i][RANK_EDIT][6]);

		cache_get_value_name_int(i, "Rango1Inv", BandasInfo[i][RANK_INV][0]);
		cache_get_value_name_int(i, "Rango2Inv", BandasInfo[i][RANK_INV][1]);
		cache_get_value_name_int(i, "Rango3Inv", BandasInfo[i][RANK_INV][2]);
		cache_get_value_name_int(i, "Rango4Inv", BandasInfo[i][RANK_INV][3]);
		cache_get_value_name_int(i, "Rango5Inv", BandasInfo[i][RANK_INV][4]);
		cache_get_value_name_int(i, "Rango6Inv", BandasInfo[i][RANK_INV][5]);
		cache_get_value_name_int(i, "Rango7Inv", BandasInfo[i][RANK_INV][6]);
		count ++;
	}
	printf("[FACCIONES]: %d",count);
	return 1;
}

public TextoCombate(playerid)
{
	if(EnCombate[playerid] == 1)
	{
		if(PLAYER_TIMES[playerid][TiempoCombate] > 0)
		{
			if(CColocado[playerid] == 0)
			{
				GangZoneShowForPlayer(playerid, ModoCombate, -1879048029);
				GangZoneFlashForPlayer(playerid, ModoCombate, -1879048029);
				PLAYER_TIMES[playerid][TiempoCombate]--;
				CColocado[playerid] = 1;
			}
			else
			{
				GangZoneHideForPlayer(playerid, ModoCombate);
				GangZoneStopFlashForPlayer(playerid, ModoCombate);
				PLAYER_TIMES[playerid][TiempoCombate]--;
				CColocado[playerid] = 0;
			}
		}
		else if(PLAYER_TIMES[playerid][TiempoCombate] <= 0)
		{
			GangZoneHideForPlayer(playerid, ModoCombate);
			GangZoneStopFlashForPlayer(playerid, ModoCombate);
			PLAYER_TIMES[playerid][TiempoCombate] = 0;
			CColocado[playerid] = 0;
			EnCombate[playerid] = 0;
			KillTimer(TimerCombate[playerid]);
		}
	}
	else if(EnCombate[playerid] == 0)
	{
		GangZoneHideForPlayer(playerid, ModoCombate);
		GangZoneStopFlashForPlayer(playerid, ModoCombate);
		PLAYER_TIMES[playerid][TiempoCombate] = 0;
		CColocado[playerid] = 0;
		EnCombate[playerid] = 0;
		KillTimer(TimerCombate[playerid]);
	}
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(!IsPlayerConnected(issuerid)) return 1;
    
    if(weaponid >= 49 && weaponid <= 54)
    {
    	PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 3;
    }

    PlayerPlaySoundEx(playerid, 1085,0.0,0.0,0.0);
	PlayerPlaySoundEx(issuerid, 17802, 0.0, 0.0, 0.0);
	
	new LugarCargo[100],expulsar = 0;
	LugarCargo = "Feli";
	if(IsPlayerInRangeOfPoint(issuerid,180.0,1759.6833,-1892.0160,13.5556) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en Unity Station";
	else if(IsPlayerInRangeOfPoint(issuerid,130.0,1173.2209,-1332.7537,13.9884) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en Hospital Central";
	else if(IsPlayerInRangeOfPoint(issuerid,70.0,2030.1166,-1413.7969,16.9989) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital Country General";
	else if((IsPlayerInRangeOfPoint(issuerid,70.0,-1745.5931,-131.6944,3.7314) || IsPlayerInRangeOfPoint(Agresor[playerid],450.0,-1652.7432,23.0748,4.4347)) && GetPlayerInterior(issuerid) == 0) LugarCargo ="en los Muelles de San Fierro";
	else if(IsPlayerInRangeOfPoint(issuerid,100.0,-384.4948,-1474.2228,25.7266) && GetPlayerInterior(issuerid) == 0) LugarCargo ="en las Granjas de Flint Range";
	else if(IsPlayerInRangeOfPoint(issuerid,100.0,-148.6831,-1577.2129,9.3045) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el basural";
	else if(IsPlayerInRangeOfPoint(issuerid,200.0,-2647.9409,605.9929,15.2346) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital de San Fierro";
	else if(IsPlayerInRangeOfPoint(issuerid,200.0,1611.4006,1781.1265,37.8510) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Hospital de Las Venturas";
	else if(IsPlayerInRangeOfPoint(issuerid,200.0,869.8167,873.0883,12.9141) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en la Cantera de Hunter Quarry";
	else if(IsPlayerInRangeOfPoint(issuerid,250,1156.8682,-1334.6033,-10.7922) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 6) LugarCargo = "en Hospital Central",expulsar = 1;
	else if(IsPlayerInRangeOfPoint(issuerid,250,1239.3762,-822.5826,1164.2759) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 9) LugarCargo = "en el Hospital Country General",expulsar = 2;
	else if(IsPlayerInRangeOfPoint(issuerid,250,-2714.3257,628.0117,1385.6547) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 7) LugarCargo = "en el Hospital de San Fierro",expulsar = 3;
	else if(IsPlayerInRangeOfPoint(issuerid,250,1239.3762,-822.5826,1164.2759) && GetPlayerInterior(issuerid) == 6 && GetPlayerVirtualWorld(issuerid) == 8) LugarCargo = "en el Hospital de Las Venturas",expulsar = 4;
	else if(IsPlayerInRangeOfPoint(issuerid,250,369.4387,169.1839,1040.1156) && GetPlayerInterior(issuerid) == 5 && GetPlayerVirtualWorld(issuerid) == 5) LugarCargo = "en el Estudio de Radio y Televisión",expulsar = 5;
	else if(IsPlayerInRangeOfPoint(issuerid,200,1551.7198,-1675.6492,15.9741) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría";
	else if(IsPlayerInRangeOfPoint(issuerid,50,830.2910,3.9240,1004.1797) && GetPlayerInterior(issuerid) == 3) LugarCargo = "en el Banco Plaza";
	else if(IsPlayerInRangeOfPoint(issuerid,80,1092.2074,-141.3113,1001.1160) && GetPlayerInterior(issuerid) == 3) LugarCargo = "en Banco Central de Los Santos";
	else if(IsPlayerInRangeOfPoint(issuerid,25,2311.8379,-8.2884,26.7422) && GetPlayerInterior(issuerid) == 0 && GetPlayerVirtualWorld(issuerid) != 0) LugarCargo = "en Banco de San Fierro";
	else if(IsPlayerInRangeOfPoint(issuerid,200,-1622.6633,702.1961,11.2764) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría de San Fierro";
	else if(IsPlayerInRangeOfPoint(issuerid,200,2282.8855,2454.9976,9.8203) && GetPlayerInterior(issuerid) == 0) LugarCargo = "enfrente de la Comisaría de Las Venturas";
	else if(IsPlayerInRangeOfPoint(issuerid,30,374.6797,-124.4743,1001.4995) && GetPlayerInterior(issuerid) == 5) LugarCargo = "en The Well Stacked Pizza";
	else if(IsPlayerInRangeOfPoint(issuerid,30,-29.1592,-83.4654,1003.5542) && GetPlayerInterior(issuerid) == 18) LugarCargo = "en 24/7";
	else if(IsPlayerInRangeOfPoint(issuerid,50,-1412.7083,-310.4966,1058.1694) && GetPlayerInterior(issuerid) == 7 && GetPlayerVirtualWorld(issuerid) == 7) LugarCargo = "en el Estadio de Las Venturas",expulsar = 6;
	else if(IsPlayerInRangeOfPoint(issuerid,100,1094.0922,1597.0083,12.5469) && GetPlayerInterior(issuerid) == 0) LugarCargo = "en el Estadio de Las Venturas";
	else if(IsPlayerInRangeOfPoint(issuerid,150,727.1412,-3320.2461,5.8700) && GetPlayerInterior(issuerid) == 0 && Jail[issuerid] == 0) LugarCargo = "en la Isla Santa Carolina";
	else if(IsPlayerInRangeOfPoint(issuerid,150,-575.5505,2340.8291,82.6304) && GetPlayerInterior(issuerid) == 0 && Jail[issuerid] == 0) LugarCargo = "en Mina Castillo del Diablo";
	if(strcmp(LugarCargo,"Feli"))
	{
		if(PLAYER_INFO[issuerid][pFaccion] != 1 && !IsPlayerInAnyVehicle(issuerid) && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER && PLAYER_INFO[issuerid][pCargos] < 1)
		{
			new string[200],string2[150];
			PLAYER_INFO[issuerid][pCargos] = 1;
			ActualizarRadar();
			SetPlayerWantedLevel(issuerid, PLAYER_INFO[issuerid][pCargos]);
			CagoSeguro[issuerid] = 1;
			format(string2,150,"Zona segura (%d)", playerid);
			PLAYER_INFO[issuerid][QuienC] = string2;
			if((PLAYER_TIMES[issuerid][Advertido] - gettime()) <= 0)
			{
				format(string, 200,"{3399FF}[Central de policía]{FFFFFF} reportando: (({f21111}%s{FFFFFF})) [%d] disturbios %s.",PLAYER_INFO[issuerid][Nickname],issuerid,LugarCargo);
				SendRadioPoliceMessage(-1,string);
				ReportCrimen(issuerid,1);
				SendClientMessage(issuerid,-1,"Fuiste descubierto por un guardia de seguridad, escapa de la zona.");
				SendClientMessage(issuerid,-1,"Si te escondes bien durante 5 minutos, la policía perderá tu rastro.");
				PLAYER_TIMES[issuerid][Advertido] = gettime() + 30;
				SetTimerEx("Quitar1Cargo", 300000, 0, "d", issuerid);
				ReportCrimen(issuerid,4);
			}
			switch(expulsar)
			{
				case 1: SetPosEx(issuerid,1172.0782,-1323.3225,15.4029,90.7454,0,0,0);
				case 2: SetPosEx(issuerid,2034.0798,-1401.6808,17.2939,90.7454,0,0,0);
				case 3: SetPosEx(issuerid,-2665.0000,640.1640,14.4531,90.7454,0,0,0);
				case 4: SetPosEx(issuerid,1607.4094,1815.2427,10.8203,90.7454,0,0,0);
				case 5:
				{
					SetPosEx(issuerid,1094.0922,1597.0083,12.5469,0,0,0,0);
				}
			}
			return 1;
		}
	}
	if(!IsPlayerNPC(issuerid))
	{

		if(playerid != INVALID_PLAYER_ID)
		{

			if(issuerid != INVALID_PLAYER_ID)
			{

				if(IsPlayerConnected(playerid))
				{

					if(JugadorLogeado[playerid] == 1)
					{

						if(JugadorLogeado[issuerid] == 1)
						{

							if(PLAYER_INFO[playerid][pNivel] == 1)
							{
								GivePlayerHealth(playerid, amount);
							}
							ColocarCombate(playerid);
							Agresor[playerid] = issuerid;
							PLAYER_TIMES[playerid][TiempoAgresor] = 15;
							ColocarCombate(issuerid);
							if(!IsPlayerInAnyVehicle(issuerid) && GetPlayerState(issuerid) != PLAYER_STATE_DRIVER)
							{
								if(Jail[issuerid] == 1)
								{
									if(PLAYER_TIMES[playerid][GolpesAdv] - gettime() <= 0)
									{
										SendClientMessage(issuerid,-1,"Se te aumento la condenado por generar disturbios en la prisión.");
										SendClientMessage(issuerid,-1,"Si continuas así tu condenada seguirá aumentando.");
										PLAYER_INFO[issuerid][pTiempoCarcel] += 300;
										PLAYER_TIMES[playerid][GolpesAdv] = gettime() + 30;
										return 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0;
}

public elSexoOral(playerid)
{
	ProgresoSexoOral[playerid] ++;
	switch(ProgresoSexoOral[playerid])
	{
	    case 1: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_START_W", 4.1, 0, 0, 0, 1, 0, 1);
		case 3: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.1, 1, 0, 0, 1, 0, 1);
		case 15: ApplyAnimation(SexoOral[playerid], "BLOWJOBZ", "BJ_CAR_END_W", 4.1, 0, 0, 0, 1, 0, 1);
		case 16:
		{
		    ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 0, 0, 1, 0, 1);
		    SexoOral[playerid] = INVALID_PLAYER_ID;
		    KillTimer(PLAYER_TIMES[playerid][TimerChupar]);
		    ProgresoSexoOral[playerid] = 0;
		    return 1;
		}
	}
	PLAYER_TIMES[playerid][TimerChupar] = SetTimerEx("elSexoOral",1000,false,"d",playerid);
	return true;
}
funcion Equilibrio(i)
{
	NoTeleportHack(i);
	AccionesRol(i,"pierde el equilibrio y se cae.", 20);
	SetPlayerPosEx(i,CaidaTaxi[0][i],CaidaTaxi[1][i],CaidaTaxi[2][i]);
	ApplyAnimation(i,"PED","getup_front",2,0,1,1,0,0);
}
funcion TCHAT(playerid)
{
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
	SendClientMessage(playerid, 0x000000FF, "");
}
funcion QuitarCargo(playerid)
{
	PLAYER_INFO[playerid][pCargos] = 0;
	ActualizarRadar();
	SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
	return 1;
}
funcion AsignarObjetos(playerid)
{
	if(PLAYER_INFO[playerid][pModelo] == 211)
	{
		SetPlayerAttachedObject(playerid, 7,19142,1,0.109797,0.053399,-0.002000,0.000000,-2.299998,0.299997,1.046000,0.986998,0.893000);
		SetPlayerAttachedObject(playerid, 8,18636,2,0.136399,0.028400,0.001000,90.000000,90.000000,0.000000,1.154000,1.100000,1.161000);
	}
	return 1;
}
timer EnviarEventoDM[1500](playerid)
{
    SendClientMessage(playerid,-1,"Puedes salir cuando quieras con {00A8FF}/salirarena");
	SetPlayerInterior(playerid, 10);
	SetPlayerPos(playerid, -974.9747,1061.4923,1345.6757);
	return 1;
}

task BOBJETO[6000*10]()
{
    BorrarobjetoP();
}


BorrarobjetoP()
{
	Loop(i,MAX_OBJETOS_T,0)
	{
	    InfoObjeto_T[i][TipoOBJ] = 0;
		InfoObjeto_T[i][Posx] = 0;
		InfoObjeto_T[i][Posy] = 0;
		InfoObjeto_T[i][Posz] = 0;
		InfoObjeto_T[i][IntOBJ] = 0;
		InfoObjeto_T[i][VWOBJ] = 0;
		DestroyDynamicObject(OBJ_T[i]);
		DestroyDynamic3DTextLabel(Label_OBJ_T[i]);
		InfoObjeto_T[i][ArmaOBJ] = 0;
	}
	return 1;
}

task TimerFabricaCocinero[1000 * 30]()
{
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
	{
	    if(!FABRICAS_INFO[ID][f_VALID]) continue;
	    if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 2)
		{
		    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] == 2)
			{
			    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][0] = CreateDynamicObject(1271, -2017.67334, 227.02380, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] ++;
				if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][0] = CreateDynamicObject(1271, -2017.67334, 227.02380, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				ActualizarLabelsFabrica(ID);
			}
		}
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 2)
		{
		    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] == 2)
			{
			    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][1] = CreateDynamicObject(1271, -2013.86060, 227.05284, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] ++;
				if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][1] = CreateDynamicObject(1271, -2013.86060, 227.05284, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				ActualizarLabelsFabrica(ID);
			}
		}
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 2)
		{
		    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] == 2)
			{
			    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][2] = CreateDynamicObject(1271, -2009.98157, 227.00481, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] ++;
				if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][2] = CreateDynamicObject(1271, -2009.98157, 227.00481, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				ActualizarLabelsFabrica(ID);
			}
		}
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 2)
		{
		    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] == 2)
			{
			    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][3] = CreateDynamicObject(1271, -2006.16040, 226.99612, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] ++;
				if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][3] = CreateDynamicObject(1271, -2006.16040, 226.99612, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				ActualizarLabelsFabrica(ID);
			}
		}
		if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 2)
		{
		    if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] == 2)
			{
			    if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][4] = CreateDynamicObject(1271, -2002.34033, 227.01234, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] ++;
				if(FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] >= 100)
			    {
			        FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] = 3;
			        FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] = 100;
			        if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
			        FABRICAS_INFO[ID][f_CAJA_COCINERO][4] = CreateDynamicObject(1271, -2002.34033, 227.01234, 1035.15454,   0.00000, 0.00000, 0.00000, FABRICAS_INFO[ID][f_VW], FABRICAS_INFO[ID][f_INTERIOR]);
				}
				ActualizarLabelsFabrica(ID);
			}
		}
	}
	return 1;
}

task TimerFabricaHornos[1000 * 15]()
{
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
	{
	    if(!FABRICAS_INFO[ID][f_VALID]) continue;

		if(FABRICAS_INFO[ID][f_CESTADO][0] == 1)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] >= 100)
		    {
		        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] = 100;
		        FABRICAS_INFO[ID][f_CESTADO][0] = 0;
		        FABRICAS_INFO[ID][f_CRISTAL][0] = 1;
          		ActualizarLabelsFabrica(ID);
          		CargarCocinaFabrica(ID);
		    }
		    else
		    {
			    if(FABRICAS_INFO[ID][f_TANQUE][0] > 0) FABRICAS_INFO[ID][f_TANQUE][0] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][1] > 0) FABRICAS_INFO[ID][f_TANQUE][1] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][2] > 0) FABRICAS_INFO[ID][f_TANQUE][2] --;
			    else
				{
					FABRICAS_INFO[ID][f_CESTADO][0] = 0;
					ActualizarLabelsFabrica(ID);
					return 1;
				}
			    FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] ++;
			    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] >= 100)
			    {
			        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] = 100;
			        FABRICAS_INFO[ID][f_CESTADO][0] = 0;
			        FABRICAS_INFO[ID][f_CRISTAL][0] = 1;
			    }
			    ActualizarLabelsFabrica(ID);
			    CargarCocinaFabrica(ID);
		    }
		}
		if(FABRICAS_INFO[ID][f_CESTADO][1] == 1)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] >= 100)
		    {
		        FABRICAS_INFO[ID][f_CESTADO][1] = 0;
		        FABRICAS_INFO[ID][f_CRISTAL][1] = 1;
		        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] = 100;
          		ActualizarLabelsFabrica(ID);
          		CargarCocinaFabrica(ID);
		    }
		    else
		    {
			    if(FABRICAS_INFO[ID][f_TANQUE][3] > 0) FABRICAS_INFO[ID][f_TANQUE][3] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][4] > 0) FABRICAS_INFO[ID][f_TANQUE][4] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][5] > 0) FABRICAS_INFO[ID][f_TANQUE][5] --;
			    else
				{
					FABRICAS_INFO[ID][f_CESTADO][1] = 0;
					ActualizarLabelsFabrica(ID);
					return 1;
				}
			    FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] ++;
			    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] >= 100)
			    {
			        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] = 100;
			        FABRICAS_INFO[ID][f_CESTADO][1] = 0;
			        FABRICAS_INFO[ID][f_CRISTAL][1] = 1;
			    }
			    ActualizarLabelsFabrica(ID);
			    CargarCocinaFabrica(ID);
		    }
		}
		if(FABRICAS_INFO[ID][f_CESTADO][2] == 1)
		{
		    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] >= 100)
		    {
		        FABRICAS_INFO[ID][f_CESTADO][2] = 0;
		        FABRICAS_INFO[ID][f_CRISTAL][2] = 1;
		        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] = 100;
          		ActualizarLabelsFabrica(ID);
          		CargarCocinaFabrica(ID);
		    }
		    else
		    {
			    if(FABRICAS_INFO[ID][f_TANQUE][6] > 0) FABRICAS_INFO[ID][f_TANQUE][6] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][7] > 0) FABRICAS_INFO[ID][f_TANQUE][7] --;
			    else if(FABRICAS_INFO[ID][f_TANQUE][8] > 0) FABRICAS_INFO[ID][f_TANQUE][8] --;
			    else
				{
					FABRICAS_INFO[ID][f_CESTADO][2] = 0;
                    ActualizarLabelsFabrica(ID);
                    return 1;
				}
			    FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] ++;
			    if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] >= 100)
			    {
			        FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] = 100;
			        FABRICAS_INFO[ID][f_CESTADO][2] = 0;
			        FABRICAS_INFO[ID][f_CRISTAL][2] = 1;
			    }
			    ActualizarLabelsFabrica(ID);
			    CargarCocinaFabrica(ID);
		    }
		}
	}
	return 1;
}

task FuelSeconds[120000]()
{
    for(new vehicleid = 0; vehicleid < GetVehiclePoolSize(); vehicleid ++)
    {
		if(MotorAuto[vehicleid] == 1)
		{
			new modelo = GetVehicleModel(vehicleid);
			new vehiclefuel = CombustibleCoche(modelo);
			if(VehicleFuel[vehicleid] >= 1)
			{
				if(!BICI(vehicleid))
				{
					if(vehiclefuel < 100 || vehiclefuel > 99 && combustible60 == 2)
					{
						combustible60 = 0;
						VehicleFuel[vehicleid] --;
					}
					combustible60 ++;
				}
			}
			else if(VehicleFuel[vehicleid] < 1)
			{
				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
				MotorAuto[vehicleid] = 0;
			}
		}
	}
	return 1;
}

ptask LlamadaTransportista[300000](playerid)
{
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
        if(FABRICAS_INFO[ID][f_VALID])
        {
            GuardarFabrica(ID);
		}
	}
    if(!IsPlayerPaused(playerid) && JugadorLogeado[playerid] == 1)
    {
		if(PLAYER_INFO[playerid][pTrabajo] == T_Transportista || PLAYER_INFO[playerid][pTrabajo2] == T_Transportista)
		{
			if(TelefonoEstado[playerid] == 0 && Mobile2[playerid] == 0 && tviaje[playerid] == 0 && EnLlamada[playerid] == 0 && PLAYER_INFO[playerid][pNumero] != 0)
			{
				new string[250];
				format(string, sizeof(string), "El teléfono de %s está sonando.", PLAYER_INFO[playerid][Nickname]);
				ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				SendClientMessage(playerid, -1, "Te están llamando por teléfono desde el número: {FFFF04}4825{FFFFFF}, escribe {FFFF04}/atender{FFFFFF} o {FFFF04}/colgar");
				PLAYER_INFO[playerid][MobileSub] = 2540;
				Mobile2[playerid] = 2540;
				SetTimerEx("ColgarLlamada",30000,false,"d",playerid);
				llamada(playerid);
			}
		}
	}
	return 1;
}
ptask AntiClones[5000](i)
{
    if(!IsPlayerPaused(i) && JugadorLogeado[i] == 1)
    {
	    if(PLAYER_INFO[i][pTiempoCarcel] > 0 && EstaDomiciliaria[i] == 0)
	    {
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 1)
			{
				SetPlayerPosEx(i,227.3367,109.3470,999.0156); //
				SetPlayerVirtualWorld(i,1);
            	SetPlayerInterior(i,10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 2)
			{
				SetPlayerPosEx(i,223.0108,109.8135,999.0156); //
				SetPlayerVirtualWorld(i,1);
            	SetPlayerInterior(i,10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 3)
			{
				SetPlayerPosEx(i,219.0009,110.3388,999.0156); //
				SetPlayerVirtualWorld(i,1);
            	SetPlayerInterior(i,10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 4)
			{
				SetPlayerPosEx(i,215.2188,109.1792,999.0156); //
				SetPlayerVirtualWorld(i,1);
            	SetPlayerInterior(i,10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 5)
			{
				SetPlayerPosEx(i,227.3367,109.3470,999.0156); //
				SetPlayerVirtualWorld(i, 5);
				SetPlayerInterior(i, 10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 6)
			{
				SetPlayerPosEx(i,223.0108,109.8135,999.0156); //
				SetPlayerVirtualWorld(i, 5);
				SetPlayerInterior(i, 10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 7)
			{
				SetPlayerPosEx(i,219.0009,110.3388,999.0156); //
				SetPlayerVirtualWorld(i, 5);
				SetPlayerInterior(i, 10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 8)
			{
				SetPlayerPosEx(i,215.2188,109.1792,999.0156); //
				SetPlayerVirtualWorld(i, 5);
				SetPlayerInterior(i, 10);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 227.3367,109.3470,999.0156) && CeldaJugador[i] == 9)
			{
				SetPlayerPosEx(i,227.3367,109.3470,999.0156); //
				SetPlayerInterior(i, 3);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 223.0108,109.8135,999.0156) && CeldaJugador[i] == 10)
			{
				SetPlayerPosEx(i,223.0108,109.8135,999.0156); //
				SetPlayerInterior(i, 3);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 219.0009,110.3388,999.0156) && CeldaJugador[i] == 11)
			{
				SetPlayerPosEx(i,219.0009,110.3388,999.0156); //
				SetPlayerInterior(i, 3);
			}
			if(!IsPlayerInRangeOfPoint(i, 10.0, 215.2188,109.1792,999.0156) && CeldaJugador[i] == 12)
			{
				SetPlayerPosEx(i,215.2188,109.1792,999.0156); //
				SetPlayerInterior(i, 3);
			}
		}
		if(EsUnTren(GetPlayerVehicleID(i)) && Boletos[i] > 0)
		{
			switch(Boletos[i])
			{
				case 1: if(IsPlayerInRangeOfPoint(i, 20.0, 1433.7200,2627.9175,11.3926)) RemovePlayerFromVehicle(i),SetPosEx(i,1433.8665,2625.2673,11.3926,182.2727,0,0),Boletos[i] = 0;//Yellow Bell Station
				case 2: if(IsPlayerInRangeOfPoint(i, 20.0, 1719.6493,-1949.1260,13.5495)) RemovePlayerFromVehicle(i),SetPosEx(i,1738.3921,-1949.4956,14.1172,0.7063,0,0),Boletos[i] = 0; //Unity Station
				case 3: if(IsPlayerInRangeOfPoint(i, 20.0, 818.3243,-1361.2346,-0.5078)) RemovePlayerFromVehicle(i),SetPosEx(i,817.6003,-1360.5968,-0.5078,310.9091,0,0),Boletos[i] = 0; //Market Station
				case 4: if(IsPlayerInRangeOfPoint(i, 20.0, -1951.6471,141.1368,26.2813)) RemovePlayerFromVehicle(i),SetPosEx(i,-1952.1262,138.8080,26.2813,90.6335,0,0),Boletos[i] = 0; //Cranberry Station
				case 5: if(IsPlayerInRangeOfPoint(i, 20.0, 2858.8889,1290.8965,11.3906)) RemovePlayerFromVehicle(i),SetPosEx(i,2860.4497,1290.8992,11.3906,88.4635,0,0),Boletos[i] = 0; //Linden Station
			}
		}
		if(PLAYER_INFO[i][Agonizando] == 1)
		{
			if(!IsPlayerPaused(i) && Muriendo[i] == 1)
			{
				GivePlayerHealth(i, -1.0);
			}
		}
		if(TimerMalherido[i] > 0)
		{
			TimerMalherido[i]--;
			GameTextForPlayer(i,"~w~~<~ ~r~MALHERIDO ~w~~>~~n~~w~esperando servicio medico",3000,3);
		}
		else if(TimerCombustible[i] > 0)
		{
			TimerCombustible[i]--;
			GameTextForPlayer(i,"~n~~n~~g~~<~ ~w~CARGANDO COMBUSTIBLE ~g~~>~",3000,3);
		}
		else if(TimerCargarCamion[i] > 0)
		{
			TimerCombustible[i]--;
			GameTextForPlayer(i,"~w~~<~ ~g~CARGANDO CAMION ~w~~>~",3000,3);
		}
		else if(TimerDescargarTrailer[i] > 0)
		{
			TimerDescargarTrailer[i]--;
			GameTextForPlayer(i,"~w~~<~ ~y~DESCARGANDO TRAILER ~w~~>~",3000,3);
		}
		else if(TimerDescargarCamion[i] > 0)
		{
			TimerCombustible[i]--;
			GameTextForPlayer(i,"~r~~<~ ~w~DESCARGANDO CAMION ~r~~>~",3000,3);
		}
		else if(TimerRecoleccion[i] > 0)
		{
			TimerRecoleccion[i]--;
			GameTextForPlayer(i, "~w~RECOLECTANDO BASURA", 3000, 3);
		}
		else if(TimerReparar[i] > 0)
		{
			TimerRecoleccion[i]--;
			GameTextForPlayer(i, "~w~REPARANDO VEHICULO...", 1000, 5);
		}
		else if(TimerRevisar[i] > 0)
		{
			TimerRevisar[i]--;
			GameTextForPlayer(i,"~n~~n~~w~REVISANDO MALETERO", 3000, 3);
		}
		else if(TiempoForzarCerradura[i] > 0)
		{
			TimerRevisar[i]--;
			GameTextForPlayer(i,"~n~~r~~w~FORZANDO CERRADURA", 3000, 3);
		}
	}
	return 1;
}

ptask AutoCheatsyCodigos[3000](playerid)
{
    if(!IsPlayerPaused(playerid) && JugadorLogeado[playerid] == 1)
    {
		if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][pCargos] >= 1||PLAYER_INFO[playerid][mDuty] == 1 && PLAYER_INFO[playerid][pCargos] >= 1)
	    {
	        PLAYER_INFO[playerid][pCargos] = 0;
			SetPlayerWantedLevel(playerid, 0);
	    }
		if(PLAYER_INFO[playerid][pFaccion] == 1 && PLAYER_INFO[playerid][pDuty] == 1||PLAYER_INFO[playerid][pFaccion] == 2 && PLAYER_INFO[playerid][mDuty] == 1)
		{
			foreach(new i : Player)
			{
   				if(PLAYER_INFO[i][pDuty] == 0 && PLAYER_TEMP[i][VariableCaido] == 0||PLAYER_INFO[i][mDuty] == 0 && PLAYER_TEMP[i][VariableCaido] == 0)
			    {
					switch(PLAYER_INFO[i][pCargos])
					{
						case 0: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO0);
						case 1: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO1);
						case 2: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO2);
						case 3: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO3);
						case 4: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO4);
						case 5: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO5);
						case 6: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
						default: SetPlayerMarkerForPlayer(playerid, i, COLORCARGO6);
					}
				}
				else if(PLAYER_TEMP[i][VariableCaido] == 1  || (Esposando[i] == 2 || PLAYER_INFO[i][pCargos] > 0) && EnPatrulla[i] == 1)
				{
				    SetPlayerMarkerForPlayer(playerid, i, COLORCARGO7);
				}
			}
		}
		// Trabajo Medico
		if(LlamadaMedicos[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if(Reanimado[x] == 0 && RopaMedi[x] == 1 && (PLAYER_INFO[x][pTrabajo] == T_Medico || PLAYER_INFO[x][pTrabajo2] == T_Medico))
				{
					GetPlayerPos(x, DeathXH[x],DeathYH[x],DeathZH[x]);
					SetPlayerMarkerForPlayer(x, playerid, COLORABATIDO);
				}
			}
		}
		// Trabajo Taxi
		if(LlamadaTaxi[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if((PLAYER_INFO[x][pTrabajo] == T_Taxista || PLAYER_INFO[x][pTrabajo2] == T_Taxista) && EnTaxi[x] == 1)
				{
					SetPlayerMarkerForPlayer(x, playerid, COLOR_AMARILLO);
				}
			}
		}
		// Trabajo Mecanico
		if(LlamadaMeca[playerid] == 1)
		{
			foreach(new x : Player)
			{
				if((RopaMeca[x] == 1) && (PLAYER_INFO[x][pTrabajo] == T_Mecanico || (RopaMeca[x] == 1) && PLAYER_INFO[x][pTrabajo2] == T_Mecanico))
				{
					SetPlayerMarkerForPlayer(x, playerid, COLOR_AZUL);
				}
			}
		}
		if(!IsPlayerNPC(playerid))
		{
			new autoid = GetPlayerVehicleID(playerid);
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(autoid != EnAuto[playerid] && PLAYER_INFO[playerid][pAdmin] < 3)
				{
					if(AvisosAuto[playerid] < 5)
					{
						AvisosAuto[playerid]++;
					}
					else if(AvisosAuto[playerid] >= 5)
					{
						DarArmas(playerid);
					}
				}
			}
			new vehicleid = GetPlayerVehicleID(playerid), veces;
			new modelo = GetVehicleModel(vehicleid);
			new velocidadmax = VelocidadMaxAuto(modelo);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleSpeed(vehicleid) > velocidadmax+velocidadmax)
				{
					if(GetVehicleSpeed(vehicleid) >= velocidadmax+velocidadmax+velocidadmax) veces = 3;
					else if(GetVehicleSpeed(vehicleid) > velocidadmax+velocidadmax && GetVehicleSpeed(vehicleid) < velocidadmax+velocidadmax) veces = 2;
					if(veces < 2) return 1;
					new string[128];
					format(string,sizeof(string),"El jugador %s(ID:%d) superó %d veces la velocidad (%d/%d) modelo de vehículo: %d",PLAYER_INFO[playerid][Nickname],playerid,veces,GetVehicleSpeed(vehicleid),velocidadmax,vehicleid);
					MensajeAdmin(COLOR_CHEAT, string, 3);
				}
			}
		}
	}
	return 1;
}
ptask Anticheats[500](playerid)
{
	if(!IsPlayerPaused(playerid) && JugadorLogeado[playerid] == 1)
    {
	    accionesProstitutas();
		// Animacion Herido
		if(PLAYER_INFO[playerid][Agonizando] == 1 && PacienteAmbu[playerid] == 0)
		{
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
			SetPlayerArmedWeapon(playerid, 0);
		}
		// Slot 5 - (AK-47 - M4)
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(30)] == 30 || PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] == 31)
		{
			if(GetPlayerWeapon(playerid) != 30 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(30)] == 30) {SetPlayerAttachedObject(playerid,5,355,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(playerid) == 30 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(30)] == 30) { RemovePlayerAttachedObject(playerid,5); }
			if(GetPlayerWeapon(playerid) != 31 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] == 31) {SetPlayerAttachedObject(playerid,5,356,1,  0.192999,-0.075999,-0.105000,-4.499993,25.899999,-171.699859, 1.000000, 1.000000, 1.000000); }
			if(GetPlayerWeapon(playerid) == 31 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] == 31) { RemovePlayerAttachedObject(playerid,5); }
		}
		// Slot 6	-	(Escopeta - Escopeta de combate)
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] == 25 || PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(27)] == 27)
		{
			if(GetPlayerWeapon(playerid) != 25 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] == 25) {SetPlayerAttachedObject(playerid,6,349,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(playerid) == 25 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] == 25) { RemovePlayerAttachedObject(playerid,6); }
			if(GetPlayerWeapon(playerid) != 27 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(27)] == 27) {SetPlayerAttachedObject(playerid,6,351,1,  0.195999,-0.102999,0.088999,172.099899,-137.700027,0.800023, 1.000000, 1.000000, 1.000000);}
			if(GetPlayerWeapon(playerid) == 27 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(27)] == 27) { RemovePlayerAttachedObject(playerid,6); }
		}
		// Quitar objeto
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(30)] != 30 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] != 31) RemovePlayerAttachedObject(playerid,5);
		if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] != 25 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(27)] != 27) RemovePlayerAttachedObject(playerid,6);
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(PLAYER_INFO[playerid][pVelocimetro] == 1)
				{
					new szSpeed[64];
					new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
					new vehiclefuel = CombustibleCoche(modelid);
					format(szSpeed, sizeof(szSpeed),"%d/%d L",VehicleFuel[iVehicle[playerid]],vehiclefuel);
					PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][1],szSpeed);
				}
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(PLAYER_INFO[playerid][pVelocimetro] == 1)
				{
					new carid = GetPlayerVehicleID(playerid);
					new Float: fCurrentSpeed, szSpeed[64];
					fCurrentSpeed = GetVehicleSpeed(carid);
					fVehSpeed[playerid] = fCurrentSpeed;
					if(!BICI(GetPlayerVehicleID(playerid)))
					{
						new modelo = GetVehicleModel(carid);
						new velocityveh = VelocidadMaxAuto(modelo);
						if(fCurrentSpeed >= velocityveh) fCurrentSpeed = velocityveh;
						format(szSpeed, sizeof(szSpeed),"%.0f KM/H", fCurrentSpeed);
						PlayerTextDrawSetString(playerid,ContadorVelocimetro[playerid][0], szSpeed);
					}
				}
			}
		}
		for(new u, j = GetPlayerPoolSize(); u <= j; u++)
	 	if(GetPlayerSpecialAction(u) == SPECIAL_ACTION_USEJETPACK && JetPack[u] == 0 && PLAYER_INFO[u][pAdmin] < 6) KickAntiCheat(playerid, 0, 0, "Volar con cheat");
		new AnimWeap;
		AnimWeap = GetPlayerWeapon(playerid);
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 959) return KickAntiCheat(playerid, 0, 0, "Fly");
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 974) return KickAntiCheat(playerid, 0, 0, "Skin Bug 1");
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 972) return KickAntiCheat(playerid, 0, 0, "Skin Bug 2");
		if(AnimWeap != WEAPON_PARACHUTE && GetPlayerAnimationIndex(playerid) == 968) return KickAntiCheat(playerid, 0, 0, "Skin Bug 3");
	}
	new Float:health, carid, arrDamage[4];

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		carid = GetPlayerVehicleID(playerid);
		iVehicle[playerid] = GetPlayerVehicleID(playerid);
		for(new s=0;s<20;s++)
		{
			if(SpikeStrips[s][sX] != 0)
			{
				if(VehicleToPoint( 3.0, carid, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
				{
					GetVehicleDamageStatus(carid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
					arrDamage[3] = encode_tires(1, 1, 1, 1);
					UpdateVehicleDamageStatus(carid, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
				}
			}
		}
		GetVehicleHealth(iVehicle[playerid], health);
		if(health < 375.0)
		{
			SetVehicleHealth(iVehicle[playerid], 375.0);
			vehaveriado[carid] = 1;
			GameTextForPlayer(playerid, "~r~MOTOR AVERIADO", 2500, 3);
			GetVehicleParamsEx(iVehicle[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(iVehicle[playerid], 0, lights, alarm, doors, bonnet, boot, objective);
			averiado[carid] = 1;
			MotorAuto[carid] = 0;
			SendClientMessage(playerid,-1,"El motor dejó de funcionar, llama a un mecánico. {f21111}/servicio mecanico");
		}
		if(VehicleFuel[iVehicle[playerid]] == 0 && !BICI(iVehicle[playerid]) && MensajeSinGasoEnviado[playerid] == 0)
		{
			GameTextForPlayer(playerid, "~r~Sin combustible!", 2500, 3);
			GetVehicleParamsEx(iVehicle[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(iVehicle[playerid], 0, lights, alarm, doors, bonnet, boot, objective);
			MotorAuto[carid] = 0;
			MensajeSinGasoEnviado[playerid] = 1;
		}
		else if(health > 375.0 && averiado[carid] == 1) averiado[carid] = 0;
	}
	return 1;
}
ptask DarNecesidad[480000](playerid)
{
    if(!IsPlayerPaused(playerid) && JugadorLogeado[playerid] == 1)
	{
		if(PLAYER_INFO[playerid][pVIP] > 0)
		{
			PLAYER_INFO[playerid][pSed] += 2;
			PLAYER_INFO[playerid][pHambre] += 1;
		}
		else
		{
			PLAYER_INFO[playerid][pSed] += 4;
			PLAYER_INFO[playerid][pHambre] += 2;
		}
		BarraHambre(playerid);
		BarraSed(playerid);
	}
	return 1;
}


ptask TimerDeMinuto[1000 * 60](i)
{
    if(!IsPlayerPaused(i) && JugadorLogeado[i] == 1)
	{
		if(PLAYER_INFO[i][pSed] == 100)
		{
			if(PLAYER_INFO[i][j_HEALTH] < 6) SetPlayerHealthEx(i, 0.0);
			else GivePlayerHealth(i, -6.0);

			SendClientMessage(i, COLOR_WHITE, "Te estás muriendo de sed...");
		}
		if(PLAYER_INFO[i][pHambre] == 100)
		{
			if(PLAYER_INFO[i][j_HEALTH] < 6) SetPlayerHealthEx(i, 0.0);
			else GivePlayerHealth(i, -6.0);
			SendClientMessage(i, COLOR_WHITE, "Te estás muriendo de hambre...");
		}
		if(GetPlayerScore(i) > 0)
		{
			if(PLAYER_INFO[i][pNivel] == 1)
			{
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(i,X,Y,Z);
				if(PosPDX[i] != X || PosPDY[i] != Y || PosPDZ[i] != Z)
				{
					GetPlayerPos(i,PosPDX[i],PosPDY[i],PosPDZ[i]);
					PLAYER_INFO[i][TiempoPD] ++;
				}
			}
			else PLAYER_INFO[i][TiempoPD] ++;

		}
		gettime(Hora, Minuto);

		SetPlayerTime(i,Hora,Minuto);
		if(ViajeAvion[i] == 1)
		{
			new string[50], llegaavion;
			llegaavion = 301 - contadoravion;
			if(llegaavion < 60) format(string, sizeof(string), "El avión arribará en {f21111}%ds", llegaavion);
			else if(llegaavion >= 60) format(string, sizeof(string), "El avión arribará en {f21111}%dm %ds", llegaavion/60, llegaavion%(60));
			SendClientMessage(i, -1, string);
		}
		for(new u = 0; u < GetVehiclePoolSize(); u++)
		{
			if(!IsPlayerNPC(i))
			{
				if(!AVION(u) && !BOTE(u) && !CAMION(u) && IsVehicleInArea(u, -1896.8235, -1375.4326, -240.8752, 354.2918))
				{
					if(u == autos[i]) { if(AutoOcupado(u) == 0) Auto1(i, 2); }
					if(u == autos2[i]) { if(AutoOcupado(u) == 0) Auto2(i, 2); }
					if(u == autos3[i]) { if(AutoOcupado(u) == 0) Auto3(i, 2); }
					if(u == autos4[i]) { if(AutoOcupado(u) == 0) Auto4(i, 2); }
				}
				if(!AVION(u) && !BOTE(u) && !CAMION(u) && IsVehicleInArea(u, -597.9696,-536.7734, 2337.8618, 2350.0432))
				{
					if(u == autos[i]) Auto1(i, 6);
					if(u == autos2[i]) Auto2(i, 6);
					if(u == autos3[i]) Auto3(i, 6);
					if(u == autos4[i]) Auto4(i, 6);
				}
			}
		}
	}
	return 1;
}

ptask TimerGlobalPlayerid[1000](playerid)
{
    TimerPlantas();
	for(new i = 1; i < MAX_REPORTS; i++)
	{
    	if(REPORT_INFO[i][r_ID] != 0 && REPORT_INFO[i][r_ESTADO] == 0)
    	{
    	    if((REPORT_INFO[i][r_TIME] - gettime()) < 0)
    	    {
    	    	REPORT_INFO[i][r_ID] = 0;
		    	REPORT_INFO[i][r_ESTADO] = 1;
		    }
		}
	}
	for(new i = 1; i < MAX_PEDIDOS; i++)
	{
    	if(PEDIDO_INFO[i][pi_ID] != 0 && PEDIDO_INFO[i][pi_ESTADO] == 0)
    	{
    	    if((PEDIDO_INFO[i][pt_TIME] - gettime()) < 0)
    	    {
    	    	PEDIDO_INFO[i][pi_ID] = 0;
		    	PEDIDO_INFO[i][pi_ESTADO] = 1;

	            new DB_Query[256];
                mysql_format(handle_db, DB_Query, sizeof(DB_Query), "DELETE FROM `pedidos` WHERE `ID` = '%d'", PEDIDO_INFO[i][pi_DB]);
				mysql_query(handle_db, DB_Query, false);
				CargarPedidos();
		    }
		}
	}
	gettime(Hora, Minuto, Segundo);
	if(Minuto == 2 && PaydayDado == 0){PayDay(40);PaydayDado = 1;}
	if(Minuto == 3 && PaydayDado == 1){PaydayDado = 0;}
	if(TiempoAvion > 0){TiempoAvion --;}
	new hora,minuto,segundos;
	getdate(hora,minuto,segundos);
	for(new ec=1;ec<MAX_ENCARGOS;ec++) if(Encargo[ec][SegundosMision] > 0) { Encargo[ec][SegundosMision]--;	 }
	
    if(!IsPlayerPaused(playerid) && JugadorLogeado[playerid] == 1)
    {
        if(gettime() > PLAYER_TIMES[playerid][pTIME_LORO] && PLAYER_TEMP[playerid][LoroHabla])
        {
	        for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
		    {
		        if(PLAYER_TOYS[playerid][i][pt_ATTACHED] && PLAYER_TEMP[playerid][@Specteando] == 0)
		        {
		        	if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19078 || PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19079)
		        	{
						new chatadmin[128];
						new chatadmin2[128];
						format(chatadmin,sizeof(chatadmin),"Loro de %s dice: %s",PLAYER_INFO[playerid][Nickname], FraseLoro[playerid]);
						ProxDetector(15.0, playerid, chatadmin, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF, 0xCDFFCEFF);

						format(chatadmin2,sizeof(chatadmin2),"(Loro): ¡%s!", FraseLoro[playerid]);
						SetPlayerChatBubble(playerid,chatadmin2,COLOR_WHITE,30.0,6000);
						PLAYER_TIMES[playerid][pTIME_LORO] = gettime() + 90;
					}
				}
			}
		}
		//====================REFUERZOS====================================================================||
	    foreach(new x : Player)
		{
		    if((PLAYER_TIMES[playerid][p_REF]) && (PLAYER_TIMES[playerid][p_TIME_REF] > gettime()))
			{
				if(PLAYER_INFO[x][pFaccion] == 1)
				{
				    if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, COLOR_POLICIAREF);
				}
				if(PLAYER_INFO[x][pFaccion] == 2)
				{
				    if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, COLOR_MILICIA);
				}
				else if(PLAYER_INFO[x][pFaccion] >= 3)
				{
					if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, 0xFF8C00FF);
				}
			}
			else if((PLAYER_TIMES[playerid][p_REF]) && ((PLAYER_TIMES[playerid][p_TIME_REF] - gettime()) < 0))
			{
			    PLAYER_TIMES[playerid][p_REF] = false;
			    if(PLAYER_INFO[x][pFaccion] == 1)
				{
				    if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, TEAM_BLUE_COLOR);
				}
				if(PLAYER_INFO[x][pFaccion] == 2)
				{
				    if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, COLOR_MILICIA);
				}
				else if(PLAYER_INFO[x][pFaccion] >= 3)
				{
					if(PLAYER_INFO[x][pFaccion] == PLAYER_INFO[playerid][pFaccion])SetPlayerMarkerForPlayer(x, playerid, COLORCARGO0);

				}
			}
		}
		//=============================================REF POLICÍAS============================================================||
		if(!PLAYER_TIMES[playerid][p_REF] && PLAYER_INFO[playerid][pDuty] == 1) SetPlayerColor(playerid, COLOR_POLICIA);
        if(!PLAYER_TIMES[playerid][p_REF] && PLAYER_INFO[playerid][mDuty] == 1) SetPlayerColor(playerid, COLOR_MILICIA);
	    if((PLAYER_INFO[playerid][pCargos] > 0 && PLAYER_TEMP[playerid][VariableCaido] == 1 && EnPatrulla[playerid] == 0) && GetPolicesOn() > 0)
	    {
			if(GetPlayerAnimationIndex(playerid) != 1537)
			{
		      	ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
				ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
			}
	    }
	    //
	    new Float:player_health,Float:player_armour;
	    GetPlayerHealth(playerid, player_health);
	    GetPlayerArmour(playerid, player_armour);
	    
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X],GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y],GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
			PLAYER_TEMP[playerid][pt_INT_ANTITELEPORT_VEH] = GetPlayerInterior(playerid);
			PLAYER_TEMP[playerid][pt_VW_ANTITELEPORT_VEH] = GetPlayerVirtualWorld(playerid);
        }
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        new Float:speed = GetPlayerSpeed(playerid), Float:dis = GetPlayerDistanceFromPoint(playerid, PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][0],PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][1],PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2]);
            if(floatabs(dis) > TEST_TP && PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2] > -97.0)
            {
                if(gettime() > PLAYER_TIMES[playerid][TiempoAntiTP])
                {
                    if(PLAYER_TEMP[playerid][pt_INT_ANTITELEPORT] == GetPlayerInterior(playerid) && PLAYER_TEMP[playerid][pt_VW_ANTITELEPORT] == GetPlayerVirtualWorld(playerid))
                    {
	                    new Float:p_newtp[3], pos_ant_tp[63], pos_new_tp[63];

	                    GetPlayerPos(playerid, p_newtp[0], p_newtp[1], p_newtp[2]);
	                    Get3DZone(PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][0], PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][1], PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2], pos_ant_tp, 64);
	                    Get3DZone(p_newtp[0], p_newtp[1], p_newtp[2], pos_new_tp, 64);

		                new string[256];
		                SetTimerEx("CheckSobeit", segundos(5), 0, "i", playerid);
						format(string, sizeof(string), "[AC - Aviso]: %s(%d) {641FFE}posible cheat de teleport (dis: %.1f New: %s - Old: %s - A pie {Mirar})",PLAYER_INFO[playerid][Nickname], playerid, dis, pos_new_tp, pos_ant_tp);
						MensajeAdmin(COLOR_PENE, string, 3);

						SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][0], PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][1], PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2]);

						Congelar(playerid);
						SetTimerEx("DescongelarCBUG",1500,false,"d",playerid);
					}
				}
            }
			if(speed > 1000.0) KickAntiCheat(playerid, 0, 0, "Limite de velocidad a pie");
	        else if(speed > TEST_SPEED_PLAYER && (GetPlayerAnimationIndex(playerid) == 1231))
			{
			    if((gettime() > PLAYER_TIMES[playerid][TIMER_SPEED_HACK]) && (gettime() > PLAYER_TIMES[playerid][TIMER_SURFING]) && (gettime() > PLAYER_TIMES[playerid][TiempoAntiTP]))
			    {
			        PLAYER_TIMES[playerid][TIMER_SPEED_HACK] = gettime() + 2;

					ClearAnimations(playerid);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);

			        new string[256];
					format(string, sizeof(string), "[AC - Aviso]: %s(%d) posible cheat de velocidad (V: %.1f | Limit: %.1f)",PLAYER_INFO[playerid][Nickname],playerid, speed, TEST_SPEED_PLAYER);
					MensajeAdmin(COLOR_CHEAT, string, 3);

					Congelar(playerid);
					SetTimerEx("DescongelarCBUG",1500,false,"d",playerid);
				}
			}
			if(GetPlayerAnimationIndex(playerid) == 1058) //Escoba Voladora
			{
			    if(gettime() > PLAYER_TIMES[playerid][TIMER_AVISO_FLY_HACK])
				{
					new string[256];
					format(string, sizeof(string), "[AC - Aviso]: %s(%d) cheat de volar (Escoba Voladora)",PLAYER_INFO[playerid][Nickname],playerid);
					MensajeAdmin(COLOR_CHEAT, string, 3);
					PLAYER_TIMES[playerid][TIMER_AVISO_FLY_HACK] = gettime() + 2;
					KickAntiCheat(playerid, 0, 0, "Escoba Voladora");
				}
			}
			GetPlayerPos(playerid, PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][0],PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][1],PLAYER_TEMP[playerid][pt_POS_ANTITELEPORT][2]);
			PLAYER_TEMP[playerid][pt_INT_ANTITELEPORT] = GetPlayerInterior(playerid);
			PLAYER_TEMP[playerid][pt_VW_ANTITELEPORT] = GetPlayerVirtualWorld(playerid);
		}
   		if(GetPlayerWeapon(playerid) > 0 && GetPlayerWeapon(playerid) <= 46)
		{
		    if((GetPlayerWeapon(playerid) == 46) && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(GetPlayerWeapon(playerid))] != GetPlayerWeapon(playerid))
			{
			    PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(GetPlayerWeapon(playerid))] = 46;
			}
   			else if((GetPlayerWeapon(playerid) != 46) && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(GetPlayerWeapon(playerid))] != GetPlayerWeapon(playerid))
			{
			    if(gettime() > PLAYER_TIMES[playerid][TIMER_WEAPONS])
			    {
					if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(GetPlayerWeapon(playerid))] != GetPlayerWeapon(playerid))
					{
					    KickAntiCheat(playerid, 1, GetPlayerWeapon(playerid), "Weapon Cheat");
					}
				}
			}
		}
		if(gettime() > PLAYER_TIMES[playerid][TIMER_VIDA])
		{
			if(player_health > PLAYER_INFO[playerid][j_HEALTH] + 10.0)
   			{
				SetPlayerHealthEx(playerid, PLAYER_INFO[playerid][j_HEALTH]);
				//KickAntiCheat(playerid, 0, 0, "Cheat de Vida");
			}
			else if(player_health < PLAYER_INFO[playerid][j_HEALTH]) PLAYER_INFO[playerid][j_HEALTH] = player_health;
		}
	    if(gettime() > PLAYER_TIMES[playerid][TIMER_CHALECO])
		{
			if(player_armour > PLAYER_INFO[playerid][j_ARMOUR] + 10.0)
			{
				SetPlayerArmourEx(playerid, PLAYER_INFO[playerid][j_ARMOUR]);
				//KickAntiCheat(playerid, 0, 0, "Cheat de Chaleco");
			}
			else if(player_armour < PLAYER_INFO[playerid][j_ARMOUR]) PLAYER_INFO[playerid][j_ARMOUR] = player_armour;
		}
		if(GetPlayerWeapon(playerid) == 4)
		{
			new Animacionn[32], Libreriaa[32];
			GetAnimationName(GetPlayerAnimationIndex(playerid), Libreriaa, sizeof(Libreriaa), Animacionn, sizeof(Animacionn));
			if(strcmp(Libreriaa,"KNIFE") == 0 && strcmp(Animacionn,"KILL_PARTIAL") == 0)
			{
				SetPlayerArmedWeapon(playerid, 0);
				ClearAnimations(playerid);
			}
		}
	    if(AvisosAuto[playerid] > 0) AvisosAuto[playerid]--;

		for(new e=1;e<MAX_ENCARGOS;e++)
		{
		   	new str2[64];
			FinTiempoCriminal(e);
			TextDrawHideForPlayer(playerid, MisionCriminal[e]);
			TextDrawHideForPlayer(playerid, MisionColega[e]);
			TextDrawHideForPlayer(playerid, TiempoMision[e]);
			TextDrawHideForPlayer(playerid, TiempoMision[e]);
			TextDrawHideForPlayer(playerid, FranjaCriminal);
			if(TieneEncargo[playerid] > 0)
			{
				TextDrawShowForPlayer(Encargo[TieneEncargo[playerid]][IdCriminal], MisionCriminal[TieneEncargo[playerid]]);
				TextDrawShowForPlayer(Encargo[TieneEncargo[playerid]][IdColega], MisionColega[TieneEncargo[playerid]]);
				if(Encargo[TieneEncargo[playerid]][SegundosMision] < 10)		format(str2, 64, "00:0%d", Encargo[TieneEncargo[playerid]][SegundosMision]);
				else if(Encargo[TieneEncargo[playerid]][SegundosMision] < 60)		format(str2, 64, "00:%d", Encargo[TieneEncargo[playerid]][SegundosMision]);
				else if(Encargo[TieneEncargo[playerid]][SegundosMision] >= 60)	format(str2, 64, "0%d:%d",Encargo[TieneEncargo[playerid]][SegundosMision]/60, Encargo[TieneEncargo[playerid]][SegundosMision]%(60));
				TextDrawSetString(TiempoMision[TieneEncargo[playerid]], str2);
				if(Encargo[TieneEncargo[playerid]][SegundosMision] > 0) TextDrawShowForPlayer(Encargo[TieneEncargo[playerid]][IdColega], TiempoMision[TieneEncargo[playerid]]); TextDrawShowForPlayer(Encargo[TieneEncargo[playerid]][IdCriminal], TiempoMision[TieneEncargo[playerid]]);
			}
		}
		if((PLAYER_TIMES[playerid][Entrando] - gettime()) <= 0)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid), surf = GetPlayerSurfingVehicleID(playerid), surf_object = GetPlayerSurfingObjectID(playerid);
				if((GetVehicleSpeed(vehicleid) > (GetVehicleTopSpeed(vehicleid)+160)) && !AVION(vehicleid) && surf == INVALID_VEHICLE_ID && surf_object == INVALID_OBJECT_ID && MotorAuto[vehicleid] > 0)
				{
					if(PLAYER_TIMES[playerid][TiempoAntiC] > gettime()) return 1;
					PLAYER_TIMES[playerid][TiempoAntiC] = gettime() + 2;
					new Vel = VelocidadMaxAuto(GetVehicleModel(vehicleid));
					new string[256];
					format(string, 256,"{FFFFFF}Posible cheat de choque {FF3300}%s(ID: %d){FFFFFF} - Velocidad: %d/%d",PLAYER_INFO[playerid][Nickname], playerid, GetVehicleSpeed(vehicleid), Vel);
					MensajeAdmin(0xa9c4e4cc, string, 3);
					if(PLAYER_INFO[playerid][pNivel] == 2)
					{
						NoTeleportHack(playerid);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(playerid, X, Y, Z);
						SendClientMessage(playerid, -1, "{FFFFFF}Saliste disparado del vehículo a causa de un fuerte impacto.");
						RemovePlayerFromVehicle(playerid);
						SetPlayerPosEx(playerid, X, Y, Z+5);
					}
				}
			}
		}
		if(PLAYER_INFO[playerid][pTiempoCarcel] >= 0 && Jail[playerid] == 1)
		{
			if(EstaEnBus[playerid] == 0)
			{
				if(!IsPlayerPaused(playerid)) PLAYER_INFO[playerid][pTiempoCarcel] --;
				if(PLAYER_INFO[playerid][pTiempoCarcel] <= 0)
				{
					SendClientMessage(playerid,-1,"{11FF00}Cumpliste tu condena{FFFFFF}, quedas en libertad.");
					PLAYER_INFO[playerid][pTiempoCarcel] = 0;
					PLAYER_INFO[playerid][pTiempoJail] = 0;
					Esposando[playerid] = 0;
					CeldaJugador[playerid] = 0;
					Jail[playerid] = 0;
					San[playerid] = 0;
					CargarMapeosEx(playerid);
					if(EstaDomiciliaria[playerid] == 0)
					{
						switch(PLAYER_INFO[playerid][pTipoCarcel])
						{
							case 1:
							{
								new donde = random(6);
								switch(donde)
								{
									case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,1);
									case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,1);
									case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,1);
									case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,1);
									case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,1);
									case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,1);
								}
							}
							case 2:
							{
								new donde = random(6);
								switch(donde)
								{
									case 0: SetPosEx(playerid, 216.4100,120.2400,999.0156,0.0000,10,5);
									case 1: SetPosEx(playerid, 217.3244,120.3063,999.0156,6.6009,10,5);
									case 2: SetPosEx(playerid, 215.5035,120.2255,999.0156,355.9474,10,5);
									case 3: SetPosEx(playerid, 216.0696,121.0746,999.0156,355.9474,10,5);
									case 4: SetPosEx(playerid, 217.4385,120.7687,999.0156,355.9474,10,5);
									case 5: SetPosEx(playerid, 216.9519,118.9357,999.0156,2.6959,10,5);
								}
							}
							case 3:
							{
								new donde = random(6);
								switch(donde)
								{
									case 0: SetPosEx(playerid, 212.4893,158.3311,1003.0300,265.8078,3,7);
									case 1: SetPosEx(playerid, 212.3264,157.0358,1003.0300,270.1945,3,7);
									case 2: SetPosEx(playerid, 212.6126,159.4301,1003.0300,270.5078,3,7);
									case 3: SetPosEx(playerid, 211.6316,159.2158,1003.0234,270.5078,3,7);
									case 4: SetPosEx(playerid, 211.3360,158.4849,1003.0300,270.5078,3,7);
									case 5: SetPosEx(playerid, 211.4012,157.4245,1003.0300,270.5078,3,7);
								}
							}
							case 4:
							{
								new donde = random(6);
								switch(donde)
								{
									case 0: SetPosEx(playerid, 292.9334,1419.6272,10.1358,263.0111,0,0);
									case 1: SetPosEx(playerid, 292.3492,1418.9880,10.1810,263.0111,0,0);
									case 2: SetPosEx(playerid, 293.0168,1420.9564,10.1436,263.0111,0,0);
									case 3: SetPosEx(playerid, 293.6794,1419.9397,10.0793,263.0111,0,0);
									case 4: SetPosEx(playerid, 293.8986,1418.5115,10.0506,263.0111,0,0);
									case 5: SetPosEx(playerid, 294.7386,1419.3837,9.9930,263.0111,0,0);
								}
							}
						}
					}
					EstaDomiciliaria[playerid] = 0;
					PLAYER_INFO[playerid][pTipoCarcel] = 0;
				}
			}
		}
	 	if(PLAYER_INFO[playerid][pTiempoJail] >= 0 && San[playerid] == 1)
		{
			if(!IsPlayerPaused(playerid)) PLAYER_INFO[playerid][pTiempoJail] --;
			if(PLAYER_INFO[playerid][pTiempoJail] <= 0)
			{
				Jail[playerid] = 0;
				PLAYER_INFO[playerid][pTiempoCarcel] = 0;
				PLAYER_INFO[playerid][pTiempoJail] = 0;
				San[playerid] = 0;
				new donde = random(6);
				switch(donde)
				{
					case 0: SetPosEx(playerid, 1443.8561,-1663.9950,13.5530,91.1813,0,0);
					case 1: SetPosEx(playerid, 1443.4794,-1665.1669,13.5530,91.1813,0,0);
					case 2: SetPosEx(playerid, 1443.6100,-1666.9442,13.5530,91.1813,0,0);
					case 3: SetPosEx(playerid, 1445.0105,-1666.2917,13.5530,91.1813,0,0);
					case 4: SetPosEx(playerid, 1444.9506,-1664.9329,13.5530,91.1813,0,0);
					case 5: SetPosEx(playerid, 1444.5131,-1663.3024,13.5530,91.1813,0,0);
				}
				SendClientMessage(playerid, -1, "Has cumplido tu tiempo de sancion, ten en cuenta las reglas para no volver a ser sancionado.");
			}
		}
		if(PLAYER_TIMES[playerid][TiempoCargo] > 0)
		{
		    PLAYER_TIMES[playerid][TiempoCargo] --;
		    if(PLAYER_TIMES[playerid][TiempoCargo] == 0)
		    {
			    if(PLAYER_INFO[playerid][pCargos] == 2)
				{
				    new value = 0;
				    if(RoboTienda[playerid] == 1)
					{
				        foreach(new c : Player)
						{
			   				if(PLAYER_INFO[c][pFaccion] == 1 && PLAYER_INFO[c][pDuty] == 1 && EstaEnP(playerid,c,30.00))
							{
								PLAYER_TIMES[playerid][TiempoCargo] = 60;
						    	SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} está muy cerca, {FF0000}tienes que escapar{FFFFFF} para perder los cargos.");
							}
							else value = 1;
						}
						if(value == 1)
						{
						    RoboTienda[playerid] = 0;
							SendClientMessage(playerid,-1,"La {3399FF}policía{FFFFFF} dejó de buscarte, ahora {f21111}puedes robar{FFFFFF} otro negocio.");
							PLAYER_INFO[playerid][pCargos] = 0;
							ActualizarRadar();
							SetPlayerWantedLevel(playerid,PLAYER_INFO[playerid][pCargos]);
						}
					}
					else
					{
						PLAYER_INFO[playerid][pCargos] = 0;
						ActualizarRadar();
						SetPlayerWantedLevel(playerid,PLAYER_INFO[playerid][pCargos]);
						CagoSeguro[playerid] = 0;
					}
				}
			}
		}
		if(FabricaToxica[playerid] > 0)
		{
			if(IsNumberEven(FabricaToxica[playerid])) TextDrawHideForPlayer(playerid, Sangre2);
			else TextDrawShowForPlayer(playerid, Sangre2);
			FabricaToxica[playerid] --;
			GivePlayerHealth(playerid, -10.0);
		}
		if(EnSalonEvento(playerid) && Alquilado == true && Boleto[playerid] == false)
		{
			if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 1)
			{
				NoTeleportHack(playerid);
				SendClientMessage(playerid,-1,"Los guardias del salón te expulsaron por no haber pagado la entrada.");
				SetPlayerPosEx(playerid,1423.4301,-1180.1801,25.9922);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			}
		}
		if(EnSalonEvento(playerid) && Escuchando[playerid] == false && Alquilado == true && PLAYER_INFO[playerid][pSonidos] == 1)
		{
			Escuchando[playerid] = true;
		}
		else if(!EnSalonEvento(playerid) && Escuchando[playerid] == true)
		{
			Escuchando[playerid] = false;
			StopAudioStreamForPlayer(playerid);
		}
		if(JugadorLogeado[playerid] == 1)
		{
			if(Curando[playerid] == 1)
			{
				if(PLAYER_INFO[playerid][j_HEALTH] >= 60)
				{
					Curando[playerid] = 0;
					SetPlayerHealthEx(playerid, 60);
					SetTimerEx("ApareceHospital2", 1000, false, "d", playerid);
				}
				else GivePlayerHealth(playerid, 2.0);
			}
		}
	}
	if(PLAYER_TIMES[playerid][TiempoDuda] > 0) PLAYER_TIMES[playerid][TiempoDuda]--;
	if(PruebaOnline[playerid] == true)
	{
		PLAYER_TIMES[playerid][TiempoAcademia]++;
	}
	if(YoLlame[playerid] == 1) MinutoLlamada[playerid] += 1;
	
	if(PLAYER_TIMES[playerid][TiempoAgresor] > 0 && Agresor[playerid] != INVALID_PLAYER_ID)
	{
		PLAYER_TIMES[playerid][TiempoAgresor]--;
	}
 	else if(PLAYER_TIMES[playerid][TiempoAgresor] <= 0 && Agresor[playerid] != INVALID_PLAYER_ID)
	{
		PLAYER_TIMES[playerid][TiempoAgresor] = 0;
		Agresor[playerid] = INVALID_PLAYER_ID;
	}
 	return 1;
}
public Quitar1Cargo(playerid)
{
	if(PLAYER_INFO[playerid][pCargos] == 1 && CagoSeguro[playerid] == 1)
	{
		PLAYER_INFO[playerid][pCargos] --;
		SetPlayerWantedLevel(playerid,PLAYER_INFO[playerid][pCargos]);
		CagoSeguro[playerid] = 0;
		ActualizarRadar();
		SendClientMessage(playerid, COLOR_WHITE, "Tu nivel de búsqueda se redujo.");
	}
	return 1;
}
public Quitar2Cargos(playerid)
{
	if(PLAYER_INFO[playerid][pCargos] == 2 && RoboTienda[playerid] == 1)
	{
		PLAYER_INFO[playerid][pCargos] = 0;
		SetPlayerWantedLevel(playerid,PLAYER_INFO[playerid][pCargos]);
		RoboTienda[playerid] = 0;
		ActualizarRadar();
		SendClientMessage(playerid, COLOR_WHITE, "La {3399FF}policía{FFFFFF} dejó de buscarte, ahora {f21111}puedes robar{FFFFFF} otro negocio.");
	}
	return 1;
}
public OnPlayerConnect(playerid)
{
    #if DEBUG_GM == 1
   	printf("(OnPlayerConnect) PlayerID: %d", playerid);
    #endif
    for(new i = 0; i < 9; i++) TextDrawShowForPlayer(playerid, LoginTD[i]);
    EnablePlayerCameraTarget(playerid, true);
    new nombrefaster[32];
	randomString(nombrefaster, 15);
	if(IsPlayerNPC(playerid)) return 1;
	
	GetPlayerName(playerid, PLAYER_INFO[playerid][Nickname], 24);
	if(!strcmp(PLAYER_INFO[playerid][Nickname], "Dark", true) || !strcmp(PLAYER_INFO[playerid][Nickname], "Rabax", true))
	{
	    new string[128];
    	format(string, 128, "{AFAFAF}%s[ID:%d] ha ingresado al servidor.",PLAYER_INFO[playerid][Nickname],playerid);
		MensajeAdmin(-1, string, 3);
	}
	else
	{
	    if(!IsValidName(PLAYER_INFO[playerid][Nickname]))
	    {
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Nombre inválido", "{f21111}Departamento de inmigración:{FFFFFF} Tu nombre no es aceptable.\n{f21111}Formato para el nombre:{FFFFFF} Nombre_Apellido\nPor favor, vuelve con un nombre válido.","Aceptar","");
  			ExpulsarJugador(playerid, "Nombre Anti-rol");
    	    return 1;
	    }

	    new string[200];
	    new country[30];
	    format(string, 200, "{AFAFAF}%s[ID:%d] ha ingresado al servidor [IP: %s] [Pais: %s] [AKA: %d]",PLAYER_INFO[playerid][Nickname],playerid, PLAYER_INFO[playerid][IP], country, GetPlayerCountAKA(playerid));
		MensajeAdmin(-1, string, 3);
	}
    LimpiarCuenta(playerid);
    ALM_BackPack(playerid);
    Progressbar[playerid][Camionero]		=   CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
	Progressbar[playerid][Cosecha]			= 	CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
	Progressbar[playerid][ReparandoBar] 	=   CreatePlayerProgressBar(playerid, 278.000000, 429.000000, 91.500000, 3.200000, 16711935, 100);
 	Progressbar[playerid][Revisar]          =   CreatePlayerProgressBar(playerid, 277.000000, 428.000000, 94.500000, 2.199999, 16711935, 100);
 	Progressbar[playerid][BarraConquista]   =   CreatePlayerProgressBar(playerid, 493.750000, 174.720001, 94.500000, 2.199999, 0x3FE17AFF, 100);

    format(PLAYER_INFO[playerid][Nickname],128,"%s",nombrefaster);
	format(PLAYER_INFO[playerid][Nickname],128,"%s",PlayerName(playerid));

	LCHAT[playerid] = SetTimerEx("TCHAT",1000,true,"d",playerid);

    SetTimerEx("TAUDIO",1000,false,"d",playerid);
    TextDrawHideForPlayer(playerid, Sangre);
	TextDrawHideForPlayer(playerid, Sangre2);
	TextDrawHideForPlayer(playerid, NewPlayer[2]);
    TextDrawHideForPlayer(playerid, NewPlayer[0]);
    
	if(IsPlayerConnected(playerid))
    {
		new Query[90];
		mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username`='%s' LIMIT 1", PLAYER_INFO[playerid][Nickname]);
		mysql_tquery(handle_db, Query, "OnPlayerDataLoaded", "d", playerid);
	}
	gettime(Hora, Minuto);
	SetPlayerTime(playerid,Hora,Minuto);
	LimpiarChat(playerid, 25, 1);
	CrearTextdrawPlayer(playerid);
	gettime(Hora, Minuto);
	SetPlayerTime(playerid,Hora,Minuto);
    return 1;
}
stock GetYesOrNoConfig(var)
{
	new str[32];
	switch(var)
	{
		case 0: str = "> {FA0505}No{FFFFFF}";
		default: str = "< {2BA30A}Sí{FFFFFF}";
	}
	return str;
}

DestroyVehicleEx(vehicleid)
{
	if(DestroyVehicle(vehicleid))
	{
		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_OBJETOS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}
		return true;
	}
	return false;
}

EntrarInterior(playerid)
{
	for(new et = 0; et < MAX_GARAGES; et++)
	{
	    if(Estacionamientos[et][eEnUso] > 0)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
	        	if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[et][PosX], Estacionamientos[et][PosY], Estacionamientos[et][PosZ]))
	        	{
	                SetPosEx(playerid,Estacionamientos[et][SalidX], Estacionamientos[et][SalidY], Estacionamientos[et][SalidZ],Estacionamientos[et][SalidA],Estacionamientos[et][eInterior], Estacionamientos[et][eMundoVirtual]);
					CargarMapeosEx(playerid);
	        	}
			}
		}
	}
	for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(FABRICAS_INFO[ID][f_FACCION_ID] != PLAYER_INFO[playerid][pFaccion]) continue;

	    if(IsPlayerInRangeOfPoint(playerid, 3.0, FABRICAS_INFO[ID][f_POS][0], FABRICAS_INFO[ID][f_POS][1], FABRICAS_INFO[ID][f_POS][2]))
		{
		    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		    
		    if(GetPlayerInterior(playerid) == 0)
			{
				if(PLAYER_INFO[playerid][pCargos] >= 2)
				{
					foreach(new i : Player)
					{
						if(PLAYER_INFO[i][pFaccion] == 1 && PLAYER_INFO[i][pDuty] == 1 && EstaEnP(playerid,i,30.00))
						{
							SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
							return 1;
						}
					}
				}
			}
		    CargarMapeosEx(playerid);
			NoTeleportHack(playerid);
		    SetPosEx(playerid, -1976.39,206.366,1035.82, 90.0, FABRICAS_INFO[ID][f_INTERIOR], FABRICAS_INFO[ID][f_VW]);
		    return 1;
		}
	}
	if(PLAYER_INFO[playerid][pTiempoJail] == 0)
	{
		for(new c = 0; c < MAX_PROPIEDADES; c++)
		{
			if(PropInfo[c][pEnUso] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid,2.0,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]))
				{
				    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
					if(GetPlayerVirtualWorld(playerid) == 0)
					{
						if(PLAYER_INFO[playerid][pCargos] >= 2)
						{
							foreach(new i : Player)
							{
								if(PLAYER_INFO[i][pFaccion] == 1 && PLAYER_INFO[i][pDuty] == 1 && EstaEnP(playerid,i,30.00)) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
							}
						}
						if(PLAYER_INFO[playerid][pID] != PropInfo[c][pIDPropietario] && PropInfo[c][pAbierta] == 0) return SendClientMessage(playerid,-1,"La propiedad está cerrada, solo el dueño puede entrar.");
						if(PropInfo[c][pAbierta] == 0 && PropInfo[c][pIDPropietario] == PLAYER_INFO[playerid][pID]) SendClientMessage(playerid,-1,"La puerta se encuentra cerrada, escribe {FFFF04}/abrir puerta{FFFFFF} para abrirla.");
						SetPosEntrar(playerid,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS],PropInfo[c][pPosAS],PropInfo[c][pInteriorID],PropInfo[c][pVW]);
						if(PropInfo[c][pEmisora] != 0)
						{
       	                    foreach(new id : Player)
							{
								if(Emisoras[id][CabinaOcupada] == PropInfo[c][pEmisora])
								{
									if(Emisoras[id][TransEmisora] == 1)
									{
										SendClientMessageEx(playerid, 0xFFFFFFFF, "{FFFFFF}Escuchando radio {FFFF04}%s", Emisoras[id][NombreEmisora]);
										new stringa[70];
										format(stringa, sizeof(stringa),"http://"EMISORA_URL"/stream/%d/", Emisoras[id][EmisoraID]);
          								ReproducirEmisora(playerid, PropInfo[c][pEmisora], stringa);
									}
								}
							}
						}
					}
				}
				if(IsPlayerInRangeOfPoint(playerid,2.0, PropInfo[c][pRoperoX],PropInfo[c][pRoperoY],PropInfo[c][pRoperoZ]) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
				{
				    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
					if(PLAYER_INFO[playerid][pID] == PropInfo[c][pIDPropietario] && PropInfo[c][pRoperoAbierto] == 0)
					{
						AccionesRol(playerid,"abre el ropero, entra y lo cierra rápidamente.", 20);
						SendClientMessage(playerid,-1,"El ropero está cerrado, usa {FFFF04}/abrir ropero{FFFFFF} para abrirlo.");
					}
					if(PLAYER_INFO[playerid][pID] != PropInfo[c][pIDPropietario] && PropInfo[c][pRoperoAbierto] == 0) return SendClientMessage(playerid,-1,"El ropero está cerrado.");
					CargarMapeosEx(playerid);
					NoTeleportHack(playerid);
					SetPosEntrar(playerid,254.2685,-41.5420,1002.0308,267.0000,14,GetPlayerVirtualWorld(playerid));
				}
				if(IsPlayerInRangeOfPoint(playerid,3.0,-1145.1444,-4229.9453,8076.1411) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW] && GetPlayerInterior(playerid) == 4)
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
					    SetPosEntrar(playerid,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS],PropInfo[c][pPosAS],PropInfo[c][pInteriorID],PropInfo[c][pVW]);
					    return 1;
					}
					else SendClientMessage(playerid,-1,"Necesitas estar parado en la puerta para entrar.");
				}
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 649.0013,-1360.7864,13.5868))  // Estudio de Radio y Television
	{
		if(PLAYER_INFO[playerid][pNivel] == 1 && PLAYER_INFO[playerid][pAdmin] < 3) return SendClientMessage(playerid,-1,"Necesitas aumentar de nivel para ingresar al Estudio de Radio y Televisión.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al Estudio de radio y Televisión.");
		return SetPosEntrar(playerid, 387.4330,194.3359,1040.1078,185.9930,5,5);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 276.1852,122.1334,1004.6172) && PLAYER_INFO[playerid][pFaccion] == 1) // Vestuario LSPD
	{
		SetPosEntrar(playerid, 282.4075,1869.4720,8.7578,86.7928,0,0);
		CargarMapeosEx(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -282.6810,2655.8931,62.8985) && PLAYER_INFO[playerid][pFaccion] == 2) // Vestuario SAEM
	{
		SetPosEntrar(playerid, 1432.8271,-1594.1312,512.6520,96.5612,0,0);
		CargarMapeosEx(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1742.9551,-1864.2202,13.5741)) return SetPosEntrar(playerid,-2029.7441,-118.6951,1038.8187,355.6106,5,5);  // Unity Station
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2229.6833,-1721.4192,13.5627)) return SetPosEx(playerid,772.2999,-5.2435,1000.7286,0,5,0);  // GYM Ganton
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2014.8400,1150.4700,10.9203)) return SetPosEntrar(playerid,966.1780,-53.2595,1001.2200,90.0000,3,0); //Burdel
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 824.8679,860.2719,12.3028)) return SetPosEntrar(playerid,-229.1293,1401.1205,27.7656,0,18,0); // Bar Cantera
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2492.1536,924.8977,11.0234)) return SetPosEntrar(playerid,-2191.3962,-82.6744,1016.4689,90.0000,8,0); // Iglesia LV
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -1820.8500,-125.7650,5.7484)) return SetPosEntrar(playerid,502.0160,-67.6595,998.7578,180,11,3); //bar sf
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -49.9430,-269.3648,6.6332)) // ALBERGUE ENTRAR
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		if(Armados(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
		SetPosEntrar(playerid,2332.5701,-1254.7500,1026.2899,0.0000,1,19);
		CargarMapeosEx(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1411.6011,-1699.4674,13.5395)) // Ayuntamiento
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
	    if(Armados(playerid) && PLAYER_INFO[playerid][pDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
	    if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policia te esta buscando, no puedes entrar a esta propiedad.");
	    SetPosEntrar(playerid,1481.2555,-1779.2974,1815.9910,93.7608,20,65);
	    CargarMapeosEx(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1836.9700,-1682.4700,13.4258)) // ALHAMBRA ENTRAR
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		if(Armados(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
		SetPosEntrar(playerid,493.3470,-24.8391,1000.7800,90.0000,17,3);
		CargarMapeosEx(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2014.8101,1107.0100,10.9203)) // Club Striptease
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		if(Armados(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar a esta propiedad.");
		for(new i = 0; i < 7; i++) {
			DineroTirado[playerid][i] = 0;
		}
		SetPosEntrar(playerid,1204.8600,-13.8459,1001.0200,0.0000,2,5);
		CargarMapeosEx(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2507.3855,1242.2521,10.8270)) return SetPosEntrar(playerid, 502.0160,-67.6595,998.8580,180.0000,11,6); // Bar LS
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 681.6400,-473.3480,16.6363)) return SetPosEntrar(playerid, 502.0160,-67.6595,998.8580,180.0000,11,16); // Bar Dillimore
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2310.0757,-1643.5259,14.8270)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,9); //Bar 88
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2348.5005,-1372.6783,24.3984)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,12); //Bar ganton
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -89.6105,1378.2312,10.4698)) return SetPosEntrar(playerid,502.0160,-67.6595,998.8580,180.0000,11,15); // Bar Lilprobe
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2112.9055,-1211.4561,23.9629)) return SetPosEntrar(playerid,203.9241,-50.6627,1001.8047,2.5871,1,66); //SubUrban
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1377.0605,1152.7566,10.8203)) return SetPosEntrar(playerid,2594.3301,1649.7200,1087.5581,90.0000,1,5); //RS Haul
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2362.7698,2306.3025,8.1406))	// Academia
	{
		if(PLAYER_INFO[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Necesitas ser {f21111}nivel 4{FFFFFF} para poder entrar.");
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado a la academia.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,663.4366,-202.8868,1276.7941,97.8041,1,9);
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2107.7473,2165.5085,10.8203)) return SetPosEntrar(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,1); //Ferreteria 1
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2861.2581,2430.7432,11.0690)) return SetPosEx(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,2); //Ferreteria 2
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -1480.9843,2591.6638,55.8359)) return SetPosEx(playerid,-1074.4355,339.9846,1180.5259,356.7959,1,3); //Ferreteria 3
	if(IsPlayerInRangeOfPoint(playerid,2.0,1423.4301,-1180.1801,25.9922)) 	//Salon de eventos
	{
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al salón de eventos.");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,-1275.5626,2108.7246,1246.5457,263.2210,13,1);
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,1410.7946,-1228.7570,13.5469)) 	//Salon de eventos - vehiculos
	{
		if(TipoEvento != 3) return SendClientMessage(playerid,-1,"Solamente podrán ingresar vehículos al salón cuando haya una exposición.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Esta entrada es solamente para entrar en vehículo.");
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al salón de eventos.");
		SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 13);
		SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 1);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), -1165.8710,2118.6238,1246.5457);
		SetVehicleZAngle(GetPlayerVehicleID(playerid),182.4401);
		CargarMapeosEx(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1172.0782,-1323.3225,15.4029))     // Hospital LS
	{
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,1156.9583,-1312.1549,-10.7849,180,6,6);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2025.3247,-1401.6721,17.2105))     // Hospital grove
	{
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,1251.8484,-812.2070,1164.2759,90,6,7);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -2665.0000,640.1640,14.5531))      // Hospital SF
	{
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,-2737.1101,625.3660,1385.6547,270.0000,6,8);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1607.4094,1815.2427,10.8203))       // Hospital LV
	{
		if(Armado(playerid) && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid,-1,"No puedes entrar armado al hospital.");
		if(PLAYER_INFO[playerid][pCargos] > 0) return SendClientMessage(playerid,-1,"La policía te está buscando, no puedes entrar al hospital.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Tienes que estar parado en la puerta de la propiedad para poder entrar.");
		SetPosEntrar(playerid,1251.8484,-812.2070,1164.2759,90,6,9);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1498.4301,-1581.8600,13.5498)) return SetPosEntrar(playerid,834.4220,7.3780,1004.2900,89.0000,3,0); 		//Banco plaza
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -1581.3199,867.0190,7.7953))  return SetPosEntrar(playerid,2304.8401,-16.4665,26.8422,0.0000,0,5); 		//Banco SF
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2449.4690,2290.2200,10.8203)) return SetPosEntrar(playerid,1092.6782,-152.2306,1001.1160,7.3089,3,6); 		//Bank LV
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1457.1293,-1009.9208,26.8438)) return SetPosEntrar(playerid,1092.6782,-152.2306,1001.1160,7.3089,3,7); 	//Bank LS 2
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2244.4436,-1665.2526,15.4766)) return SetPosEntrar(playerid,207.6859,-110.8290,1005.1328,0,15,3); 			//Binco
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1456.4785,-1137.6067,23.9485)) return SetPosEntrar(playerid,161.4287,-96.9712,1001.8047,355.9063,18,55); 	//zip
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 499.5177,-1360.6284,16.3690)) return SetPosEntrar(playerid,207.0226,-140.2560,1003.5078,352.1463,3,0); 	//proplaps
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 454.2013,-1477.9746,30.8137)) return SetPosEntrar(playerid,204.2934,-168.8588,1000.5234,358.0996,14,57); 	//didier sachs
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 461.7039,-1500.7959,31.0453)) return SetPosEntrar(playerid,227.5291,-8.1299,1002.2109,82.0738,5,56); 		//victim
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1940.0084,-2116.0210,13.6953)) return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,15);  	// Sex Shop Ganton
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1087.6561,-922.4826,43.3906)) return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,3);     // Sex Shop Vinewood
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 953.8881,-1336.8315,13.5389))  return SetPosEntrar(playerid,-100.4110,-24.9332,1000.7188,90.0000,3,20);    // Sex Shop Atras HPC
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2421.4526,-1219.2432,25.5619))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,0.0000,3,12);    // Sex Shop LS
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1137.9877,-1365.3778,13.9844))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,6);   // Sex Shop Hospital
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2085.1189,2073.9683,11.0547))  return SetPosEntrar(playerid,-100.2077,-24.9942,1000.7188,354.1548,3,9);    // Sex Shop LV
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1554.49,-1675.58,16.200000))   return SetPosEntrar(playerid,246.4140,107.3210,1003.3199,356.0000,10,1);    // LSPD
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2290.4199,2431.8401,10.9203))  return SetPosEntrar(playerid,238.7010,138.6510,1003.1200,0.0000,3,7);    	// LVPD
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-1605.5137,710.2757,13.8672)) return SetPosEntrar(playerid,246.42,107.30,1003.22,0,10,5);      				// SFPD
	// Autoservicios
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1928.5809,-1776.2848,13.5469)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,1);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1000.5939,-919.9257,42.3281)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,2);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-78.3736,-1169.9005,2.1355)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,3);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-1676.1718,432.1964,7.1797)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,4);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-2420.1506,969.8429,45.2969)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,5);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-1320.4795,2698.6536,50.2663)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,6);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,639.0652,1683.3542,7.1875)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,7);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1599.0673,2221.8108,11.0625)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,8);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2637.2786,1129.6777,11.1797)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,9);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2117.5002,896.7776,11.1797)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,10);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2344.0371,583.3854,11.2078)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,11);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2187.7114,2469.6384,11.2422)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,12);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1383.2498,465.5594,20.1919)) return SetPosEntrar(playerid,-25.9019,-188.0416,1007.7300,358.8977,10,13);
	// Pizzeria
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-1808.7142,945.9161,24.8906)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,1);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-1720.9456,1359.7822,7.1853)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,2);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2083.3376,2224.7012,11.0234)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,3);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2756.7642,2477.3533,11.0625)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,4);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2638.7839,1849.7867,11.0234)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,5);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2331.8098,75.0506,26.6210)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,6);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1367.5475,248.2522,19.5669)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,7);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,203.3945,-201.9418,1.5781)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,8);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2105.4844,-1806.4695,13.5547)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,9);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2351.8242,2533.6289,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,10);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2330.6023,2533.6121,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,11);
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2309.5044,2533.6143,10.8203)) return SetPosEntrar(playerid,372.3595,-133.5242,1001.4922,358.8977,5,12);
	//Supermercados 24/7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1104.8700,-1370.2800,14.0844)) return SetPosEntrar(playerid,-27.3408,-31.7468,1003.6600,90.0000,4,56,1); // 24-7 Market
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1833.7693,-1842.5848,13.5781)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,1,1); // 24-7 Unity
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1315.4862,-897.6825,39.5781)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,2,1); // 24-7 Vinewood
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-2442.7354,755.4177,35.1719)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,3,1); // 24-7 SF
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1352.3689,-1759.2521,13.5078)) return SetPosEntrar(playerid,-27.3931,-58.2556,1003.6500,90.0000,6,66,1); // 24-7 LS
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2194.9404,1991.0470,12.2969)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,5,1); // 24-7 LV
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2424.1951,-1742.8109,13.5454)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,6,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2884.5591,2454.0518,11.0690)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,7,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2247.6382,2396.1689,10.8203)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,8,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,2546.5747,1972.6678,10.8203)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,9,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1766.6003,-1398.0162,15.7578)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,10,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1565.8555,-1171.4226,24.0953)) return SetPosEntrar(playerid,-30.9007,-91.4636,1003.5469,0,18,11,1); // 24-7
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1565.8555,-1171.4226,24.0953)) return SetPosEntrar(playerid,-30.9685,-91.5752,1003.5469,0,18,24,1); // 24-7
	return true;
}
SalirInterior(playerid)
{
    for(new et = 0; et < MAX_GARAGES; et++)
	{
	    if(Estacionamientos[et][eEnUso] > 0)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
	        	if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[et][SalidX], Estacionamientos[et][SalidY], Estacionamientos[et][SalidZ]))
	        	{
	        	    if(GetPlayerInterior(playerid) == Estacionamientos[et][eInterior] && GetPlayerVirtualWorld(playerid) == Estacionamientos[et][eMundoVirtual])
	        	    {
	                	SetPosEx(playerid,Estacionamientos[et][PosX], Estacionamientos[et][PosY], Estacionamientos[et][PosZ],Estacionamientos[et][PosA], 0, 0);
						CargarMapeosEx(playerid);
					}
				}
			}
		}
	}
	for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(FABRICAS_INFO[ID][f_FACCION_ID] != PLAYER_INFO[playerid][pFaccion]) continue;

	    if(IsPlayerInRangeOfPoint(playerid, 3.0, -1976.39,206.366,1035.82))
		{
		    if(FABRICAS_INFO[ID][f_INTERIOR] == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(playerid) == FABRICAS_INFO[ID][f_VW])
		    {
		    	SetPosEx(playerid, FABRICAS_INFO[ID][f_POS][0], FABRICAS_INFO[ID][f_POS][1], FABRICAS_INFO[ID][f_POS][2],FABRICAS_INFO[ID][f_POS][3] + 180.0, 0, 0);
                NoTeleportHack(playerid);
			}
		}
	}
    for(new c = 0; c < MAX_PROPIEDADES; c++)
	{
		if(PropInfo[c][pEnUso] == 1)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.0,PropInfo[c][pPosXS],PropInfo[c][pPosYS],PropInfo[c][pPosZS]))
			{
				if(PLAYER_INFO[playerid][pTiempoCarcel] == 0)
				{
					if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
					{
					    CargarMapeosEx(playerid);
					    NoTeleportHack(playerid);
						SetPlayerPosEx(playerid,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]);
						SetPlayerFacingAngle(playerid,PropInfo[c][pPosA]+180.0);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						PararEmisora(playerid);
					}
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,1.0,254.2685,-41.5420,1002.0308) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
			{
				CargarMapeosEx(playerid);
				NoTeleportHack(playerid);
				SetPlayerPosEx(playerid,PropInfo[c][pRoperoX],PropInfo[c][pRoperoY],PropInfo[c][pRoperoZ]);
				SetPlayerInterior(playerid,PropInfo[c][pInteriorID]);
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0,282.4075,1869.4720,8.7578) && PLAYER_INFO[playerid][pFaccion] == 1) // Vestuario SAPD
	{
		SetPosEx(playerid,276.2895,122.0703,1004.6172,269.4569,10,1);
		CargarMapeosEx(playerid);
	}
	//SAEM
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1433.0850,-1594.1534,512.6520)) // Vestuario SAEM
	{
		SetPosEntrar(playerid,-282.6672,2655.0134,62.8495,185.1323,0,0);
		CargarMapeosEx(playerid);
		CreateDynamic3DTextLabel("{FFFFFF}Pulsa {f21111}'F'{FFFFFF} para salir.",COLOR_WHITE,1433.0850,-1594.1534,512.6520,15.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID,1,-1,-1,-1,100.0);
	}
	//Mercado negro
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2122.1948,-1904.0641,13.5469))
	{
		SetPosEntrar(playerid, 1308.4752,11665.8154,294.2249,270.8301,0,0);
		CargarMapeosEx(playerid);
	}
	//
	//Mercado negro
	if(IsPlayerInRangeOfPoint(playerid, 2.0,1308.4752,11665.8154,294.2249))//Mercado negro
	{
		SetPosEntrar(playerid,2122.0269,-1903.3385,13.5469,357.3664,0,0);
		CargarMapeosEx(playerid);
	}
	//
	if(IsPlayerInRangeOfPoint(playerid, 1.0,1783.8291,-1301.7024,13.5026)) 	SetPosEntrar(playerid,1786.6675,-1299.3005,13.4228,350.8194,0,0);	// Elevador
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -2191.3962,-82.6744,1016.4689)) SetPosEntrar(playerid,2492.1550,925.4753,11.0234,354.8306,0,0);   // Iglesia LV
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 387.3900,194.3362,1040.1078))  SetPosEntrar(playerid,649.0013,-1360.7864,13.5868,96.7888,0,0);    // Emisoras
	if(IsPlayerInRangeOfPoint(playerid, 1.0,-2029.7441,-118.6951,1038.8187)) SetPosEntrar(playerid,1742.9551,-1864.2202,13.5741,0,0,0);	// Unity Station
	if(IsPlayerInRangeOfPoint(playerid, 1.0,493.3470,-24.8391,1000.7800)) SetPosEntrar(playerid,1836.9700,-1682.4700,13.4258,90.0000,0,0);	// Club Alhambra
	if(IsPlayerInRangeOfPoint(playerid, 1.0,772.2999,-5.2435,1000.7286)) SetPosEntrar(playerid, 2229.6833,-1721.4192,13.5627,88.3268,0,0);		// GYM Ganton
	if(IsPlayerInRangeOfPoint(playerid, 1.0,-229.1293,1401.1205,27.7656)) 	SetPosEntrar(playerid, 824.8679,860.2719,12.3028,23.8002+180,0,0);	// Bar Pequeño
	if(IsPlayerInRangeOfPoint(playerid,1.0,-1275.5626,2108.7246,1246.5457))  SetPosEntrar(playerid,1423.4301,-1180.1801,25.9922,0,0,0);   //Salon de eventos
	if(IsPlayerInRangeOfPoint(playerid,5.0,-1166.5009,2126.8232,1246.5457))     //Salon de eventos - vehiculos
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Esta salida es solamente para salir en vehículo.");
		CargarMapeosEx(playerid);
		SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
		SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), 1410.2614,-1237.0621,13.3828);
		SetVehicleZAngle(GetPlayerVehicleID(playerid),177.9267);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,5.0,1481.2555,-1779.2974,1815.9910)) SetPosEntrar(playerid,1411.6011,-1699.4674,13.5395,235.0624,0,0);  	// Ayuntamiento
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 2332.5701,-1254.7500,1026.2899)) SetPosEntrar(playerid,-49.9430,-269.3648,6.6332,180.0000,0,0); 	// ALBERGUE SALIR
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1204.8600,-13.8459,1001.0200)) {  // Club Striptease
		for(new i = 0; i < 7; i++) {
			DineroTirado[playerid][i] = 0;
		}
		SetPosEntrar(playerid,2014.8101,1107.0100,10.9203,210.0000,0,0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 501.8426,-67.7034,998.7578)) 		// Bares Grandes
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 3: SetPosEntrar(playerid,-1820.8500,-125.7650,5.7484,0.0000,0,0);
			case 6: SetPosEntrar(playerid,2507.3855,1242.2521,10.8270,0,0,0);
			case 9: SetPosEntrar(playerid,2310.0757,-1643.5259,14.8270,316.1429,0,0);
			case 12: SetPosEntrar(playerid,2348.5005,-1372.6783,24.3984,180,0,0);
			case 15: SetPosEntrar(playerid,-89.6105,1378.2312,10.4698,316.1429,0,0);
			case 16: SetPosEntrar(playerid,681.6400,-473.3480,16.6363,180.0000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -100.2077,-24.9942,1000.7188)) 	// Sex Shop's
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 3: SetPosEntrar(playerid,1087.6561,-922.4826,43.3906,186.5433,0,0);
			case 6: SetPosEntrar(playerid,1137.9877,-1365.3778,13.9844,89.5541,0,0);
			case 9: SetPosEntrar(playerid,2085.1189,2073.9683,11.0547,93.0609,0,0);
			case 12: SetPosEntrar(playerid,2421.4468,-1219.3365,25.5559,173.1247,0,0);
			case 15: SetPosEntrar(playerid,1940.0084,-2116.0210,13.6953,0,0,0);
			case 20: SetPosEntrar(playerid,953.9083,-1336.8312,13.5389,0,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -1074.4355,339.9846,1180.5259)) 	// Ferreterias LV
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 1: SetPosEntrar(playerid,2107.7473,2165.5085,10.8203,0.2875,0,0);
			case 2: SetPosEntrar(playerid,2861.2581,2430.7432,11.0690,0.2875,0,0);
			case 3: SetPosEntrar(playerid,-1480.9843,2591.6638,55.8359,0.2875,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 203.9241,-50.6627,1001.8047)) 	SetPosEntrar(playerid,2112.9055,-1211.4561,23.9629,-90,0,0);	// Sub Urban
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 834.4220,7.3780,1004.2900)) SetPosEntrar(playerid,1498.4301,-1581.8600,13.5498,90.0000,0,0);		// Bancos Pequeños (Plaza)
	if(IsPlayerInRangeOfPoint(playerid, 1.0,2304.8401,-16.4665,26.8422))   SetPosEntrar(playerid,-1581.3199,867.0190,7.7953,90.0000,0,0);     // Banco SF
	if(IsPlayerInRangeOfPoint(playerid, 1.0,1092.6782,-152.2306,1001.1160))     // Banco Central LS - LV
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 6: SetPosEntrar(playerid,2449.4690,2290.2200,10.8203,90.0000,0,0);
			case 7: SetPosEntrar(playerid,1457.1293,-1009.9208,26.8438,180,0,0);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 966.1780,-53.2595,1001.2200)) SetPosEntrar(playerid,2014.8400,1150.4700,10.9203,328.0000,0,0); // Trabajo prostitución
	if(IsPlayerInRangeOfPoint(playerid, 1.0,207.6859,-110.8290,1005.1328)) SetPosEntrar(playerid,2244.3147,-1665.3564,15.4766,346.2641,0,0);   // Binco
	if(IsPlayerInRangeOfPoint(playerid, 1.0,161.4287,-96.9712,1001.8047))  SetPosEntrar(playerid,1456.4785,-1137.6067,23.9485,220.2317,0,0);     // ZIP
	if(IsPlayerInRangeOfPoint(playerid, 1.0,207.0226,-140.2560,1003.5078))  SetPosEntrar(playerid,499.5177,-1360.6284,16.3690,339.9262,0,0);    // Pro Laps
	if(IsPlayerInRangeOfPoint(playerid, 1.0,204.2934,-168.8588,1000.5234))  SetPosEntrar(playerid,454.2013,-1477.9746,30.8137,111.2141,0,0);    // Didier Sachs
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 663.4366,-202.8868,1276.7941)) SetPosEntrar(playerid,2362.7698,2306.3025,8.1406,0,0,0); // Academia
	if(IsPlayerInRangeOfPoint(playerid, 1.0,227.5291,-8.1299,1002.2109)) SetPosEntrar(playerid,461.7039,-1500.7959,31.0453,96.1739,0,0);      // Victim
	if(IsPlayerInRangeOfPoint(playerid, 1.0,2594.2100,1649.7188,1087.5581))     // RS Haul
	{
		if(GetPlayerVirtualWorld(playerid) == 5) SetPosEntrar(playerid,1377.0605,1152.7566,10.8203,0.0000,0,0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0,1251.8484,-812.2070,1164.2759)) //Hospital ganton - Lv
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 7: SetPosEntrar(playerid,2025.3247,-1401.6721,17.2105,180,0,0);
			case 9: SetPosEntrar(playerid,1607.4094,1815.2427,10.8203,0,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -30.9007,-91.4636,1003.5469))      // 24/7
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 1: SetPosEntrar(playerid,1833.7819,-1842.6631,13.5781,271.0529-180,0,0);
			case 2: SetPosEntrar(playerid,1315.4862,-897.6825,39.5781,180.0000,0,0);
			case 3: SetPosEntrar(playerid,-2442.7354,755.4177,35.1719,180.0000,0,0);
			case 4: SetPosEntrar(playerid,1352.3689,-1759.2521,13.5078,1.8684,0,0);
			case 5: SetPosEntrar(playerid,2194.9404,1991.0470,12.2969,1.8684,0,0);
			case 6: SetPosEntrar(playerid,2424.1951,-1742.8109,13.5454,0,0,0);
			case 7: SetPosEntrar(playerid,2884.5591,2454.0518,11.0690,0,0,0);
			case 8:	SetPosEntrar(playerid,2247.6382,2396.1689,10.8203,0,0,0);
			case 9: SetPosEntrar(playerid,2546.5747,1972.6678,10.8203,0,0,0);
			case 10: SetPosEntrar(playerid,1766.6003,-1398.0162,15.7578,0,0,0);
			case 11: SetPosEntrar(playerid,1565.8555,-1171.4226,24.0953,0,0,0);
			case 24: SetPosEntrar(playerid,1565.6500,-1171.0500,24.1925,90.0000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0,-27.3931,-58.2556,1003.6500))
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 66: SetPosEntrar(playerid,1352.3500,-1759.2400,13.6078,90.0000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0,-27.3528,-31.4270,1003.5573))
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 56: SetPosEntrar(playerid,1104.7693,-1370.2813,13.9844,180.0000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -25.9019,-188.0416,1007.7300))      // Autoservicios
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 1: SetPosEntrar(playerid,1928.5809,-1776.2848,13.5469,270.0000,0,0);
			case 2: SetPosEntrar(playerid,1000.5939,-919.9257,42.3281,94.3611,0,0);
			case 3: SetPosEntrar(playerid,-78.3736,-1169.9005,2.1355,61.8761,0,0);
			case 4: SetPosEntrar(playerid,-1676.1718,432.1964,7.1797,224.6751,0,0);
			case 5: SetPosEntrar(playerid,-2420.1506,969.8429,45.2969,87.5656,0,0);
			case 6: SetPosEntrar(playerid,-1320.4795,2698.6536,50.2663,28.8933,0,0);
			case 7: SetPosEntrar(playerid,639.0652,1683.3542,7.1875,224.9244,0,0);
			case 8: SetPosEntrar(playerid,1599.0673,2221.8108,11.0625,41.5389,0,0);
			case 9: SetPosEntrar(playerid,2637.2786,1129.6777,11.1797,2.2830,0,0);
			case 10: SetPosEntrar(playerid,2117.5002,896.7776,11.1797,0.0000,0,0);
			case 11: SetPosEntrar(playerid,2344.0371,583.3854,11.2078,264.4542,0,0);
			case 12: SetPosEntrar(playerid,2187.7114,2469.6384,11.2422,264.4542,0,0);
            case 13: SetPosEntrar(playerid,1383.2498,465.5594,20.1919,157.1449,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 372.3595,-133.5242,1001.4922))      // Pizzerias
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 1: SetPosEntrar(playerid,-1808.7142,945.9161,24.8906,91.7226,0,0);
			case 2: SetPosEntrar(playerid,-1720.9456,1359.7822,7.1853,91.7226,0,0);
			case 3: SetPosEntrar(playerid,2083.3376,2224.7012,11.0234,91.7226,0,0);
			case 4: SetPosEntrar(playerid,2756.7642,2477.3533,11.0625,91.7226,0,0);
			case 5: SetPosEntrar(playerid,2638.7839,1849.7867,11.0234,91.7226,0,0);
			case 6: SetPosEntrar(playerid,2331.8098,75.0506,26.6210,-90.0000,0,0);
			case 7: SetPosEntrar(playerid,1367.5475,248.2522,19.5669,91.7226,0,0);
			case 8: SetPosEntrar(playerid,203.3945,-201.9418,1.5781,91.7226,0,0);
			case 9: SetPosEntrar(playerid,2105.4844,-1806.4695,13.5547,0.00000,0,0);
			case 10: SetPosEntrar(playerid,2351.8242,2533.6289,10.8203,0.00000,0,0);
			case 11: SetPosEntrar(playerid,2330.6023,2533.6121,10.8203,0.00000,0,0);
			case 12: SetPosEntrar(playerid,2309.5044,2533.6143,10.8203,0.00000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -2029.7225,-119.6245,1035.1719))
	{
		if(GetPlayerInterior(playerid) == 3)
		{
			SetPosEntrar(playerid,1554.9100,-1675.6300,16.1953,90.0000,0,0);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 246.4200,107.3000,1003.2200))      // LSPD - SFPD
	{
		if(GetPlayerVirtualWorld(playerid) == 1) SetPosEntrar(playerid,1554.9100,-1675.6300,16.1953,90.0000,0,0);
		else if(GetPlayerVirtualWorld(playerid) == 5) SetPosEntrar(playerid,-1605.4000,711.5900,13.8672,90.0000,0,0);
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0,238.7010,138.6510,1003.1200))  SetPosEx(playerid,2290.4199,2431.8401,10.9203,180.0000,0,0);     // LVPD
	if(IsPlayerInRangeOfPoint(playerid, 1.0,-2737.1101,625.3660,1385.6547))  SetPosEx(playerid,-2665.0000,640.1640,14.5531,180.0000,0,0);   // HOSPITAL SF
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1156.9583,-1312.1549,-10.7849)) SetPosEx(playerid,1172.0782,-1323.3225,15.4029,270.0000,0,0);	//Hospital Interior
	return true;
}
public OnPlayerDisconnect(playerid, reason)
{
    #if DEBUG_GM == 1
    	printf("(OnPlayerDisconnect) PlayerID: %d | Reason: %d", playerid, reason);
    #endif
    if(IsPlayerNPC(playerid))
    {
		if(!strcmp(NombreJugador(playerid), "Marcelo", true)) 					{ UpdateDynamic3DTextLabelText(TextBot[1],COLOR_BLANCO,""); KillTimer(TimerTxtMarcelo); ReJoinNPC(2); }
		if(!strcmp(NombreJugador(playerid), "MrBeast", true)) 					{ ReJoinNPC(0); }
		else if(!strcmp(NombreJugador(playerid), "Alejandro", true)) 			{ ReJoinNPC(1); }
        else if(!strcmp(NombreJugador(playerid), "HippePepe", true))			{ UpdateDynamic3DTextLabelText(TextBot[1],COLOR_BLANCO,""); KillTimer(TimerTxtMarcelo); ReJoinNPC(3); }
		else if(!strcmp(NombreJugador(playerid), "Jorge", true))				{ UpdateDynamic3DTextLabelText(TextBot[3],COLOR_BLANCO,""); ReJoinNPC(4); }
		else if(!strcmp(NombreJugador(playerid), "Ignacio", true))				{ UpdateDynamic3DTextLabelText(TextBot[4],COLOR_BLANCO,""); ReJoinNPC(5); }
		else if(!strcmp(NombreJugador(playerid), "Hugo", true))					{ UpdateDynamic3DTextLabelText(TextBot[6],COLOR_BLANCO,""); ReJoinNPC(6); }
		else if(!strcmp(NombreJugador(playerid), "Mao", true))					{ UpdateDynamic3DTextLabelText(TextBot[7],COLOR_BLANCO,""); ReJoinNPC(7); }
		else if(!strcmp(NombreJugador(playerid), "Brayan", true))				{ UpdateDynamic3DTextLabelText(TextBot[8],COLOR_BLANCO,""); KillTimer(TimerTxtMarcelo); ReJoinNPC(8); }
    }
 	if(PLAYER_TEMP[playerid][p_TUNING])
    {
        PLAYER_TEMP[playerid][p_TUNING] = false;
        SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 880.3107,-1219.3834,16.6440);
		SetVehicleZAngle(PLAYER_TEMP[playerid][p_TUNNING_VEHICLE_ID], 267.8575);
    }
    if(PLAYER_INFO[playerid][MobileSub] == 2540 || PLAYER_INFO[playerid][MobileSub] == 911)  ColgarLaLlamada(playerid);
	new callere = PLAYER_INFO[playerid][MobileSub];
	if(IsPlayerConnected(callere) && callere != -1)
	{
		SendClientMessage(callere, -1, "Colgaron la llamada.");
		SetPlayerSpecialAction(callere, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(callere, 7);
		PLAYER_INFO[callere][MobileSub] = -1;
		EnLlamada[callere] = 0;
		finllamada(callere);
		ColgarLaLlamada(playerid);
	}
    if(IsPlayerInAnyVehicle(playerid))
	{
		new vrID = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID] != 0)
		{
			CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID]][2]--;
			foreach(new i : Player)
			{
				if(IsPlayerInVehicle(i, vrID))
				{
					CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID]][2]--;
				}
			}
		}
		GLOBAL_VEHICLES[vrID][gb_vehicle_EMISORA_ID] = 0;
	}
    PararEmisora(playerid);
    if(Emisoras[playerid][TransEmisora] == 1)
	{
		CerrarEmisora(Emisoras[playerid][CabinaOcupada]);
		Emisoras[playerid][TransEmisora] = 0;
		Emisoras[playerid][CabinaOcupada] = -1;
	}
    if(Companero[playerid] != INVALID_PLAYER_ID)
	{
		RecorridoBasu[Companero[playerid]] = 0;
		PBasura[Companero[playerid]] = 0;
		Companero[Companero[playerid]] = -1;
		DisablePlayerCheckpoint(Companero[playerid]);
		SendClientMessage(Companero[playerid], -1, "Tu compañero se ha marchado y el recorrido fue cancelado.");
	}
	if(DISCOTEC_INFO[d_DJ] == playerid && DISCOTEC_INFO[d_USED])
	{
	    foreach(new i : Player)
	    {
	        if(PLAYER_TEMP[i][p_IN_DISCOTEC])
			{
			    SendClientMessage(i, -1, "El DJ que estaba colocando música se desconecto.");
				StopAudioStreamForPlayer(i);
				PLAYER_TEMP[i][p_IN_DISCOTEC] = false;
			}
	    }
	    PLAYER_TEMP[playerid][p_IN_DISCOTEC] = false;
	    DISCOTEC_INFO[d_USED] = false;
		DISCOTEC_INFO[d_DJ] = -1;
	}
	KillTimer(ResetearYaMostro[playerid]);
    KillTimer(HCurando[playerid]);
	KillTimer(ResetearYaMostro[playerid]);
	GuardarCuenta(playerid);
	if(Mats1[playerid] == 1) DarDinero(playerid,1250);
	if(Mats2[playerid] == 1) DarDinero(playerid,1250);
	if(Mats3[playerid] == 1) DarDinero(playerid,6250);
	if(Frecuencia[playerid] == 1)	{	frecuencias[1] -= 1;	}
	if(Frecuencia[playerid] == 2)	{	frecuencias[2] -= 1;	}
	if(Frecuencia[playerid] == 3)	{	frecuencias[3] -= 1;	}
	if(Frecuencia[playerid] == 4)	{	frecuencias[4] -= 1;	}
	if(Frecuencia[playerid] == 5)	{	frecuencias[5] -= 1;	}
	if(Frecuencia[playerid] == 6)	{	frecuencias[6] -= 1;	}
	if(Frecuencia[playerid] == 7)	{	frecuencias[7] -= 1;	}
	if(Frecuencia[playerid] == 8)	{	frecuencias[8] -= 1;	}
	KillTimer(TM[playerid]);
	KillTimer(TCV[playerid]);
	KillTimer(TCV2[playerid]);
	KillTimer(BaulPB[playerid]);
	KillTimer(llamadasonido1[playerid]);
	KillTimer(CLlamada[playerid]);
	KillTimer(llamadasonido2[playerid]);
	KillTimer(asd[playerid]);
	KillTimer(asdtren[playerid]);
	HideNotifications(playerid);
	if(TieneEncargo[playerid] > 0) CancelarCriminal(playerid);
	if(Specteado[playerid] == 1)
	{
		foreach(new i : Player)
		{
			if(SpecJugador[i] == playerid)
			{
			    Specteado[i] = INVALID_PLAYER_ID;
				TogglePlayerSpectating(i,false);
			}
		}
	}
	DestroyPlayerProgressBar(playerid, Progressbar[playerid][Camionero]);
	DestroyPlayerProgressBar(playerid, Progressbar[playerid][Cosecha]);
	DestroyPlayerProgressBar(playerid, Progressbar[playerid][ReparandoBar]);
	DestroyPlayerProgressBar(playerid, Progressbar[playerid][Revisar]);
	if(GetPlayerScore(playerid) == 0) return 1;
	new stringo[128];
	for(new i = 1; i < MAX_REPORTS; i++)
	{
	    if(REPORT_INFO[i][r_PLAYERID] == playerid)
	    {
	        REPORT_INFO[i][r_ID] = 0;
	    	REPORT_INFO[i][r_ESTADO] = 1;
	    	break;
	    }
	}
	if(PLAYER_INFO[playerid][pCama] > 0)
	{
		KillTimer(HCurando[playerid]);
        SendClientMessage(playerid,-1,"Ya te has recuperado completamente, puedes ir a tu casa.");
        switch(PLAYER_INFO[playerid][enHospital])
        {
            case 1: {
				CamillaLS[PLAYER_INFO[playerid][pCama]] = 0;
				PLAYER_INFO[playerid][pCama] = 0;
            }
            case 2: {
                CamillaSF[PLAYER_INFO[playerid][pCama]] = 0;
				PLAYER_INFO[playerid][pCama] = 0;
            }
            case 3: {
                CamillaLV[PLAYER_INFO[playerid][pCama]] = 0;
				PLAYER_INFO[playerid][pCama] = 0;
            }
            case 4: {
                CamillaGA[PLAYER_INFO[playerid][pCama]] = 0;
				PLAYER_INFO[playerid][pCama] = 0;
			}
        }
        PLAYER_INFO[playerid][pCama] = 0;
	}
	if(IsValidDynamicObject(Transportistas[playerid][Objeto1]))
	{
		DestroyDynamicObject(Transportistas[playerid][Objeto1]);
		Transportistas[playerid][Objeto1] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamicObject(Transportistas[playerid][Objeto2]))
	{
		DestroyDynamicObject(Transportistas[playerid][Objeto2]);
		Transportistas[playerid][Objeto2] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamicObject(Transportistas[playerid][Objeto3]))
	{
		DestroyDynamicObject(Transportistas[playerid][Objeto3]);
		Transportistas[playerid][Objeto3] = INVALID_OBJECT_ID;
	}
	new szMessage[200];
	switch (reason)
	{
		case 0:
		{
			format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [Timeout]", PLAYER_INFO[playerid][Nickname],playerid);
		}
		case 1:
		{
			format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [/q]", PLAYER_INFO[playerid][Nickname],playerid);
			ProxDetector(10.0, playerid, szMessage, COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE);
		}
		case 2:
		{
			format(szMessage, sizeof(szMessage), "%s(%d) se desconectó [Baneado o Kickeado]", PLAYER_INFO[playerid][Nickname],playerid);
		}
	}
	new Float:xz,Float:yz,Float:zz;
	GetPlayerPos(playerid,xz,yz,zz);
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i,10.0,xz,yz,zz))
	    {
	        if(PLAYER_INFO[i][pAdmin] >= 3)
	        {
			    new adminx[570];
				format(adminx,sizeof(adminx),"%s (ID: %d) se desconectó con la IP: %s",PLAYER_INFO[playerid][Nickname],playerid,PLAYER_TEMP[playerid][voIP]);
				SendClientMessage(i,-1,adminx);
	        }
	    }
	}
	if(EnCombate[playerid] == 1)
	{
		if(reason == 1)
		{
			if(NoQuitar[playerid] == 0 && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1)
			{
				QuitarArmas(playerid);
				format(stringo, 128, "%s(%d) perdió las armas por cerrar el juego en combate.",PLAYER_INFO[playerid][Nickname],playerid);
				ProxDetector(15.0, playerid, stringo, COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE,COLOR_COMBATE);
				KillTimer(TimerCombate[playerid]);
			}
		}
	}
	new nombrefaster[32];
	randomString(nombrefaster, 15);
	format(PLAYER_INFO[playerid][Nickname],32,"%s",nombrefaster);

	new caller = PLAYER_INFO[playerid][MobileSub];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 2540 || caller == 911)
	{
		if(caller < 50)
		SendClientMessage(caller,  -1, "Colgaron la llamada.");
		finllamada(caller);
		PLAYER_INFO[caller][MobileSub] = INVALID_PLAYER_ID;
		PLAYER_INFO[caller][Mobile] = INVALID_PLAYER_ID;
		PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
		PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
	PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
	if(Manejando[playerid] == 1)
	{
		DarArmas(playerid);
	}
	for(new i=0;i<GetVehiclePoolSize();i++)
	{
		if(Chofer[i] == playerid)
		{
			Chofer[i] = INVALID_PLAYER_ID;
			CamionCargado[i] = 0;
		}
	}
	SaveAccount(playerid);
	DisablePlayerCheckpoint(playerid);
 	Luces[autos[playerid]] = 0;
	MotorAuto[autos[playerid]] = 0;
	Luces[autos2[playerid]] = 0;
	MotorAuto[autos2[playerid]] = 0;
	Luces[autos3[playerid]] = 0;
	MotorAuto[autos3[playerid]] = 0;
	Luces[autos4[playerid]] = 0;
	MotorAuto[autos4[playerid]] = 0;
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	
	new Query[150];
	mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Online`='0' WHERE `Username`='%e'", PLAYER_INFO[playerid][Nickname]);
	mysql_query(handle_db, Query);
		
	LimpiarCuenta(playerid);
	return 1;
}
funcion CerrarIsla1()
{
	MoveDynamicObject(controls[8], 833.4200, -2963.8000, 11.7460-SPEED_CONTROLS, SPEED_CONTROLS, 0.00000, -90.00000, 0.00000);
	return 1;
}
funcion CerrarIsla2()
{
	MoveDynamicObject(controls[9], 833.4100, -2954.5200, 12.1000-SPEED_CONTROLS, SPEED_CONTROLS, 0.00000, 90.00000, 0.00000);
	return 1;
}

public BorrarDinero(id)
{
	if(IsValidDynamicPickup(id)) DestroyDynamicPickup(id);
	return 1;
}

public ClearAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return 1;
}
public CerrarAviso(playerid)
{
	TextDrawHideForPlayer(playerid, Cuadroputi);
 	TextDrawHideForPlayer(playerid, Cuadroputi1);
	PlayerTextDrawHide(playerid, AfinidadconX[playerid]);
	PlayerTextDrawHide(playerid, LineasPutiNivel[playerid]);
	TextDrawHideForPlayer(playerid, PuticlubMedia);
	TextDrawHideForPlayer(playerid, PuticlubAlta);
	TextDrawHideForPlayer(playerid, FlechasArribaPuti);
	TextDrawHideForPlayer(playerid, FlechasArribaPuti2);
	PlayerTextDrawHide(playerid, Radly[playerid]);
	return 1;
}
public LevantarMano(playerid,actor)
{
    KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
	PLAYER_TEMP[playerid][TimerRobar] = SetTimerEx("LevantarMano",1000,false,"dd",playerid,actor);
	new apuntando = GetPlayerTargetDynamicActor(playerid),id;
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		if(IsValidDynamicActor(actor))
	    {
			if(actor == RoboTiendas[i][Actor])
			{
	   			id = RoboTiendas[i][rID];
	   		}
		}
	}
	if(RoboTiendas[id][TiendaRobada] > 0) return PLAYER_TEMP[playerid][PuedeRobar] = 0;
	if(PermiteRobar(playerid,id) == 0) return PLAYER_TEMP[playerid][PuedeRobar] = 0;
	if(apuntando == INVALID_ACTOR_ID || apuntando == 0)
	{
	    PLAYER_TEMP[playerid][PuedeRobar] = 0;
		CancelarRobo(playerid,actor);
	    KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
	    return 1;
	}
	for(new i = 0; i < MAX_NPC_ROBOS; i++)
	{
		if(IsValidDynamicActor(actor))
  		{
			if(actor == RoboTiendas[i][Actor])
		    {
				RoboTiendas[id][RoboProceso] ++;
				switch(RoboTiendas[id][RoboProceso])
				{
				    case 1: { ApplyDynamicActorAnimation(actor,"PED", "handsup", 4.1, 0, 0, 0, 1, 0); }
				    case 3: { ApplyDynamicActorAnimation(actor,"MISC", "PLYR_SHKHEAD", 4.1, 0, 0, 0, 1, 0); }
					case 5: { ApplyDynamicActorAnimation(actor,"CASINO", "Roulette_bet", 4.1, 1, 1, 1, 1, 1); }
					case 12:
					{
					    RoboTiendas[id][RoboProceso] = 0;
			            KillTimer(PLAYER_TEMP[playerid][TimerRobar]);
			            RobarTiendaTerminado(playerid,actor,id);
					}
			  	}
		    }
		}
	}
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_SPRINT && newkeys & KEY_YES || newkeys & KEY_HANDBRAKE && newkeys & KEY_YES && GetPlayerVehicleID(playerid))
	{
	    new Float:POS_TEMPV[4][3];
	    GetVehiclePos(autos[playerid],  POS_TEMPV[0][0], POS_TEMPV[0][1], POS_TEMPV[0][2]);
	    GetVehiclePos(autos2[playerid], POS_TEMPV[1][0], POS_TEMPV[1][1], POS_TEMPV[1][2]);
	    GetVehiclePos(autos3[playerid], POS_TEMPV[2][0], POS_TEMPV[2][1], POS_TEMPV[2][2]);
	    GetVehiclePos(autos4[playerid], POS_TEMPV[3][0], POS_TEMPV[3][1], POS_TEMPV[3][2]);
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, POS_TEMPV[0][0], POS_TEMPV[0][1], POS_TEMPV[0][2]))
	    {
	        GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
	        if(bloqueado[autos[playerid]] == 1)
	        {
	            SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	            AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[0][0], POS_TEMPV[0][1], POS_TEMPV[0][2]);
	            bloqueado[autos[playerid]] = 0;
	            PLAYER_INFO[playerid][vSeguro] = 0;
	        }
	        else
	        {
	            SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	            AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[0][0], POS_TEMPV[0][1], POS_TEMPV[0][2]);
	            bloqueado[autos[playerid]] = 1;
	            PLAYER_INFO[playerid][vSeguro] = 1;
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, POS_TEMPV[1][0], POS_TEMPV[1][1], POS_TEMPV[1][2]))
	    {
	        GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
	        if(bloqueado[autos2[playerid]] == 1)
	        {
	            SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	            AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[1][0], POS_TEMPV[1][1], POS_TEMPV[1][2]);
	            bloqueado[autos2[playerid]] = 0;
	            PLAYER_INFO[playerid][vSeguro2] = 0;
	        }
	        else
	        {
	            SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	            AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
                SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[1][0], POS_TEMPV[1][1], POS_TEMPV[1][2]);
	            bloqueado[autos2[playerid]] = 1;
	            PLAYER_INFO[playerid][vSeguro2] = 1;
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, POS_TEMPV[2][0], POS_TEMPV[2][1], POS_TEMPV[2][2]))
	    {
	        GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
	        if(bloqueado[autos3[playerid]] == 1)
	        {
	            SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	            AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[2][0], POS_TEMPV[2][1], POS_TEMPV[2][2]);
	            bloqueado[autos3[playerid]] = 0;
	            PLAYER_INFO[playerid][vSeguro3] = 0;
	        }
	        else
	        {
	            SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	            AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[2][0], POS_TEMPV[2][1], POS_TEMPV[2][2]);
	            bloqueado[autos3[playerid]] = 1;
	            PLAYER_INFO[playerid][vSeguro3] = 1;
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 5.0, POS_TEMPV[3][0], POS_TEMPV[3][1], POS_TEMPV[3][2]))
	    {
	        GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
	        if(bloqueado[autos4[playerid]] == 1)
	        {
	            AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
	            SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[3][0], POS_TEMPV[3][1], POS_TEMPV[3][2]);
	            bloqueado[autos4[playerid]] = 0;
	            PLAYER_INFO[playerid][vSeguro4] = 0;
	        }
	        else
	        {
	            SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
	            AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
	            SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
	            PlayerPlaySound(playerid, 1145, POS_TEMPV[3][0], POS_TEMPV[3][1], POS_TEMPV[3][2]);
	            bloqueado[autos4[playerid]] = 1;
	            PLAYER_INFO[playerid][vSeguro4] = 1;
	        }
	    }
	    return 1;
	}
	if(newkeys & KEY_CROUCH) // H con vehículo
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) TunearCoche(playerid);
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
	    {
	        if(!FABRICAS_INFO[ID][f_VALID]) continue;
	        if(FABRICAS_INFO[ID][f_FACCION_ID] == PLAYER_INFO[playerid][pFaccion] || PLAYER_INFO[playerid][pAdmin] >= 4 || FABRICAS_INFO[ID][f_VENTA] == 0)
	        {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					for(new slot = 0; slot < 2; slot++)
				    {
				        if(PlayerNearObject(playerid, FABRICAS_INFO[ID][f_PORTON][slot], 15.0))
				        {
				            if(FABRICAS_INFO[ID][f_PORTON_ESTADO] == 0) return EstadoRejaFabrica(ID, 1);
						}
					}
				}
			}
			if(PLAYER_TIMES[playerid][Entrando] > gettime()) return 1;
			if(FABRICAS_INFO[ID][f_FACCION_ID] != PLAYER_INFO[playerid][pFaccion]) continue;
			
			if(IsPlayerInRangeOfPoint(playerid, 5.0, FABRICAS_INFO[ID][f_POS_GARAJE][0], FABRICAS_INFO[ID][f_POS_GARAJE][1], FABRICAS_INFO[ID][f_POS_GARAJE][2]))
			{
			    if(GetPlayerVehicleID(playerid) == autos[playerid] || GetPlayerVehicleID(playerid) == autos2[playerid] || GetPlayerVehicleID(playerid) == autos3[playerid] || GetPlayerVehicleID(playerid) == autos4[playerid])
				{
				    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
						GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
						posx = -1976.1282 - (floatsqroot(sizey + sizey + sizey) * floatsin(-(-90.0), degrees));
						posy = 212.3176 - (floatsqroot(sizey + sizey + sizey) * floatcos(-(-90.0), degrees));

						CargarMapeosEx(playerid);
						NoTeleportHack(playerid);
						SetVehiclePosEx(GetPlayerVehicleID(playerid), posx, posy, 1035.8162);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), 90.0);

						SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_INTERIOR]);
						SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_VW]);
						return 1;
					}
				}
				else if(GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][0] || GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][1])
				{
				    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
                        NoTeleportHack(playerid);
						new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
						GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
						posx = -1976.1282 - (floatsqroot(sizey + sizey + sizey) * floatsin(-(-90.0), degrees));
						posy = 212.3176 - (floatsqroot(sizey + sizey + sizey) * floatcos(-(-90.0), degrees));

						if(GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][0])
						{
							if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_QUIMICOS && FABRICAS_INFO[ID][f_VEHICLE_BARRIL] > 0)
							{
								foreach(new i : Player)
								{
								    if(PLAYER_TEMP[i][pt_PARTICIPO] == 1 && FABRICAS_INFO[ID][f_FACCION_ID] == PLAYER_INFO[i][pFaccion])
									{
									    PLAYER_TEMP[i][pt_PARTICIPO] = 0;

										new total = 7500 + random(1500);
										DarDinero(i, total);
										SendClientMessage(i,-1, "{f21111}Info:{ffffff} Si ves que desaparecen algunos barriles igual podrás sacarlos, pronto se reparará.");
										SendClientMessageEx(i,-1, "Productos químicos transportados con éxito. Recibes {f21111}$%d {FFFFFF}por haber participado.", total);
									}
								}
								FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
								FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
							}
				        }
						SetVehiclePosEx(GetPlayerVehicleID(playerid), posx, posy, 1035.8162);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), 90.0);

						SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_INTERIOR]);
						SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_VW]);
						return 1;
					}
				}
				else SendClientMessage(playerid,-1,"No puedes entrar con un vehículo que no sea de tu propiedad.");
		    }
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, -1976.1282, 212.3176, 1035.8162))
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && FABRICAS_INFO[ID][f_INTERIOR] == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(playerid) == FABRICAS_INFO[ID][f_VW])
				{
				    if(SAPD(GetPlayerVehicleID(playerid)) && (gettime() > FABRICAS_INFO[ID][f_SOBORNO_TIME]) && PLAYER_INFO[playerid][pDuty] == 1 ||
					GetPlayerVehicleID(playerid) == autos[playerid] || GetPlayerVehicleID(playerid) == autos2[playerid] ||
					GetPlayerVehicleID(playerid) == autos3[playerid] || GetPlayerVehicleID(playerid) == autos4[playerid])
					{
					    new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
						GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
						posx = FABRICAS_INFO[ID][f_POS_GARAJE][0] - (floatsqroot(sizey + sizey + sizey) * floatsin(-FABRICAS_INFO[ID][f_POS_GARAJE][3], degrees));
						posy = FABRICAS_INFO[ID][f_POS_GARAJE][1] - (floatsqroot(sizey + sizey + sizey) * floatcos(-FABRICAS_INFO[ID][f_POS_GARAJE][3], degrees));

						SetVehiclePosEx(GetPlayerVehicleID(playerid), posx, posy, FABRICAS_INFO[ID][f_POS_GARAJE][2]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_POS_GARAJE][3] + 180);

						SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
						SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
						NoTeleportHack(playerid);
						return 1;
					}
					else if(GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][0] || GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][1])
					{
					    if(FABRICAS_INFO[ID][f_VEHICLE_BARRIL] > 0) return SendClientMessage(playerid,-1,"Tienes que {EB0000}descargar los químicos{FFFFFF} para poder salir con la camioneta.");
					    if((FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_VENDER) && FABRICAS_INFO[ID][f_VEHICLE_CAJAS] < 5 && FABRICAS_INFO[ID][f_VEHICLE_CAJAS] > 0) return SendClientMessage(playerid,-1,"La camioneta tiene que estar cargada con {FFFF04}5 cajas {FFFFFF}de {f21111}metanfetamina");

						new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
						GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
						posx = FABRICAS_INFO[ID][f_POS_GARAJE][0] - (floatsqroot(sizey + sizey + sizey) * floatsin(-FABRICAS_INFO[ID][f_POS_GARAJE][3], degrees));
						posy = FABRICAS_INFO[ID][f_POS_GARAJE][1] - (floatsqroot(sizey + sizey + sizey) * floatcos(-FABRICAS_INFO[ID][f_POS_GARAJE][3], degrees));

						SetVehiclePosEx(GetPlayerVehicleID(playerid), posx, posy, FABRICAS_INFO[ID][f_POS_GARAJE][2]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), FABRICAS_INFO[ID][f_POS_GARAJE][3] + 180);

						SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
						SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
						NoTeleportHack(playerid);
						return 1;
					}
				}
			}
		}
		if(PlayerToPoint(10.0, playerid, -88.1874,-1127.1766,1.0847))
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PLAYER_INFO[playerid][CasaID][0] == 59 || PLAYER_INFO[playerid][CasaID][1] == 59 || PLAYER_INFO[playerid][pAdmin] >= 5)
				{
					if(PortonAbiertoCasa == 0)
					{
						PortonAbiertoCasa = 1;
						MoveDynamicObject(controls[10],-84.5720, -1118.8861, 0.2805,2);
					}
					else
					{
						PortonAbiertoCasa = 0;
						MoveDynamicObject(controls[10], -87.67600, -1127.18213, 0.28050,2);
					}
				}
			}
		}
		new patrulla;
		patrulla = GetPlayerVehicleID(playerid);
		if(PlayerToPoint(15.0, playerid, 1545.7398,-1627.7280,15.2062) && PLAYER_INFO[playerid][pDuty] != 0)
		{
			MoveDynamicObject(barrera, 1544.6943359375, -1630.73046875, 13.27956199646+0.0001, 0.00009, 0, 0, 90);
			SetTimer("Cerrar_Barrera", 3000, 0);
		}
		if(PlayerToPoint(15.0, playerid, 1589.0533,-1638.1231,14.1229) && PLAYER_INFO[playerid][pDuty] != 0)
		{
			if(PLAYER_INFO[playerid][pDuty] == 1 || SAPD(patrulla) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(porton,  1589.274658,-1638.286499,10.616429, 2);
				SetTimer("Cerrar_Porton", 5000, 0);
			}
		}
		if(PlayerToPoint(25.0, playerid, -53.7712,2638.0210,63.6400))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(porton1,  -55.8442, 2654.2203, 65.1622, 2);
				SetTimer("Cerrar_porton1", 5000, 0);
			}
		}
		if(PlayerToPoint(25.0, playerid, -393.3073,2707.1475,62.9917))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(porton2,  -384.6855, 2722.0161, 64.2268, 2);
				SetTimer("Cerrar_porton2", 5000, 0);
			}
		}
		if(PlayerToPoint(20.0, playerid, 2420.0261,-2089.0623,13.4366))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(porton3,  2423.8542, -2095.2664, 15.2183, 2);
				SetTimer("Cerrar_porton3", 5000, 0);
			}
		}
		if(PlayerToPoint(15.0, playerid, 294.3390,1412.8501,9.9911) && PLAYER_INFO[playerid][pDuty] != 0)
		{
			if(PLAYER_INFO[playerid][pDuty] == 1 || SAPD(patrulla) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(reja1,  288.9500, 1420.6600, 12.9000, 2);
				MoveDynamicObject(reja2,  288.9500, 1402.3979, 12.9000, 2);
				SetTimer("Cerrar_Rejas1", 3000, 0);
			}
		}
		if(PlayerToPoint(15.0, playerid, 264.4435,1411.4097,10.4904) && PLAYER_INFO[playerid][pDuty] != 0)
		{
			if(PLAYER_INFO[playerid][pDuty] == 1 || SAPD(patrulla) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(reja3,  263.1500, 1420.6600, 13.0500, 2);
				MoveDynamicObject(reja4,  263.1500, 1402.2100, 13.0500, 2);
				SetTimer("Cerrar_Rejas2", 3000, 0);
			}
		}
		if(PlayerToPoint(15.0, playerid, 227.9451,1421.2976,10.5859) && PLAYER_INFO[playerid][pDuty] != 0)
		{
			if(PLAYER_INFO[playerid][pDuty] == 1 || SAPD(patrulla) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				MoveDynamicObject(reja5,  237.3140, 1420.7500, 13.1700, 2);
				MoveDynamicObject(reja6,  218.6780, 1420.7500, 13.1700, 2);
				SetTimer("Cerrar_Rejas3", 3000, 0);
			}
		}
		if(!IsPlayerNPC(playerid))
		{
			for(new c = 0;c<MAX_PROPIEDADES; c++)
			{
				if(PropInfo[c][pEnUso] == 1)
				{
					if(IsPlayerInRangeOfPoint(playerid,4.5,PropInfo[c][pGX],PropInfo[c][pGY],PropInfo[c][pGZ]) && PropInfo[c][pGX] != 0)
					{
						if(PLAYER_INFO[playerid][pID] == PropInfo[c][pIDPropietario])
						{
							if(IsPlayerInAnyVehicle(playerid))
							{
								if(PLAYER_INFO[playerid][pCargos] >= 2)
								{
									foreach(new i : Player)
									{
										if(PLAYER_INFO[i][pFaccion] == 1 && PLAYER_INFO[i][pDuty] == 1 && EstaEnP(playerid,i,15)) return SendClientMessage(playerid,-1,"No puedes entrar si la policía te está siguiendo.");
									}
								}
								new vehicleid = GetPlayerVehicleID(playerid);
								if(autos[playerid] == vehicleid || autos2[playerid] == vehicleid || autos3[playerid] == vehicleid || autos4[playerid] == vehicleid)
								{
									CargarMapeosEx(playerid);
									switch(PropInfo[c][pTipo])
									{
										case 4:
										{
											GuardarPropiedad(c);
											SetVehiclePosEx(vehicleid,1403.4666,594.2648,1001.0300+1);
											SetVehicleZAngle(vehicleid,174.4890);
											LinkVehicleToInterior(vehicleid, 1);
											SetPlayerInterior(playerid, 1);
											NoTeleportHack(playerid);
											SetVehicleInterior(playerid, 1);
											SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 1);
											SetVehiclePassengersVWEx(vehicleid, PropInfo[c][pVW]);
											SetPlayerVirtualWorld(playerid,PropInfo[c][pVW]);
										}
										default:
										{
										    SetPosVeh(vehicleid, -1136.6586,-4247.3647,8075.8682+1, 0.4197, 4, PropInfo[c][pVW]);
											defer entrarGarajeCasa(c,vehicleid);
											NoTeleportHack(playerid);
											GuardarPropiedad(c);
										}
									}
								}
								else SendClientMessage(playerid,-1,"Este vehículo no te pertenece.");
							}
						}
						else SendClientMessage(playerid,-1,"El dueño de la casa puede guardar sus vehículos.");
					}
					//estacionamiento casa
     				if(IsPlayerInRangeOfPoint(playerid,10,-1136.6586,-4247.3647,8075.8682) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW] && GetPlayerInterior(playerid) == 4)
					{
						if(PLAYER_INFO[playerid][pID] == PropInfo[c][pIDPropietario])
						{
							if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
							{
								if(PLAYER_INFO[playerid][pTiempoCarcel] == 0)
								{
									if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
									{
										NoTeleportHack(playerid);
										GuardarPropiedad(c);
										CargarMapeosEx(playerid);
										new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
										GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
										posx = PropInfo[c][pGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-PropInfo[c][pGA], degrees));
										posy = PropInfo[c][pGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-PropInfo[c][pGA], degrees));
										SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,PropInfo[c][pGZ]);
										SetVehicleZAngle(GetPlayerVehicleID(playerid),PropInfo[c][pGA]+180);
										SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
										SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
									}
								}
							}
							else SendClientMessage(playerid,-1,"No puedes sacar vehículos de este garaje.");
						}
					}
					if(IsPlayerInRangeOfPoint(playerid, 3.0,1403.4666,594.2648,1001.0300) && GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
					{
						if(PLAYER_INFO[playerid][pID] == PropInfo[c][pIDPropietario])
						{
							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
							{
								if(PLAYER_INFO[playerid][pTiempoCarcel] == 0)
								{
									CargarMapeosEx(playerid);
									GuardarPropiedad(c);
									NoTeleportHack(playerid);
									new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
									GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
									posx = PropInfo[c][pGX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-PropInfo[c][pGA], degrees));
									posy = PropInfo[c][pGY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-PropInfo[c][pGA], degrees));
									SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,PropInfo[c][pGZ]);
									SetVehicleZAngle(GetPlayerVehicleID(playerid),PropInfo[c][pGA]+180);
									SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
									SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
								}
							}
						}
						else SendClientMessage(playerid,-1,"No puedes sacar vehículos de este garaje.");
					}
				}
			}
		}
		// Estacionamiento
		for(new e = 0; e < MAX_GARAGES; e++)
		{
			if(Estacionamientos[e][eEnUso] > 0)
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0,Estacionamientos[e][SalidX], Estacionamientos[e][SalidY], Estacionamientos[e][SalidZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Estacionamientos[e][eMundoVirtual] && GetPlayerInterior(playerid) == Estacionamientos[e][eInterior])
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							if(GetPlayerVehicleID(playerid) == autos[playerid] || GetPlayerVehicleID(playerid) == autos2[playerid] || GetPlayerVehicleID(playerid) == autos3[playerid] || GetPlayerVehicleID(playerid) == autos4[playerid])
							{
								CargarMapeosEx(playerid);
								new Float:posx, Float:posy, Float:sizex, Float:sizey, Float:sizez;
								GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, sizex, sizey, sizez);
								posx = Estacionamientos[e][PosX] - (floatsqroot(sizey + sizey + sizey) * floatsin(-Estacionamientos[e][PosA]+180, degrees));
								posy = Estacionamientos[e][PosY] - (floatsqroot(sizey + sizey + sizey) * floatcos(-Estacionamientos[e][PosA]+180, degrees));
								SetVehiclePosEx(GetPlayerVehicleID(playerid),posx,posy,Estacionamientos[e][PosZ]);
								SetVehicleZAngle(GetPlayerVehicleID(playerid),Estacionamientos[e][PosA]);
								SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
								SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
								if(GetPlayerVehicleID(playerid) == autos[playerid]) PLAYER_INFO[playerid][vEstacionado1] = 0;
								if(GetPlayerVehicleID(playerid) == autos2[playerid]) PLAYER_INFO[playerid][vEstacionado2] = 0;
								if(GetPlayerVehicleID(playerid) == autos3[playerid]) PLAYER_INFO[playerid][vEstacionado3] = 0;
								if(GetPlayerVehicleID(playerid) == autos4[playerid]) PLAYER_INFO[playerid][vEstacionado4] = 0;
							}
							else return SendClientMessage(playerid,-1,"No puedes salir con un vehículo que no te pertenece.");
						}
					}
				}
				if(IsPlayerInRangeOfPoint(playerid,5.0,Estacionamientos[e][PosX], Estacionamientos[e][PosY], Estacionamientos[e][PosZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == 0)
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 609 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 456) return SendClientMessage(playerid,-1,"Este vehículo no puede entrar.");
							CargarMapeosEx(playerid);
							if(Estacionamientos[e][SalidX] == 1707.62) SetPosVeh(GetPlayerVehicleID(playerid), 1700.6200,-1877.1000,-49.3597,90.0000, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
							if(Estacionamientos[e][SalidX] == 2058.54) SetPosVeh(GetPlayerVehicleID(playerid), 2058.3923,2429.0286,10.5962,180.0001, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
							if(Estacionamientos[e][SalidX] == -1283.28) SetPosVeh(GetPlayerVehicleID(playerid), -1276.2654,461.1677,7.1351,268.8531, Estacionamientos[e][eInterior], Estacionamientos[e][eMundoVirtual]);
							SendClientMessage(playerid, -1, "Ingresaste a un {FFFF04}estacionamiento{FFFFFF}, el costo por día es de {f21111}$150");
							SendClientMessage(playerid, -1, "Por favor, usa {FFFF04}/estacionar{FFFFFF} para dejar tu vehículo guardado en este estacionamiento.");
							SendClientMessage(playerid, -1, "Al guardarlo te aseguras de que nadie pueda sacarlo del estacionamiento.");
							QuitarDinero(playerid,150);
							if(GetPlayerVehicleID(playerid) == autos[playerid]) PLAYER_INFO[playerid][vEstacionado1] = Estacionamientos[e][eID];
							else if(GetPlayerVehicleID(playerid) == autos2[playerid]) PLAYER_INFO[playerid][vEstacionado2] = Estacionamientos[e][eID];
							else if(GetPlayerVehicleID(playerid) == autos3[playerid]) PLAYER_INFO[playerid][vEstacionado3] = Estacionamientos[e][eID];
							else if(GetPlayerVehicleID(playerid) == autos4[playerid]) PLAYER_INFO[playerid][vEstacionado4] = Estacionamientos[e][eID];
							else {
								foreach(new i : Player) {
									if(autos[i] == GetPlayerVehicleID(playerid)) PLAYER_INFO[i][vEstacionado1] = Estacionamientos[e][eID];
									if(autos2[i] == GetPlayerVehicleID(playerid)) PLAYER_INFO[i][vEstacionado2] = Estacionamientos[e][eID];
									if(autos3[i] == GetPlayerVehicleID(playerid)) PLAYER_INFO[i][vEstacionado3] = Estacionamientos[e][eID];
									if(autos4[i] == GetPlayerVehicleID(playerid)) PLAYER_INFO[i][vEstacionado4] = Estacionamientos[e][eID];
								}
							}
						}
					}
				}
			}
		}
	}
 	if(newkeys & KEY_YES)
	{
	    for(new ID = 1; ID < MAX_FABRICAS; ID++)
	    {
	        if(!FABRICAS_INFO[ID][f_VALID]) continue;
	        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
	        if(FABRICAS_INFO[ID][f_INTERIOR] == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(playerid) == FABRICAS_INFO[ID][f_VW])
	        {
	            if(IsPlayerInRangeOfPoint(playerid, 1.5, -2019.9447,243.5474,1035.8162))
				{
				    if(GetPlayerWeapon(playerid) == 0) return 1;
					if(GetPlayerWeapon(playerid) != 32 && GetPlayerWeapon(playerid) != 26 && GetPlayerWeapon(playerid) != 34 && GetPlayerWeapon(playerid) != 28) return SendClientMessage(playerid,-1,"No se permite guardar este tipo de arma.");
					else if(GetPlayerWeapon(playerid) == 34 && FABRICAS_INFO[ID][f_SNIPER] > 9) return SendClientMessage(playerid,-1,"El estante se encuentra lleno.");
					else if(GetPlayerWeapon(playerid) == 26 && FABRICAS_INFO[ID][f_RECORTADA] > 9) return SendClientMessage(playerid,-1,"El estante no puede contener más de este tipo de arma.");
					else if(GetPlayerWeapon(playerid) == 28 && FABRICAS_INFO[ID][f_UZI] > 9) return SendClientMessage(playerid,-1,"El estante no puede contener más de este tipo de arma.");
					else if(GetPlayerWeapon(playerid) == 32 && FABRICAS_INFO[ID][f_TEC9] > 9) return SendClientMessage(playerid,-1,"El estante se encuentra lleno.");

					switch(GetPlayerWeapon(playerid))
					{
						case 26:
						{
						    FABRICAS_INFO[ID][f_RECORTADA] ++;
							CargarRecortadasFabrica(ID);

						}
						case 28:
						{
							FABRICAS_INFO[ID][f_UZI] ++;
							CargarUziFabrica(ID);
						}
						case 32:
						{
							FABRICAS_INFO[ID][f_TEC9] ++;
							CargarTec9Fabrica(ID);
						}
						case 34:
						{
							FABRICAS_INFO[ID][f_SNIPER] ++;
							CargarSniperFabrica(ID);
						}
					}
					ActualizarLabelsFabrica(ID);
					QuitarArma(playerid, GetPlayerWeapon(playerid));
					SendClientMessage(playerid,-1,"{f21111}Guardaste un arma{FFFFFF} en el depósito de la fábrica.");
					return 1;
				}
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, -1992.2786, 194.1294, 1035.4269))
				{
				    if(FABRICAS_INFO[ID][f_TANQUE][0] == 0 && FABRICAS_INFO[ID][f_TANQUE][1] == 0 && FABRICAS_INFO[ID][f_TANQUE][2] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
	                else if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] >= 100) return SendClientMessage(playerid,-1,"Para encender el horno primero necesitas retirar el cristal.");

					if(FABRICAS_INFO[ID][f_CESTADO][0] == 0)
					{
						FABRICAS_INFO[ID][f_CESTADO][0] = 1;
						AccionesRol(playerid, "encendió una cocina de metanfetamina.");
					}
				    else if(FABRICAS_INFO[ID][f_CESTADO][0] == 1)
					{
					    FABRICAS_INFO[ID][f_CESTADO][0] = 0;
						AccionesRol(playerid, "apagó una cocina de metanfetamina.");
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
					ActualizarLabelsFabrica(ID);
				    return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1995.6786, 194.1294, 1035.4269))
				{
				    if(FABRICAS_INFO[ID][f_TANQUE][3] == 0 && FABRICAS_INFO[ID][f_TANQUE][4] == 0 && FABRICAS_INFO[ID][f_TANQUE][5] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
				    else if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] >= 100) return SendClientMessage(playerid,-1,"Para encender el horno primero necesitas retirar el cristal.");

				    if(FABRICAS_INFO[ID][f_CESTADO][1] == 0)
					{
						FABRICAS_INFO[ID][f_CESTADO][1] = 1;
						AccionesRol(playerid, "encendió una cocina de metanfetamina.");
					}
				    else if(FABRICAS_INFO[ID][f_CESTADO][1] == 1)
					{
					    FABRICAS_INFO[ID][f_CESTADO][1] = 0;
						AccionesRol(playerid, "apagó una cocina de metanfetamina.");
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
					ActualizarLabelsFabrica(ID);
				    return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 2.0, -1999.1986, 194.1294, 1035.4269))
				{
				    if(FABRICAS_INFO[ID][f_TANQUE][6] == 0 && FABRICAS_INFO[ID][f_TANQUE][7] == 0 && FABRICAS_INFO[ID][f_TANQUE][8] == 0) return SendClientMessage(playerid,-1,"No hay químicos en los tanques para procesar.");
	                else if(FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] >= 100) return SendClientMessage(playerid,-1,"Para encender el horno primero necesitas retirar el cristal.");

					if(FABRICAS_INFO[ID][f_CESTADO][2] == 0)
					{
						FABRICAS_INFO[ID][f_CESTADO][2] = 1;
						AccionesRol(playerid, "encendió una cocina de metanfetamina.");
					}
				    else if(FABRICAS_INFO[ID][f_CESTADO][2] == 1)
					{
					    FABRICAS_INFO[ID][f_CESTADO][2] = 0;
						AccionesRol(playerid, "apagó una cocina de metanfetamina.");
					}
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
					ActualizarLabelsFabrica(ID);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid,0.6,-2022.8929, 253.0043, 1036.1030))
				{
			    	if(PLAYER_INFO[playerid][pRango] == 8)
				    {
        				if(FABRICAS_INFO[ID][f_PUERTA_ESTADO] == 0)
				    	{
				    	   	FABRICAS_INFO[ID][f_PUERTA_ESTADO] = 1;
				    	   	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
		                   	MoveDynamicObject(FABRICAS_INFO[ID][f_PUERTA],-2022.93274, 255.60370, 1036.06921, 0.8);
				    	}
				    	else
				    	{
				    	   	FABRICAS_INFO[ID][f_PUERTA_ESTADO] = 0;
				    	   	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
				           	MoveDynamicObject(FABRICAS_INFO[ID][f_PUERTA],-2022.93274, 254.14169, 1036.06921, 0.7);
				    	}
				    }
				}
				if(IsPlayerInRangeOfPoint(playerid,1.8, -2025.2623,253.8624,1035.8389))
			    {
					switch(PLAYER_TEMP[playerid][pt_LLEVA_DINERO])
					{
						case 0:
						{
							if(PLAYER_TEMP[playerid][pt_TIEMPO_BOLSO] > gettime()) return 1;
							if(FABRICAS_INFO[ID][f_PUERTA_ESTADO] == 0) return 1;
							if(FABRICAS_INFO[ID][f_DINERO] < 1000000) return SendClientMessage(playerid,-1,"No hay suficiente dinero para sacar.");

							RemovePlayerAttachedObject(playerid, 7);
							SetPlayerAttachedObject(playerid, 7, 1550, 1, 0.116999, -0.283999, -0.046999, -178.400024, 81.999984, -5.399999, 1.000000, 1.000000, 1.000000);

							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
							AccionesRol(playerid,"agarró un bolso con dinero.");

							QuitarDineroFabrica(ID, 1000000);

							PLAYER_TEMP[playerid][pt_TIEMPO_BOLSO] = gettime() + 3;
							PLAYER_TEMP[playerid][pt_LLEVA_DINERO] = 1;
							return 1;
						}
						case 1:
						{
							if(PLAYER_TEMP[playerid][pt_TIEMPO_BOLSO] > gettime()) return 1;
							if(FABRICAS_INFO[ID][f_PUERTA_ESTADO] == 0) return 1;

                            RemovePlayerAttachedObject(playerid, 7);
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
							AccionesRol(playerid,"dejó un bolso de dinero en el suelo.");

							DarDineroFabrica(ID, 1000000);
							PLAYER_TEMP[playerid][pt_TIEMPO_BOLSO] = gettime() + 3;
							PLAYER_TEMP[playerid][pt_LLEVA_DINERO] = 0;
							return 1;
						}
					}
				}
				if(IsPlayerInRangeOfPoint(playerid,50.0,-1998.4272,210.5190,1035.8162))
				{
					for(new i = 0; i < sizeof Tanque_Pos_Fabrica; i++)
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 2.5, Tanque_Pos_Fabrica[i][0], Tanque_Pos_Fabrica[i][1], Tanque_Pos_Fabrica[i][2] -0.5))
				        {
				            if(PLAYER_TEMP[playerid][pt_TIENE_BARRIL] == 1)
						    {
						        if(FABRICAS_INFO[ID][f_TANQUE][i] > 90) return SendClientMessage(playerid,-1,"Este {3399FF}tanque{FFFFFF} está {FF0000}muy lleno{FFFFFF}, no puede ser cargado.");
						        FABRICAS_INFO[ID][f_TANQUE][i] += 10;

						        RemovePlayerAttachedObject(playerid, 7);
								SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                                ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
								AccionesRol(playerid,"cargó químicos en uno de los tanques de almacenaje.");
	                            PLAYER_TEMP[playerid][pt_TIENE_BARRIL] = 0;
	                            ActualizarLabelsFabrica(ID);
	                            return 1;
						    }
				        }
					}
					new Float:a1x,Float:a1y,Float:a1z;
					GetVehiclePos(FABRICAS_INFO[ID][f_VEHICLES][0], a1x, a1y, a1z);
					if(IsPlayerInRangeOfPoint(playerid, 3.5, a1x, a1y, a1z))
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_BARRIL] == 0 && FABRICAS_INFO[ID][f_VEHICLE_BARRIL] > 0)
					    {
					        if(IsPlayerInAnyVehicle(playerid)) return 1;

					        FABRICAS_INFO[ID][f_VEHICLE_BARRIL] --;
					        VEHICLE_OBJECTS[ FABRICAS_INFO[ID][f_VEHICLES][0]][FABRICAS_INFO[ID][f_VEHICLE_BARRIL]][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(FABRICAS_INFO[ID][f_VEHICLES][0], FABRICAS_INFO[ID][f_VEHICLE_BARRIL]);

					        PLAYER_TEMP[playerid][pt_TIENE_BARRIL] = 1;

					        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid, 7, 3632, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
							AccionesRol(playerid, "sacó un tanque de químicos de la camioneta.");
							SendClientMessage(playerid,-1,"Lleva el {f21111}tanque de químicos{FFFFFF} al contenedor que más lo necesite.");
							return 1;
					    }
				    }
		        }
			}
    		if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			{
				if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_QUIMICOS)
				{
				    for(new i = 0; i < sizeof Pos_Recoger_Barril_Fab; i++)
					{
					    if(IsPlayerInRangeOfPoint(playerid, 3.0, Pos_Recoger_Barril_Fab[i][0], Pos_Recoger_Barril_Fab[i][1], Pos_Recoger_Barril_Fab[i][2]))
        				{
							if(i == FABRICAS_INFO[ID][f_ID])
	      					{
							    if(FABRICAS_INFO[ID][f_ALMACE_BARRIL] >= 5) return  SendClientMessage(playerid,-1,"No hay suficiente espacio en la camioneta para poder guardar.");
							    if(FABRICAS_INFO[ID][f_VEHICLE_BARRIL] >= 5) return  SendClientMessage(playerid,-1,"No hay suficiente espacio en la camioneta para poder guardar.");
							    if(PLAYER_TEMP[playerid][pt_TIENE_BARRIL] == 1) return SendClientMessage(playerid,-1,"Descarga el barril que llevas en las manos para poder agarrar otro.");

	                            FABRICAS_INFO[ID][f_ALMACE_BARRIL] ++;
							    PLAYER_TEMP[playerid][pt_TIENE_BARRIL] = 1;
								PLAYER_TEMP[playerid][pt_PARTICIPO] = 1;

								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
								AccionesRol(playerid,"retiró un tanque de químicos.");
								SendClientMessage(playerid,-1,"Pulsa {FFFF04}'Y'{FFFFFF} para dejar el tanque sobre el vehículo de la fábrica");
	                            ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
								RemovePlayerAttachedObject(playerid, 7);
								SetPlayerAttachedObject(playerid, 7, 3632, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
								return 1;
							}
						}
					}
				    new Float:a1x,Float:a1y,Float:a1z;
					GetVehiclePos(FABRICAS_INFO[ID][f_VEHICLES][0], a1x, a1y, a1z);
					if(IsPlayerInRangeOfPoint(playerid, 3.5, a1x, a1y, a1z))
					{
					    if(IsPlayerInAnyVehicle(playerid)) return 1;
					    if(PLAYER_TEMP[playerid][pt_TIENE_BARRIL] == 1)
					    {
					        if(FABRICAS_INFO[ID][f_VEHICLE_CAJAS] > 0) return SendClientMessage(playerid,-1,"Tienes que {EB0000}descargar las cajas{FFFFFF} para poder guardar químicos.");
					        if(FABRICAS_INFO[ID][f_VEHICLE_BARRIL] < 5)
					        {
						        PLAYER_TEMP[playerid][pt_TIENE_BARRIL] = 0;
						        
						        VEHICLE_OBJECTS[ FABRICAS_INFO[ID][f_VEHICLES][0]][FABRICAS_INFO[ID][f_VEHICLE_BARRIL]][vobject_ATTACHED] = true;
								UpdateVehicleAttachedObject(FABRICAS_INFO[ID][f_VEHICLES][0], FABRICAS_INFO[ID][f_VEHICLE_BARRIL]);

								FABRICAS_INFO[ID][f_VEHICLE_BARRIL] ++;
	                            AccionesRol(playerid,"dejó un tanque de químicos en la camioneta.");
						        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
								RemovePlayerAttachedObject(playerid, 7);
						        return 1;
					        }
					    }
					}
				}
			}
	    }
	    if(PlayerToPoint(5.0, playerid, 830.1780,-2962.6921,11.9932))
		{
			MoveDynamicObject(controls[8], 833.4200, -2963.8000, 11.7460+SPEED_CONTROLS, SPEED_CONTROLS, 0.0000, -10.0000, 0.0000);
			SetTimer("CerrarIsla1", 3000, 0);
			return 1;
		}
		if (PlayerToPoint(5.0, playerid, 836.8367,-2955.8198,12.2332))
		{
			MoveDynamicObject(controls[9], 833.4100, -2954.5200, 12.1000+SPEED_CONTROLS, SPEED_CONTROLS, 0.0000, 10.0000, 0.0000);
			SetTimer("CerrarIsla2", 3000, 0);
			return 1;
		}
	    if(EnAscensor(playerid))
		{
			new stringas1[24],stringas2[24],stringas3[24],stringas4[24],stringas5[24],stringas6[24],stringas7[24],stringas8[24],stringas9[24],stringas10[24];
			switch(Piso[playerid])
			{
				case 1: stringas1 = "{FFFFFF}"; case 2: stringas2 = "{FFFFFF}";
				case 3: stringas3 = "{FFFFFF}"; case 4: stringas4 = "{FFFFFF}";
				case 5: stringas5 = "{FFFFFF}"; case 6: stringas6 = "{FFFFFF}";
				case 7: stringas7 = "{FFFFFF}"; case 8: stringas8 = "{FFFFFF}";
				case 9: stringas9 = "{FFFFFF}"; case 10: stringas10 = "{FFFFFF}";
			}
			new string[256];
			format(string,sizeof(string),"{8baab7}%sPiso 1\n{8baab7}%sPiso 2\n{8baab7}%sPiso 3\n{8baab7}%sPiso 4\n{8baab7}%sPiso 5\n{8baab7}%sPiso 6\n{8baab7}%sPiso 7\n{8baab7}%sPiso 8\n{8baab7}%sPiso 9\n{8baab7}%sPiso 10",stringas1,stringas2,stringas3,stringas4,stringas5,stringas6,stringas7,stringas8,stringas9,stringas10);
			ShowPlayerDialog(playerid, DASCENSOR, DIALOG_STYLE_LIST, "Ascensor", string, "Aceptar" , "Cancelar");
			Piso[playerid] = 0;
		}
		for(new c = 0; c <MAX_PROPIEDADES; c++)
		{
   			if(IsPlayerInRangeOfPoint(playerid,1.5,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]))
   			{
   		    	if(PropInfo[c][pEnVenta] == 1)
    		    {
   	 		        if(PropInfo[c][pEnVentaPor] == 0 && PropInfo[c][pPrecio] > PLAYER_INFO[playerid][pDinero]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar esta propiedad.");
     			    else if(PropInfo[c][pEnVentaPor] == 1 && PropInfo[c][pPrecio] > PLAYER_INFO[playerid][Moneda]) return SendClientMessage(playerid,-1,"No tienes suficientes RZ para comprar esta propiedad.");
					if(PLAYER_INFO[playerid][pNivel] < PropInfo[c][pNivel]) return SendClientMessage(playerid,-1,"No tienes el nivel necesario para comprar esta propiedad.");
                    switch(PLAYER_INFO[playerid][pVIP])
					{

    					case 2: if(ObtenerCasas(playerid) > 1) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 2 propiedades con tu membresia VIP actual.");
						case 3: if(ObtenerCasas(playerid) > 2) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 3 propiedades con tu membresia VIP actual.");
						default: if(ObtenerCasas(playerid) > 0) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 1 propiedad.");
					}

					new hslot = SlotPropiedad(playerid),query[260];
					if(hslot != -1)
					{
						PLAYER_INFO[playerid][CasaID][hslot] = PropInfo[c][pID];
						mysql_format(handle_db, query, sizeof(query),"UPDATE `usuarios` SET `CasaID%d`='%d' WHERE `ID`='%d'",hslot+1,PropInfo[c][pID],PLAYER_INFO[playerid][pID]);
						mysql_tquery(handle_db, query);
						switch(PropInfo[c][pEnVentaPor])
						{
						    case 0: QuitarDinero(playerid,PropInfo[c][pPrecio]);
						    case 1: PLAYER_INFO[playerid][Moneda] -= PropInfo[c][pPrecio];
						}
						PropInfo[c][pEnVenta] = 0;
						PropInfo[c][pEnUso] = 1;
						format(PropInfo[c][pPropietario],40,"%s",NombreJugador(playerid));
						CargarPropiedad(c);
						mysql_format(handle_db, query, sizeof(query),"UPDATE `propiedades` SET `EnVenta`='0', `Propietario`='%s',`IDPropietario`='%d' WHERE `ID`='%d'", PropInfo[c][pPropietario], PLAYER_INFO[playerid][pID], PropInfo[c][pID]);
						mysql_tquery(handle_db, query);
						SendClientMessage(playerid,-1,"{f21111}Acabas de comprar la propiedad.");
						PropInfo[c][pIDPropietario] = PLAYER_INFO[playerid][pID];
					}
				}
     	    }
   		}
		if(IsPlayerInRangeOfPoint(playerid, 3.6,1219.3627,-7.0459,1001.3281) && Bailarina1 == 0) darAfinidad(playerid,1);
		if(IsPlayerInRangeOfPoint(playerid, 2.5,1214.0870,-4.2850,1001.3281) && Bailarina2 == 0) darAfinidad(playerid,2);
		if(IsPlayerInRangeOfPoint(playerid, 2.0,1202.8500,9.1434,1000.9219) && Bailarina3 == 0) darAfinidad(playerid,3);
		if(IsPlayerInRangeOfPoint(playerid, 2.5,1220.9673,8.2033,1001.3356) && Bailarina4 == 0) darAfinidad(playerid,4);
		if(IsPlayerInRangeOfPoint(playerid, 2.5,1208.4001,-6.2825,1001.3281) && Bailarina5 == 0) darAfinidad(playerid,5);
		if(IsPlayerInRangeOfPoint(playerid, 2.5,1202.9122,-8.3771,1002.0255) && Bailarina6 == 0) darAfinidad(playerid,6);

	    if(TienePorro[playerid] > 0)
		{
			if(PLAYER_TIMES[playerid][TiempoFumarPorro] - gettime() <= 0)
			{
				if(GetPlayerAnimationIndex(playerid) != 1189) return SendClientMessage(playerid,-1,"No puedes hacer eso en movimiento.");
				PLAYER_TIMES[playerid][TiempoFumarPorro] = gettime() + 8;
				
				if(PLAYER_INFO[playerid][j_ARMOUR] >= 100 && PLAYER_INFO[playerid][j_HEALTH] >= 100)
				{
					SetPlayerHealthEx(playerid, 100);
					SetPlayerArmourEx(playerid, 100);
				}
				else if(PLAYER_INFO[playerid][j_HEALTH] >= 100)
				{
					SetPlayerHealthEx(playerid, 100);
					GivePlayerArmour(playerid, 5.0);
				}
				else GivePlayerHealth(playerid, 5.0);
				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "GANGS", "SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 0);
				}
				TienePorro[playerid] --;
				if(TienePorro[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(TieneSprunk[playerid] > 0)
		{

			if(PLAYER_TIMES[playerid][TiempoBebida] - gettime() <= 0)
			{

				TieneSprunk[playerid] --;
				PLAYER_TIMES[playerid][TiempoBebida] = gettime() + 3;
				if(PLAYER_INFO[playerid][pSed] <= 5) PLAYER_INFO[playerid][pSed] = 0;
				else PLAYER_INFO[playerid][pSed] -= 5;

				BarraSed(playerid);
				BarraHambre(playerid);
				
				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneSprunk[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(TieneAquariu[playerid] > 0)
		{

			if(PLAYER_TIMES[playerid][TiempoBebida] - gettime() <= 0)
			{

				TieneAquariu[playerid] --;
				PLAYER_TIMES[playerid][TiempoBebida] = gettime() + 3;
				if(PLAYER_INFO[playerid][pSed] <= 10) PLAYER_INFO[playerid][pSed] = 0;
				else PLAYER_INFO[playerid][pSed] -= 10;
				
				BarraSed(playerid);
				BarraHambre(playerid);

				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneAquariu[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(TienePizza[playerid] > 0)
		{

			if(PLAYER_TIMES[playerid][TiempoBebida] - gettime() <= 0)
			{

				TienePizza[playerid] --;
				PLAYER_TIMES[playerid][TiempoBebida] = gettime() + 3;
				if(PLAYER_INFO[playerid][pHambre] <= 7) PLAYER_INFO[playerid][pHambre] = 0;
				else PLAYER_INFO[playerid][pHambre] -= 7;
				BarraSed(playerid);
				BarraHambre(playerid);

				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, false, false, false, 0, false);
				if(TienePizza[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(TieneCerveza[playerid] > 0)
		{

			if(PLAYER_TIMES[playerid][TiempoBebida] - gettime() <= 0)
			{

				TieneCerveza[playerid] --;
				new borrachera = GetPlayerDrunkLevel(playerid);
				SetPlayerDrunkLevel(playerid, borrachera + 5000);
				PLAYER_TIMES[playerid][TiempoBebida] = gettime() + 3;
				if(GetPlayerDrunkLevel(playerid) > 15000) return Borracho(playerid);
				if(PLAYER_INFO[playerid][pSed] <= 5) PLAYER_INFO[playerid][pSed] = 0;
				else PLAYER_INFO[playerid][pSed] -= 5;
			
				BarraSed(playerid);
				BarraHambre(playerid);

				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneCerveza[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(TieneVino[playerid] > 0)
		{

			if(PLAYER_TIMES[playerid][TiempoBebida] - gettime() <= 0)
			{

				TieneVino[playerid] --;
				new borrachera = GetPlayerDrunkLevel(playerid);
				SetPlayerDrunkLevel(playerid, borrachera + 2000);
				if(GetPlayerDrunkLevel(playerid) > 15000) return Borracho(playerid);
				PLAYER_TIMES[playerid][TiempoBebida] = gettime() + 3;
				if(PLAYER_INFO[playerid][pSed] <= 4) PLAYER_INFO[playerid][pSed] = 0;
				else PLAYER_INFO[playerid][pSed] -= 4;

				BarraSed(playerid);
				BarraHambre(playerid);

				if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, false);
				if(TieneVino[playerid] == 0) SetTimerEx("RemovePlayerAttachedItem",segundos(3),false,"dd",playerid,7);
			}
		}
		if(Alquilado == true && PermisoSalon[playerid] == true || strcmp(PLAYER_INFO[playerid][Nickname],Alquilador,true) == 0 || Alquilado == false)
		{
			if(IsPlayerInRangeOfPoint(playerid,1,-1257.0300, 2096.7400, 1246.8900))
			{
				if(PuertaAbierta[0] == 0)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[0],-1258.2170, 2096.6799, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
					PuertaAbierta[0] = 1;
				}
				else if(PuertaAbierta[0] == 1)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[0],-1256.8500, 2096.6799, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
					PuertaAbierta[0] = 0;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,1,-1244.8000, 2116.8301, 1246.8300))
			{
				if(PuertaAbierta[1] == 0)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[1],-1244.6700, 2117.0041, 1245.5200,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[1] = 1;
				}
				else if(PuertaAbierta[1] == 1)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[1],-1244.6700, 2115.6001, 1245.5200,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[1] = 0;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,1, -1244.7800, 2084.8201, 1246.8900))
			{
				if(PuertaAbierta[2] == 0)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[2],-1244.7400, 2083.5960, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[2] = 1;
				}
				else if(PuertaAbierta[2] == 1)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[2],-1244.7400, 2085.0000, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[2] = 0;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,1, -1242.7600, 2087.8401, 1246.8300))
			{
				if(PuertaAbierta[3] == 0)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[3],-1245.3040, 2087.7700, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
					PuertaAbierta[3] = 1;
				}
				else if(PuertaAbierta[3] == 1)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[3],-1244.4800, 2087.7700, 1245.5300,2.5,0.0000, 0.0000, 0.0000);
					PuertaAbierta[3] = 0;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,1, -1232.6200, 2027.6801, 1246.8900))
			{
				if(PuertaAbierta[4] == 0)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[4],-1232.5699, 2026.5060, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[4] = 1;
				}
				else if(PuertaAbierta[4] == 1)
				{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveObject(Puerta[4],-1232.5699, 2027.9100, 1245.5300,2.5,0.0000, 0.0000, 90.0000);
					PuertaAbierta[4] = 0;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid,0.5,1459.7444,-1781.2385,1815.9910))
		{
			if(autos[playerid] > 0 || autos2[playerid] > 0 || autos3[playerid] > 0 || autos4[playerid] > 0) return ShowPlayerDialog(playerid,SERVICIOGRUA1 , DIALOG_STYLE_MSGBOX, "Informacion sobre el servicio de grua", "El Servicio de grua sirve para recuperar el vehiculo, en caso de que haya\nquedado en un lugar inaccesible quieres utilizar el servicio?", "Aceptar","Cancelar");
			else return SendClientMessage(playerid,-1,"No tienes ningun vehiculo para usar el servicio grua.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.5,1459.7446,-1777.6266,1815.9910))
		{
			if(autos[playerid] > 0 || autos2[playerid] > 0 || autos3[playerid] > 0 || autos4[playerid] > 0) return ShowPlayerDialog(playerid, VENDERAUTO, DIALOG_STYLE_MSGBOX, "Informacion sobre la venta de vehiculos","Te vamos a pagar la mitad de la cantidad del precio de venta actual del vehiculo, quieres continuar?","Aceptar","Cancelar");
			else return SendClientMessage(playerid,-1,"No tienes ningun vehiculo para vender.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,0.5,1459.7449,-1774.0337,1815.9910))
		{
			for(new n = 0; n < MAX_PCASAS; n++)
			{
				if(PLAYER_INFO[playerid][CasaID][n] > 0)
				{
							ShowPlayerDialog(playerid, VENDERCASA, DIALOG_STYLE_MSGBOX,"Advertencia","Por vender tu propiedad en este lugar se te pagara la mitad de su precio original, ¿Quieres continuar?","Aceptar","Cancelar");
							break;
				}
			}
		}
		if(EnBotiquin(playerid)) MostrarBotiquin(playerid);
		if(EnCajero(playerid))
		{
			ShowPlayerDialog(playerid, BANCO, DIALOG_STYLE_LIST, "{FFFFFF}Selecciona la operación que desees realizar", "Retirar\nDepositar\nConsultar saldo \nTransferir dinero", "Seleccionar", "Cancelar");
		}
		if(EnVerMapa(playerid))
		{
			ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "Puntos de interés", "Tiendas de ropa\nLugares de trabajos\nConcesionarios", "Siguiente", "Cancelar");
		}
		MostrarHeladera(playerid);
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
		{
			MostrarEstanteria(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -23.2806,-55.6424,1003.5469) || IsPlayerInRangeOfPoint(playerid, 1.5, -30.5101,-28.9864,1003.5573) || IsPlayerInRangeOfPoint(playerid, 7.0, -28.0060,-89.9514,1003.5469))  // 24/7
		{
			if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
			{
				new str[344+1];
				format(str, sizeof(str), "%sTeléfono móvil ($1500)\nGuía telefónica ($35)\nRadio comunicador ($2000)\nGPS ($1500)\nBebida par", str);
				format(str, sizeof(str), "%sa guardar en heladera: Cerveza x6 unidades ($470)\nBebida para guardar en heladera: Vino x6 unidades ($590)\nBebida para guardar en heladera: Sprunk x4 unidades ($200)\nBebida: Sprunk ($65)", str);
				ShowPlayerDialog(playerid, PRODUCTOS, DIALOG_STYLE_LIST, "{FFFF04}Productos y servicios (24/7).", str, "Comprar", "Salir");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -784.2098,500.1945,1371.7422)) // Restaurante
		{
			if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
			{
				new cervezas[30],vino[30],sprunk[30],aquarius[30];
				for(new p; p < MAX_PROPIEDADES; p++)
				{
					if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
					{
						switch(PropInfo[p][pCerveza])
						{
							case 0: format(cervezas,sizeof(vino),"{EB0000}Cerveza");
							default: format(cervezas,sizeof(vino),"{FFFFFF}Cerveza");
						}
						switch(PropInfo[p][pVino])
						{
							case 0: format(vino,sizeof(vino),"{EB0000}Vino");
							default: format(vino,sizeof(vino),"{FFFFFF}Vino");
						}
						switch( PropInfo[p][pSprunk])
						{
							case 0: format(sprunk,sizeof(sprunk),"{EB0000}Vaso de sprunk");
							default: format(sprunk,sizeof(sprunk),"{FFFFFF}Vaso de sprunk");
						}
						switch( PropInfo[p][pAquarius])
						{
							case 0: format(aquarius,sizeof(aquarius),"{EB0000}Aquarius");
							default: format(aquarius,sizeof(aquarius),"{FFFFFF}Aquarius");
						}
					}
				}
				new string[256];
				format(string,sizeof(string),"Producto\tPrecio\n%s\t{f21111}$80{FFFFFF}\n%s\t{f21111}$100\n%s\t{f21111}$60{FFFFFF}\n%s\t{f21111}$160{FFFFFF}",cervezas,vino,sprunk,aquarius);
				ShowPlayerDialog(playerid, PRODUCTOS2, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos",string,"Comprar", "Salir");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 373.7276,-118.8039,1001.4922)) // Pizzeria
		{
			if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos","Producto\tPrecio\nPorción de pizza\t{f21111}$40{FFFFFF}\nPizza completa {232621}- (Para llevar)\t{f21111}$300{FFFFFF}\nSprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1214.8492,-13.3533,1000.9219) || IsPlayerInRangeOfPoint(playerid, 2.0, 969.3793,-44.8069,1001.1172) ||IsPlayerInRangeOfPoint(playerid, 2.0, 214.9070,-13.3532,1000.9219) ||IsPlayerInRangeOfPoint(playerid, 2.0, -1262.6428,2119.9490,1246.5457) || IsPlayerInRangeOfPoint(playerid, 2.0, -1396.3044,-320.4939,1052.0834) || IsPlayerInRangeOfPoint(playerid, 2.0, 499.9690,-20.6826,1000.6797)) // Salón de eventos
		{
			if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_SALON, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos","Producto\tPrecio\nVino\t{f21111}$110{FFFFFF}\nCerveza\t{f21111}$80{FFFFFF}\nVaso de sprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
			}
		}
	    DarTrabajo(playerid);
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1208.4387,-1548.1759,13.6074)) ShowModelSelectionMenu(playerid, Prendas, "Catalogo de prendas");
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1214.6182,-1547.5465,13.5664)) ShowPlayerDialog(playerid, DIALOG_ROPA, DIALOG_STYLE_LIST, "Catalogo de ropa", "Ropa Hombre\t$1.500\nRopa Mujer\t$1.500","Aceptar", "Cancelar");
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1218.4177,-1549.3975,13.5664)) callcmd::tienda(playerid);
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2224.5872,-1742.6190,13.5624)) callcmd::comprarchal(playerid);
	    if(IsPlayerInRangeOfPoint(playerid, 3.0,1322.7557,11678.7080,294.1751)) callcmd::mercadonegro(playerid);
	    //
        if(IsPlayerInRangeOfPoint(playerid, 3.0, -23.2806,-55.6424,1003.5469) || IsPlayerInRangeOfPoint(playerid, 1.5, -30.5101,-28.9864,1003.5573) || IsPlayerInRangeOfPoint(playerid, 1.5, -28.0060,-89.9514,1003.5469))  // 24/7
		{
		    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
	    	{
				new str[344+1];
				format(str, sizeof(str), "%sTeléfono móvil ($1500)\nGuía telefónica ($35)\nRadio comunicador ($2000)\nGPS ($1500)\nBebida par", str);
				format(str, sizeof(str), "%sa guardar en heladera: Cerveza x6 unidades ($470)\nBebida para guardar en heladera: Vino x6 unidades ($590)\nBebida para guardar en heladera: Sprunk x4 unidades ($200)\nBebida: Sprunk ($65)", str);
				ShowPlayerDialog(playerid, PRODUCTOS, DIALOG_STYLE_LIST, "{FFFF04}Productos y servicios (24/7).", str, "Comprar", "Salir");
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, -784.2098,500.1945,1371.7422)) // Restaurante
		{
		    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
	    	{
			    new cervezas[30],vino[30],sprunk[30],aquarius[30];
			    for(new p; p < MAX_PROPIEDADES; p++)
   				{
				    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        		{
	        		    switch(PropInfo[p][pCerveza])
						{
	        		        case 0: format(cervezas,sizeof(vino),"{EB0000}Cerveza");
	        		        default: format(cervezas,sizeof(vino),"{FFFFFF}Cerveza");
						}
						switch(PropInfo[p][pVino])
						{
	        		        case 0: format(vino,sizeof(vino),"{EB0000}Vino");
	        		        default: format(vino,sizeof(vino),"{FFFFFF}Vino");
						}
						switch( PropInfo[p][pSprunk])
						{
							case 0: format(sprunk,sizeof(sprunk),"{EB0000}Vaso de sprunk");
	        		        default: format(sprunk,sizeof(sprunk),"{FFFFFF}Vaso de sprunk");
						}
						switch( PropInfo[p][pAquarius])
						{
	        		        case 0: format(aquarius,sizeof(aquarius),"{EB0000}Aquarius");
	        		        default: format(aquarius,sizeof(aquarius),"{FFFFFF}Aquarius");
						}
	        		}
				}
				new string[256];
				format(string,sizeof(string),"Producto\tPrecio\n%s\t{f21111}$80{FFFFFF}\n%s\t{f21111}$100\n%s\t{f21111}$60{FFFFFF}\n%s\t{f21111}$160{FFFFFF}",cervezas,vino,sprunk,aquarius);
				ShowPlayerDialog(playerid, PRODUCTOS2, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos",string,"Comprar", "Salir");
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 373.7276,-118.8039,1001.4922)) // Pizzeria
		{
		    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
	    	{
				return ShowPlayerDialog(playerid, DIALOG_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos","Producto\tPrecio\nPorción de pizza\t{f21111}$40{FFFFFF}\nPizza completa {232621}- (Para llevar)\t{f21111}$300{FFFFFF}\nSprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1214.8492,-13.3533,1000.9219) || IsPlayerInRangeOfPoint(playerid, 2.0, 969.3793,-44.8069,1001.1172) ||IsPlayerInRangeOfPoint(playerid, 2.0, 214.9070,-13.3532,1000.9219) ||IsPlayerInRangeOfPoint(playerid, 2.0, -1262.6428,2119.9490,1246.5457) || IsPlayerInRangeOfPoint(playerid, 2.0, -1396.3044,-320.4939,1052.0834) || IsPlayerInRangeOfPoint(playerid, 2.0, 499.9690,-20.6826,1000.6797)) // Salón de eventos
		{
		    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
	    	{
	    		return ShowPlayerDialog(playerid, DIALOG_SALON, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF04}Lista de productos","Producto\tPrecio\nVino\t{f21111}$110{FFFFFF}\nCerveza\t{f21111}$80{FFFFFF}\nVaso de sprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
			}
		}
		if(PlayerToPoint(10.0, playerid, -88.1874,-1127.1766,1.0847))
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PLAYER_INFO[playerid][CasaID][0] == 59 || PLAYER_INFO[playerid][CasaID][1] == 59 || PLAYER_INFO[playerid][pAdmin] >= 5)
				{
					if(PortonAbiertoCasa == 0)
					{
						PortonAbiertoCasa = 1;
						MoveDynamicObject(controls[10],-84.5720, -1118.8861, 0.2805,2);
					}
					else
					{
						PortonAbiertoCasa = 0;
						MoveDynamicObject(controls[10], -87.67600, -1127.18213, 0.28050,2);
					}
				}
			}
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    //boton discoteca
		    if(IsPlayerInRangeOfPoint(playerid,1.0, 475.56113, -21.06126, 1003.93793) || IsPlayerInRangeOfPoint(playerid,1.0, 475.56110, -21.42130, 1003.5))
		    {
		        if(DISCOTEC_INFO[d_DJ] == playerid)
			    {
				    if(puerta_discoteca[1] == 0)
					{
						MoveDynamicObject(puerta_discoteca[0], 472.4326, -21.23030, 1002.67120, 3.0); //abierta
						puerta_discoteca[1] = 1;
					}
					else
					{
						MoveDynamicObject(puerta_discoteca[0], 473.81259, -21.23030, 1002.67120, 3.0); //cerrada
						puerta_discoteca[1] = 0;
					}
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
				}
			    else if(DISCOTEC_INFO[d_DJ] == -1)	//sin uso
			    {
				    if(puerta_discoteca[1] == 0)
					{
						MoveDynamicObject(puerta_discoteca[0], 472.4326, -21.23030, 1002.67120, 3.0); //abierta
						puerta_discoteca[1] = 1;
					}
					else
					{
						MoveDynamicObject(puerta_discoteca[0], 473.81259, -21.23030, 1002.67120, 3.0); //cerrada
						puerta_discoteca[1] = 0;
					}
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
				}
		    }

			// BOTON LVPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 209.0449, 177.1701, 1003.5126))
			{
				if(PLAYER_INFO[playerid][pDuty] != 0)
				{
					if(BotonesAcademia[0] == 0)
					{
						BotonesAcademia[0] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasLVPD[1],208.9700, 179.9100, 1003.2800,1.5);
					}
					else if(BotonesAcademia[0] == 1)
					{
						BotonesAcademia[0] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasLVPD[1],208.9700, 178.2600, 1003.2800,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON LVPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 209.1364, 160.2765, 1003.5126))
			{

				if(PLAYER_INFO[playerid][pDuty] > 0)
				{

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveDynamicObject(PuertasLVPD[2],209.0100, 157.4540, 1003.2800,1.5);
					SetTimer("Cerrar_RejaLVPD2", 5000, 0);
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 639.9840, -187.0800, 1277.1400))
			{

				if(PLAYER_INFO[playerid][pDuty] > 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[1] == 0)
					{

						BotonesAcademia[1] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[1],636.8300, -187.1200, 1275.8000,1.5);
					}
					else if(BotonesAcademia[1] == 1)
					{

						MoveDynamicObject(PuertasACA[1],638.090027, -187.119995, 1275.800049,1.5);
						BotonesAcademia[1] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 643.1800, -210.3840, 1277.1400))
			{

				if(PLAYER_INFO[playerid][pDuty] > 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[2] == 0)
					{

						BotonesAcademia[2] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[2],646.3500, -210.2300, 1275.8000,1.5);
					}
					else if(BotonesAcademia[2] == 1)
					{

						BotonesAcademia[2] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[2],645.059998, -210.229996, 1275.800049,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 645.2700, -217.0220, 1277.1400) || IsPlayerInRangeOfPoint(playerid, 1.0, 643.2601,-216.6602,1276.7993))
			{

				if(PLAYER_INFO[playerid][pDuty] > 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[3] == 0)
					{

						BotonesAcademia[3] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[3],646.3920, -217.0800, 1275.7600,1.5);
					}
					else if(BotonesAcademia[3] == 1)
					{

						BotonesAcademia[3] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[3],645.114014, -217.080002, 1275.760010,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 642.7260, -224.4200, 1277.1400))
			{

				if(PLAYER_INFO[playerid][pDuty] > 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[4] == 0)
					{

						BotonesAcademia[4] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[4],642.7700, -227.3580, 1275.7600,1.5);
					}
					else if(BotonesAcademia[4] == 1)
					{

						BotonesAcademia[4] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[4],642.770020, -226.110001, 1275.760010,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 642.6900, -237.2600, 1277.1400))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[5] == 0)
					{

						BotonesAcademia[5] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[5],642.7500, -236.2000, 1275.7600,1.5);
					}
					else if(BotonesAcademia[5] == 1)
					{

						BotonesAcademia[5] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[5],642.750000, -237.466003, 1275.760010,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ACADEMIA
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 645.1000, -239.8460, 1277.1400))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0 && PLAYER_INFO[playerid][pRango] > 3)
				{

					if(BotonesAcademia[6] == 0)
					{

						BotonesAcademia[6] = 1;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[6],643.9860, -239.7800, 1275.7600,1.5);
					}
					else if(BotonesAcademia[6] == 1)
					{

						BotonesAcademia[6] = 0;
						ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
						MoveDynamicObject(PuertasACA[6],645.270020, -239.779999, 1275.760010,1.5);
					}
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ABRIR PUERTA LSPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.40552, -1637.85229, 13.70560))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0)
				{

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveDynamicObject(puerta_1,1581.2899, -1638.0200, 12.4100,1.5);
					SetTimer("Cerrar_Puerta1", 5000, 0);
				}
				else AccesoDenegado(playerid);
			}
			// BOTON ABRIR PUERTA LSPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.40283, -1638.34985, 13.70560))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0)
				{

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveDynamicObject(puerta_1,1581.2899, -1638.0200, 12.4100,1.5);
					SetTimer("Cerrar_Puerta1", 5000, 0);
				}
				else AccesoDenegado(playerid);
			}
			// BOTON CELDAS LSPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 216.32980, 116.65350, 999.39240))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0)
				{

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveDynamicObject(puerta_2,215.5482, 116.5364, 998.0455,1.5);
					MoveDynamicObject(puerta_3,220.1184, 116.5364, 998.0455,1.5);
					SetTimer("Cerrar_Puerta2", 5000, 0);
				}
				else AccesoDenegado(playerid);
			}
			// BOTON CELDAS LSPD
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 216.28259, 116.40660, 999.39240))
			{

				if(PLAYER_INFO[playerid][pDuty] != 0)
				{

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					MoveDynamicObject(puerta_2,215.5482, 116.5364, 998.0455,1.5);
					MoveDynamicObject(puerta_3,220.1184, 116.5364, 998.0455,1.5);
					SetTimer("Cerrar_Puerta2", 5000, 0);
				}
				else AccesoDenegado(playerid);
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0,265.9726,115.5081,1004.6172) && PLAYER_INFO[playerid][pFaccion] == 1) // Elevadores SAPD
		{
			ShowPlayerDialog(playerid, ELEVADORSAPD, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Estacionamiento\nHelipuerto", "Aceptar", "Cancelar");
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0,1524.4830,-1677.9261,6.2188) && PLAYER_INFO[playerid][pFaccion] == 1) // Elevadores SAPD
		{
			ShowPlayerDialog(playerid, ELEVADORGARAGE, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Departamento\nHelipuerto", "Aceptar", "Cancelar");
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0,1558.0905,-1675.5868,28.3955) && PLAYER_INFO[playerid][pFaccion] == 1) // Elevadores SAPD
		{
			ShowPlayerDialog(playerid, ELEVADORTEJADO, DIALOG_STYLE_LIST, "¿Hacia dónde vas?", "Departamento\nEstacionamiento", "Aceptar", "Cancelar");
        }
  		if(PLAYER_INFO[playerid][pDuty] > 0) return 0;
		if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar ropa.");
		if(IsPlayerInRangeOfPoint(playerid,0.5,207.6111,-100.3305,1005.2578) || IsPlayerInRangeOfPoint(playerid, 5.0, 161.5224,-83.2529,1001.8047) || IsPlayerInRangeOfPoint(playerid, 5.0, 204.3374,-159.3523,1000.5234) || IsPlayerInRangeOfPoint(playerid, 5.0, 206.3758,-8.0859,1001.2109) || IsPlayerInRangeOfPoint(playerid, 5.0, 207.0922,-129.1800,1003.5078))
		switch(PLAYER_INFO[playerid][pSexo])
		{
			case 1:
			{
				ShowModelSelectionMenu(playerid, RopaHombre, "Conjuntos");
			}
			case 2:
			{
				ShowModelSelectionMenu(playerid, RopaMujer, "Conjuntos");
			}
		}
	    new accesoa=0;
 		// Centro de emisoras
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 386.7000, 174.4800, 1040.5500))
		{
			if(Emisoras[playerid][TieneEmisora] == 1) accesoa=1;
			if(accesoa == 1)
			{
				if(YaEstaAbierta[0] == 0)
				{
					YaEstaAbierta[0] = 1;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[0],390.000000, 174.539993, 1039.109985, 3.0);
				}
				else
				{
					YaEstaAbierta[0] = 0;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[0],388.7088, 174.3999, 1039.1100, 3.0);
				}
			}
		}
		// Emisora 1
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0600, 178.2900, 1040.4500))
		{
			if(CabinasOcupadasEmisoras[1][0] == 1)	{	if(CabinasOcupadasEmisoras[1][1] == playerid) accesoa=1;	}
			else if(CabinasOcupadasEmisoras[1][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
			if(accesoa == 1)
			{
				if(YaEstaAbierta[1] == 0)
				{
					YaEstaAbierta[1] = 1;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[1],349.2600, 177.4100, 1039.1100, 3.0);
				}
				else
				{
					YaEstaAbierta[1] = 0;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[1],349.260010, 178.690002, 1039.109985, 3.0);
				}
			}
		}
		// Emisora 2
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0272, 160.3499, 1040.4500))
		{
			if(CabinasOcupadasEmisoras[2][0] == 1)	{	if(CabinasOcupadasEmisoras[2][1] == playerid) accesoa=1;	}
			else if(CabinasOcupadasEmisoras[2][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
			if(accesoa == 1)
			{
				if(YaEstaAbierta[2] == 0)
				{
					YaEstaAbierta[2] = 1;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[2],349.2600, 159.4300, 1039.1100, 3.0);
				}
				else
				{
					YaEstaAbierta[2] = 0;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[2],349.260010, 160.729996, 1039.109985, 3.0);
				}
			}
		}
		// Emisora 3
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 349.0400, 148.8500, 1040.4500))
		{
			if(CabinasOcupadasEmisoras[3][0] == 1)	{	if(CabinasOcupadasEmisoras[3][1] == playerid)	accesoa=1;	}
			else if(CabinasOcupadasEmisoras[3][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
			if(accesoa == 1)
			{
				if(YaEstaAbierta[3] == 0)
				{
					YaEstaAbierta[3] = 1;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[3],349.1800, 147.9900, 1039.1100, 3.0);
				}
				else
				{
					YaEstaAbierta[3] = 0;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[3],349.1800, 149.2300, 1039.1100, 3.0);
				}
			}
		}
		// Emisora 4
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 363.1623, 152.4068, 1040.4500))
		{
			if(CabinasOcupadasEmisoras[4][0] == 1) { if(CabinasOcupadasEmisoras[4][1] == playerid) accesoa=1; }
			else if(CabinasOcupadasEmisoras[4][0] == 0 && (Emisoras[playerid][TieneEmisora] == 1)) accesoa=1;
			if(accesoa == 1)
			{
				if(YaEstaAbierta[4] == 0)
				{
					YaEstaAbierta[4] = 1;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[4],359.9500, 152.3300, 1039.1100, 3.0);
				}
				else
				{
					YaEstaAbierta[4] = 0;
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 1, 1, 0,0);
					return MoveDynamicObject(PuertasDeBotones[4],361.2100, 152.3300, 1039.1100, 3.0);
				}
			}
		}
	    for(new c = 0; c <MAX_PROPIEDADES; c++)
	   	{
   			if(IsPlayerInRangeOfPoint(playerid,1.5,PropInfo[c][pPosX],PropInfo[c][pPosY],PropInfo[c][pPosZ]))
   			{
   		    	if(PropInfo[c][pEnVenta] == 1)
    		    {
   	 		        if(PropInfo[c][pEnVentaPor] == 0 && PropInfo[c][pPrecio] > PLAYER_INFO[playerid][pDinero]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar esta propiedad.");
     			    else if(PropInfo[c][pEnVentaPor] == 1 && PropInfo[c][pPrecio] > PLAYER_INFO[playerid][Moneda]) return SendClientMessage(playerid,-1,"No tienes suficientes RZ para comprar esta propiedad.");
					if(PLAYER_INFO[playerid][pNivel] < PropInfo[c][pNivel]) return SendClientMessage(playerid,-1,"No tienes el nivel necesario para comprar esta propiedad.");
					switch(PLAYER_INFO[playerid][pVIP])
					{

    					case 2: if(ObtenerCasas(playerid) > 1) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 2 propiedades con tu membresia VIP actual.");
						case 3: if(ObtenerCasas(playerid) > 2) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 3 propiedades con tu membresia VIP actual.");
    					default: if(ObtenerCasas(playerid) > 0) return SendClientMessage(playerid, -1, "Solo puedes tener hasta 1 propiedad.");
					}
					new hslot = SlotPropiedad(playerid),query[260];
					if(hslot != -1)
					{
						PLAYER_INFO[playerid][CasaID][hslot] = PropInfo[c][pID];
						mysql_format(handle_db, query, sizeof(query),"UPDATE `usuarios` SET `CasaID%d`='%d' WHERE `ID`='%d'",hslot+1,PropInfo[c][pID],PLAYER_INFO[playerid][pID]);
						mysql_tquery(handle_db, query);
						switch(PropInfo[c][pEnVentaPor])
						{
						    case 0: QuitarDinero(playerid,PropInfo[c][pPrecio]);
						    case 1: PLAYER_INFO[playerid][Moneda] -= PropInfo[c][pPrecio];
						}
						PropInfo[c][pEnVenta] = 0;
						PropInfo[c][pEnUso] = 1;
						format(PropInfo[c][pPropietario],40,"%s",NombreJugador(playerid));
						CargarPropiedad(c);
						mysql_format(handle_db, query, sizeof(query),"UPDATE `propiedades` SET `EnVenta`='0', `Propietario`='%s',`IDPropietario`='%d' WHERE `ID`='%d'", PropInfo[c][pPropietario], PLAYER_INFO[playerid][pID], PropInfo[c][pID]);
						mysql_tquery(handle_db, query);
						SendClientMessage(playerid,-1,"{f21111}Acabas de comprar la propiedad.");
						PropInfo[c][pIDPropietario] = PLAYER_INFO[playerid][pID];
					}
				}
     	    }
   		}
		if(Emisoras[playerid][TieneEmisora] == 1 || PLAYER_INFO[playerid][pAdmin] > 2 || PLAYER_INFO[playerid][pDuty] == 1)
		{
			if(CercaDeObjeto(2.5,playerid,PuertaEmisora[0]))
			{
		    	if(PuertaAbiertaEmisora[0] == 0)
		    	{
		    	    PuertaAbiertaEmisora[0] = 1;
                    MoveDynamicObject(PuertaEmisora[0],390.000000, 174.539993, 1039.109985, 3.0);
		    	}
		    	else
		    	{
		    	    PuertaAbiertaEmisora[0] = 0;
		            MoveDynamicObject(PuertaEmisora[0],388.7088, 174.3999, 1039.1100, 3.0);
		    	}
			}
			else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[1]))
			{
			    if((CabinasOcupadasEmisoras[1][0] == 1 && CabinasOcupadasEmisoras[1][1] == playerid) || CabinasOcupadasEmisoras[1][0] == 0 || PLAYER_INFO[playerid][pDuty] == 1)
			    {
		    		if(PuertaAbiertaEmisora[1] == 0)
		    		{
		    	    	PuertaAbiertaEmisora[1] = 1;
                    	MoveDynamicObject(PuertaEmisora[1],349.2600, 177.4100, 1039.1100, 3.0);
		    		}
		    		else
		    		{
		    	    	PuertaAbiertaEmisora[1] = 0;
		            	MoveDynamicObject(PuertaEmisora[1],349.260010, 178.690002, 1039.109985, 3.0);
		    		}
		    	}
			}
			else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[2]))
			{
			    if((CabinasOcupadasEmisoras[2][0] == 1 && CabinasOcupadasEmisoras[2][1] == playerid) || CabinasOcupadasEmisoras[2][0] == 0 || PLAYER_INFO[playerid][pDuty] == 1)
			    {
		    		if(PuertaAbiertaEmisora[2] == 0)
		    		{
		    	    	PuertaAbiertaEmisora[2] = 1;
                    	MoveDynamicObject(PuertaEmisora[2],349.2600, 159.4300, 1039.1100, 3.0);
		    		}
		    		else
		    		{
		    	    	PuertaAbiertaEmisora[2] = 0;
		            	MoveDynamicObject(PuertaEmisora[2],349.2600, 159.3700, 1039.1100, 3.0);
		    		}
		    	}
			}
			else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[3]))
			{
			    if((CabinasOcupadasEmisoras[3][0] == 1 && CabinasOcupadasEmisoras[3][1] == playerid) || CabinasOcupadasEmisoras[3][0] == 0 || PLAYER_INFO[playerid][pDuty] == 1)
			    {
		    		if(PuertaAbiertaEmisora[3] == 0)
		    		{
		    	    	PuertaAbiertaEmisora[3] = 1;
                    	MoveDynamicObject(PuertaEmisora[3],349.1800, 147.9900, 1039.1100, 3.0);
		    		}
		    		else
		    		{
		    	    	PuertaAbiertaEmisora[3] = 0;
		            	MoveDynamicObject(PuertaEmisora[3],349.1800, 149.2300, 1039.1100, 3.0);
		    		}
		    	}
			}
			else if(CercaDeObjeto(2.5,playerid,PuertaEmisora[4]))
			{
			    if((CabinasOcupadasEmisoras[4][0] == 1 && CabinasOcupadasEmisoras[4][1] == playerid) || CabinasOcupadasEmisoras[4][0] == 0 || PLAYER_INFO[playerid][pDuty] == 1)
			    {
		    		if(PuertaAbiertaEmisora[4] == 0)
		    		{
		    	    	PuertaAbiertaEmisora[4] = 1;
                    	MoveDynamicObject(PuertaEmisora[3],359.9500, 152.3300, 1039.1100, 3.0);
		    		}
		    		else
		    		{
		    	    	PuertaAbiertaEmisora[4] = 0;
		            	MoveDynamicObject(PuertaEmisora[3],361.2100, 152.3300, 1039.1100, 3.0);
		    		}
		    	}
			}
		}
	}
	if((newkeys == KEY_LOOK_LEFT) && GetPlayerWeapon(playerid) == 24 || (newkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) || (newkeys & KEY_SPRINT) && (newkeys & KEY_CROUCH))
	{
		if(Muriendo[playerid] == 1 || (PLAYER_TIMES[playerid][Consumible] - gettime()) > 0 || Esposando[playerid] == 2 || recogiendo[playerid] > 0) return 1;
		if(GetPlayerWeapon(playerid) == 24)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(PLAYER_INFO[playerid][Agonizando] == 0)
				{
					SetPlayerArmedWeapon(playerid, 0);
					ContadorCBug[playerid]++;
					if(ContadorCBug[playerid] > 2)
					{
						Congelar(playerid);
						SetTimerEx("DescongelarCBUG",2000,false,"d",playerid);
					}
				}
			}
		}
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 16)
	{
		SetTimerEx("QuitarGranada",450,0,"d",playerid);
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 46)
	{
		PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(46)] = 0;
	}
	if(newkeys & KEY_CTRL_BACK)
	{
	    for(new ID = 1; ID < MAX_FABRICAS; ID++)
	    {
	        if(!FABRICAS_INFO[ID][f_VALID]) continue;
	        if(FABRICAS_INFO[ID][f_FACCION_ID] == PLAYER_INFO[playerid][pFaccion] || PLAYER_INFO[playerid][pAdmin] >= 4 || FABRICAS_INFO[ID][f_VENTA] == 0)
	        {
				for(new slot = 0; slot < 2; slot++)
			    {
			        if(PlayerNearObject(playerid, FABRICAS_INFO[ID][f_PORTON][slot], 15.0))
					{
			            if(FABRICAS_INFO[ID][f_PORTON_ESTADO] == 0) return EstadoRejaFabrica(ID, 1);
					}
				}
			}
		}
		if(PLAYER_TIMES[playerid][RobadoReciente] > gettime()) return SendClientMessage(playerid,-1,"Tu personaje esta cansado, vuelve a intentarlo en unos segundos.");
		new abierta,lacasa;
		if(Objeto[playerid] > 0) return 1;
		for(new i = 0; i < sizeof(ObjetoRobo); i++)
		{
			switch(i)
			{
			    case 0..6: lacasa=1,abierta = CasaAbierta;
			    case 7..13: lacasa=2,abierta = CasaAbierta2;
			    case 14..20: lacasa=3,abierta = CasaAbierta3;
			    case 21..27: lacasa=4,abierta = CasaAbierta4;
			    case 28..34: lacasa=5,abierta = CasaAbierta5;
			    case 35..41: lacasa=6,abierta = CasaAbierta6;
			    case 42..48: lacasa=7,abierta = CasaAbierta7;
			    case 49..55: lacasa=9,abierta = CasaAbierta9;
			    case 56..62: lacasa=11,abierta = CasaAbierta11;
			    case 63..69: lacasa=12,abierta = CasaAbierta12;
			    case 70..77: lacasa=18,abierta = CasaAbierta8;
			    case 78..85: lacasa=10,abierta = CasaAbierta10;
			}
		    if(IsValidDynamicObject(ObjetoRobo[i]))
		    {
		        if(PlayerNearObject(playerid,ObjetoRobo[i],10.0))
		        {
		            if(EnRobarCasa(playerid) == lacasa)
		            {
			            if(abierta == 0)
			            {
			                SendClientMessage(playerid,-1,"La puerta se ha cerrado, ya no puedes robar mas objetos.");
			                break;
			            }
			            if(PLAYER_INFO[playerid][pNivel] < 3)
						{
						    SendClientMessage(playerid,-1,"Solamente jugadores de nivel 3 en adelante pueden robar casas.");
							break;
						}
			            PLAYER_TIMES[playerid][RobadoReciente] = gettime() + 5;
			            AttachedObjectItem(playerid,GetDynamicObjectModel(ObjetoRobo[i]));
						DestroyDynamicObjectEx(ObjetoRobo[i]);
						SendClientMessage(playerid,-1,"Tienes que {FFFF04}/baul guardar objeto{FFFFFF} en un baúl y escapar antes que llegue la policía.");
						break;
					}
				}
		    }
		}
	}
	if(newkeys & KEY_CTRL_BACK)
	{
		if(PuedeTomarDinero[playerid] != INVALID_ACTOR_ID)
		{
			new Float:x,Float:y,Float:z;
			GetDynamicActorPos(PuedeTomarDinero[playerid], x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,5.0,x,y,z))
			{
				if(valortotal[playerid] > 0)
				{
					PuedeTomarDinero[playerid] = INVALID_ACTOR_ID;
					DarDineroRoboTienda(playerid);
				}
			}
		}
		if(Muriendo[playerid] != 0)
		{
			MostrarBoxMedico(playerid);
			PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
		}
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
	    {
	        if(!FABRICAS_INFO[ID][f_VALID]) continue;
            if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;

            if(IsPlayerInRangeOfPoint(playerid, 2.0, 235.7830,109.9401,1010.2188))
			{
			    if(PLAYER_TEMP[playerid][pt_LLEVA_DINERO] == 1)
			    {
			        if(FABRICAS_INFO[ID][f_SOBORNO_COUNT] < 6 && (FABRICAS_INFO[ID][f_SOBORNO_TIME] - gettime()) < 0)
			        {
			            if(FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] == 1)
			            {
				            new string[128];
				            RemovePlayerAttachedObject(playerid, 7);

							PLAYER_TEMP[playerid][pt_LLEVA_DINERO] = 0;
				            FABRICAS_INFO[ID][f_SOBORNO_COUNT] += 1;

				            new soborno = 5-FABRICAS_INFO[ID][f_SOBORNO_COUNT];
				            if(FABRICAS_INFO[ID][f_SOBORNO_COUNT] < 5) format(string,sizeof(string),"Tu banda pagó {f21111}$1000000{FFFFFF} de soborno y aún falta pagar {EB0000}$%d000000",soborno);
				            else
				            {
				                FABRICAS_INFO[ID][f_SOBORNO_TIME] = gettime() + ((3600 * 24) * 7);
				                FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
								format(string,sizeof(string),"Tu banda {f21111}pagó el soborno{FFFFFF} semanal a la {3399FF}policía",soborno);
	                        }
							MandarMensajeFabrica(ID, string);
							return 1;
						}
					}
					else SendClientMessage(playerid,-1,"El dinero del soborno ya se pagó.");
                }
			}
            if(FABRICAS_INFO[ID][f_INTERIOR] == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(playerid) == FABRICAS_INFO[ID][f_VW])
            {
                if(IsPlayerInRangeOfPoint(playerid, 1.7, -2018.3846,248.9650,1035.8389))
				{
				    return ShowDialog(playerid, DIALOG_ACTIVIDAD);
				}
				else if(IsPlayerInRangeOfPoint(playerid,1.7,-2020.3898,252.1498,1035.8389))
				{
				    if(PLAYER_INFO[playerid][pRango] == 8)
				    {
					    ShowDialog(playerid, DIALOG_ADMINISTRACION);
					}
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 1.7, -2019.0933,246.1469,1035.8389))
				{
				    return ShowDialog(playerid, DIALOG_FABRICA_DESBUG);
				}
                else if(IsPlayerInRangeOfPoint(playerid,1.5,-2019.9447,243.5474,1035.8162))
				{
					new string[300];
					format(string,sizeof(string),"Arma\tCantidad Disponible\n{FFFFFF}Sniper rifle\t{f21111}%d{FFFFFF}\nEscopeta recortada\t{f21111}%d{FFFFFF}\nMicro UZI\t{f21111}%d{FFFFFF}\nTec-9\t{f21111}%d{FFFFFF}",FABRICAS_INFO[ID][f_SNIPER],FABRICAS_INFO[ID][f_RECORTADA],FABRICAS_INFO[ID][f_UZI],FABRICAS_INFO[ID][f_TEC9]);
					ShowPlayerDialog(playerid, DIALOG_SACAR_ARMAS_FABRICA, DIALOG_STYLE_TABLIST_HEADERS, "Tomar arma", string, "Aceptar","Cancelar");
				}
                if(IsPlayerInRangeOfPoint(playerid,1.5, -2020.0726,238.9793,1035.8162))
				{
					if(FABRICAS_INFO[ID][f_CHALECOS] == 0) return SendClientMessage(playerid,-1,"{FF0000}No quedan más chalecos{FFFFFF} antibalas en el depósito.");
					if(PLAYER_INFO[playerid][j_ARMOUR] >= 91) return SendClientMessage(playerid,-1,"{FF0000}Ya tienes{FFFFFF} un chaleco antibalas equipado.");

					ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
					SetPlayerArmourEx(playerid, 100);
					CargarChalecosFabrica(ID, true);
					ActualizarLabelsFabrica(ID);
					return 1;
				}
                if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 1)
	            {
	                new Float:a1x,Float:a1y,Float:a1z;
					GetVehiclePos(FABRICAS_INFO[ID][f_VEHICLES][0], a1x, a1y, a1z);
					if(IsPlayerInRangeOfPoint(playerid, 3.5, a1x, a1y, a1z))
					{
					    if(FABRICAS_INFO[ID][f_VEHICLE_CAJAS] >= 5) return SendClientMessage(playerid,-1,"No entran más cajas en la camioneta.");
					    if(FABRICAS_INFO[ID][f_VEHICLE_BARRIL] > 0) return SendClientMessage(playerid,-1,"Tienes que {EB0000}descargar los químicos{FFFFFF} para poder guardar cajas.");
					    PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 0;

						VEHICLE_OBJECTS[ FABRICAS_INFO[ID][f_VEHICLES][0]][FABRICAS_INFO[ID][f_VEHICLE_CAJAS] + 5][vobject_ATTACHED] = true;
						UpdateVehicleAttachedObject(FABRICAS_INFO[ID][f_VEHICLES][0], FABRICAS_INFO[ID][f_VEHICLE_CAJAS] + 5);
						FABRICAS_INFO[ID][f_VEHICLE_CAJAS] ++;
						
						ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						AccionesRol(playerid, "dejó una caja con metanfetaminas en la camioneta.");
						return 1;
					}
		       	    for(new cg = 0; cg <sizeof(GuardarCajas); cg++)
		            {
		                if(IsPlayerInRangeOfPoint(playerid, 2.0, GuardarCajas[cg][c_POS_X], GuardarCajas[cg][c_POS_Y], GuardarCajas[cg][c_POS_Z]))
						{
						    if(FABRICAS_INFO[ID][f_CAJAS_SLOT][cg] >= 2) return SendClientMessage(playerid,-1,"No entran más cajas en este almacen de la fabrica.");

							FABRICAS_INFO[ID][f_CAJAS_SLOT][cg] ++;
                            ActualizarAlmacenFabrica(ID);

                            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                            PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 0;
							ApplyAnimation(playerid,"CARRY","putdwn",2,0,1,1,0,0);
							RemovePlayerAttachedObject(playerid, 7);
							AccionesRol(playerid, "dejó una caja con metanfetaminas en el almacen.");
							return 1;
						}
					}
           			//colocar cajas
				}
	            else if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0)
	            {
	                new Float:a1x,Float:a1y,Float:a1z;
					GetVehiclePos(FABRICAS_INFO[ID][f_VEHICLES][0], a1x, a1y, a1z);
					if(IsPlayerInRangeOfPoint(playerid, 3.5, a1x, a1y, a1z))
					{
					    if(FABRICAS_INFO[ID][f_VEHICLE_CAJAS] == 0) return 1;
					    if(FABRICAS_INFO[ID][f_VEHICLE_BARRIL] > 0) return SendClientMessage(playerid,-1,"Tienes que {EB0000}descargar los químicos{FFFFFF} para poder guardar cajas.");
						
					    PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
					    FABRICAS_INFO[ID][f_VEHICLE_CAJAS] --;
				        VEHICLE_OBJECTS[ FABRICAS_INFO[ID][f_VEHICLES][0]][FABRICAS_INFO[ID][f_VEHICLE_CAJAS] + 5][vobject_ATTACHED] = false;
						UpdateVehicleAttachedObject(FABRICAS_INFO[ID][f_VEHICLES][0], FABRICAS_INFO[ID][f_VEHICLE_CAJAS] + 5);

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						AccionesRol(playerid, "sacó una caja con metanfetaminas de la camioneta.");
						return 1;
					}
					for(new i = 0; i < 20; i++)
					{
						if(PlayerNearObject(playerid, FABRICAS_INFO[ID][f_CAJAS][i], 2))
						{
				       	    for(new cg = 0; cg <sizeof(GuardarCajas); cg++)
				            {
				                if(IsPlayerInRangeOfPoint(playerid, 2.0, GuardarCajas[cg][c_POS_X], GuardarCajas[cg][c_POS_Y], GuardarCajas[cg][c_POS_Z]))
								{
								    if(FABRICAS_INFO[ID][f_CAJAS_SLOT][cg] == 0) return 1;
								    
								    PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
								    for(new dcg = 0; dcg < 20; dcg++)
									{
			    						if(IsValidDynamicObject(FABRICAS_INFO[ID][f_CAJAS][dcg])) DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJAS][dcg]);

										FABRICAS_INFO[ID][f_CAJAS_SLOT][cg] --;
								    	ActualizarAlmacenFabrica(ID);

									    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
										RemovePlayerAttachedObject(playerid, 7);
										SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
										break;
									}
									return 1;
								}
							}
						}
					}
					//sacar cajas
	            }
	            if(IsPlayerInRangeOfPoint(playerid, 2, -2017.67334, 227.02380, 1035.15454))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
					if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0 && FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] == 3)
					{
					    FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][0] = 0;
				        DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][0]);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] = 1;
						PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
						ActualizarLabelsFabrica(ID);
						return 1;
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,2, -2013.86060, 227.05284, 1035.15454))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
					if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0 && FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] == 3)
					{
					    FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][1] = 0;
				        DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][1]);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] = 1;
						PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
						ActualizarLabelsFabrica(ID);
						return 1;
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,2, -2009.98157, 227.00481, 1035.15454))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
				    if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0 && FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] == 3)
					{
					    FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][2] = 0;
				        DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][2]);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] = 1;
						PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
						ActualizarLabelsFabrica(ID);
						return 1;
     				}
				}
				else if(IsPlayerInRangeOfPoint(playerid,2, -2006.16040, 226.99612, 1035.15454))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
					if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0 && FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] == 3)
					{
				 		FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][3] = 0;
				        DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][3]);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] = 1;
						PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
						ActualizarLabelsFabrica(ID);
						return 1;
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid,2, -2002.34033, 227.01234, 1035.15454))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
				    if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 0 && FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] == 3)
					{
     					DestroyDynamicObject(FABRICAS_INFO[ID][f_CAJA_COCINERO][4]);
     					FABRICAS_INFO[ID][f_PORCIENTO_COCINERO][4] = 0;
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] = 1;
						PLAYER_TEMP[playerid][pt_TIENE_CAJA] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						RemovePlayerAttachedObject(playerid, 7);
						SetPlayerAttachedObject(playerid, 7, 1271, 1, 0.216000, 0.365000, -0.032000, 0.000000, 0.000000, 0.000000, 0.667000, 0.651999, 0.568000);
						ApplyAnimation(playerid,"CARRY","LIFTUP",2,0,1,1,0,0);
						ActualizarLabelsFabrica(ID);
						return 1;
					}
				}
	            if(IsPlayerInRangeOfPoint(playerid, 3, -2016.4075,226.0637,1035.8225))
				{
					if(FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][0] == 2)
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 0) return 1;
	                	if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] > 1) return SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");

	                    PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][0] = 2;
						ActualizarLabelsFabrica(ID);
						return 1;
	                }
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, -2012.6115,227.9702,1035.8162))
				{
					if(FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][1] == 2)
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 0) return 1;
	                	if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] > 1) return SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");

	                    PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][1] = 2;
						ActualizarLabelsFabrica(ID);
						return 1;
	                }
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, -2008.7471,226.0629,1035.8162))
				{
					if(FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][2] == 2)
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 0) return 1;
	                	if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] > 1) return SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");

	                    PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][2] = 2;
						ActualizarLabelsFabrica(ID);
						return 1;
	                }
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, -2004.8414,227.9703,1035.8162))
				{
					if(FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][3] == 2)
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 0) return 1;
	                	if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] > 1) return SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");

	                    PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][3] = 2;
						ActualizarLabelsFabrica(ID);
						return 1;
	                }
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, -2001.0389,226.1202,1035.8162))
				{
					if(FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 1 || FABRICAS_INFO[ID][f_TIPO_ACTOR][4] == 2)
					{
					    if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 0) return 1;
	                	if(FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] > 1) return SendClientMessage(playerid,-1,"Este moledor ya tiene trabajo pendiente.");

	                    PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 0;
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						FABRICAS_INFO[ID][f_ESTADO_COCINERO][4] = 2;

						ActualizarLabelsFabrica(ID);
						return 1;
	                }
				}
				if(IsPlayerInRangeOfPoint(playerid, 3.0, -1992.2786, 194.1294, 1035.81))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 1 || PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
				    if(FABRICAS_INFO[ID][f_CRISTAL][0] == 1)
				    {
				        if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;

					    FABRICAS_INFO[ID][f_CRISTAL][0] = 0;
						FABRICAS_INFO[ID][f_PORCIENTO_HORNO][0] = 0;

		        		PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 1;

		        		ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);

						SetPlayerAttachedObject(playerid, 7, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
						AccionesRol(playerid,"retiró el cristal de una cocina.");
						SendClientMessage(playerid,-1,"Pulsa {FFFF04}'H' {FFFFFF}para dejar el cristal sobre alguna {f21111}mesa de producción");
						ActualizarLabelsFabrica(ID);
						return 1;
	        		}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1995.6786, 194.1294, 1035.81))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 1 || PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
				    if(FABRICAS_INFO[ID][f_CRISTAL][1] == 1)
				    {
				        if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
					    FABRICAS_INFO[ID][f_CRISTAL][1] = 0;
						FABRICAS_INFO[ID][f_PORCIENTO_HORNO][1] = 0;

		        		PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 1;

		        		ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);

						SetPlayerAttachedObject(playerid, 7, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
						AccionesRol(playerid,"retiró el cristal de una cocina.");
						SendClientMessage(playerid,-1,"Pulsa {FFFF04}'H' {FFFFFF}para dejar el cristal sobre alguna {f21111}mesa de producción");
						ActualizarLabelsFabrica(ID);
						return 1;
	        		}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1999.1986, 194.1294, 1035.81))
				{
				    if(PLAYER_TEMP[playerid][pt_TIENE_CAJA] == 1 || PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
				    if(FABRICAS_INFO[ID][f_CRISTAL][2] == 1)
				    {
				        if(PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] == 1) return 1;
					    FABRICAS_INFO[ID][f_CRISTAL][2] = 0;
						FABRICAS_INFO[ID][f_PORCIENTO_HORNO][2] = 0;

		        		PLAYER_TEMP[playerid][pt_TIENE_CRISTAL] = 1;

		        		ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);

						SetPlayerAttachedObject(playerid, 7, 19585, 3, 0.250999, -0.444999, -0.215999, -125.200004, -101.400001, -12.700006, 0.637000, 0.648000, 0.829000);
						AccionesRol(playerid,"retiró el cristal de una cocina.");
						SendClientMessage(playerid,-1,"Pulsa {FFFF04}'H' {FFFFFF}para dejar el cristal sobre alguna {f21111}mesa de producción");
						ActualizarLabelsFabrica(ID);
						return 1;
	        		}
				}
			}
		}
	}
	if(newkeys & KEY_HANDBRAKE)
	{
		if(GetPlayerWeapon(playerid) == 4)
		{
			SetPlayerArmedWeapon(playerid, 0);
			ClearAnimations(playerid);
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if((PLAYER_TIMES[playerid][Entrando] - gettime()) <= 0)
			{
				EntrarInterior(playerid);
				SalirInterior(playerid);
			}
		}
	}
	new TextoUnidad[280];
	new Float: PosSAPD[3];
	GetPlayerPos(playerid, PosSAPD[0], PosSAPD[1], PosSAPD[2]);
	if(newkeys == KEY_LOOK_BEHIND)if(newkeys == KEY_LOOK_BEHIND)
	{
		if(!IsPlayerNPC(playerid))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(PLAYER_TIMES[playerid][TiempoMotor] - gettime() <= 0)
					{
						if(VehiculosInfo[vehicleid][vcomprable] != 1)
						{
							if(!BICI(vehicleid))
							{
								if(MotorAuto[vehicleid] == 0)
								{
									if(VehicleFuel[vehicleid] <= 1) return SetTimerEx("SinGasolina",1200, false, "d",playerid);
									if(PLAYER_TIMES[playerid][TiempoVehiculo] - gettime() <= 0)
									{
										PlayerTextDrawSetString(playerid,TEXTO_VEHICULOS[playerid], "Encendiendo..");
										PlayerTextDrawShow(playerid, TEXTO_VEHICULOS[playerid]);
										defer OcultarTextdrawVeh[1200](playerid);
										SetTimerEx("EncenderMotor",1200, false, "d",playerid);
										PLAYER_TIMES[playerid][TiempoMotor] = gettime() + 2;
									}
								}
								else
								{
								    if(PLAYER_TIMES[playerid][TiempoVehiculo] - gettime() <= 0)
									{
										PLAYER_TIMES[playerid][TiempoMotor] = gettime() + 2;
										ApagarMotor(playerid);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(newkeys & KEY_FIRE && newkeys & KEY_LOOK_BEHIND)
	{

		if(!IsPlayerNPC(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				if(PLAYER_TIMES[playerid][TiempoComputadora] > gettime())
				{
					new mensajep[126];
					format(mensajep,126,"Por favor espera {FF3300}%d{FFFFFF} segundos.",PLAYER_TIMES[playerid][TiempoComputadora] - gettime());
					SendClientMessage(playerid, -1, mensajep);
					return 1;
				}
				new patrulla = GetPlayerVehicleID(playerid);
				if(HELISAPD(patrulla) && PLAYER_INFO[playerid][pDuty] == 1 || SAPD(patrulla) && PLAYER_INFO[playerid][pDuty] == 1)
				{
					new poder = 1;
					AccionesRol(playerid,"inició la búsqueda de sospechosos en la computadora de la patrulla.", 30);
					PLAYER_TIMES[playerid][TiempoComputadora] = gettime() + 60;
					foreach(new b : Player)
					{
						if(IsPlayerInRangeOfPoint(b, 30.0,PosSAPD[0],PosSAPD[1],PosSAPD[2]) && PLAYER_INFO[b][pDuty] == 0 && PLAYER_INFO[b][pCargos] < 3)
						if(IsPlayerInRangeOfPoint(b, 30.0,PosSAPD[0],PosSAPD[1],PosSAPD[2]) && PLAYER_INFO[b][mDuty] == 0 && PLAYER_INFO[b][pCargos] < 3)
						{
							if((SiTieneArma(b,25) || SiTieneArma(b,27) || SiTieneArma(b,29) || SiTieneArma(b,30) || SiTieneArma(b,31) || SiTieneArma(b,33)) && (MOTO(GetPlayerVehicleID(b)) || !IsPlayerInAnyVehicle(b)))
							{
								format(TextoUnidad,sizeof(TextoUnidad),"[Patrulla de %s] {FFFFFF}Resultado: Se detectó a %s armado, proceder con precaución.",PLAYER_INFO[playerid][Nickname], PLAYER_INFO[b][Nickname]);
								SendRadioPoliceMessage(TEAM_BLUE_COLOR, TextoUnidad, b);
								PLAYER_INFO[b][pCargos] = 3;
								SetPlayerWantedLevel(b, PLAYER_INFO[b][pCargos]);
								ActualizarRadar();
								poder = 0;
							}
						}
					}
					if(poder == 1)
					{

						new Resultado[128];
						format(Resultado,sizeof(Resultado),"{3399FF}[Patrulla de %s] {FFFFFF}Resultado: No se detectaron sospechosos.",PLAYER_INFO[playerid][Nickname]);
						SendRadioMessagePatrulla(1,-1,Resultado);
					}
				}
			}
		}
	}
	return 1;
}
public RemovePlayerAttachedItem(playerid,slot)
{
	RemovePlayerAttachedObject(playerid,slot);
}
public SaveAccount(playerid)
{
	if(GetPlayerScore(playerid) == 0) return 1;
	if(JugadorLogeado[playerid] == 1)
	{
        SavePlayerToys(playerid);
		#if DEBUG_GM == 1
		printf("SaveAccount: %d", playerid);
		#endif
		JugadorLogeado[playerid] = 0;
		new Query[1000];
		new Float:x,Float:y,Float:z,Float:z_a,Float:VidaV;
		new Float:x2,Float:y2,Float:z2,Float:z_a2,Float:VidaV2;
		new Float:x3,Float:y3,Float:z3,Float:z_a3,Float:VidaV3;
		new Float:x4,Float:y4,Float:z4,Float:z_a4,Float:VidaV4;
		new inte,vw;
		new day,month,year;
		getdate(day,month,year);

		if(autos[playerid] > 0)
		{
			ContadorLlenarGaso[autos[playerid]] = 0;
			GetVehicleDamageStatus(autos[playerid], PLAYER_INFO[playerid][VE1], PLAYER_INFO[playerid][VE2], PLAYER_INFO[playerid][VE3], PLAYER_INFO[playerid][VE4]);
			PLAYER_INFO[playerid][vGas] = VehicleFuel[autos[playerid]];
			GetVehicleHealth(autos[playerid], VidaV);
			inte = GetVehicleInterior(autos[playerid]); vw = GetVehicleVirtualWorld(autos[playerid]);
			PLAYER_INFO[playerid][vinterior] = inte;
			PLAYER_INFO[playerid][vvw] = vw;
			GetVehiclePos(autos[playerid], x,y,z);
			PLAYER_INFO[playerid][vX] = x;
			PLAYER_INFO[playerid][vY] = y;
			bloqueado[autos[playerid]] = 0;
			PLAYER_INFO[playerid][vZ] = z;
			GetVehicleZAngle(autos[playerid], z_a);
			PLAYER_INFO[playerid][vA] = z_a;
			PLAYER_INFO[playerid][pVidaV] = VidaV;
			Baul[autos[playerid]] = 0;
			LimpiarMaletero(autos[playerid]);
			DestroyVehicleEx(autos[playerid]);
			OldPosx[autos[playerid]] = 0;
			OldPosy[autos[playerid]] = 0;
			OldPosz[autos[playerid]] = 0;
			autos[playerid] = 0;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='1'",PLAYER_INFO[playerid][VE1], PLAYER_INFO[playerid][VE2], PLAYER_INFO[playerid][VE3], PLAYER_INFO[playerid][VE4],PLAYER_INFO[playerid][vGas],PLAYER_INFO[playerid][pVidaV],PLAYER_INFO[playerid][vX],PLAYER_INFO[playerid][vY],PLAYER_INFO[playerid][vZ],PLAYER_INFO[playerid][vA],PLAYER_INFO[playerid][vinterior],PLAYER_INFO[playerid][vvw],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Estado_Alarma`='%d',`Estado_Seguro`='%d' WHERE `Propietario`='%d' AND `Slot`='1'",PLAYER_INFO[playerid][vAAlarma],PLAYER_INFO[playerid][vSeguro],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		if(autos2[playerid] > 0)
		{
			ContadorLlenarGaso[autos2[playerid]] = 0;
			GetVehicleDamageStatus(autos2[playerid], PLAYER_INFO[playerid][V2E1], PLAYER_INFO[playerid][V2E2], PLAYER_INFO[playerid][V2E3], PLAYER_INFO[playerid][V2E4]);
			PLAYER_INFO[playerid][v2Gas] = VehicleFuel[autos2[playerid]];
			GetVehicleHealth(autos2[playerid], VidaV2);
			inte = GetVehicleInterior(autos2[playerid]); vw = GetVehicleVirtualWorld(autos2[playerid]);
			PLAYER_INFO[playerid][v2interior] = inte;
			PLAYER_INFO[playerid][v2vw] = vw;
			GetVehiclePos(autos2[playerid], x2,y2,z2);
			PLAYER_INFO[playerid][v2X] = x2;
			PLAYER_INFO[playerid][v2Y] = y2;
			PLAYER_INFO[playerid][v2Z] = z2;
			GetVehicleZAngle(autos2[playerid], z_a2);
			PLAYER_INFO[playerid][v2A] = z_a2;
			PLAYER_INFO[playerid][pVidaV2] = VidaV2;
			Baul[autos2[playerid]] = 0;
			LimpiarMaletero(autos2[playerid]);
			bloqueado[autos2[playerid]] = 0;
			DestroyVehicleEx(autos2[playerid]);
			OldPosx[autos2[playerid]] = 0;
			OldPosy[autos2[playerid]] = 0;
			OldPosz[autos2[playerid]] = 0;
			autos2[playerid] = 0;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='2'",PLAYER_INFO[playerid][V2E1], PLAYER_INFO[playerid][V2E2], PLAYER_INFO[playerid][V2E3], PLAYER_INFO[playerid][V2E4],PLAYER_INFO[playerid][v2Gas],PLAYER_INFO[playerid][pVidaV2],PLAYER_INFO[playerid][v2X],PLAYER_INFO[playerid][v2Y],PLAYER_INFO[playerid][v2Z],PLAYER_INFO[playerid][v2A],PLAYER_INFO[playerid][v2interior],PLAYER_INFO[playerid][v2vw],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Estado_Alarma`='%d',`Estado_Seguro`='%d' WHERE `Propietario`='%d' AND `Slot`='2'",PLAYER_INFO[playerid][vAAlarma2],PLAYER_INFO[playerid][vSeguro2],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		if(autos3[playerid] > 0)
		{
			ContadorLlenarGaso[autos3[playerid]] = 0;
			GetVehicleDamageStatus(autos3[playerid], PLAYER_INFO[playerid][V3E1], PLAYER_INFO[playerid][V3E2], PLAYER_INFO[playerid][V3E3], PLAYER_INFO[playerid][V3E4]);
			PLAYER_INFO[playerid][v3Gas] = VehicleFuel[autos3[playerid]];
			GetVehicleHealth(autos3[playerid], VidaV3);
			inte = GetVehicleInterior(autos3[playerid]); vw = GetVehicleVirtualWorld(autos3[playerid]);
			PLAYER_INFO[playerid][v3interior] = inte;
			PLAYER_INFO[playerid][v3vw] = vw;
			GetVehiclePos(autos3[playerid], x3,y3,z3);
			PLAYER_INFO[playerid][v3X] = x3;
			PLAYER_INFO[playerid][v3Y] = y3;
			PLAYER_INFO[playerid][v3Z] = z3;
			GetVehicleZAngle(autos3[playerid], z_a3);
			PLAYER_INFO[playerid][v3A] = z_a3;
			PLAYER_INFO[playerid][pVidaV3] = VidaV3;
			LimpiarMaletero(autos3[playerid]);
			Baul[autos3[playerid]] = 0;
			bloqueado[autos3[playerid]] = 0;
			DestroyVehicleEx(autos3[playerid]);
			OldPosx[autos3[playerid]] = 0;
			OldPosy[autos3[playerid]] = 0;
			OldPosz[autos3[playerid]] = 0;
			autos3[playerid] = 0;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='3'",PLAYER_INFO[playerid][V3E1], PLAYER_INFO[playerid][V3E2], PLAYER_INFO[playerid][V3E3], PLAYER_INFO[playerid][V3E4],PLAYER_INFO[playerid][v3Gas],PLAYER_INFO[playerid][pVidaV3],PLAYER_INFO[playerid][v3X],PLAYER_INFO[playerid][v3Y],PLAYER_INFO[playerid][v3Z],PLAYER_INFO[playerid][v3A],PLAYER_INFO[playerid][v3interior],PLAYER_INFO[playerid][v3vw],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Estado_Alarma`='%d',`Estado_Seguro`='%d' WHERE `Propietario`='%d' AND `Slot`='3'",PLAYER_INFO[playerid][vAAlarma3],PLAYER_INFO[playerid][vSeguro3],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		if(autos4[playerid] > 0)
		{
			ContadorLlenarGaso[autos4[playerid]] = 0;
			GetVehicleDamageStatus(autos4[playerid], PLAYER_INFO[playerid][V4E1], PLAYER_INFO[playerid][V4E2], PLAYER_INFO[playerid][V4E3], PLAYER_INFO[playerid][V4E4]);
			PLAYER_INFO[playerid][v4Gas] = VehicleFuel[autos4[playerid]];
			GetVehicleHealth(autos4[playerid], VidaV4);
			inte = GetVehicleInterior(autos4[playerid]); vw = GetVehicleVirtualWorld(autos4[playerid]);
			PLAYER_INFO[playerid][v4interior] = inte;
			PLAYER_INFO[playerid][v4vw] = vw;
			GetVehiclePos(autos4[playerid], x4,y4,z4);
			PLAYER_INFO[playerid][v4X] = x4;
			PLAYER_INFO[playerid][v4Y] = y4;
			PLAYER_INFO[playerid][v4Z] = z4;
			GetVehicleZAngle(autos4[playerid], z_a4);
			PLAYER_INFO[playerid][v4A] = z_a4;
			PLAYER_INFO[playerid][pVidaV4] = VidaV4;
			LimpiarMaletero(autos4[playerid]);
			Baul[autos4[playerid]] = 0;
			bloqueado[autos4[playerid]] = 0;
			DestroyVehicleEx(autos4[playerid]);
			OldPosx[autos4[playerid]] = 0;
			OldPosy[autos4[playerid]] = 0;
			OldPosz[autos4[playerid]] = 0;
			autos4[playerid] = 0;
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `VE1`='%d',`VE2`='%d',`VE3`='%d',`VE4`='%d',`Combustible`='%d', `Vida`='%f',`X`='%f',`Y`='%f',`Z`='%f',`A`='%f',`Interior`='%d',`VW`='%d' WHERE `Propietario`='%d' AND `Slot`='4'",PLAYER_INFO[playerid][V4E1], PLAYER_INFO[playerid][V4E2], PLAYER_INFO[playerid][V4E3], PLAYER_INFO[playerid][V4E4],PLAYER_INFO[playerid][v4Gas],PLAYER_INFO[playerid][pVidaV4],PLAYER_INFO[playerid][v4X],PLAYER_INFO[playerid][v4Y],PLAYER_INFO[playerid][v4Z],PLAYER_INFO[playerid][v4A],PLAYER_INFO[playerid][v4interior],PLAYER_INFO[playerid][v4vw],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
			mysql_format(handle_db,Query,sizeof(Query),"UPDATE `p_vehicles` SET `Estado_Alarma`='%d',`Estado_Seguro`='%d' WHERE `Propietario`='%d' AND `Slot`='4'",PLAYER_INFO[playerid][vAAlarma4],PLAYER_INFO[playerid][vSeguro4],PLAYER_INFO[playerid][pID]);
			mysql_tquery(handle_db, Query);
		}
		if(PLAYER_INFO[playerid][pDinero] < 0) { PLAYER_INFO[playerid][pDinero] = 0; }
		if(PLAYER_INFO[playerid][pBanco] < 0) { PLAYER_INFO[playerid][pBanco] = 0; }
		PLAYER_INFO[playerid][pInterior] = GetPlayerInterior(playerid);
		PLAYER_INFO[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, PLAYER_INFO[playerid][@X], PLAYER_INFO[playerid][@Y], PLAYER_INFO[playerid][@Z]);
		GetPlayerFacingAngle(playerid, PLAYER_INFO[playerid][@A]);
	    
		if(EnClub[playerid] > 0)
		{

			EnClub[playerid] = 0;
			PLAYER_INFO[playerid][@X] = 1204.8699;
			PLAYER_INFO[playerid][@Y] = 12.5584;
			PLAYER_INFO[playerid][@Z] = 1000.921;
			PLAYER_INFO[playerid][pInterior] = 2;
			PLAYER_INFO[playerid][pMundoVirtual] = 5;
		}
		new hour,minute,second,baneo[64];
		gettime(hour, minute, second);
		format(PLAYER_INFO[playerid][jConexion], 90, "%02d/%02d/%02d %02d:%02d:%02d", day,month,year,hour,minute,second);
		format(baneo,sizeof(baneo),"%02d/%02d/%02d",year,month,day);
		
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Online`='0',`Vida`='%f', `Chaleco`='%f', `Admin`='%d', `Nivel`='%d', `Money`='%d',`GPS`='%d',`Radio`='%d',`Sexo`='%d',`Numero`='%d',`Guia`='%d',`Sonidos`='%d',`Muteos`='%d',`Barras`='%d',`Alerta`='%d',`Velocimetro`='%d',`Interior`='%d',`MundoVirtual`='%d',`NivelArmero`='%d' WHERE `Username`='%e'", PLAYER_INFO[playerid][j_HEALTH], PLAYER_INFO[playerid][j_ARMOUR],PLAYER_INFO[playerid][pAdmin],PLAYER_INFO[playerid][pNivel],PLAYER_INFO[playerid][pDinero],PLAYER_INFO[playerid][pGPS],PLAYER_INFO[playerid][pRadio],PLAYER_INFO[playerid][pSexo],PLAYER_INFO[playerid][pNumero],PLAYER_INFO[playerid][pGuia],PLAYER_INFO[playerid][pSonidos],PLAYER_INFO[playerid][pMuteos],PLAYER_INFO[playerid][pBarras],PLAYER_INFO[playerid][pAlerta],PLAYER_INFO[playerid][pVelocimetro],PLAYER_INFO[playerid][pInterior],PLAYER_INFO[playerid][pMundoVirtual],PLAYER_INFO[playerid][pNivelArmero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoJail`='%d',Sanciones='%d', `posX`='%f', `posY`='%f', `posZ`='%f',`posA`='%f',`Agonizando`='%d',`Trabajo`='%d',`Faccion`='%d',`NivelLadron`='%d',`NivelMecanico`='%d',`ExpMecanico`='%d',`NivelTransportista`='%d',`ExpTransportista`='%d',`TipoCarcel`='%d',`SocioHP`='%d',`Hambre`='%d',`LicenciaVuelo`='%d' WHERE `Username`='%e'",PLAYER_INFO[playerid][pTiempoJail],PLAYER_INFO[playerid][sancionado],PLAYER_INFO[playerid][@X], PLAYER_INFO[playerid][@Y], PLAYER_INFO[playerid][@Z],PLAYER_INFO[playerid][@A], PLAYER_INFO[playerid][Agonizando],PLAYER_INFO[playerid][pTrabajo],PLAYER_INFO[playerid][pFaccion],PLAYER_INFO[playerid][pNivelLadron],PLAYER_INFO[playerid][pNivelMecanico],PLAYER_INFO[playerid][pExpMecanico],PLAYER_INFO[playerid][pNivelTransportista],PLAYER_INFO[playerid][pExpTransportista],PLAYER_INFO[playerid][pTipoCarcel],PLAYER_INFO[playerid][pSocioHP], PLAYER_INFO[playerid][pHambre], PLAYER_INFO[playerid][pLicenciaVuelo],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Fecha_Ban`='%e',`Banco`='%d',`Moneda`='%d',`EnCasa`='%d',`EnRopero`='%d',`EnGarage`='%d',`TiempoPD`='%d', `arrestado`='%d', `horasjugadas`='%d',`ExpArmero`='%d',`Materiales`='%d',`NivelCamionero`='%d',`NivelBasurero`='%d',`ExpBasurero`='%d' WHERE `Username`='%e'",baneo,PLAYER_INFO[playerid][pBanco],PLAYER_INFO[playerid][Moneda],PLAYER_INFO[playerid][EnCasa],PLAYER_INFO[playerid][EnRopero],PLAYER_INFO[playerid][EnGarage],PLAYER_INFO[playerid][TiempoPD], PLAYER_INFO[playerid][arrestado], PLAYER_INFO[playerid][horasjugadas],PLAYER_INFO[playerid][pExpArmero],PLAYER_INFO[playerid][pMateriales],PLAYER_INFO[playerid][pNivelCamionero],PLAYER_INFO[playerid][pNivelBasurero],PLAYER_INFO[playerid][pExpBasurero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Cargos`='%d',`SkinTrabajo`='%d',`Duty`='%d',`WP0`='%d',`WP1`='%d',`WP2`='%d',`WP3`='%d',`WP4`='%d',`WP5`='%d',`WP6`='%d',`WP7`='%d',`WP8`='%d',`WP9`='%d',`WP10`='%d',`WP11`='%d',`WP12`='%d',`Experiencia`='%d',`TiempoCarcelS`='%d' WHERE `Username`='%e'", PLAYER_INFO[playerid][pCargos],PLAYER_INFO[playerid][pModelo],PLAYER_INFO[playerid][pDuty],PLAYER_INFO[playerid][j_ARMAS][0],PLAYER_INFO[playerid][j_ARMAS][1],PLAYER_INFO[playerid][j_ARMAS][2],PLAYER_INFO[playerid][j_ARMAS][3],PLAYER_INFO[playerid][j_ARMAS][4],PLAYER_INFO[playerid][j_ARMAS][5],PLAYER_INFO[playerid][j_ARMAS][6],PLAYER_INFO[playerid][j_ARMAS][7],PLAYER_INFO[playerid][j_ARMAS][8],PLAYER_INFO[playerid][j_ARMAS][9],PLAYER_INFO[playerid][j_ARMAS][10],PLAYER_INFO[playerid][j_ARMAS][11],PLAYER_INFO[playerid][j_ARMAS][12],PLAYER_INFO[playerid][pExperiencia],PLAYER_INFO[playerid][pTiempoCarcel],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Conexion`='%e',`Sed`='%d',`RopaBasu`='%d',`RopaMedi`='%d',`RopaMeca`='%d',`Martillo`='%d',`Destornillador`='%d',`Barreta`='%d',`Balde`='%d',`Patines`='%d' WHERE `Username`='%e'", PLAYER_INFO[playerid][jConexion], PLAYER_INFO[playerid][pSed], RopaBasu[playerid], RopaMedi[playerid], RopaMeca[playerid], PLAYER_INFO[playerid][pMartillo], PLAYER_INFO[playerid][pDestornillador], PLAYER_INFO[playerid][pBarreta], PLAYER_INFO[playerid][pBalde], PLAYER_INFO[playerid][pPatines],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Afinidad1`='%d',`Afinidad2`='%d',`Afinidad3`='%d',`Afinidad4`='%d',`Afinidad5`='%d',`Afinidad6`='%d' WHERE `Username`='%e'",PLAYER_INFO[playerid][pAfinidad1],PLAYER_INFO[playerid][pAfinidad2],PLAYER_INFO[playerid][pAfinidad3],PLAYER_INFO[playerid][pAfinidad4],PLAYER_INFO[playerid][pAfinidad5],PLAYER_INFO[playerid][pAfinidad6],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `ExpCamionero`='%d',`Agenda`='%d',`Cocaina`='%d',`Perico`='%d',`Heroina`='%d',`Preper`='%d',`Gino`='%d',`RootCoins`='%d',`Crack`='%d',`Medicamentos`='%d',`Marihuana`='%d',`Trabajo2`='%d',`VIP`='%d',`Rango`='%d',`Repuestos`='%d',`TiempoDuda`='%d',`TiempoAnuncio`='%d' WHERE `Username`='%e'",PLAYER_INFO[playerid][pExpCamionero],PLAYER_INFO[playerid][pAgenda],PLAYER_INFO[playerid][pCocaina],PLAYER_INFO[playerid][pPerico],PLAYER_INFO[playerid][pHeroina],PLAYER_INFO[playerid][pPreper],PLAYER_INFO[playerid][pGino],PLAYER_INFO[playerid][pRootCoins],PLAYER_INFO[playerid][pCrack],PLAYER_INFO[playerid][pRemedios],PLAYER_INFO[playerid][pMarihuana],PLAYER_INFO[playerid][pTrabajo2],PLAYER_INFO[playerid][pVIP],PLAYER_INFO[playerid][pRango],PLAYER_INFO[playerid][Repuestos],PLAYER_TIMES[playerid][TiempoDuda],PLAYER_TIMES[playerid][TiempoAnuncio] - gettime(),PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `TiempoOffline`='%d', `BaneosHechos`='%d',`BaneosDia`='%d', `XE`='%f',`YE`='%f',`ZE`='%f',`NivelMedico`='%d',`ExpMedico`='%d' WHERE `Username`='%e'",gettime(), PLAYER_INFO[playerid][BaneosD],PLAYER_INFO[playerid][BaneosD2],PLAYER_INFO[playerid][jPosE_x], PLAYER_INFO[playerid][jPosE_y], PLAYER_INFO[playerid][jPosE_z],PLAYER_INFO[playerid][pNivelMedico],PLAYER_INFO[playerid][pExpMedico],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Skin`='%d',`Estacionado1`='%d',`Estacionado2`='%d',`Estacionado3`='%d',`Estacionado4`='%d' WHERE `Username`='%e'", PLAYER_INFO[playerid][pRopa], PLAYER_INFO[playerid][vEstacionado1],PLAYER_INFO[playerid][vEstacionado2],PLAYER_INFO[playerid][vEstacionado3],PLAYER_INFO[playerid][vEstacionado4],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET ExpLadron = '%d', EntradaX = '%f', EntradaY = '%f', EntradaZ = '%f', `NivelTrailero`='%d',`ExpTrailero`='%d' WHERE `Username`='%e'",PLAYER_INFO[playerid][pExpLadron],PLAYER_INFO[playerid][jPosE_x],PLAYER_INFO[playerid][jPosE_y],PLAYER_INFO[playerid][jPosE_z], PLAYER_INFO[playerid][pNivelTrailero],PLAYER_INFO[playerid][pExpTrailero],PLAYER_INFO[playerid][Nickname]);
		mysql_query(handle_db, Query);

	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerEnterRaceCheckpoint) PlayerID: %d", playerid);
	#endif
	if(Cosechas[playerid][RutaCosecha] != 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new autoid = GetPlayerVehicleID(playerid);
			if(COSECHA(autoid))
			{
				if(Cosechas[playerid][ProgresoCosecha] > 19 && Cosechas[playerid][RutaCosecha] == 1 && Cosechas[playerid][CosechaLugar] == 1) return PagarCosechador(playerid);
				if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 2 && Cosechas[playerid][CosechaLugar] == 1) return PagarCosechador(playerid);
				if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 1 && Cosechas[playerid][CosechaLugar] == 2) return PagarCosechador(playerid);
				if(Cosechas[playerid][ProgresoCosecha] > 14 && Cosechas[playerid][RutaCosecha] == 2 && Cosechas[playerid][CosechaLugar] == 2) return PagarCosechador(playerid);
				Cosechas[playerid][ProgresoCosecha] ++;
				RutaCosechador(playerid);
				SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],Cosechas[playerid][ProgresoCosecha]);
				UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
			}
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerEnterCheckpoint) PlayerID: %d", playerid);
	#endif
	new autoid = GetPlayerVehicleID(playerid);
	// Localizar
	if(Localizando[playerid] == 1)
	{
		SendClientMessage(playerid, -1,"Si no encuentras tu vehículo, quiere decir que te lo han robado.");
		SendClientMessage(playerid, -1,"Por favor, llama a la policía para que lo recuperen.");
		DisablePlayerCheckpoint(playerid);
		Localizando[playerid] = 0;
		return 1;
	}
	// Cerrar GPS
	if(TieneGPSActivo[playerid] == 1)
	{
		TieneGPSActivo[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	if(CheckpointGaso[playerid][0])
	{
	    new ruta = 1;
	    TimerDescargarTrailer[playerid] = 10;
		SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
		CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][1])
	{
	    new ruta = 2;
	    TimerDescargarTrailer[playerid] = 10;
		SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
		CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][2])
	{
	    new ruta = 3;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][3])
	{
	    new ruta = 4;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][4])
	{
	    new ruta = 5;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][5])
	{
	    new ruta = 6;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointGaso[playerid][6])
	{
	    new ruta = 7;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTraileroGaso", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	if(CheckpointTrailer[playerid][0])
	{
        new ruta = 1;
        TimerDescargarTrailer[playerid] = 10;
	    SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][1])
	{
        new ruta = 2;
        TimerDescargarTrailer[playerid] = 10;
		SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
		CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][2])
	{
        new ruta = 3;
        TimerDescargarTrailer[playerid] = 10;
	    SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][3])
	{
	    new ruta = 4;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][4])
	{
	    new ruta = 5;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][5])
 	{
 		new ruta = 6;
 		TimerDescargarTrailer[playerid] = 10;
		SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
		CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][6])
	{
	    new ruta = 7;
	    TimerDescargarTrailer[playerid] = 10;
        SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	else if(CheckpointTrailer[playerid][7])
	{
        new ruta = 8;
        TimerDescargarTrailer[playerid] = 10;
	    SetTimerEx("PagoTrailero", 9000, false, "dd", playerid, ruta);
        CongelarPlayerID(playerid);
	}
	for(new i = 0; i < sizeof CP_Fabricas_Barril; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, CP_Fabricas_Barril[i][0], CP_Fabricas_Barril[i][1], CP_Fabricas_Barril[i][2]))
        {
		    for(new ID = 1; ID < MAX_FABRICAS; ID++)
		    {
          		if(!FABRICAS_INFO[ID][f_VALID]) continue;
		        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
		        if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_NONE) continue;
                if(GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][0])
				{
	          		if(i == FABRICAS_INFO[ID][f_ID])
			        {
			            FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_QUIMICOS;
			            SendClientMessage(playerid, -1, "Carga los {f21111}tanques{FFFFFF} en la camioneta y regrésalos a la {ff3e3e}fábrica");
			            Streamer_Update(playerid);
						DisablePlayerCheckpoint(playerid);
					}
				}
			}
		}
	}
	for(new i = 0; i < sizeof CP_Fabricas_Ventas; i++)
    {
		for(new ID = 1; ID < MAX_FABRICAS; ID++)
	 	{
	 	    if(!FABRICAS_INFO[ID][f_VALID]) continue;
	        if(PLAYER_INFO[playerid][pFaccion] != FABRICAS_INFO[ID][f_FACCION_ID]) continue;
	        if(FABRICAS_INFO[ID][f_ACTIVIDAD] == ACTIVIDAD_NONE) continue;

            if(IsPlayerInRangeOfPoint(playerid, 5.0, CP_Fabricas_Ventas[i][0], CP_Fabricas_Ventas[i][1], CP_Fabricas_Ventas[i][2]))
        	{
        	    if(FABRICAS_INFO[ID][f_VENTA_ID] != i) continue;
		        if(GetPlayerVehicleID(playerid) == FABRICAS_INFO[ID][f_VEHICLES][0])
				{
					if(FABRICAS_INFO[ID][f_VEHICLE_CAJAS] < 5)
					{
					    FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
						SendClientMessage(playerid,-1,"Necesitas tener todas las cajas de metanfetamina en la camioneta para poder venderlas.");
					    DisablePlayerCheckpoint(playerid);
					    return 1;
					}
					new total = 50000 + random(169), Float:Pos[3];
					GetVehiclePos(FABRICAS_INFO[ID][f_VEHICLES][0], Pos[0],Pos[1],Pos[2]);
					foreach(new x : Player)
					{
						if(IsPlayerInRangeOfPoint(x, 50.0, Pos[0],Pos[1],Pos[2]))
						{
							if(PLAYER_INFO[x][pFaccion] == FABRICAS_INFO[ID][f_FACCION_ID])
							{
								DarDinero(x, total);
								SendClientMessageEx(x, -1,"Metanfetamina transportada con éxito. Recibes {f21111}$%d{FFFFFF} por haber participado.",total);
							}
						}
					}
					FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
					FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
             		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;

	          		for(new slot = 0; slot < MAX_OBJETOS; slot++)
	          		{
	          			VEHICLE_OBJECTS[ FABRICAS_INFO[ID][f_VEHICLES][0] ][slot][vobject_ATTACHED] = false;
						UpdateVehicleAttachedObject(FABRICAS_INFO[ID][f_VEHICLES][0], slot);
					}
					FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
					FABRICAS_INFO[ID][f_VENTA_ID] = 0;
					DarDineroFabrica(ID, 1500000);
					MandarMensajeFabrica(ID ,"Tu fábrica recibió {f21111}$1.500.000{FFFFFF} por la venta de la metanfetamina.");
					DisablePlayerCheckpoint(playerid);
					return 1;
				}
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1908.3149,935.6036,10.9811))   return SetPlayerCheckpoint(playerid, 1999.6644,933.4708,10.7981, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1999.6644,933.4708,10.7981))   return SetPlayerCheckpoint(playerid, 2010.7413,972.2186,10.7965, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,2010.7413,972.2186,10.7965))   return SetPlayerCheckpoint(playerid, 2046.9509,856.2018,6.8548, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,2046.9509,856.2018,6.8548 ))   return SetPlayerCheckpoint(playerid, 1799.7394,846.0538,10.7795, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1799.7394,846.0538,10.7795))   return SetPlayerCheckpoint(playerid, 1708.5696,465.3290,30.7572, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1708.5696,465.3290,30.7572))   return SetPlayerCheckpoint(playerid, 1616.4937,144.9171,36.0788, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1616.4937,144.9171,36.0788))   return SetPlayerCheckpoint(playerid, 1667.7742,-795.5954,55.8881, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1667.7742,-795.5954,55.8881))  return SetPlayerCheckpoint(playerid, 1388.7821,-940.4939,34.2972, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1388.7821,-940.4939,34.2972))  return SetPlayerCheckpoint(playerid, 1262.7042,-937.6155,42.5248, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1262.7042,-937.6155,42.5248))  return SetPlayerCheckpoint(playerid, 1263.4191,-1035.9680,32.0161, 10.0);
	if(IsPlayerInRangeOfPoint(playerid, 10.0,1263.4191,-1035.9680,32.0161)) return SetPlayerCheckpoint(playerid, 1162.8492,-1018.5044,33.9312, 10.0);
	// Pruebas Academia LV
	if(EnPrueba[playerid])
	{

		if(IsPlayerInRangeOfPoint(playerid, 3.0,635.3787,-222.2007,1276.7941))
		{

			PruebaOnline[playerid] = true;
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 608.2529,-221.9856,1276.7941, 3.0);
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 3.0,608.2529,-221.9856,1276.7941)) return SetPlayerCheckpoint(playerid, 593.6731,-221.9529,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,593.6731,-221.9529,1276.7941)) return SetPlayerCheckpoint(playerid, 593.2269,-261.0184,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,593.2269,-261.0184,1276.7941)) return SetPlayerCheckpoint(playerid, 587.6206,-248.2012,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,587.6206,-248.2012,1276.7941)) return SetPlayerCheckpoint(playerid, 583.4668,-237.1445,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,583.4668,-237.1445,1276.7941)) return SetPlayerCheckpoint(playerid, 552.4970,-235.8692,1280.2028, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,552.4970,-235.8692,1280.2028)) return SetPlayerCheckpoint(playerid, 552.4763,-266.4409,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,552.4763,-266.4409,1276.7941)) return SetPlayerCheckpoint(playerid, 598.8328,-266.1846,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,598.8328,-266.1846,1276.7941)) return SetPlayerCheckpoint(playerid, 636.0906,-230.4454,1276.7941, 3.0);
		if(IsPlayerInRangeOfPoint(playerid, 3.0,636.0906,-230.4454,1276.7941))
		{
			new tempo[160];
			DisablePlayerCheckpoint(playerid);
			if(PLAYER_TIMES[playerid][TiempoAcademia] < 60)		format(tempo, 160, "{f21111}%s{FFFFFF} terminó la prueba fisica en {f21111}%d segundos", PLAYER_INFO[playerid][Nickname], PLAYER_TIMES[playerid][TiempoAcademia]);
			else if(PLAYER_TIMES[playerid][TiempoAcademia] >= 60)	format(tempo, 160, "{f21111}%s{FFFFFF} terminó la prueba fisica en {f21111}%d minutos con %d segundos", PLAYER_INFO[playerid][Nickname], PLAYER_TIMES[playerid][TiempoAcademia]/60, PLAYER_TIMES[playerid][TiempoAcademia]%(60));
			foreach(new i : Player)
			{
				if(EnAcademia(i))
				{
					SendClientMessage(i, -1, tempo);
				}
			}
			PLAYER_TIMES[playerid][TiempoAcademia] = 0;
			PruebaOnline[playerid] = false;
			EnPrueba[playerid] = false;
			return 1;
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1526.0902,-1017.4032,23.5809))
	{

		if(Encargo[1][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 1 && Encargo[1][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[1], "~g~Lleva~w~ a tu colega al punto marcado.");
			TextDrawSetString(MisionCriminal[1], "Espera en el ~g~vehiculo~w~ de tu colega.");
			SendClientMessage(Encargo[1][IdCriminal],-1,"Espera en el vehiculo de tu colega para que te acerque.");
			SendClientMessage(Encargo[1][IdColega],-1,"Lleva a tu colega al punto marcado.");
			Encargo[1][SegundosMision] = 30;
			SetPlayerCheckpoint(playerid,1466.6655,-1031.2390,23.2810, 3.0);
			Encargo[1][Actor1] = CreateActor(148,1469.3304,-1013.2700,26.8438,127.7706);
			Encargo[1][Objetivo] = CreateActor(186,1465.1709,-1013.5018,26.8438,175.3351);
			SetActorHealth(Encargo[1][Actor1], 100.0);
			SetActorHealth(Encargo[1][Objetivo], 100.0);
			SetActorInvulnerable(Encargo[1][Actor1], false);
			SetActorInvulnerable(Encargo[1][Objetivo], false);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1466.6655,-1031.2390,23.2810))
	{

		if(Encargo[1][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 1 && Encargo[1][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[1], "~g~Espera~w~ mientras tu colega realiza el encargo.");
			TextDrawSetString(MisionCriminal[1], "~r~Asesina ~w~al objetivo.");
			SendClientMessage(Encargo[1][IdCriminal],-1,"Asesina al objetivo.");
			SendClientMessage(Encargo[1][IdColega],-1,"Espera mientras tu colega realiza el encargo.");
			Encargo[1][SegundosMision] = 60;
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1607.3558,-1703.0073,13.2540))
	{

		if(Encargo[2][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 2 && Encargo[2][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[2], "~g~Lleva~w~ a tu colega al punto marcado.");
			TextDrawSetString(MisionCriminal[2], "Espera en el ~g~vehiculo~w~ de tu colega.");
			SendClientMessage(Encargo[2][IdCriminal],-1,"Espera en el vehiculo de tu colega para que te acerque.");
			SendClientMessage(Encargo[2][IdColega],-1,"Lleva a tu colega al punto marcado.");
			Encargo[2][SegundosMision] = 30;
			SetPlayerCheckpoint(playerid,1530.5500,-1673.8456,13.0874, 3.0);
			Encargo[2][Actor1] = CreateActor(161,1542.3446,-1666.4531,13.5543,195.9680);
			Encargo[2][Objetivo] = CreateActor(265,1544.9623,-1673.3115,13.5594,92.1910);
			SetActorHealth(Encargo[2][Actor1], 100.0);
			SetActorHealth(Encargo[2][Objetivo], 100.0);
			SetActorInvulnerable(Encargo[2][Actor1], false);
			SetActorInvulnerable(Encargo[2][Objetivo], false);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1530.5500,-1673.8456,13.0874))
	{

		if(Encargo[2][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 2 && Encargo[2][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[2], "~g~Espera~w~ mientras tu colega realiza el encargo.");
			TextDrawSetString(MisionCriminal[2], "~r~Asesina ~w~al objetivo.");
			SendClientMessage(Encargo[2][IdCriminal],-1,"Asesina al objetivo.");
			SendClientMessage(Encargo[2][IdColega],-1,"Espera mientras tu colega realiza el encargo.");
			Encargo[2][SegundosMision] = 60;
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1374.1508,2695.1580,10.5291))
	{

		if(Encargo[3][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 3 && Encargo[3][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[3], "~g~Lleva~w~ a tu colega al punto marcado.");
			TextDrawSetString(MisionCriminal[3], "Espera en el ~g~vehiculo~w~ de tu colega.");
			SendClientMessage(Encargo[3][IdCriminal],-1,"Espera en el vehiculo de tu colega para que te acerque.");
			SendClientMessage(Encargo[3][IdColega],-1,"Lleva a tu colega al punto marcado.");
			Encargo[3][SegundosMision] = 30;
			SetPlayerCheckpoint(playerid,1433.7010,2671.2415,10.6719, 3.0);
			Encargo[3][Actor1] = CreateActor(31,1429.2253,2656.9607,11.3926,180.7949);
			Encargo[3][Actor2] = CreateActor(39,1434.0170,2657.3088,11.3926,112.5413);
			Encargo[3][Objetivo] = CreateActor(7,1429.5349,2655.2700,11.3926,306.6725);
			SetActorHealth(Encargo[3][Actor1], 100.0);
			SetActorHealth(Encargo[3][Actor2], 100.0);
			SetActorHealth(Encargo[3][Objetivo], 100.0);
			SetActorInvulnerable(Encargo[3][Actor1], false);
			SetActorInvulnerable(Encargo[3][Objetivo], false);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1433.7010,2671.2415,10.6719))
	{

		if(Encargo[3][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 3 && Encargo[3][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[3], "~g~Espera~w~ mientras tu colega realiza el encargo.");
			TextDrawSetString(MisionCriminal[3], "~r~Asesina ~w~al objetivo.");
			SendClientMessage(Encargo[3][IdCriminal],-1,"Asesina al objetivo.");
			SendClientMessage(Encargo[3][IdColega],-1,"Espera mientras tu colega realiza el encargo.");
			Encargo[3][SegundosMision] = 60;
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1218.0623,-874.5742,42.6080))
	{

		if(Encargo[4][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 4 && Encargo[4][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[4], "~g~Lleva~w~ a tu colega al punto marcado.");
			TextDrawSetString(MisionCriminal[4], "Espera en el ~g~vehiculo~w~ de tu colega.");
			SendClientMessage(Encargo[4][IdCriminal],-1,"Espera en el vehiculo de tu colega para que te acerque.");
			SendClientMessage(Encargo[4][IdColega],-1,"Lleva a tu colega al punto marcado.");
			Encargo[4][SegundosMision] = 30;
			SetPlayerCheckpoint(playerid,1175.5085,-905.2410,43.0075, 3.0);
			Encargo[4][Actor1] = CreateActor(11,1185.1980,-909.3603,43.2700,194.8558);
			ApplyActorAnimation(Encargo[4][Actor1], "COP_AMBIENT", "Coplook_loop", 4.000000, 0, 0, 0, 1, 0);
			Encargo[4][Actor2] = CreateActor(250,1183.5961,-912.2095,43.2882,287.0236);
			ApplyActorAnimation(Encargo[4][Actor2], "PED", "IDLE_chat", 4.000000, 0, 0, 0, 1, 0);
			Encargo[4][Objetivo] = CreateActor(205,1186.4438,-911.4187,43.2618,100.4657);
			ApplyActorAnimation(Encargo[4][Objetivo], "PED", "IDLE_chat", 4.000000, 0, 0, 0, 1, 0);
			SetActorHealth(Encargo[4][Actor1], 100.0);
			SetActorHealth(Encargo[4][Actor2], 100.0);
			SetActorHealth(Encargo[4][Objetivo], 100.0);
			SetActorInvulnerable(Encargo[4][Actor1], false);
			SetActorInvulnerable(Encargo[4][Objetivo], false);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1175.5085,-905.2410,43.0075))
	{

		if(Encargo[4][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 4 && Encargo[4][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[4], "~g~Espera~w~ mientras tu colega realiza el encargo.");
			TextDrawSetString(MisionCriminal[4], "~r~Asesina ~w~al objetivo.");
			SendClientMessage(Encargo[4][IdCriminal],-1,"Asesina al objetivo.");
			SendClientMessage(Encargo[4][IdColega],-1,"Espera mientras tu colega realiza el encargo.");
			Encargo[4][SegundosMision] = 60;
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,2337.8752,-1366.0424,24.0111))
	{

		if(Encargo[5][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 5 && Encargo[5][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[5], "~g~Lleva~w~ a tu colega al punto marcado.");
			TextDrawSetString(MisionCriminal[5], "Espera en el ~g~vehiculo~w~ de tu colega.");
			SendClientMessage(Encargo[5][IdCriminal],-1,"Espera en el vehiculo de tu colega para que te acerque.");
			SendClientMessage(Encargo[5][IdColega],-1,"Lleva a tu colega al punto marcado.");
			Encargo[5][SegundosMision] = 30;
			SetPlayerCheckpoint(playerid,2368.6667,-1361.7528,23.8382, 3.0);
			Encargo[5][Actor1] = CreateActor(32,2353.2302,-1364.0353,24.3984,188.6589);
			Encargo[5][Actor2] = CreateActor(31,2353.2488,-1366.9259,24.3984,359.6988);
			Encargo[5][Objetivo] = CreateActor(29,2347.9490,-1351.1028,24.0177,177.7770);
			SetActorHealth(Encargo[5][Actor1], 100.0);
			SetActorHealth(Encargo[5][Actor2], 100.0);
			SetActorHealth(Encargo[5][Objetivo], 100.0);
			SetActorInvulnerable(Encargo[5][Actor1], false);
			SetActorInvulnerable(Encargo[5][Objetivo], false);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,2368.6667,-1361.7528,23.8382))
	{

		if(Encargo[5][Tiene9mm] == 0) return SendClientMessage(playerid, -1, "Necesitas una 9mm silenciada para continuar.");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas un vehículo para escapar");
		if(TieneEncargo[playerid] == 5 && Encargo[5][IdColega] == playerid)
		{

			TextDrawSetString(MisionColega[5], "~g~Espera~w~ mientras tu colega realiza el encargo.");
			TextDrawSetString(MisionCriminal[5], "~r~Asesina ~w~al objetivo.");
			SendClientMessage(Encargo[5][IdCriminal],-1,"Asesina al objetivo.");
			SendClientMessage(Encargo[5][IdColega],-1,"Espera mientras tu colega realiza el encargo.");
			Encargo[5][SegundosMision] = 60;
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0,-2157.8093,654.7702,51.9927))
	{

		if(TieneEncargo[playerid] > 0 && Encargo[TieneEncargo[playerid]][IdColega] == playerid)
		{

			DisablePlayerCheckpoint(playerid);
			FinMisionCriminal(TieneEncargo[playerid]);
		}
		return 1;
	}
	// Armero Piezas
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2160.7837,-2280.9233,13.3838))
	{

		new string[256];
		format(string, 256, "Armaste {FFFF04}%d {FFFFFF}piezas de armas, las cuales están listas parar crear armas.", PLAYER_INFO[playerid][piezas]/10);
		SendClientMessage(playerid, -1,string);
		PLAYER_INFO[playerid][pMateriales] += PLAYER_INFO[playerid][piezas]/10;
		PLAYER_INFO[playerid][piezas] = 0;
		Mats1[playerid] = 0, Mats2[playerid] = 0, Mats3[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1191.43,-1326.39,13.40) || IsPlayerInRangeOfPoint(playerid, 5.0, 2030.36,-1419.79,16.99)|| IsPlayerInRangeOfPoint(playerid, 5.0, 1605.58,1830.17,10.82)|| IsPlayerInRangeOfPoint(playerid, 5.0, -2662.87,631.44,14.45))
	{

		foreach(new i : Player)
		{
			if(AMBU(autoid))
			{
				if(IsPlayerInVehicle(i,autoid) && LlamadaMedicos[i] == 1)
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(i,X,Y,Z);
					if(IsPlayerInRangeOfPoint(playerid, 1.0,X , Y , Z))
					{
						if(Paciente[playerid] == i) Paciente[playerid] = INVALID_PLAYER_ID;
						if(Paciente2[playerid] == i) Paciente2[playerid] = INVALID_PLAYER_ID;
					}
					TextDrawHideForPlayer(i, Sangre);
					SendClientMessage(playerid, -1, "Ganaste {f21111}$800{FFFFFF} por salvar una vida.");
					SendClientMessage(i, -1, "Se te desconto {FF3300}$800{FFFFFF} por el servicio médico.");
					ExpMedico(playerid);
					new string99[128];
					format(string99,128,"%s (ID: %d | Nivel: %d) recibe $800 por salvarle la vida a %s (ID:%d - Nivel:%d - %dhs)",PLAYER_INFO[playerid][Nickname],playerid,PLAYER_INFO[playerid][pNivel],PLAYER_INFO[i][Nickname],i,PLAYER_INFO[i][pNivel],PLAYER_INFO[i][horasjugadas]);
					MensajeAdmin(COLOR_CHEAT,string99, 3);
					QuitarDinero(i, 800);
					DarDinero(playerid, 800);
					RemovePlayerFromVehicle(i);
					PacienteAmbu[i] = 0;
					LlamadaMedicos[i] = 0;
					MedicoCP2[playerid] = 0;
					MedicoReanimo[i] = INVALID_PLAYER_ID;
					TogglePlayerControllable(i, 1);
					SetPVarInt(i, "IsFrozen", 1);
					PLAYER_INFO[i][Agonizando] = 0;
					DisablePlayerCheckpoint(playerid);
					return 1;
				}
			}
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2880.5110,1751.4082,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -2473.1599,2303.7029,4.9844) || IsPlayerInRangeOfPoint(playerid, 7.0, -2458.4258,2292.2588,4.9844) || IsPlayerInRangeOfPoint(playerid, 7.0, 305.6055,887.2976,20.4063) || IsPlayerInRangeOfPoint(playerid, 7.0, 208.3321,-28.7516,1.5781) || IsPlayerInRangeOfPoint(playerid, 7.0, 1023.9153,2110.9341,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -1741.5210,1425.7820,7.1875) || IsPlayerInRangeOfPoint(playerid, 7.0, -2003.7317,-2413.3181,30.6250) || IsPlayerInRangeOfPoint(playerid, 7.0, 684.1342,896.0093,-39.7265) || IsPlayerInRangeOfPoint(playerid, 7.0, 586.4625,856.0408,-42.9917) || IsPlayerInRangeOfPoint(playerid, 7.0, 1335.5570,286.8253,19.5615)) //Rocas LV
    {
        if(!IsPlayerInAnyVehicle(playerid)) return 1;
        if(tviaje[playerid] == 2) return 1;
        if(DFT(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SetTimerEx("RutraTransportista",1500,false,"d",playerid);
    }
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 1607.8633,1718.3813,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 2609.3381,-2202.1799,13.5469) || IsPlayerInRangeOfPoint(playerid, 7.0, 1905.8856,958.5278,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 2316.5032,1733.3368,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, 789.2708,2028.4414,6.7109) || IsPlayerInRangeOfPoint(playerid, 7.0, 2415.1252,1893.7064,6.0156) || IsPlayerInRangeOfPoint(playerid, 7.0, 2811.3918,1654.1230,10.8203) || IsPlayerInRangeOfPoint(playerid, 7.0, -1733.7360,184.4388,3.5547) || IsPlayerInRangeOfPoint(playerid, 7.0, -267.1364,-2151.0940,28.8347) || IsPlayerInRangeOfPoint(playerid, 7.0, -2097.1208,208.2063,35.3177) || IsPlayerInRangeOfPoint(playerid, 7.0, 1251.0417,-1258.1145,13.1514) || IsPlayerInRangeOfPoint(playerid, 7.0, 1048.7633,2111.3118,10.8203))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(DFT(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(tviaje[playerid] == 2)
				{
					new Paga,vip_price;
					switch(PLAYER_INFO[playerid][pNivelTransportista])
					{
						case 1: { Paga = 4500; }
						case 2: { Paga = 6700; }
						case 3: { Paga = 8900; }
						case 4: { Paga = 10000; }
						case 5: { Paga = 11500; }
						case 6: { Paga = 13700; }
					}
					new string[128];
					vip_price = 0;
					if(PLAYER_INFO[playerid][pVIP] == 0) vip_price = 0;
                    if(PLAYER_INFO[playerid][pVIP] == 1) vip_price = 150;
                    if(PLAYER_INFO[playerid][pVIP] == 2) vip_price = 300;
                    if(PLAYER_INFO[playerid][pVIP] == 3) vip_price = 500;
					new cantidad_final = Paga + vip_price;
					format(string,sizeof(string),"{f21111}¡Buen trabajo!{FFFFFF} Tus ganancias son {f21111}$%d",cantidad_final);
					SendClientMessage(playerid,-1,string);
					if(IsValidDynamicObject(Transportistas[playerid][Objeto1])) DestroyDynamicObject(Transportistas[playerid][Objeto1]);
					if(IsValidDynamicObject(Transportistas[playerid][Objeto2])) DestroyDynamicObject(Transportistas[playerid][Objeto2]);
					if(IsValidDynamicObject(Transportistas[playerid][Objeto3])) DestroyDynamicObject(Transportistas[playerid][Objeto3]);
					tviaje[playerid] = 0;
					Transportistas[playerid][Ruta] = 0;
					DisablePlayerCheckpoint(playerid);
					ExpTrans(playerid);
					if(RoboTienda[playerid] == 0) DarDinero(playerid, cantidad_final);
					return 1;
				}
			}
		}
	}
	// Cargando camion (Camionero)
	if(IsPlayerInRangeOfPoint(playerid, 7.0, -2.1931,-278.9248,5.4297))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Necesitas necesitas estar en un camión.");
		if(CAMION(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new string[350];
			CargandoC[playerid] = 1;
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 0);
			DisablePlayerCheckpoint(playerid);
			switch(PLAYER_INFO[playerid][pNivelCamionero])
			{
				case 1:	format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$1250{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$1250{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$1250{FFFFFF} + {f21111}4{FFFFFF} medicamentos + {FF3300}2g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$1250{FFFFFF} + {FF3300}2 piezas de armas{FFFFFF})");
				case 2:	format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$3500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$1500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$1500{FFFFFF} + {f21111}6{FFFFFF} medicamentos + {FF3300}3g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$1500{FFFFFF} + {FF3300}5 piezas de armas{FFFFFF})");
				case 3: format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$4500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$1750{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$1750{FFFFFF} + {f21111}8{FFFFFF} medicamentos + {FF3300}4g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$1750{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
				case 4: format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$5500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$2000{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$2000{FFFFFF} + {f21111}10{FFFFFF} medicamentos + {FF3300}5g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$2000{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
				case 5: format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$6500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$2250{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$2250{FFFFFF} + {f21111}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
				case 6: format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$7500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$2500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$2500{FFFFFF} + {f21111}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
				default: format(string, sizeof(string), "{f21111}Productos 24/7 {FFFFFF}(Ganancias {f21111}$7500{FFFFFF}) \n{f21111}Ropa {FFFFFF}(Ganancias {f21111}$2500{FFFFFF})\n{FF3300}Drogas {FFFFFF}(Ganancias {f21111}$2500{FFFFFF} + {f21111}12{FFFFFF} medicamentos + {FF3300}6g de Crack)\n{FF3300}Armas {FFFFFF}(Ganancias {f21111}$2500{FFFFFF} + {FF3300}7 piezas de armas{FFFFFF})");
			}
			ShowPlayerDialog(playerid, CAMIOND,DIALOG_STYLE_LIST, "¿Qué deseas transportar?", string, "Cargar","Salir");
			SendClientMessage(playerid, -1, "Seleccionas lo que deseas cargar.");
			return 1;
		}
		else return SendClientMessage(playerid, -1, "Necesitas necesitas estar en un camión.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	// Descargando camion (Camionero)
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 1832.3918,-1832.4200,13.1546) || IsPlayerInRangeOfPoint(playerid, 7.0, 1338.6766,-912.8005,35.6672))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			CongelarPlayerID(playerid);
			DisablePlayerCheckpoint(playerid);
			AbrirPuertasCamionero(playerid);
			TimerDescargarCamion[playerid] = 5;
			SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
			return 1;
		}
	}
	// Recorridos Camionero
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 455.0953,-1502.9357,30.8655) || IsPlayerInRangeOfPoint(playerid, 7.0, 810.9319,-1391.0319,13.8416) || IsPlayerInRangeOfPoint(playerid, 7.0, 488.1939,-1277.0747,15.9604))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			CongelarPlayerID(playerid);
			DisablePlayerCheckpoint(playerid);
			AbrirPuertasCamionero(playerid);
			TimerDescargarCamion[playerid] = 5;
			SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
			return 1;
		}
	}
	// Recorridos Camionero 2
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 2169.3521,-2275.2957,13.1360) || IsPlayerInRangeOfPoint(playerid, 7.0, 2480.9316,-2115.3042,13.2740))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			CongelarPlayerID(playerid);
			DisablePlayerCheckpoint(playerid);
			AbrirPuertasCamionero(playerid);
			TimerDescargarCamion[playerid] = 5;
			SetTimerEx("DescargandoCamion",10000,false,"d",playerid);
			return 1;
		}
	}
	// Pago Camionero
	if(IsPlayerInRangeOfPoint(playerid, 7.0, -14.6952,-271.7053,5.4297))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		if(CAMION(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			Respawnear(vehicleid);
			DisablePlayerCheckpoint(playerid);
			Chofer[vehicleid] = INVALID_PLAYER_ID;
			CamionCargado[vehicleid] = 0;
			PLAYER_TEMP[playerid][pt_Camionero] = false;
			if(gettime() > TimerCamionero[playerid]) PagoCamionero(playerid, PLAYER_INFO[playerid][pNivelCamionero], Carga[playerid]);
			else
			{
				new numero = 600-(TimerCamionero[playerid] - gettime()), query[780];
				mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='Speed Hack (%d:1:%d)',`Banpor`='Anticheat' WHERE `Username`='%e'",numero, Carga[playerid],PLAYER_INFO[playerid][Nickname]);
				mysql_tquery(handle_db, query);
				KickAntiCheat(playerid, 0, 0, "Speed Hack");
			}
			TimerCamionero[playerid] = 0;
			Carga[playerid] = 0;
			return 1;
		}
	}
	// Basurero CP Inicio
	if(IsPlayerInRangeOfPoint(playerid, 5.0,-178.6163,-1618.1124,3.4908) && BASU(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		foreach(new i : Player)
		{

			if((PLAYER_INFO[i][pTrabajo] == T_Basurero || PLAYER_INFO[i][pTrabajo2] == T_Basurero) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleSeat(i) == 1)
			{

				if(RopaBasu[playerid] == 1 || PLAYER_INFO[playerid][pVIP] > 0)
				{

					if(BASU(GetPlayerVehicleID(i)) && GetPlayerVehicleID(i) == vehicleid && i != playerid)
					{

						Companero[i] = playerid;
						Companero[playerid] = i;
						PLAYER_TEMP[i][pt_RolBasurero] = 1;
						PLAYER_TEMP[playerid][pt_RolBasurero] = 2;
						SendClientMessage(playerid,-1,"Muy bien, continua el recorrido.");
						TimerBasurero[playerid] = gettime() + 270;
						TimerBasurero[i] = gettime() + 270;
						PBasura[playerid] = 1;
						PBasura[i] = 1;
						SetTimerEx("PrimerP",500,false,"d",playerid);
						DisablePlayerCheckpoint(playerid);
						return 1;
					}
				}
				else
				{

					SendClientMessage(playerid,-1,"{999966}Las cuentas comunes necesitan la vestimenta de basurero para trabajar.");
					SendClientMessage(playerid,-1,"{999966}Si quieres trabajar con cualquier ropa, necesitas una cuenta VIP.");
				}
			}
		}
		SendClientMessage(playerid,-1,"Necesitas un compañero basurero para trabajar.");
		return 1;
	}
	// Basurero CP Fin
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,-135.9441,-1564.9911,6.7356))
	{
		new Float:z_rot;
		GetVehicleZAngle(vehicleid, z_rot);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && BASU(vehicleid) && RecorridoBasu[playerid] != 0 && z_rot < 200)
		{
			Respawnear(GetPlayerVehicleID(playerid));
			DisablePlayerCheckpoint(Companero[playerid]);
			DisablePlayerCheckpoint(playerid);
			PBasura[Companero[playerid]] = 0;
			PBasura[playerid] = 0;
			if(gettime() > TimerBasurero[playerid])
			{
				PagoBasurero(playerid, PLAYER_INFO[playerid][pNivelBasurero], RecorridoBasu[playerid]);
				DarHabilidadBasurero(playerid, PLAYER_INFO[playerid][pNivelBasurero]);
			}
			else
			{
				new numero = 270-(TimerBasurero[playerid] - gettime()), query[520];
				mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Baneado`='1',`razon`='Speed Hack (%d:1:%d)',`Banpor`='Anticheat' WHERE `Username`='%e'",numero, RecorridoBasu[playerid],PLAYER_INFO[playerid][Nickname]);
				mysql_tquery(handle_db, query);
                KickAntiCheat(playerid, 0, 0, "Speed Hack");
			}
			RecorridoBasu[Companero[playerid]] = 0;
			RecorridoBasu[playerid] = 0;
			TimerBasurero[Companero[playerid]] = 0;
			TimerBasurero[playerid] = 0;
			Companero[Companero[playerid]] = -1;
			Companero[playerid] = -1;
		}
		else return SendClientMessage(playerid,-1,"Acomoda el camion por la parte posterior al momento de entregarlo.");
	}
	else if(procesarCheckpointsBasurero(playerid)) return 1;
	else return DisablePlayerCheckpoint(playerid);
	return 1;
}
public SinGasolina(playerid)
{
	AccionesRol(playerid,"intenta encender el motor de su vehículo pero no puede.", 20);
	SendClientMessage(playerid,-1,"El vehículo necesita combustible.");
}
public EncenderMotor(playerid)
{
	MensajeSinGasoEnviado[playerid] = 0;
	new autoid;
	autoid = GetPlayerVehicleID(playerid);
	if(VehicleFuel[autoid] == 0) return AccionesRol(playerid,"intenta encender el motor de su vehiculo pero no puede.", 20);
	if(averiado[autoid] != 0)
	{
		new Randoming;
		Randoming = random(3);
		switch(Randoming)
		{
			case 0:	return MotorMalogrado(playerid);
			case 1:	return MotorMalogrado(playerid);
			case 2:
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				AccionesRol(playerid,"encendio el motor de su vehiculo.", 20);
				GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autoid, 1, lights, alarm, doors, bonnet, boot, objective);
				YaEncendiendo[playerid] = 0;
				MotorAuto[autoid] = 1;
				SetTimerEx("ComprobarDanoMotor", 1000, 0, "d", playerid);
				return 1;
			}
		}
	}
	if(PLAYER_TIMES[playerid][TiempoVehiculo] - gettime() <= 0)
	{
		AccionesRol(playerid,"encendio el motor de su vehiculo.", 20);
		PlayerTextDrawSetString(playerid,TEXTO_VEHICULOS[playerid], "Motor ~g~Encendido");
		PlayerTextDrawShow(playerid, TEXTO_VEHICULOS[playerid]);
		defer OcultarTextdrawVeh[2000](playerid);
		GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autoid, 1, lights, alarm, doors, bonnet, boot, objective);
		YaEncendiendo[playerid] = 0;
		MotorAuto[autoid] = 1;
		SetTimerEx("ComprobarDanoMotor", 1000, 0, "d", playerid);
		PLAYER_TIMES[playerid][TiempoVehiculo] = gettime() + 3;
	}
	return 1;
}
public Estacionando(playerid)
{
	new autoid,Query[1200],Float:X,Float:Y,Float:Z,Float:z_A,Float:Health,interior,vw;
	interior = GetPlayerInterior(playerid);
	vw = GetPlayerVirtualWorld(playerid);
	autoid = GetPlayerVehicleID(playerid);
	GetVehicleHealth(autoid, Health);
	if(IsPlayerInAnyVehicle(playerid))
	if(autoid == autos[playerid])
	{
		if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehiculo esta muy dañado, arreglalo primero.");
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		GetVehiclePos(autoid, X,Y,Z);
		GetVehicleZAngle(autoid, z_A);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='%d',`O_VW`='%d' WHERE `Propietario`='%d' AND `Slot` = '1'",Float:X,Float:Y,Float:Z,Float:z_A,interior,vw,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][pOX] = X;
		PLAYER_INFO[playerid][pOY] = Y;
		PLAYER_INFO[playerid][pOZ] = Z;
		PLAYER_INFO[playerid][pOA] = z_A;
		PLAYER_INFO[playerid][vOinterior] = interior;
		PLAYER_INFO[playerid][vOvw] = vw;
		AccionesRol(playerid,"estacionó su vehículo.", 20);
		GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autoid, 0, lights, alarm, doors, bonnet, boot, objective);
		MotorAuto[autoid] = 0;
		TogglePlayerControllable(playerid, 1);
		SetPVarInt(playerid, "IsFrozen", 1);
		SetCameraBehindPlayer(playerid);
	}
	if(autoid == autos2[playerid])
	{

		if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehiculo esta muy dañado, arreglalo primero.");
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		GetVehiclePos(autoid, X,Y,Z);
		GetVehicleZAngle(autoid, z_A);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='%d',`O_VW`='%d' WHERE `Propietario`='%d' AND `Slot` = '2'",Float:X,Float:Y,Float:Z,Float:z_A,interior,vw,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][pOX2] = X;
		PLAYER_INFO[playerid][pOY2] = Y;
		PLAYER_INFO[playerid][pOZ2] = Z;
		PLAYER_INFO[playerid][pOA2] = z_A;
		PLAYER_INFO[playerid][v2Ointerior] = interior;
		PLAYER_INFO[playerid][v2Ovw] = vw;
		AccionesRol(playerid,"estacionó su vehículo.", 20);
		GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autoid, 0, lights, alarm, doors, bonnet, boot, objective);
		MotorAuto[autoid] = 0;
		TogglePlayerControllable(playerid, 1);
		SetPVarInt(playerid, "IsFrozen", 1);
		SetCameraBehindPlayer(playerid);
	}
	if(autoid == autos3[playerid])
	{

		if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehiculo esta muy dañado, arreglalo primero.");
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		GetVehiclePos(autoid, X,Y,Z);
		GetVehicleZAngle(autoid, z_A);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='%d',`O_VW`='%d' WHERE `Propietario`='%d' AND `Slot` = '3'",Float:X,Float:Y,Float:Z,Float:z_A,interior,vw,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][pOX3] = X;
		PLAYER_INFO[playerid][pOY3] = Y;
		PLAYER_INFO[playerid][pOZ3] = Z;
		PLAYER_INFO[playerid][pOA3] = z_A;
		PLAYER_INFO[playerid][v3Ointerior] = interior;
		PLAYER_INFO[playerid][v3Ovw] = vw;
		AccionesRol(playerid,"estacionó su vehículo.", 20);
		GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autoid, 0, lights, alarm, doors, bonnet, boot, objective);
		MotorAuto[autoid] = 0;
		TogglePlayerControllable(playerid, 1);
		SetPVarInt(playerid, "IsFrozen", 1);
		SetCameraBehindPlayer(playerid);
	}
	if(autoid == autos4[playerid])
	{

		if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehiculo esta muy dañado, arreglalo primero.");
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		GetVehiclePos(autoid, X,Y,Z);
		GetVehicleZAngle(autoid, z_A);
		mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `EstacionadoX`='%f',`EstacionadoY`='%f',`EstacionadoZ`='%f',`EstacionadoA`='%f',`O_Interior`='%d',`O_VW`='%d' WHERE `Propietario`='%d' AND `Slot` = '4'",Float:X,Float:Y,Float:Z,Float:z_A,interior,vw,PLAYER_INFO[playerid][pID]);
		mysql_tquery(handle_db, Query);
		PLAYER_INFO[playerid][pOX4] = X;
		PLAYER_INFO[playerid][pOY4] = Y;
		PLAYER_INFO[playerid][pOZ4] = Z;
		PLAYER_INFO[playerid][pOA4] = z_A;
		PLAYER_INFO[playerid][v4Ointerior] = interior;
		PLAYER_INFO[playerid][v4Ovw] = vw;
		AccionesRol(playerid,"estacionó su vehículo.", 20);
		GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(autoid, 0, lights, alarm, doors, bonnet, boot, objective);
		MotorAuto[autoid] = 0;
		TogglePlayerControllable(playerid, 1);
		SetPVarInt(playerid, "IsFrozen", 1);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
public ApagarMotor(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new carid;
		carid = GetPlayerVehicleID(playerid);
		AccionesRol(playerid,"detuvo el motor de su vehiculo.", 20);
		PlayerTextDrawSetString(playerid,TEXTO_VEHICULOS[playerid], "Motor ~r~apagado");
		PlayerTextDrawShow(playerid, TEXTO_VEHICULOS[playerid]);
		defer OcultarTextdrawVeh[2000](playerid);
		PLAYER_TIMES[playerid][TiempoVehiculo] = gettime() + 2;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid), 0, lights, alarm, doors, bonnet, boot, objective);
		MotorAuto[carid] = 0;
	}
	return 1;
}
public ComprobarDanoMotor(playerid)
{
	new Float:health;
	new veh = GetPlayerVehicleID(playerid);
	GetVehicleHealth(veh, health);
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(health <= 375.0)
		{
			SetVehicleHealth(veh, 375.0);
			GameTextForPlayer(playerid, "~r~MOTOR AVERIADO", 2500, 3);
			GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(veh, 0, lights, alarm, doors, bonnet, boot, objective);
			averiado[veh] = 1;
			MotorAuto[veh] = 0;
			return 1;
		}
	}
	return 1;
}
public ApareceHospital2(playerid)
{
	new Float:HospitalLS,Float:HospitalLS2,Float:HospitalLV,Float:HospitalSF;
	HospitalLS = GetPlayerDistanceFromPoint(playerid, 1191.43,-1326.39,13.40);
	HospitalLS2 = GetPlayerDistanceFromPoint(playerid, 2030.36,-1419.79,16.99);
	HospitalLV = GetPlayerDistanceFromPoint(playerid, 1605.58,1830.17,10.82);
	HospitalSF = GetPlayerDistanceFromPoint(playerid, -2662.87,631.44,14.45);
	MedicoCP2[playerid] = 1;
	if(HospitalLS < HospitalLS2 && HospitalLS < HospitalLV && HospitalLS < HospitalSF)
	{

		new rand = random(sizeof(HPCPos));
		SetPosEx(playerid, HPCPos[rand][0], HPCPos[rand][1], HPCPos[rand][2], HPCPos[rand][3], 0, 0,0);
	}
	else if(HospitalLS2 < HospitalLS && HospitalLS2 < HospitalLV && HospitalLS2 < HospitalSF)
	{

		new rand = random(sizeof(HPGPos));
		SetPosEx(playerid, HPGPos[rand][0], HPGPos[rand][1], HPGPos[rand][2], HPGPos[rand][3], 0, 0,0);
	}
	else if(HospitalLV < HospitalLS && HospitalLV < HospitalLS2 && HospitalLV < HospitalSF)
	{

		new rand = random(sizeof(HPLVPos));
		SetPosEx(playerid, HPLVPos[rand][0], HPLVPos[rand][1], HPLVPos[rand][2], HPLVPos[rand][3], 0, 0,0);
	}
	else if(HospitalSF < HospitalLS && HospitalSF < HospitalLS2 && HospitalSF < HospitalLV)
	{

		new rand = random(sizeof(HPSFPos));
		SetPosEx(playerid, HPSFPos[rand][0], HPSFPos[rand][1], HPSFPos[rand][2], HPSFPos[rand][3], 0, 0,0);
	}
	if(PLAYER_INFO[playerid][pSocioHP] > 0)
	{

		SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El costo de los servicios fue de {37db45}$400{FFBC00}.");
		QuitarDinero(playerid,400);
	}
	else if(PLAYER_INFO[playerid][pSocioHP] == 0)
	{

		SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El costo de los servicios fue de {37db45}$450{FFBC00}.");
		QuitarDinero(playerid,450);
	}
	else if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][mDuty] == 1)	SendClientMessage(playerid, 0xafafafFF, "{FFBC00}El gobierno de San Andreas pagó por tus servicios médicos.");
	TogglePlayerControllable(playerid,1);
	SetPVarInt(playerid, "IsFrozen", 1);
	SetCameraBehindPlayer(playerid);
	if(San[playerid] > 0)
	{

		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, playerid);
		SetPlayerPosEx(playerid, 346.870025,309.259033,999.155700);
	}
	PLAYER_TEMP[playerid][@pHospital] = 0;
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerExitVehicle) PlayerID: %d | VehicleID: %d", playerid, vehicleid);
	#endif
	PararEmisora(playerid);
	PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
    PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 3;
    
	if(Taxista[playerid] != INVALID_PLAYER_ID)
	{
	    if(Ficha[Taxista[playerid]] != 0)
	    {
			new string[128];
			TextDrawHideForPlayer(playerid,TAXIMET);
			PlayerTextDrawHide(playerid,TAXIMET2[Taxista[playerid]]);
			TextDrawHideForPlayer(playerid,TAXIMET3);
			TextDrawHideForPlayer(playerid,TAXIMET4);
			KillTimer(TM[playerid]);
			format(string,128,"Has pagado al conductor un total de {f21111}$%d",Monto[Taxista[playerid]]);
			SendClientMessage(playerid,-1,string);
			format(string,128,"%s Te ha pagado {f21111}$%d{FFFFFF} por el recorrido",PLAYER_INFO[playerid][Nickname],Monto[Taxista[playerid]]);
			SendClientMessage(Taxista[playerid],-1,string);
			Monto[Taxista[playerid]] = 0;
			Pasajero[Taxista[playerid]] = INVALID_PLAYER_ID;
			Taxista[playerid] = INVALID_PLAYER_ID;
		}
	}
	if(COSECHA(vehicleid) && Cosechas[playerid][CosechaLugar] == 0) SetTimerEx("RespawnearV",1000,false,"d",vehicleid);
	if(VehiculosInfo[vehicleid][vcomprable] == 1) SetTimerEx("RespawnearV",3000,false,"d",vehicleid);
	if(BajandoV[playerid] == 0) BajandoV[playerid] = 1;
	EnAuto[playerid] = INVALID_VEHICLE_ID;
	PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 2;
	return 1;
}
EnviarDuda2(playerid, duda[])
{
	new Query[560], string[264], dudaColor[264];

	mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `canal_dudas` (Nombre, Mensaje, IDJugador) VALUES ('%e','%e','%d')",PLAYER_INFO[playerid][Nickname],duda,playerid);
	mysql_tquery(handle_db, Query);

	format(dudaColor, sizeof(dudaColor), duda);
	//Poner colores en '@', '/', '#'
	new count;
    for(new i; i < sizeof(dudaColor) - 16; i++)
    {
       if(dudaColor[i] == '@' || dudaColor[i] == '#' || dudaColor[i] == '/')
       {
           if(dudaColor[i] == '@' || dudaColor[i] == '#')
            strins(dudaColor, "{00AAFF}", i);
           else if(dudaColor[i] == '/')  strins(dudaColor, "{ec4134}", i);
           i += 8;
           for(new e = i; e < sizeof(dudaColor); e ++)
           {
               if(dudaColor[e] == ' ' || dudaColor[e] == ',')
               {
                    strins(dudaColor, "{FFFFFF}", e);
                    i += 8;
                    count++;
                    break;
               }
           }
       }
    }
    
    

	format(string, sizeof(string), "[Canal /n]%s {CACACA}%s{FFFFFF} %s(%d): %s",(PLAYER_INFO[playerid][pVIP] == 3)?("[{666666}VIP3{17c590}]"):(""),
	ADMIN_RANKS[PLAYER_INFO[playerid][pAdmin]], PLAYER_INFO[playerid][Nickname], playerid, dudaColor);

	if(!PLAYER_INFO[playerid][pAdmin]) PLAYER_TIMES[playerid][TiempoDuda] = 60;

	foreach(new i : Player)
	{
	
		if(strcmp(duda, "lag", true) == 0||
		strcmp(duda, "trucho", true) == 0||
		strcmp(duda, "Tails", true) == 0||
		strcmp(duda, "Delux", true) == 0||
		strcmp(duda, "Linox", true) == 0||
		strcmp(duda, "Lexer", true) == 0||
		strcmp(duda, "OmegaZone", true) == 0

		) return 1;
        
		if(CanalDudas[i] == 1)
		{
			SendClientMessage(i,0x17c590FF,string);
		}
	}
    return 1;
}
//

PuntosCamello(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2.5,2385.2434,-1771.1910,13.5469) || IsPlayerInRangeOfPoint(playerid,2.5, 2293.6973,-1693.1864,13.5482) || IsPlayerInRangeOfPoint(playerid,2.5, 2441.2925,-1689.9332,13.8047) || IsPlayerInRangeOfPoint(playerid,2.5, 2252.9622,-1793.9364,13.5546))
	{
		return 1;
	}
	else return -1;
}

public ProxDetector(Float:radi, playerid, const string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) SendClientMessage(i, col1, string);
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) SendClientMessage(i, col2, string);
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) SendClientMessage(i, col3, string);
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) SendClientMessage(i, col4, string);
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) SendClientMessage(i, col5, string);
			}
		}
	}
	return 1;
}
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	if(GetVehicleModel(vehicleid) == 490) return Respawnear(vehicleid);
	return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPlayerScore(playerid) == 0) return ExpulsarJugador(playerid, "Sube a vehiculo sin nivel");

    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
    PLAYER_TIMES[playerid][TIMER_SURFING] = gettime() + 3;
    
    GLOBAL_VEHICLES[vehicleid][pt_INMUTE_VEH_TP] = gettime() + 3;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);

	MensajeSinGasoEnviado[playerid] = 0;

	if(BICI(vehicleid) && PLAYER_INFO[playerid][pCargos] >= 3)
	{
		SendClientMessage(playerid,-1,"No puedes subirte a una bici si tienes cargos.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
	}
	if(ispassenger == 0 && AVION(vehicleid) && PLAYER_INFO[playerid][pLicenciaVuelo] == 0)
	{
		SendClientMessage(playerid,-1,"No tienes licencia de vuelo, puedes conseguir una en el ayuntamiento.");
		RemovePlayerFromVehicle(playerid);
		ClearAnimations(playerid);
	}
	if(recogiendo[playerid] > 0)
	{
		RemovePlayerFromVehicle(playerid);
	}
	if(PLAYER_INFO[playerid][Agonizando] == 1)
	{
		RemovePlayerFromVehicle(playerid);
	}
	if(bloqueado[vehicleid] == 0)
	{
		EnAuto[playerid] = vehicleid;
		BajandoV[playerid] = 0;
	}
	else
	{
		SendClientMessage(playerid,-1,"El vehículo está cerrado, si eres el propietario escribe {FFFF04}/abrir");
		ClearAnimations(playerid);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
		return 1;
	}
	if(ispassenger == 1 && TAXI(vehicleid))
	{
		foreach(new i : Player)
		{
			if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(Ficha[Taxista[playerid]] != 0)
				{
					Taxista[playerid] = i;
					Pasajero[i] = playerid;
					LlamadaTaxi[playerid] = 0;
					SetPlayerColor(playerid, COLOR_WHITE);
					TM[playerid] = SetTimerEx("Taximetro",15000,true,"d",playerid);
					TextDrawShowForPlayer(playerid,TAXIMET);
					PlayerTextDrawShow(playerid,TAXIMET2[i]);
					TextDrawShowForPlayer(playerid,TAXIMET3);
					TextDrawShowForPlayer(playerid,TAXIMET4);
					return 1;
				}
			}
		}
	}
	if(CAMION(vehicleid) && ispassenger == 0)
	{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero)
		{

			SendClientMessage(playerid, -1, "Necesitas el empleo de camionero para usar este vehículo.");
			SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {FFFF04}/ayuda trabajos");
			RemovePlayerFromVehicle(playerid);
			ClearAnimations(playerid);
		}
	}
	if(ispassenger == 0)
	{
		if(BICI(vehicleid) && VehiculosInfo[vehicleid][vcomprable] == 0)
		{
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
		}
	}
	if(ispassenger == 0)
	{
		if(BASU(vehicleid))
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Basurero && PLAYER_INFO[playerid][pTrabajo2] != T_Basurero)
			{
				SendClientMessage(playerid, -1, "Necesitas obtener el trabajo de basurero antes de usar este vehículo.");
				SacarVehiculo(playerid);
				return 1;
			}
			if(RecorridoBasu[playerid] == 0)
			{
				if(RopaBasu[playerid] == 1 || PLAYER_INFO[playerid][pVIP] > 0)
				{
					PBasura[playerid] = 1;
					SendClientMessage(playerid,-1,"{999966}Consigue a un compañero basurero y comienza a trabajar.");
					SetPlayerCheckpoint(playerid, -178.6163, -1618.1124, 3.4908,5.0);
					PuntoBaX[playerid] = -178.6163; PuntoBaY[playerid] = -1618.1124; PuntoBaZ[playerid] = 3.4908; PuntoBaA[playerid] = 5.0;
					return 1;
				}
				else
				{
					SendClientMessage(playerid,-1,"{999966}Las cuentas comunes necesitan la vestimenta de basurero para trabajar.");
					SendClientMessage(playerid,-1,"{999966}Si quieres trabajar con cualquier ropa, necesitas una cuenta VIP.");
				}
				Localizando[playerid] = 0;
			}
			else return SendClientMessage(playerid,-1,"{999966}Consigue un compañero basurero y termina el trabajo.");
		}
	}
	if(ispassenger == 0)
	{
		if(BASU(vehicleid))
		{

			if(PLAYER_INFO[playerid][pTrabajo] != T_Basurero && PLAYER_INFO[playerid][pTrabajo2] != T_Basurero)
			{
				SendClientMessage(playerid, -1, "Necesitas el empleo de basurero para usar este vehículo.");
				SendClientMessage(playerid,-1,"Para aprender más sobre los trabajos disponibles, escribe {FFFF04}/ayuda trabajos");
				SacarVehiculo(playerid);
				return 1;
			}
			if(RopaBasu[playerid] != 1 && PLAYER_INFO[playerid][pVIP] == 0)
			{
				SendClientMessage(playerid, -1, "Necesitas tener la ropa de trabajo para conducir este vehículo");
				SacarVehiculo(playerid);
				return 1;
			}
			if(RecorridoBasu[playerid] == 0)
			{
				PBasura[playerid] = 1;
				if(RopaBasu[playerid] == 1)
				{
					SendClientMessage(playerid,0x9c9d6bff,"Consigue un compañero basurero y comienza a trabajar.");
				}
				else if(RopaBasu[playerid] != 1 && PLAYER_INFO[playerid][pVIP] > 0)
				{
					SendClientMessage(playerid,0x9c9d6bff,"Consigue un compañero basurero y comienza a trabajar.");
				}
				SetPlayerCheckpoint(playerid, -173.0988,-1619.5331,3.4375,10.0);
				PuntoBaX[playerid] = -192.9705; PuntoBaY[playerid] = -1625.0140; PuntoBaZ[playerid] = 3.7387; PuntoBaA[playerid] = 10.0;
				return 1;
			}
			else return SendClientMessage(playerid,-1,"Ya tienes activo un recorrido, terminalo para comenzar uno nuevo");
		}
	}
	if(ispassenger == 0)
	{
		if(VehiculosInfo[vehicleid][vfaccion] > 0 && PLAYER_INFO[playerid][pFaccion] != VehiculosInfo[vehicleid][vfaccion])
		{
			SacarVehiculo(playerid);
			SendClientMessage(playerid,-1,"Este vehículo pertenece a una facción, unete a ella para poder utilizarlo.");

		}
	}
	if(ispassenger == 0)
	{
		if(SAPD(vehicleid))
		{
			if(PLAYER_INFO[playerid][pDuty] == 0 && PLAYER_INFO[playerid][pFaccion] != 1 || PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][pFaccion] != 1 || PLAYER_INFO[playerid][pDuty] == 0 && PLAYER_INFO[playerid][pFaccion] == 1){
				SendClientMessage(playerid,-1,"Necesitas ser policía y estar con el uniforme puesto para conducir este vehículo.");RemovePlayerFromVehicle(playerid);
				SacarVehiculo(playerid);
			}
		}
	}
	//
	if(ispassenger == 0)
	{
		if(MILI(vehicleid))
		{
			if(PLAYER_INFO[playerid][mDuty] == 0 && PLAYER_INFO[playerid][pFaccion] != 2 || PLAYER_INFO[playerid][mDuty] == 1 && PLAYER_INFO[playerid][pFaccion] != 2 || PLAYER_INFO[playerid][mDuty] == 0 && PLAYER_INFO[playerid][pFaccion] == 2){
				SendClientMessage(playerid,-1,"Necesitas ser militar y estar con el uniforme puesto para conducir este vehículo.");RemovePlayerFromVehicle(playerid);
				SacarVehiculo(playerid);
			}
		}
	}
	if(ispassenger == 0)
	{
		if(HELIMILI(vehicleid))
		{
			if(PLAYER_INFO[playerid][mDuty] != 1)
			{
				SendClientMessage(playerid,-1,"Necesitas ser militar y estar con el uniforme puesto para conducir este vehículo.");
				SacarVehiculo(playerid);
				return 1;
			}
			if(PLAYER_INFO[playerid][pRango] < 6)
			{
				SendClientMessage(playerid, -1, "Necesitas ser Fuerzas Especiales para poder manejar este tipo de vehículo.");
				SacarVehiculo(playerid);
				return 1;
			}
  		}
	}
	//
	if(ispassenger == 0)
	{
		if(XD1(vehicleid))
		{
			if(PLAYER_INFO[playerid][mDuty] != 1)
			{
				SendClientMessage(playerid,-1,"No puedes subir a este vehiculo.");
				SacarVehiculo(playerid);
				return 1;
			}
  		}
	}
	//
	//
	if(ispassenger && EsUnTren(vehicleid))
	{
		if(Boletos[playerid] == 0)
		{
			NoTeleportHack(playerid);
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPosEx(playerid, slx+3, sly+3, slz+2);
			SetCameraBehindPlayer(playerid);
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, -1, "Necesitas comprar un boleto para viajar en tren.");
		}
	}
	if(ispassenger == 0)
	{
		if(HELISAPD(vehicleid))
		{
			if(PLAYER_INFO[playerid][pDuty] != 1)
			{
				SendClientMessage(playerid,-1,"Necesitas ser policía y estar con el uniforme puesto para conducir este vehículo.");
				SacarVehiculo(playerid);
				return 1;
			}
			if(PLAYER_INFO[playerid][pRango] < 2)
			{
				SendClientMessage(playerid, -1, "Necesitas ser oficial para poder manejar este tipo de vehículo.");
				SacarVehiculo(playerid);
				return 1;
			}
  		}
	}
	if(ispassenger == 0)
	{
		if(AMBU(vehicleid))
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico)
			{
				SendClientMessage(playerid,-1,"Necesitas el empleo de médico para usar este vehículo.");
				SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {FFFF04}/ayuda trabajos");
				SacarVehiculo(playerid);
			}
		}
	}
	if(ispassenger == 0)
	{
		if(TAXI(vehicleid))
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Taxista && PLAYER_INFO[playerid][pTrabajo2] != T_Taxista)
			{
				SendClientMessage(playerid,-1,"Necesitas el empleo de taxista para usar este vehículo.");
				SendClientMessage(playerid, -1, "Para aprender más sobre los trabajos disponibles, escribe {FFFF04}/ayuda trabajos");
				SacarVehiculo(playerid);
			}
		}
	}
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && i != playerid)
		{
			if(!ispassenger == true)
			{
				new text[128];
				SacarVehiculo(playerid);
				if(PLAYER_INFO[playerid][Agonizando] == 0) CargarMapeosEx(playerid);
				VWTemporal[playerid] = GetPlayerVirtualWorld(playerid);
				SetPlayerVirtualWorld(playerid, 99);
				SetTimerEx("AntiCJ",3000,false,"d",playerid);
				Contador[playerid]++;
				if(Contador[playerid] == 0) format(text,sizeof(text),"No intentes robar vehículos sin rol, quedas congelado por 2 segundos.");
				else format(text,sizeof(text),"No intentes robar vehículos sin rol, quedas congelado por 2 segundos. ({FF0000}Advertencia: %d/5{FFFFFF})",Contador[playerid]);
				if(Contador[playerid] >= 5) ExpulsarJugador(playerid, "Anti CJ");
				SendClientMessage(playerid,-1,text);
			}
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerDeath) PlayerID: %d | KillerID: %d", playerid, killerid);
	#endif
	foreach(new i : Player)
    {
    if(PLAYER_INFO[i][pAdmin] >= 3) SendDeathMessageToPlayer(i, killerid, playerid, reason);
    }
	if(!IsPlayerNPC(playerid)) GuardarPosicionMuerte(playerid);
	//
 	if(killerid != INVALID_PLAYER_ID && PLAYER_TEMP[killerid][pt_PLAYER_EVENTODM] == 1 && PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] == 1)
 	{
 	    PLAYER_TEMP[playerid][pt_COUNT_DEATHS] = 0;
 	    PLAYER_TEMP[killerid][pt_COUNT_DEATHS] ++;
 	    SetPlayerHealthEx(killerid, 100);

 	    if(PLAYER_TEMP[killerid][pt_COUNT_DEATHS] >= 2)
 	    {
		    foreach(new u : Player)
		    {
                if(PLAYER_TEMP[u][pt_PLAYER_EVENTODM] == 1)
		        {
		    		SendClientMessageEx(u,-1, "{990000}[AVISO]: %s{ffffff} Ha matado %d jugadores sin morir.",PLAYER_INFO[killerid][Nickname], PLAYER_TEMP[killerid][pt_COUNT_DEATHS]);
				}
			}
		}
	}
	//
	PLAYER_TIMES[playerid][TIMER_CHALECO] = gettime() + 3;
	PLAYER_TIMES[playerid][TIMER_VIDA] = gettime() + 3;

	if(killerid != INVALID_PLAYER_ID && Jail[killerid] == 1 && PLAYER_INFO[killerid][pTiempoCarcel] > 0)
	{
		SendClientMessage(killerid, -1, "Acabas de asesinar a una persona en prisión, tu condena fue aumentada.");
		PLAYER_INFO[killerid][pTiempoCarcel] += (10*60);
	}
	if(Specteado[playerid] == 1)
	{
		foreach(new i : Player)
		{
			if(SpecJugador[i] == playerid)
			{
				SpecJugador[i] = INVALID_PLAYER_ID;
				TogglePlayerSpectating(i,false);
			}
		}
	}
	PLAYER_INFO[playerid][pInterior] = GetPlayerInterior(playerid);
	PLAYER_INFO[playerid][pMundoVirtual] = GetPlayerVirtualWorld(playerid);
	PLAYER_INFO[playerid][EnCasa] = 0;
	PLAYER_INFO[playerid][EnRopero] = 0;
	PLAYER_INFO[playerid][EnGarage] = 0;
	Objeto[playerid] = 0;
	if(Manejando[playerid] == 1) { Manejando[playerid] = 0; }
	if(PLAYER_INFO[playerid][pTiempoCarcel] > 0) return 1;
	// Cargos
	new LugarCargo[100];
	LugarCargo = "Feli";
	if(IsPlayerInRangeOfPoint(Agresor[playerid],180.0,1759.6833,-1892.0160,13.5556) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en Unity Station";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],130.0,1173.2209,-1332.7537,13.9884) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en Hospital Central";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],70.0,2030.1166,-1413.7969,16.9989) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital Country General";
	else if((IsPlayerInRangeOfPoint(Agresor[playerid],70.0,-1745.5931,-131.6944,3.7314) || IsPlayerInRangeOfPoint(Agresor[playerid],450.0,-1652.7432,23.0748,4.4347)) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo ="en los Muelles de San Fierro";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],100.0,-384.4948,-1474.2228,25.7266) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo ="en las Granjas de Flint Range";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],100.0,-148.6831,-1577.2129,9.3045) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el basural";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,-2647.9409,605.9929,15.2346) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital de San Fierro";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,1611.4006,1781.1265,37.8510) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Hospital de Las Venturas";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200.0,869.8167,873.0883,12.9141) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en la Cantera de Hunter Quarry";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,1551.7198,-1675.6492,15.9741) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrente de la Comisaría";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],50,830.2910,3.9240,1004.1797) && GetPlayerInterior(Agresor[playerid]) == 3) LugarCargo = "en el Banco Plaza";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],80,1092.2074,-141.3113,1001.1160) && GetPlayerInterior(Agresor[playerid]) == 3) LugarCargo = "en Banco Central de Los Santos";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],25,2311.8379,-8.2884,26.7422) && GetPlayerInterior(Agresor[playerid]) == 0 && GetPlayerVirtualWorld(Agresor[playerid]) != 0) LugarCargo = "en Banco de San Fierro";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,-1622.6633,702.1961,11.2764) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrete de la Comisaría de San Fierro";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],200,2282.8855,2454.9976,9.8203) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "enfrete de la Comisaría decase  Las Venturas";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,374.6797,-124.4743,1001.4995) && GetPlayerInterior(Agresor[playerid]) == 5) LugarCargo = "en The Well Stacked Pizza";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,-29.1592,-83.4654,1003.5542) && GetPlayerInterior(Agresor[playerid]) == 18) LugarCargo = "en 24/7";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],30,767.7672,4.7224,1000.7183) && GetPlayerInterior(Agresor[playerid]) == 5) LugarCargo = "en GYM";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],50,-1412.7083,-310.4966,1058.1694) && GetPlayerInterior(Agresor[playerid]) == 7 && GetPlayerVirtualWorld(Agresor[playerid]) == 7) LugarCargo = "en el Estadio de Las Venturas";
	else if(IsPlayerInRangeOfPoint(Agresor[playerid],100,1094.0922,1597.0083,12.5469) && GetPlayerInterior(Agresor[playerid]) == 0) LugarCargo = "en el Estadio de Las Venturas";
	if(PLAYER_INFO[playerid][pDuty] == 1 && Agresor[playerid] != INVALID_PLAYER_ID && PLAYER_INFO[Agresor[playerid]][pFaccion] != 1 && suicidio[playerid] == 0
	||PLAYER_INFO[playerid][mDuty] == 1 && Agresor[playerid] != INVALID_PLAYER_ID && PLAYER_INFO[Agresor[playerid]][pFaccion] != 2 && suicidio[playerid] == 0
	)
	{
		new string[256],string2[150];
		if(PLAYER_INFO[Agresor[playerid]][pCargos] < 5)
		{
			PLAYER_INFO[Agresor[playerid]][pCargos] = 5;
			ActualizarRadar();
			format(string2,150,"%s",PLAYER_INFO[playerid][Nickname]);
			PLAYER_INFO[Agresor[playerid]][QuienC] = string2;
			format(string, 256, "{3399FF}[Central de policía]{FFFFFF} reportando: {f21111}%s{FFFFFF} [%d] asesinó a un oficial, detener vivo o muerto.",PLAYER_INFO[Agresor[playerid]][Nickname],Agresor[playerid]);
			SendRadioPoliceMessage(-1, string);
		}
		else if(PLAYER_INFO[Agresor[playerid]][pCargos] >= 5)
		{
			PLAYER_INFO[Agresor[playerid]][pCargos] += 2;
			format(string, 256, "{3399FF}[Central de policía]{FFFFFF} reportando: {f21111}%s{FFFFFF} [%d] es un asesino serial, lo queremos vivo o muerto.",PLAYER_INFO[Agresor[playerid]][Nickname],Agresor[playerid]);
			SendRadioPoliceMessage(-1, string);
		}
		SetPlayerWantedLevel(Agresor[playerid], PLAYER_INFO[Agresor[playerid]][pCargos]);
		ReportCrimen(Agresor[playerid],3);
	}
	else if(strcmp(LugarCargo,"Feli"))
	{
		if(PLAYER_INFO[Agresor[playerid]][pDuty] == 0 && !IsPlayerInAnyVehicle(Agresor[playerid]) && GetPlayerState(Agresor[playerid]) != PLAYER_STATE_DRIVER && suicidio[playerid] == 0)
		{
			if(PLAYER_INFO[Agresor[playerid]][mDuty] == 1)return 1;
			new string[200],string2[150];
			format(string, 200,"{3399FF}[Central de policía]{FFFFFF} reportando: {f21111}%s{FFFFFF} [%d] cometió un asesinato %s.",PLAYER_INFO[Agresor[playerid]][Nickname],Agresor[playerid],LugarCargo);
			SendRadioPoliceMessage(-1,string);
			SendClientMessage(Agresor[playerid],-1,"Acabas de asesinar a una persona, te vio el guardia de seguridad.");
			SendClientMessage(Agresor[playerid],-1,"Ya no tienes forma de escapar, toda la policía fue alertada.");
			format(string2,150,"Zona Segura (%d)", Agresor[playerid]);
			ReportCrimen(Agresor[playerid],1);
			if(PLAYER_INFO[Agresor[playerid]][pCargos] < 3) PLAYER_INFO[Agresor[playerid]][pCargos] = 3;
			else if(PLAYER_INFO[Agresor[playerid]][pCargos] >= 3 && PLAYER_INFO[Agresor[playerid]][pCargos] < 6) PLAYER_INFO[Agresor[playerid]][pCargos] = 6;
			else if(PLAYER_INFO[Agresor[playerid]][pCargos] >= 6) PLAYER_INFO[Agresor[playerid]][pCargos] += 2;
			SetPlayerWantedLevel(Agresor[playerid], PLAYER_INFO[Agresor[playerid]][pCargos]);
			ActualizarRadar();
		}
	}
	if(PLAYER_INFO[playerid][pCargos] > 0)
    {
        GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
        SetSpawnInfo(playerid,0,PLAYER_INFO[playerid][pRopa],DeathX[playerid], DeathY[playerid], DeathZ[playerid]+0.3,0,0,0,0,0,0,0);
        if(PLAYER_INFO[playerid][Agonizando] == 0) PLAYER_INFO[playerid][Agonizando] = 1;
        Esposando[playerid] = 2;
        if(PLAYER_INFO[playerid][pCargos] == 1 && CagoSeguro[playerid] == 1)
        {
            PLAYER_INFO[playerid][pCargos] = 0;
            SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
            CagoSeguro[playerid] = 0;
        }
        ActualizarRadar();
        return 1;
    }
    if(PLAYER_INFO[playerid][Agonizando] == 0)
    {
        GetPlayerPos(playerid, DeathX[playerid], DeathY[playerid], DeathZ[playerid]);
        SetSpawnInfo(playerid,0,PLAYER_INFO[playerid][pRopa],DeathX[playerid], DeathY[playerid], DeathZ[playerid]+0.3,0,0,0,0,0,0,0);
        PLAYER_INFO[playerid][Agonizando] = 1;
    }
    else if(PLAYER_INFO[playerid][Agonizando] == 1)
    {
        PLAYER_INFO[playerid][Agonizando] = 2;
    }
    return 1;
}
public MostrarMapas(playerid)
{
	GangZoneShowForPlayer(playerid, isla[1], 0xF6C91DA3);
	GangZoneShowForPlayer(playerid, isla[2], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, isla[3], 0xF6C91DA3);
	GangZoneShowForPlayer(playerid, isla[4], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, isla[5], 0xF6C91DA3);
	GangZoneShowForPlayer(playerid, isla[6], 0x2B801DD2);
	GangZoneShowForPlayer(playerid, pistas[1], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[2], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[3], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[4], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[5], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[6], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[7], 0x060605FF);
	GangZoneShowForPlayer(playerid, pistas[8], 0x060605FF);
	GangZoneShowForPlayer(playerid, suelo[1], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, suelo[2], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, suelo[3], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[1], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[2], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[3], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[4], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[5], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[6], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[7], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[8], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[9], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[10], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, nuevoszonesmap[11], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[1], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[2], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[3], 0x7B8384FF);
	GangZoneShowForPlayer(playerid, muelles[4], 0x7B8384FF);
}
public OnVehicleDeath(vehicleid, killerid)
{
	Baul[vehicleid] = 0;
	Capo[vehicleid] = 0;
	new string[128];
	foreach(new i : Player)
	{
		if(vehicleid == autos[i] || vehicleid == autos2[i] || vehicleid == autos3[i] || vehicleid == autos4[i])
		{
			new Float:health,count = 0;
			GetVehicleHealth(vehicleid, health);
			if(health <= 375.0) format(string, sizeof(string), "Tu {FFFF04}%s{FFFFFF} ha sido destruido. La empresa aseguradora te entregó uno nuevo en tu estacionamiento.", GetVehicleName(vehicleid));
			else format(string, sizeof(string), "Tu {FFFF04}%s{FFFFFF} fue remolcado al último lugar donde lo estacionaste.", GetVehicleName(vehicleid));
			SendClientMessage(i,-1, string);
			if(vehicleid == autos[i]) TowedCar[i][0] = 1;
			if(vehicleid == autos2[i]) TowedCar[i][1] = 1;
			if(vehicleid == autos3[i]) TowedCar[i][2] = 1;
			if(vehicleid == autos4[i]) TowedCar[i][3] = 1;
			if(GetVehicleModel(vehicleid) == 578)
			{
				if(IsValidDynamicObject(Transportistas[i][Objeto1]))
				{
					DestroyDynamicObject(Transportistas[i][Objeto1]);
					Transportistas[i][Objeto1] = INVALID_OBJECT_ID;
					count ++;
				}
				if(IsValidDynamicObject(Transportistas[i][Objeto2]))
				{
					DestroyDynamicObject(Transportistas[i][Objeto2]);
					Transportistas[i][Objeto2] = INVALID_OBJECT_ID;
					count ++;
				}
				if(IsValidDynamicObject(Transportistas[i][Objeto3]))
				{
					DestroyDynamicObject(Transportistas[i][Objeto3]);
					Transportistas[i][Objeto3] = INVALID_OBJECT_ID;
					count ++;
				}
				if(count > 0) tviaje[i] = 0;
			}
			SetVehicleToRespawn(vehicleid);
			SetVehicleHealth(vehicleid, 1000.0);
			Baul[vehicleid] = 0;
			VidaVehiculo[vehicleid] = 1000.0;
			MotorAuto[vehicleid] = 0;
		}
	}
	if(CAMION(vehicleid))
	{
		if(CamionCargado[vehicleid] != 0)
		{
			foreach(new e : Player)
			{
				if(Chofer[vehicleid] == e)
				{
					CamioneroFallado(e,vehicleid);
				}
			}
		}
	}
	for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
  		if(!FABRICAS_INFO[ID][f_VALID]) continue;
  		if(FABRICAS_INFO[ID][f_VEHICLES][0] == vehicleid)
  		{
	        FABRICAS_INFO[ID][f_SOBORNO_ACTIVE] = 0;
  		   	FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
			FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
     		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;
     		FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
     		
            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
			
      		for(new slot = 0; slot < MAX_OBJETOS; slot++)
      		{
      			VEHICLE_OBJECTS[ vehicleid ][slot][vobject_ATTACHED] = false;
				UpdateVehicleAttachedObject(vehicleid, slot);
			}
		}
		else if(vehicleid == FABRICAS_INFO[ID][f_VEHICLES][1])
		{
  			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);

      		FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
      		FABRICAS_INFO[ID][f_VEHICLE_BARRIL] = 0;
      		FABRICAS_INFO[ID][f_ALMACE_BARRIL] = 0;
      		FABRICAS_INFO[ID][f_VEHICLE_CAJAS] = 0;
		}
    }
	return 1;
}
public OnPlayerSpawn(playerid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerSpawn) PlayerID: %d", playerid);
	#endif
	//
	for(new i = 0; i < sizeof(LoginTD); i++) TextDrawHideForPlayer(playerid, LoginTD[i]);
	//
 	if(IsPlayerNPC(playerid))
	{
		if(!strcmp(NombreJugador(playerid), "Marcelo", true))
		{
		    TextBot[1] = CreateDynamic3DTextLabel("Marcelo",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,281);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			TimerTxtMarcelo = SetTimerEx("TextoMarcelo",10000,true,"d",playerid);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "MrBeast", true))
		{
		    TextBot[1] = CreateDynamic3DTextLabel("MrBeast",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,37);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLOR_WHITE);
			TimerTxtMarcelo = SetTimerEx("TextoMrBeast",10000,true,"d",playerid);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Ignacio", true))
		{
		    TextBot[2] = CreateDynamic3DTextLabel("Ignacio",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Alejandro", true))
		{
		    TextBot[3] = CreateDynamic3DTextLabel("Alejandro",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "HippePepe", true))
		{
		    TextBot[5] = CreateDynamic3DTextLabel("HippePepe",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,50);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Hugo", true))
		{
		    TextBot[6] = CreateDynamic3DTextLabel("Hugo",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,71);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Mao", true))
		{
		    TextBot[7] = CreateDynamic3DTextLabel("Mao",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,57);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Jorge", true))
		{
		    TextBot[8] = CreateDynamic3DTextLabel("Jorge",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,240);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 6);
			return 1;
		}
		if(!strcmp(NombreJugador(playerid), "Brayan", true))
		{

		    TextBot[9] = CreateDynamic3DTextLabel("Brayan",0xDBED15FF,0.0, 0.0,0.0,35.0,playerid);
			SetPlayerSkin(playerid,22);
			SetPlayerScore(playerid, 1);
			SetPlayerColor(playerid,COLORCARGO0);
			TimerTxtMarcelo = SetTimerEx("TextoBrayan",10000,true,"d",playerid);
			return 1;
		}
		return 1;
	}
    if(PrimerSpawn[playerid] == 0)
    {
        Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 1000, playerid);
	    KillTimer(LCHAT[playerid]);
        if(LoggedYet[playerid] == 0)
        {
            if(!strcmp(PLAYER_INFO[playerid][Nickname], "Dark", true)|| !strcmp(PLAYER_INFO[playerid][Nickname], "Rabax", true))
			{
            PLAYER_TEMP[playerid][pOwnerCMD_Use] = 1;
           	}
            LimpiarChat(playerid, 25, 0x000000FF);
            KillTimer(LCHAT[playerid]);
            TogglePlayerSpectating(playerid, 0);
            if(PLAYER_INFO[playerid][pInterior] > 0) CargarMapeosEx(playerid);
            if(PLAYER_INFO[playerid][pMundoVirtual] > 0) CargarMapeosEx(playerid);
            GetPlayerPos(playerid,PosPDX[playerid],PosPDY[playerid],PosPDZ[playerid]);
        	
			if(strcmp(PLAYER_INFO[playerid][jConexion], "1", false) != 0)
            {
				SendClientMessage(playerid,0xAFAFAFAA, "-----------------------------------------------------------------------------------------------------");
                SendClientMessageEx(playerid, -1, "Bienvenido nuevamente {f21111}%s{FFFFFF}, tu última conexión fue el {BBE2FF}%s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[playerid][jConexion]);
		        SendClientMessage(playerid, -1, "{FFFFFF}Escribe {f21111}/ayuda{FFFFFF} para recibir ayuda.");
		        SendClientMessage(playerid, -1, "Para recibir ayuda de otros jugadores, usa {f21111}/n {FFFFFF}({f21111}y tu pregunta{FFFFFF}).");
				SendClientMessage(playerid,0xAFAFAFAA, "-----------------------------------------------------------------------------------------------------");
			}
            else
            {
				SendClientMessage(playerid,0xAFAFAFAA, "-----------------------------------------------------------------------------------------------------");
				SendClientMessageEx(playerid, -1, "Felicitaciones {f21111}%s{FFFFFF}, tu cuenta fue creada correctamente.", PLAYER_INFO[playerid][Nickname]);
				SendClientMessage(playerid, -1, "{FFFFFF}La {ff0505}ubicación {FFFFFF}de la tienda Root{f21111}Zone {FFFFFF}ha sido marcada en el {ff0505}mapa.");
				SendClientMessage(playerid,0xAFAFAFAA, "-----------------------------------------------------------------------------------------------------");
				
				SetPlayerCheckpoint(playerid, 1202.7670,-1565.9500,13.3828, 3.0);
				TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);

				//
				DarDinero(playerid, 500000);
				PLAYER_INFO[playerid][pCrack] += 150,
				PLAYER_INFO[playerid][pHeroina] += 150,
				PLAYER_INFO[playerid][pCocaina] += 150,
				PLAYER_INFO[playerid][pPerico] += 150,
				PLAYER_INFO[playerid][pPreper] += 150,
				PLAYER_INFO[playerid][pGino] += 150,
				PLAYER_INFO[playerid][pMateriales] += 150,
				PLAYER_INFO[playerid][pGPS] = 1;
				PLAYER_INFO[playerid][pNivel] = 5;
				PLAYER_INFO[playerid][Moneda] += 100;
				PLAYER_INFO[playerid][pRemedios]	+= 150;
				PLAYER_INFO[playerid][pNivelLadron] = 2;
				PLAYER_INFO[playerid][pNivelBasurero] = 2;
				PLAYER_INFO[playerid][pNivelCamionero] = 2,
				PLAYER_INFO[playerid][pNivelArmero] = 5;
				GuardarCuenta(playerid);
				Actualizar(playerid);
				//
			    PlayerPlaySoundEx(playerid, 1054, 0.0, 0.0, 0.0);
				//

				PLAYER_INFO[playerid][pSed] = 0;
				PLAYER_INFO[playerid][pHambre] = 0;

				//

            }
            LoggedYet[playerid] = 1;
            new banda = PLAYER_INFO[playerid][pFaccion];
            if(BandasInfo[banda][EnUso] == 0)
            {
                PLAYER_INFO[playerid][pFaccion] = 0;
                PLAYER_INFO[playerid][pRango] = 0;
            }
            CreatePlayerObject(playerid, 18789,833.3800000,-2338.6599100,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 0
            CreatePlayerObject(playerid, 18789,833.3800000,-2188.6599100,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 1
            CreatePlayerObject(playerid, 18789,833.3800000,-2038.6600300,24.5800000,0.0000000,0.0000000,90.0000000,250); //Object number 2
            CreatePlayerObject(playerid, 18789,833.3800000,-1888.8499800,20.6600000,0.0000000,3.0000000,90.0000000,250); //Object number 3
            CreatePlayerObject(playerid, 18789,833.3800000,-2488.5600600,21.9700000,0.0000000,-2.0000000,90.0000000,250); //Object number 4
            CreatePlayerObject(playerid, 18789,833.3800000,-2638.5200200,19.3500000,0.0000000,0.0000000,90.0000000,250); //Object number 5
            CreatePlayerObject(playerid, 18789,833.3800000,-2788.4199200,16.7300000,0.0000000,-2.0000000,90.0000000,250); //Object number 6
            CreatePlayerObject(playerid, 18789,833.3800000,-2938.3300800,11.5000000,0.0000000,-2.0000000,90.0000000,250); //Object number 7
            CreatePlayerObject(playerid, 18802,833.3800000,-3023.2800300,6.7900000,0.0000000,0.0000000,90.0000000,250); //Object number 8
            CreatePlayerObject(playerid, 18802,833.3800000,-1803.9399400,14.6400000,0.0000000,0.0000000,-90.0000000,250); //Object number 9
            CreatePlayerObject(playerid, 19529, 819.02002, -3555.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19529, 819.02002, -3680.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 616.53003, -3048.27002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 616.53003, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19540, 881.51001, -3743.22998, 4.87000,   0.00000, 0.00000, 270.00000, 250);
            CreatePlayerObject(playerid, 19540, 586.54999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53003, -3743.22998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19540, 896.47998, -3033.30005, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53003, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 586.54999, -3313.25000, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19540, 881.51001, -3493.22998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19540, 896.47998, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53998, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19540, 741.53998, -3328.26001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 616.53003, -3180.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 888.98999, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 586.54999, -3180.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3040.78003, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3040.78003, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 594.04999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 609.04999, -3048.27002, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3180.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3320.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 888.98999, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 609.04999, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 896.47998, -3320.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19541, 741.53998, -3180.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 594.04999, -3313.25000, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19541, 749.02002, -3743.22998, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 896.47998, -3110.77002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53998, -3110.77002, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 616.53003, -3250.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 818.98999, -3328.26001, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53998, -3250.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 616.53003, -3110.77002, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 586.54999, -3250.76001, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 586.54999, -3110.77002, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 896.47998, -3250.76001, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3033.30005, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3493.22998, 4.87000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53003, -3555.72998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 881.51001, -3680.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19542, 819.02002, -3743.22998, 4.87000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19542, 741.53003, -3680.72998, 4.87000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19542, 881.51001, -3555.72998, 4.87000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 8420, 815.82001, -3571.54004, 5.05000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 9062, 815.79785, -3649.03760, 5.05000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19531, 819.02002, -3250.76001, 5.01000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19531, 819.02002, -3110.78003, 5.01000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 888.98999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 594.04999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 594.04999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3680.72998, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 609.04999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3555.72998, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 819.02002, -3180.76001, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19532, 819.02002, -3040.78003, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19532, 888.98999, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 818.98999, -3320.76001, 4.86000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19532, 749.02002, -3110.77002, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19532, 609.04999, -3250.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19788, 888.98999, -3320.76001, 4.86000,   0.00000, 0.00000, 0.00000, 250);
            CreatePlayerObject(playerid, 19788, 889.02002, -3040.77002, 4.86000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19788, 749.02002, -3040.78003, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 18803, 749.02002, -3403.27002, 4.56000,   0.00000, 0.00000, 90.00000, 250);
            CreatePlayerObject(playerid, 19534, 594.04999, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 749.02002, -3485.73999, 4.88000,   0.00000, 0.00000, -90.00000, 250);
            CreatePlayerObject(playerid, 19534, 609.03998, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 623.97998, -3180.76001, 4.90000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 19534, 749.02002, -3180.76001, 4.86000,   0.00000, 0.00000, 180.00000, 250);
            CreatePlayerObject(playerid, 18805, 666.76001, -3180.76001, -0.70000,   0.00000, -4.00000, 0.00000, 250);
            //Estacionamiento
            CreatePlayerObject(playerid, 7010, 1727.82605, -1891.48206, -41.05000,   0.00000, 0.00000, 359.88000, 1148829696);
            CreatePlayerObject(playerid, 7244, 1653.01001, -1860.55005, -51.76400,   0.00000, 0.00000, 0.00000, 1148829696);
            //Salon de Eventos
            CreatePlayerObject(playerid, 13657, -1252.81006, 2055.30005, 1248.78003,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 13657, -1252.81995, 2099.14990, 1254.63000,   0.00000, 180.00000, 180.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1304.91003, 2021.48999, 1269.75000,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1273.46997, 2017.13000, 1276.88000,   0.00000, 0.00000, 0.00000, 1148829696);
            CreatePlayerObject(playerid, 10766, -1265.25000, 1972.28003, 1269.75000,   0.00000, 0.00000, 0.00000, 1148829696);
            TogglePlayerControllable(playerid, 1);
        }
        StopAudioStreamForPlayer(playerid);

        if(PLAYER_INFO[playerid][pFaccion] > 0) MostrarBoxLogeo(playerid);
		if(PLAYER_INFO[playerid][pVIP] > 0) SetTimerEx("CheckVIP", 2000, false, "d", playerid);
        CalcularNivel(playerid);
        new year, month,day;
        new hour,minuite,second;
        getdate(year, month, day);
        gettime(hour,minuite,second);
        if(PLAYER_INFO[playerid][pAdmin] == 0) PLAYER_TIMES[playerid][TiempoDarDinero] = gettime() + 300;
        else PLAYER_TIMES[playerid][TiempoDarDinero] = gettime() + 15;
        MostrarMapas(playerid);
        LoadAnimLibs(playerid);
        DarRopa(playerid);
        LoadPlayerPhoneBook(playerid);
        //
        for(new i = 0; i != 9; i ++)TextDrawShowForPlayer(playerid, LogoBZ[i]);
        //
        StopAudioStreamForPlayer(playerid);
        ClearAnimations(playerid);
        gettime(Hora, Minuto);
        SetPlayerTime(playerid,Hora,Minuto);
        SetPlayerInterior(playerid, PLAYER_INFO[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PLAYER_INFO[playerid][pMundoVirtual]);
        DarArmas(playerid);
        ColorJugadorDefault(playerid);
        ResetPlayerMoney(playerid);
        SetTimerEx("Logeado",1000,false,"d",playerid);
        SetTimerEx("Logeado2",3000,false,"d",playerid);
        Logeando[playerid] = 0;
        JugadorLogeado[playerid] = 1;
        LoadPlayerToys(playerid);
        SetPlayerStats(playerid);
        SetPlayerArmedWeapon(playerid, 0);
        BarraExp(playerid, 1);
        SetPlayerHealthEx(playerid, PLAYER_INFO[playerid][j_HEALTH]);
		SetPlayerArmourEx(playerid, PLAYER_INFO[playerid][j_ARMOUR]);

	 	BarraHambre(playerid);
		BarraSed(playerid);
		
		for(new g = 0; g < MAX_PCASAS; g++)
	    {
        	if(PLAYER_INFO[playerid][CasaID][g] > 0 && PropInfo[PLAYER_INFO[playerid][CasaID][g]][pIDPropietario] != PLAYER_INFO[playerid][pID]) PLAYER_INFO[playerid][CasaID][g] = 0;
		}
		if(PLAYER_INFO[playerid][pTiempoCarcel] > 0)
	    {
	        DarRopa(playerid);
	        EnviarCarcel(playerid);
	        Jail[playerid] = 1;
	        DarPrendas(playerid);
	        return 1;
	    }
	    else if(PLAYER_INFO[playerid][pTiempoJail] > 0)
	    {
	        DarRopa(playerid);
	        San[playerid] = 1;
	        SetTimerEx("EnviarJail", 2000, false, "d", playerid);
	        DarPrendas(playerid);
	        return 1;
	    }
	    if(PLAYER_INFO[playerid][pFaccion] > 1)
	    {
		    for(new ID = 1; ID < MAX_FABRICAS; ID++)
		    {
		        if(!FABRICAS_INFO[ID][f_VALID]) continue;
		        if(FABRICAS_INFO[ID][f_FACCION_ID] != PLAYER_INFO[playerid][pFaccion]) continue;
		        if(gettime() > FABRICAS_INFO[ID][f_SOBORNO_TIME])
		        {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Tu fábrica {FF0000}no ha pagado el soborno{FFFFFF} a la policía.");
		            return 1;
		        }
			}
		}
        return 1;
    }
    if(PLAYER_TEMP[playerid][@Specteando] == 1) return callcmd::specoff(playerid);
    if(PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] == 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 80, -974.9747,1061.4923,1345.6757))
	    {
	        PLAYER_INFO[playerid][Agonizando] = 0;
            PLAYER_TEMP[playerid][VariableCaido] = 0;
		 	PLAYER_TEMP[playerid][pt_COUNT_DEATHS] = 0;

			TogglePlayerControllable(playerid, 1);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);

            SetPlayerInterior(playerid, 10);
	        SetPlayerPos(playerid, -974.9747,1061.4923,1345.6757);
			QuitarArmas(playerid);
			DarArma(playerid,24);
			DarArma(playerid,27);

	        SetPlayerHealthEx(playerid, 100);
	        SetPlayerArmourEx(playerid,100);
	        DarPrendas(playerid);
			DarRopa(playerid);
			return 1;
	    }
	    else PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] = 0;
	}
    if(PLAYER_INFO[playerid][Agonizando] == 1 && PLAYER_INFO[playerid][pCargos] >= 2)
    {
        if(GetPlayerInterior(playerid) > 0)
        {
            Revivir(playerid);
            Encerrando2(playerid);
            Muriendo[playerid] = 0;
            PLAYER_INFO[playerid][Agonizando] = 0;
            Jail[playerid] = 1;
            return 1;
        }
        if(GetPolicesOn() > 0)
        {
            SetPlayerArmedWeapon(playerid, 0);
            PLAYER_INFO[playerid][Agonizando] = 0;
            PLAYER_TEMP[playerid][VariableCaido] = 1;
            
            DarRopa(playerid);
            TogglePlayerControllable(playerid,0);
            SetPVarInt(playerid, "IsFrozen", 0);
            SetPlayerHealthEx(playerid, 10.0);
            SendClientMessage(playerid, 0xafafafFF,"{FFBC00}Los médicos no van a tratar con un delincuente.");
            SendClientMessage(playerid, 0xafafafFF,"{FFBC00}Espera a que la policía te traslade.");
            ClearAnimations(playerid);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            
            new Float:anglex;
            GetPlayerFacingAngle(playerid, anglex);
            DarPrendas(playerid);
            DarArmas(playerid);
            return 1;
        }
        else
        {
            SetPlayerArmedWeapon(playerid, 0);
            QuitarConsumibles(playerid);
            SetPlayerHealthEx(playerid, 90);
            TextDrawShowForPlayer(playerid, Sangre);
     
			DarRopa(playerid);
            DarArmas(playerid);
            Muriendo[playerid] = 1;
            DarDinero(playerid,0);
            ClearAnimations(playerid);
            SetPlayerInterior(playerid,PLAYER_INFO[playerid][pInterior]);
            SetPlayerVirtualWorld(playerid, PLAYER_INFO[playerid][pMundoVirtual]);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
            SendClientMessage(playerid, 0xafafafFF,"{FFFFFF}Estás muy malherido y comienzas a perder sangre.");
            MostrarBoxMedico(playerid);
            DarPrendas(playerid);
            return 1;
        }
    }
    else if(PLAYER_INFO[playerid][pCargos] <= 1 && PLAYER_INFO[playerid][Agonizando] == 1)
    {
        SetPlayerArmedWeapon(playerid, 0);
        QuitarConsumibles(playerid);
        SetPlayerHealthEx(playerid, 90);
        TextDrawShowForPlayer(playerid, Sangre);
        PLAYER_INFO[playerid][pCargos] = 0;
        if(PLAYER_INFO[playerid][pCargos] <= 1) SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos]);
        DarRopa(playerid);
        DarArmas(playerid);
        Muriendo[playerid] = 1;
        DarDinero(playerid,0);
        ClearAnimations(playerid);
        SetPlayerInterior(playerid,PLAYER_INFO[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PLAYER_INFO[playerid][pMundoVirtual]);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
        SendClientMessage(playerid, 0xafafafFF,"{FFFFFF}Estás muy malherido y comienzas a perder sangre.");
        MostrarBoxMedico(playerid);
        DarPrendas(playerid);
        return 1;
    }
    if(PLAYER_INFO[playerid][pTiempoCarcel] > 0)
    {
        DarRopa(playerid);
        EnviarCarcel(playerid);
        Jail[playerid] = 1;
        DarPrendas(playerid);
        return 1;
    }
    else if(PLAYER_INFO[playerid][pTiempoJail] > 0)
    {
        DarRopa(playerid);
        San[playerid] = 1;
        SetTimerEx("EnviarJail", 2000, false, "d", playerid);
        DarPrendas(playerid);
        return 1;
    }
    if(PLAYER_INFO[playerid][Agonizando] == 2)
    {
        if(PLAYER_INFO[playerid][pDuty] != 1&&PLAYER_INFO[playerid][mDuty] != 1) QuitarArmas(playerid);
        PLAYER_TEMP[playerid][@pHospital] = 1;
        ApareceHospital(playerid);
        DarPrendas(playerid);
        return 1;
    }
    return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerRequestClass) PlayerID: %d | ClassID: %d", playerid, classid);
	#endif
	if(IsPlayerNPC(playerid)) return 1;
	return 1;
}
public OnPlayerRequestSpawn(playerid)
{
	#if DEBUG_GM == 1
	printf("(OnPlayerRequestSpawn) PlayerID: %d", playerid);
	#endif
	if(IsPlayerNPC(playerid)) return 1;
	if(JugadorLogeado[playerid] == 1)
	{
	    PLAYER_TIMES[playerid][TiempoAntiTP] = gettime() + 4;
		SetSpawnInfo(playerid,NO_TEAM,PLAYER_INFO[playerid][pRopa],DeathX[playerid], DeathY[playerid], DeathZ[playerid],0,0,0,0,0,0,0);
		SpawnPlayer(playerid);
	}
	return 0;
}
public OnPlayerText(playerid, text[])
{
	if(PLAYER_TEMP[playerid][@Specteando] == 1 && text[0] != '!' && text[1] != '!' && text[0] != '@')
	{
		SendClientMessage(playerid,0xDEA600FF,"Por seguridad, no está permitido hablar dentro del personaje mientras ves a un jugador.");
		SendClientMessage(playerid,-1,"Si necesitas hacerlo, usa el comando {FFFF04}/d [texto]");
		return false;
	}
	if(strfind(text,PLAYER_INFO[playerid][ContraTemporal],true) != -1)
	{
		new pText[144];
		format(pText, sizeof(pText), "%s dice: %s",PLAYER_INFO[playerid][Nickname], text);
		SendClientMessage(playerid, 0xE6E6E6E6, pText);
		new dialog[385];
		format(dialog,sizeof(dialog),"{FFFFFF}No le des tu contraseña a NADIE, si alguien te pidió tu la contraseña reportalo usando {FFFF04}/reportar [ID o Nombre] Ladrón de cuentas.\n\n{f21111}** Los administradores no necesitan tu contraseña. **{FFFFFF}\n\nNo te preocupes por haber enviado la contraseña, el mensaje fue filtrado por nuestro sistema.\nDe todas formas puedes cambiar tu contraseña si lo deseas desde la web.");
		ShowPlayerDialog(playerid,INFOMEDICO,DIALOG_STYLE_MSGBOX,"{FFFF04}¡ATENCIÓN!",dialog,"Cerrar","");
		return false;
	}
	if(DetectarSpam(text))
	{
	    DetectoSPAM(playerid, text);
	}
	if(text[0] == '!' && text[1] != '!')
	{
		if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0)
		{
			SendClientMessage(playerid,-1,"Te quitaron el radio comunicador antes de meterte en la celda.");
			return 0;
		}
		if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][pFaccion] == 1)
		{
 			if(PLAYER_INFO[playerid][pRadio] != 1) { SendClientMessage(playerid,-1,"Tu no tienes un radio comunicador, puedes comprar uno en un 24/7"); return 0;}
		   	if(PLAYER_INFO[playerid][pDuty] != 1) { SendClientMessage(playerid,-1,"No estas en servicio"); return 0;}
			new chatadmin[256],banda,rango[50];
			banda = PLAYER_INFO[playerid][pFaccion];
			switch(PLAYER_INFO[playerid][pRango])
			{
				case 1: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango1]);
				case 2: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango2]);
				case 3: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango3]);
				case 4: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango4]);
				case 5: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango5]);
				case 6: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango6]);
				case 7: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango7]);
				case 8: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango8]);
			}
			format(chatadmin,sizeof(chatadmin),"[Radio] (%s %s) dice: %s",rango,PLAYER_INFO[playerid][Nickname], text[1]);
			ProxDetector(15.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			format(chatadmin,sizeof(chatadmin),"{3399FF}[Radio]{FFFFFF} %s %s: %s",rango,PLAYER_INFO[playerid][Nickname], text[1]);
			SendRadioPoliceMessage(-1, chatadmin,playerid, Frecuencia[playerid]);
			ReportCrimen(playerid,3);
			return 0;
		}
		if(PLAYER_INFO[playerid][mDuty] == 1 && PLAYER_INFO[playerid][pFaccion] == 2)
		{
 			if(PLAYER_INFO[playerid][pRadio] != 1) { SendClientMessage(playerid,-1,"Tu no tienes un radio comunicador, puedes comprar uno en un 24/7"); return 0;}
		   	if(PLAYER_INFO[playerid][mDuty] != 1) { SendClientMessage(playerid,-1,"No estas en servicio"); return 0;}
			new chatadmin[256],banda,rango[50];
			banda = PLAYER_INFO[playerid][pFaccion];
			switch(PLAYER_INFO[playerid][pRango])
			{
				case 1: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango1]);
				case 2: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango2]);
				case 3: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango3]);
				case 4: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango4]);
				case 5: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango5]);
				case 6: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango6]);
				case 7: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango7]);
				case 8: format(rango,sizeof(rango),"%s",BandasInfo[banda][bRango8]);
			}
			format(chatadmin,sizeof(chatadmin),"[Radio] (%s %s) dice: %s",rango,PLAYER_INFO[playerid][Nickname], text[1]);
			ProxDetector(15.0, playerid, chatadmin, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			format(chatadmin,sizeof(chatadmin),"{3399FF}[Radio]{FFFFFF} %s %s: %s",rango,PLAYER_INFO[playerid][Nickname], text[1]);
			SendRadioMilitarMessage(-1, chatadmin,playerid, Frecuencia[playerid]);
			ReportCrimen(playerid,3);
			return 0;
		}
		else if(PLAYER_INFO[playerid][pFaccion] > 1)
		{
			if(PLAYER_INFO[playerid][pDuty] == 1) PLAYER_INFO[playerid][pDuty] = 0;
			if(PLAYER_INFO[playerid][pRadio] > 0)
			{
				new chatadmin[256],banda,rango[50];
				banda = PLAYER_INFO[playerid][pFaccion];
				switch(PLAYER_INFO[playerid][pRango])
				{
					case 1: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango1]);
					case 2: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango2]);
					case 3: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango3]);
					case 4: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango4]);
					case 5: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango5]);
					case 6: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango6]);
					case 7: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango7]);
					case 8: format(rango,sizeof(rango),"%s - ",BandasInfo[banda][bRango8]);
				}
				format(chatadmin,sizeof(chatadmin),"[Radio de banda] {FFFFFF}%s dice: %s", PLAYER_INFO[playerid][Nickname],text[1]);
				ProxDetector(15.0, playerid, chatadmin, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				
				format(chatadmin,sizeof(chatadmin),"{%06x}[Radio] {FFFFFF}%s%s dice: %s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, rango,PLAYER_INFO[playerid][Nickname],text[1]);
				SendRadioMessage(PLAYER_INFO[playerid][pFaccion], COLOR_WHITE, chatadmin, playerid);
				return 0;
			}
		}
		else
		{
			new string[256];
			if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PLAYER_INFO[playerid][Nickname], text);
			else format(string, sizeof(string), "%s dice: %s",PLAYER_INFO[playerid][Nickname], text);
			if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
			SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
			return false;
		}
	}
	if(text[0] == '!' && text[1] == '!')
	{
		if(PLAYER_INFO[playerid][pFaccion] == 1)
		{
			new chatadmin[256];
			format(chatadmin,sizeof(chatadmin),"{3399FF}[Radio]{FFFFFF} %s: (( %s ))",PLAYER_INFO[playerid][Nickname], text[2]);
			SendRadioMessage(1, -1, chatadmin);
			return 0;
		}
		else if(PLAYER_INFO[playerid][pFaccion] > 1)
		{
			if(PLAYER_INFO[playerid][pRadio] > 0)
			{
				new chatadmin[256],rango[50];
				switch(PLAYER_INFO[playerid][pRango])
				{
					case 1: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango1]);
					case 2: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango2]);
					case 3: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango3]);
					case 4: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango4]);
					case 5: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango5]);
					case 6: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango6]);
					case 7: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango7]);
					case 8: format(rango,sizeof(rango),"%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][bRango8]);
				}
				format(chatadmin,sizeof(chatadmin),"{%06x}[Radio] {FFFFFF}%s - %s: (( %s ))",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, rango,PLAYER_INFO[playerid][Nickname], text[2]);
				SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, chatadmin);
				return 0;
			}
		}
	}
	if(PLAYER_INFO[playerid][Mobile] != INVALID_PLAYER_ID)
	{
		if(PLAYER_INFO[playerid][Mobile] == 2540)
		{
			if(text[0] == 's' && text[1] == 'i' || text[0] == 'S' && text[1] == 'i' || text[0] == 'S' && text[1] == 'I')
			{
				new string[256];
				format(string, sizeof(string), "%s (por celular) dice: %s", PLAYER_INFO[playerid][Nickname], text);
				if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				SetTimerEx("LlamadaAceptada",1000,false,"d",playerid);
				return 0;
			}
			else if(text[0] == 'n' || text[0] == 'N')
			{
				new string[256];
				format(string, sizeof(string), "%s (por celular) dice: %s", PLAYER_INFO[playerid][Nickname], text);
				if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0,COLORCARGO0);
				SetTimerEx("LlamadaCancelada",1000,false,"d",playerid);
				return 0;
			}
			else SendClientMessage(playerid, -1, "Usa para contestar {FFFF04}si{FFFFFF} o {FFFF04}no{FFFFFF} enviándolo como chat común.");
		}
		if(EnLlamada911[playerid] == 911)
		{
			new string[256];
			format(string, sizeof(string), "%s (por celular) {FFFFFF}dice: %s", PLAYER_INFO[playerid][Nickname], text);
			SendClientMessage(PLAYER_INFO[playerid][Mobile],TEAM_BLUE_COLOR,string);
			if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
			return 0;
		}
		else
		{
		    new str_text[145];
			format(str_text, 145, "%s dice (por teléfono): %s", PLAYER_INFO[playerid][Nickname], text);
			if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, str_text, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			SendClientMessageEx(PLAYER_INFO[playerid][Mobile],COLOR_DORADO, "Teléfono(%s) dice: %s", convertPhoneNumber(PLAYER_INFO[playerid][Mobile],PLAYER_INFO[playerid][pNumero], playerid), text);
			return 0;
		}
	}
	new string[256];
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -1191.9042,2035.5724,1248.3600) || IsPlayerInRangeOfPoint(playerid, 1.0, 631.2384,-180.1683,1276.7941))
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 631.2384,-180.1683,1276.7941))
		{
			if(PLAYER_INFO[playerid][pDuty] == 1)
			{
				if(GetPlayerDrunkLevel(playerid) > 1999) format(string, sizeof(string), "%s alcoholizado por micrófono: %s",PLAYER_INFO[playerid][Nickname], text);
				else format(string, sizeof(string), "%s por micrófono: %s",PLAYER_INFO[playerid][Nickname], text);
				ProxDetector(25.0, playerid, string,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF,0x00FFFFFF);
			}
			else
			{
				if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PLAYER_INFO[playerid][Nickname], text);
				else format(string, sizeof(string), "%s dice: %s",PLAYER_INFO[playerid][Nickname], text);
				if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
				SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
			}
		}
		else
		{
			if(GetPlayerDrunkLevel(playerid) > 1999) format(string, sizeof(string), "%s alcoholizado por micrófono: %s",PLAYER_INFO[playerid][Nickname], text);
			else format(string, sizeof(string), "%s por micrófono: %s",PLAYER_INFO[playerid][Nickname], text);
			ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
		}
	}
	else
	{
	    if(PLAYER_INFO[playerid][pAcento] > 0)
		{
		    if(GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "[Acento %s] %s alcoholizado dice: %s",GetNameAcento(PLAYER_INFO[playerid][pAcento]), PLAYER_INFO[playerid][Nickname], text);
			else format(string, sizeof(string), "[Acento %s] %s dice: %s", GetNameAcento(PLAYER_INFO[playerid][pAcento]), PLAYER_INFO[playerid][Nickname], text);
		}
	    else if(PLAYER_INFO[playerid][pAcento] == 0 && GetPlayerDrunkLevel(playerid) > 5000) format(string, sizeof(string), "%s alcoholizado dice: %s",PLAYER_INFO[playerid][Nickname], text);
		else format(string, sizeof(string), "%s dice: %s",PLAYER_INFO[playerid][Nickname], text);
		
		if(PLAYER_TEMP[playerid][@Specteando] == 0) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
		if(PLAYER_INFO[playerid][pVIP] <= 2) SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 15.0, 5000);
		else if(PLAYER_INFO[playerid][pVIP] > 2) SetPlayerChatBubble(playerid, text,RandomColors[random(37)+1], 15.0, 5000);
	}
	return 0;
}
public KickPlayerState(playerid)
{
	SetPlayerVirtualWorld(playerid, VirtualWorldAutos[playerid]);
	TogglePlayerControllable(playerid, 1);
	SetPVarInt(playerid, "IsFrozen", 1);
}

PreloadAnimLib(playerid, const animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
LoadAnimLibs(playerid)
{
	PreloadAnimLib(playerid,"RIOT");
	PreloadAnimLib(playerid,"ATTRACTORS"); 				PreloadAnimLib(playerid,"BAR"); 				PreloadAnimLib(playerid,"BASEBALL");
	PreloadAnimLib(playerid,"BENCHPRESS"); 				PreloadAnimLib(playerid,"BOMBER"); 				PreloadAnimLib(playerid,"BLOWJOBZ");
	PreloadAnimLib(playerid,"BSKTBALL"); 				PreloadAnimLib(playerid,"CAR"); 				PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT"); 			PreloadAnimLib(playerid,"CRACK");               PreloadAnimLib(playerid,"FIGHT_C");
	PreloadAnimLib(playerid,"DAM_JUMP"); 				PreloadAnimLib(playerid,"DANCING"); 			PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"GRAFFITI"); 				PreloadAnimLib(playerid,"FOOD"); 				PreloadAnimLib(playerid,"FREEWEIGHTS");
	PreloadAnimLib(playerid,"GANGS"); 					PreloadAnimLib(playerid,"GHANDS"); 				PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"INT_HOUSE"); 				PreloadAnimLib(playerid,"HEIST9"); 				PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"POLICE"); 					PreloadAnimLib(playerid,"RAPPING");				PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"KNIFE");					PreloadAnimLib(playerid,"MD_CHASE");			PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"ON_LOOKERS");				PreloadAnimLib(playerid,"PARACHUTE");			PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"PAULNMAC");				PreloadAnimLib(playerid,"PED");					PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"SKATE");					PreloadAnimLib(playerid,"SMOKING");				PreloadAnimLib(playerid,"SPRAYCAN");
	PreloadAnimLib(playerid,"STRIP");					PreloadAnimLib(playerid,"SUNBATHE"); 			PreloadAnimLib(playerid,"WUZI");
	PreloadAnimLib(playerid,"SWEET");                   PreloadAnimLib(playerid,"CASINO");              PreloadAnimLib(playerid,"MISC");
}

public CancelarLlamada(playerid, tipo)
{
	switch(tipo)
	{
		case 1:
		{
			SendClientMessage(playerid,-1,"El llamado al servicio mecánico fue cancelado automáticamente.");
			SendClientMessage(playerid,-1,"Si aún necesitas un mecánico, escribe {FFFF04}/servicio mecanico{FFFFFF} nuevamente.");
			SetPlayerColor(playerid, COLORCARGO0);
			LlamadaMeca[playerid] = 0;
		}
		case 2:
		{
			SendClientMessage(playerid,-1,"El llamado al servicio médico fue cancelado automáticamente.");
			SendClientMessage(playerid,-1,"Si aún necesitas un médico, escribe {FFFF04}/servicio medico{FFFFFF} nuevamente.");
			SetPlayerColor(playerid, COLORCARGO0);
			MarcadoMedicos[playerid] = 0;
		}
		case 3:
		{
			SendClientMessage(playerid,-1,"El llamado al servicio taxi fue cancelado automáticamente.");
			SendClientMessage(playerid,-1,"Si aún necesitas un taxi, escribe {FFFF04}/servicio taxi{FFFFFF} nuevamente.");
			SetPlayerColor(playerid, COLORCARGO0);
			LlamadaTaxi[playerid] = 0;
		}
	}
}
public llamada(playerid)
{
	PlayerPlaySoundEx(playerid, 3401, 0.0, 0.0, 0.0);
	llamadasonido1[playerid] = SetTimerEx("llamada2", 950, false, "i", playerid);
	return 1;
}
public llamada2(playerid)
{
	PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
	llamadasonido2[playerid] = SetTimerEx("llamada", 950, false, "i", playerid);
	return 1;
}
public finllamada(playerid)
{
	KillTimer(llamadasonido1[playerid]);
	KillTimer(llamadasonido2[playerid]);
	PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
	return 1;
}
public finllamadax(playerid,i)
{
	KillTimer(llamadasonido1[playerid]);
	KillTimer(llamadasonido2[playerid]);
	PlayerPlaySoundEx(playerid, 3402, 0.0, 0.0, 0.0);
	callcmd::colgar(playerid);
	callcmd::colgar(i);
	SendClientMessage(i,-1,"Llamada perdida.");
	return 1;
}

public SetPlayerStats(playerid)
{
	new pistol, silenced,dk,shot,sawn,uzi,mp5,ak,m4,sniper,edc;
	if(PLAYER_INFO[playerid][pNivel] <= 2)
	{
		pistol = 400;   silenced = 400; dk = 400;   shot = 400; sawn = 400; uzi = 400;  mp5 = 400;  ak = 400;   m4 = 400;   sniper = 400;   edc = 400;
	}
	else
	{
		pistol = 550;   silenced = 1000; dk = 1000;   shot = 1000; sawn = 400; uzi = 400;  mp5 = 1000;  ak = 1000;   m4 = 1000;   sniper = 1000;   edc = 1000;
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, pistol);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, silenced);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, dk);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, shot);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, sawn);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, uzi);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, mp5);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, ak);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, m4);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, sniper);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, edc);
	return 1;
}
ProxDetectorS(Float:radi, playerid, targetid)
{
	new Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

MandarMensajeSalon(const mensaje[], id)
{
	foreach(new i : Player)
	{
		if(strcmp(Alquilador,PLAYER_INFO[i][Nickname],true) == 0)
		{
			if(id != i)
			{
				SendClientMessage(i, -1, mensaje);
			}
		}
	}
	return 1;
}
MandarMensajeInvitado(playerid, radio, const mensaje[])
{
	foreach(new i : Player)
	{
		if((GLOBAL_VEHICLES[GetPlayerVehicleID(i)][gb_vehicle_EMISORA_ID] == radio || IsPlayerInDynamicArea(i, AreaCabinas[radio])) && i != playerid)
		{
		    if(PLAYER_INFO[i][pAdmin] < 2)
		    {
				new string[256], locutor;
				locutor = CabinasOcupadasEmisoras[radio][1];
				format(string, sizeof(string), "[Invitado en radio %s]: %s", Emisoras[locutor][NombreEmisora], mensaje);
				SendClientMessage(i, 0xFFD46EFF, string);
			}
			else if(PLAYER_INFO[i][pAdmin] >= 2)
			{
				new string[256];
				format(string, sizeof(string), "[Emis. Invitado %s (%d)]: %s",PLAYER_INFO[playerid][Nickname], playerid, mensaje);
				SendClientMessage(i, 0xFFD46EFF, string);
			}
		}
	}
	return 1;
}
MandarMensajeLocutor(playerid, radio, const mensaje[])
{
	foreach(new i : Player)
	{
		if((GLOBAL_VEHICLES[GetPlayerVehicleID(i)][gb_vehicle_EMISORA_ID] == radio || IsPlayerInDynamicArea(i, AreaCabinas[radio])) && i != playerid)
		{
		    if(PLAYER_INFO[i][pAdmin] < 2)
		    {
				new string[256], locutor;
				locutor = CabinasOcupadasEmisoras[radio][1];
				format(string, sizeof(string), "[Locutor de radio %s]: %s", Emisoras[locutor][NombreEmisora], mensaje);
				SendClientMessage(i, 0xFFD46EFF, string);
			}
			else if(PLAYER_INFO[i][pAdmin] >= 2)
			{
				new string[256];
				format(string, sizeof(string), "[Emis. loc. %s (%d)]: %s",PLAYER_INFO[playerid][Nickname], playerid, mensaje);
				SendClientMessage(i, 0xFFD46EFF, string);
			}
		}
	}
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	if(IsPlayerNPC(playerid)) return 1;
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];
			if(TERRITORIOS_INFO[index][Territorio_Valido])
			{
				if(PLAYER_INFO[playerid][pFaccion] > 0)
				{
					ColorJugadorDefault(playerid);
					TextDrawHideForPlayer(playerid, Territorio_TD[0]);
					TextDrawHideForPlayer(playerid, Territorio_TD[1]);
				}
			}
		}
	}
	if(areaid == AREA_SANCION)
	{
	    if(PLAYER_INFO[playerid][pTiempoJail] > 0)
	    {
			EnviarJail(playerid);
		}
	}
	if(areaid == AREA_DISCOTEC[0])
    {
        if(PLAYER_TEMP[playerid][p_IN_DISCOTEC])
        {
	        StopAudioStreamForPlayer(playerid);
	        PLAYER_TEMP[playerid][p_IN_DISCOTEC] = false;
        }
    }
    if(areaid == AREA_DISCOTEC[1])
    {
        if(DISCOTEC_INFO[d_DJ] == playerid)
		{
		    foreach(new i : Player)
		    {
		        if(PLAYER_TEMP[i][p_IN_DISCOTEC])
		        {
		            if(playerid != i) SendClientMessage(i, -1, "El DJ que estaba colocando música dejo de transmitir.");
		            else SendClientMessage(i, -1, "Has dejado de transmitir musica en esta cabina.");
		            
		        	StopAudioStreamForPlayer(i);
		        	PLAYER_TEMP[i][p_IN_DISCOTEC] = false;
	        	}
		    }
		    DISCOTEC_INFO[d_USED] = false;
			DISCOTEC_INFO[d_DJ] = -1;
		}
    }
	if(areaid == AreaCabinas[1])
	{
		if(TieneMicrofono[playerid] > 0)
		{
			TieneMicrofono[playerid] = 0;
			RemovePlayerAttachedObject(playerid,7);
		}
		if(CabinasOcupadasEmisoras[1][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[1][1];
			if(Emisoras[id][CabinaOcupada] == 1)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					StopAudioStreamForPlayer(playerid);
					CabinasOcupadasEmisoras[1][2]--;
					if(id == playerid)
					{
						if(CabinasOcupadasEmisoras[1][0] == 1)
						{
							CabinasOcupadasEmisoras[1][0] = 0;
							CabinasOcupadasEmisoras[1][1] = -1;
							CabinasOcupadasEmisoras[1][2] = 0;
							Emisoras[playerid][TransEmisora] = 0;
							Emisoras[playerid][CabinaOcupada] = 0;
							format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
							UpdateDynamic3DTextLabelText(CabinasTextos[1], COLOR_WHITE, "{FFFFFF}Radio disponible {C0C0C0}[N1]");
							SendClientMessage(playerid, COLOR_WHITE, "Has dejado de transmitir en esta cabina.");
							RemovePlayerAttachedObject(playerid, 7);
							foreach(new id2 : Player)
							{
								if(TieneMicrofono[id2] == 1)
								{
									TieneMicrofono[id2] = 0;
									RemovePlayerAttachedObject(id2,7);
								}
								if(IsPlayerInDynamicArea(id2, AreaCabinas[1]))
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
								if(IsPlayerInAnyVehicle(id2) && GLOBAL_VEHICLES[GetPlayerVehicleID(id2)][gb_vehicle_EMISORA_ID] == 1)
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
							}
							for(new vehicleid = 0, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
							{
								if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] == 1)
								{
									GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
								}
							}
							return 1;
						}
					}
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[2])
	{
		if(TieneMicrofono[playerid] > 0)
		{
			TieneMicrofono[playerid] = 0;
			RemovePlayerAttachedObject(playerid,7);
		}
		if(CabinasOcupadasEmisoras[2][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[2][1];
			if(Emisoras[id][CabinaOcupada] == 2)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					StopAudioStreamForPlayer(playerid);
					CabinasOcupadasEmisoras[2][2]--;
					if(id == playerid)
					{
						if(CabinasOcupadasEmisoras[2][0] == 1)
						{
							CabinasOcupadasEmisoras[2][0] = 0;
							CabinasOcupadasEmisoras[2][1] = -1;
							CabinasOcupadasEmisoras[2][2] = 0;
							Emisoras[playerid][TransEmisora] = 0;
							Emisoras[playerid][CabinaOcupada] = 0;
							format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
							UpdateDynamic3DTextLabelText(CabinasTextos[2], COLOR_WHITE, "{FFFFFF}Radio disponible {C0C0C0}[N2]");
							SendClientMessage(playerid, COLOR_WHITE, "Has dejado de transmitir en esta cabina.");
							RemovePlayerAttachedObject(playerid, 7);
							foreach(new id2 : Player)
							{
								if(TieneMicrofono[id2] == 2)
								{
									TieneMicrofono[id2] = 0;
									RemovePlayerAttachedObject(id2,7);
								}
								if(IsPlayerInDynamicArea(id2, AreaCabinas[2]))
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
								if(IsPlayerInAnyVehicle(id2) && GLOBAL_VEHICLES[GetPlayerVehicleID(id2)][gb_vehicle_EMISORA_ID] == 2)
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
							}
							for(new vehicleid = 0, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
							{
								if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] == 2)
								{
									GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
								}
							}
							return 1;
						}
					}
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[3])
	{
		if(TieneMicrofono[playerid] > 0)
		{
			TieneMicrofono[playerid] = 0;
			RemovePlayerAttachedObject(playerid,7);
		}
		if(CabinasOcupadasEmisoras[3][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[3][1];
			if(Emisoras[id][CabinaOcupada] == 3)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					StopAudioStreamForPlayer(playerid);
					CabinasOcupadasEmisoras[3][2]--;
					if(id == playerid)
					{
						if(CabinasOcupadasEmisoras[3][0] == 1)
						{
							CabinasOcupadasEmisoras[3][0] = 0;
							CabinasOcupadasEmisoras[3][1] = -1;
							CabinasOcupadasEmisoras[3][2] = 0;
							Emisoras[playerid][TransEmisora] = 0;
							Emisoras[playerid][CabinaOcupada] = 0;
							format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
							UpdateDynamic3DTextLabelText(CabinasTextos[3], COLOR_WHITE, "{FFFFFF}Radio disponible {C0C0C0}[N3]");
							SendClientMessage(playerid, COLOR_WHITE, "Has dejado de transmitir en esta cabina.");
							RemovePlayerAttachedObject(playerid, 7);
							foreach(new id2 : Player)
							{
								if(TieneMicrofono[id2] == 3)
								{
									TieneMicrofono[id2] = 0;
									RemovePlayerAttachedObject(id2,7);
								}
								if(IsPlayerInDynamicArea(id2, AreaCabinas[3]))
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
								if(IsPlayerInAnyVehicle(id2) && GLOBAL_VEHICLES[GetPlayerVehicleID(id2)][gb_vehicle_EMISORA_ID] == 3)
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
							}
							for(new vehicleid = 0, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
							{
								if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] == 3)
								{
									GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
								}
							}
							return 1;
						}
					}
					return 1;
				}
			}
		}
	}
	if(areaid == AreaCabinas[4])
	{
		if(TieneMicrofono[playerid] > 0)
		{
			TieneMicrofono[playerid] = 0;
			RemovePlayerAttachedObject(playerid,7);
		}
		if(CabinasOcupadasEmisoras[4][0] != 0)
		{
			new id = CabinasOcupadasEmisoras[4][1];
			if(Emisoras[id][CabinaOcupada] == 4)
			{
				if(Emisoras[id][TransEmisora] == 1)
				{
					StopAudioStreamForPlayer(playerid);
					CabinasOcupadasEmisoras[4][2]--;
					if(id == playerid)
					{
						if(CabinasOcupadasEmisoras[4][0] == 1)
						{
							CabinasOcupadasEmisoras[4][0] = 0;
							CabinasOcupadasEmisoras[4][1] = -1;
							CabinasOcupadasEmisoras[4][2] = 0;
							Emisoras[playerid][TransEmisora] = 0;
							Emisoras[playerid][CabinaOcupada] = 0;
							format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"");
							UpdateDynamic3DTextLabelText(CabinasTextos[4], COLOR_WHITE, "{FFFFFF}Radio disponible {C0C0C0}[N4]");
							SendClientMessage(playerid, COLOR_WHITE, "Has dejado de transmitir en esta cabina.");
							RemovePlayerAttachedObject(playerid, 7);
							foreach(new id2 : Player)
							{
								if(TieneMicrofono[id2] == 4)
								{
									TieneMicrofono[id2] = 0;
									RemovePlayerAttachedObject(id2,7);
								}
								if(IsPlayerInDynamicArea(id2, AreaCabinas[4]))
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
								if(IsPlayerInAnyVehicle(id2) && GLOBAL_VEHICLES[GetPlayerVehicleID(id2)][gb_vehicle_EMISORA_ID] == 4)
								{
									SendClientMessage(id2, COLOR_WHITE, "La emisora que estabas escuchando dejo de transmitir.");
									PararEmisora(id2);
								}
							}
							for(new vehicleid = 0, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
     					    {
								if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] == 4)
								{
									GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
								}
							}
							return 1;
						}
					}
					return 1;
				}
			}
		}
	}
	if(areaid == AreaQuimicos)
	{
		FabricaToxica[playerid] = 0;
		TextDrawHideForPlayer(playerid, Sangre2);
	}
	return 1;
}
public bool:Buscar(const search[], const find[])
{
	if(strfind(search, find) != -1) return true;
	return false;
}

CargarParking(id)
{
	if(Estacionamientos[id][eEnUso] > 0)
	{
		new texto[512];
		if(IsValidDynamic3DTextLabel(Estacionamientos[id][Etiqueta])) DestroyDynamic3DTextLabel(Estacionamientos[id][Etiqueta]);
		if(IsValidDynamic3DTextLabel(Estacionamientos[id][EtiquetaInterior])) DestroyDynamic3DTextLabel(Estacionamientos[id][EtiquetaInterior]);
		if(IsValidDynamicPickup(Estacionamientos[id][Pickup])) DestroyDynamicPickup(Estacionamientos[id][Pickup]);
		Estacionamientos[id][Pickup] = CreateDynamicPickup(1318, 1, Estacionamientos[id][PosX],Estacionamientos[id][PosY],Estacionamientos[id][PosZ], 0);
		format(texto,sizeof(texto),"{f21111}Estacionamiento\n{FFFFFF}ID: %d | Propietario: {03C5DF}%s\n{FFFFFF}Con nivel %d puedes {FFFF04}/comprar estacionamiento\n{FFFFFF}Precio: {f21111}$%d\n\n{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para entrar a pie y {FFFF04}'H'{FFFFFF} para entrar en un vehículo.\nEl costo es de {f21111}$150{FFFFFF}/día.",id,Estacionamientos[id][DuenoName],Estacionamientos[id][Nivel],Estacionamientos[id][ePrecio]);
		Estacionamientos[id][Etiqueta] = CreateDynamic3DTextLabel(texto, COLOR_WHITE, Estacionamientos[id][PosX], Estacionamientos[id][PosY], Estacionamientos[id][PosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,-1);
		Estacionamientos[id][EtiquetaInterior] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir a pie y {FFFF04}'H'{FFFFFF} para salir en un vehículo.", COLOR_WHITE, Estacionamientos[id][SalidX], Estacionamientos[id][SalidY], Estacionamientos[id][SalidZ]+0.2, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Estacionamientos[id][eMundoVirtual], Estacionamientos[id][eInterior]);
	}
}
GetPropietarioEstacionamiento(id)
{
	new query[256];
	mysql_format(handle_db,query,sizeof(query),"SELECT * FROM usuarios WHERE ID = '%d'",Estacionamientos[id][Dueno]);
	mysql_tquery(handle_db,query,"setEstacionamientoName", "i",id);
}
public setEstacionamientoName(id)
{
	new content[MAX_PLAYER_NAME];
	if(cache_num_rows() > 0)
	{
		cache_get_value_name(0, "Username", content); format(Estacionamientos[id][DuenoName],MAX_PLAYER_NAME,"%s",content);
	}
	else format(Estacionamientos[id][DuenoName],MAX_PLAYER_NAME,"Nadie");
	CargarParking(id);
}
public LoadParkings()
{
	new count;
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p = 0;
		cache_get_value_name(i, "ID", content);		p = strval(content);		Estacionamientos[p][eID] = strval(content);
		if(p > 0)
		{
			cache_get_value_name(i, "Propietario", content);  			Estacionamientos[p][Dueno] = strval(content);
			cache_get_value_name(i, "SalidaX", content);  				Estacionamientos[p][PosX] = floatstr(content);
			cache_get_value_name(i, "SalidaY", content);  				Estacionamientos[p][PosY] = floatstr(content);
			cache_get_value_name(i, "SalidaZ", content);  				Estacionamientos[p][PosZ] = floatstr(content);
			cache_get_value_name(i, "SalidaA", content);  				Estacionamientos[p][PosA] = floatstr(content);
			cache_get_value_name(i, "EntradaX", content);  				Estacionamientos[p][SalidX] = floatstr(content);
			cache_get_value_name(i, "EntradaY", content);  				Estacionamientos[p][SalidY] = floatstr(content);
			cache_get_value_name(i, "EntradaZ", content);  				Estacionamientos[p][SalidZ] = floatstr(content);
			cache_get_value_name(i, "EntradaA", content);  				Estacionamientos[p][SalidA] = floatstr(content);
			cache_get_value_name(i, "Interior", content);  				Estacionamientos[p][eInterior] = strval(content);
			cache_get_value_name(i, "VirtualWorld", content);  			Estacionamientos[p][eMundoVirtual] = strval(content);
			cache_get_value_name(i, "EnUso", content);  				Estacionamientos[p][eEnUso] = strval(content);
			cache_get_value_name(i, "Nivel", content);  				Estacionamientos[p][Nivel] = strval(content);
			cache_get_value_name(i, "Precio", content);  				Estacionamientos[p][ePrecio] = strval(content);
			GetPropietarioEstacionamiento(p);
			count ++;
		}
	}
	printf("[ESTACIONAMIENTOS]: %d", count);
	return true;
}
public CargarEstacionamientos()
{
	new Query[200];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM estacionamientos");
	mysql_tquery(handle_db, Query,"LoadParkings");
	return 1;
}
public CargarCasas()
{
	new Query[200];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `propiedades`");
	mysql_pquery(handle_db, Query,"CargarPropiedades","");
	return 1;
}
public CargarActores()
{
	new Query[200];
	mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `actores_tiendas`");
	mysql_tquery(handle_db, Query, "cargarRoboTiendas","");
	return 1;
}
public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	printf("[ERROR] ID: %d - Error: %s - Callback - %s - Query: %s", errorid, error, callback, query);
	return 1;
}
public CargarPropiedades()
{
	new count = 0;
	for(new i = 0; i < cache_num_rows(); i++)
	{
		new content[40],p;
		cache_get_value_name(i, "ID", content); p = strval(content); PropInfo[p][pID] = strval(content);
		if(p > 0)
		{
			cache_get_value_name(i, "EnUso", content);  PropInfo[p][pEnUso] = strval(content);
			cache_get_value_name(i, "EnVentaPor", content); PropInfo[p][pEnVentaPor] = strval(content);
			cache_get_value_name(i, "IDPropietario", content); PropInfo[p][pIDPropietario] = strval(content);
			cache_get_value_name(i, "Propietario", content); format(PropInfo[p][pPropietario],40,"%s",content);
			cache_get_value_name(i, "Localizacion", content); format(PropInfo[p][pLocalizacion],40,"%s",content);
			cache_get_value_name(i, "VW", content);  PropInfo[p][pVW] = strval(content);
			cache_get_value_name(i, "EnVenta", content); PropInfo[p][pEnVenta] = strval(content);
			cache_get_value_name(i, "Precio", content); PropInfo[p][pPrecio] = strval(content);
			cache_get_value_name(i, "Nivel", content); PropInfo[p][pNivel] = strval(content);
			cache_get_value_name(i, "PosX", content); PropInfo[p][pPosX] = floatstr(content);
			cache_get_value_name(i, "PosY", content); PropInfo[p][pPosY] = floatstr(content);
			cache_get_value_name(i, "PosZ", content); PropInfo[p][pPosZ] = floatstr(content);
			cache_get_value_name(i, "PosA", content); PropInfo[p][pPosA] = floatstr(content);
			cache_get_value_name(i, "PosXS", content); PropInfo[p][pPosXS] = floatstr(content);
			cache_get_value_name(i, "PosYS", content); PropInfo[p][pPosYS] = floatstr(content);
			cache_get_value_name(i, "PosZS", content); PropInfo[p][pPosZS] = floatstr(content);
			cache_get_value_name(i, "PosAS", content); PropInfo[p][pPosAS] = floatstr(content);
			cache_get_value_name(i, "GX", content); PropInfo[p][pGX] = floatstr(content);
			cache_get_value_name(i, "GY", content); PropInfo[p][pGY] = floatstr(content);
			cache_get_value_name(i, "GZ", content); PropInfo[p][pGZ] = floatstr(content);
			cache_get_value_name(i, "GA", content); PropInfo[p][pGA] = floatstr(content);
			cache_get_value_name(i, "Ganancias", content);  PropInfo[p][pGanancias] = strval(content);
			cache_get_value_name(i, "Tipo", content);  PropInfo[p][pTipo] = strval(content);
			cache_get_value_name(i, "Interior", content);  PropInfo[p][pInterior] = strval(content);
			cache_get_value_name(i, "InteriorID", content);  PropInfo[p][pInteriorID] = strval(content);
			cache_get_value_name(i, "Abierta", content);  PropInfo[p][pAbierta] = strval(content);
			cache_get_value_name(i, "Sprunk", content);  PropInfo[p][pSprunk] = strval(content);
			cache_get_value_name(i, "Cerveza", content);  PropInfo[p][pCerveza] = strval(content);
			cache_get_value_name(i, "Aquarius", content);  PropInfo[p][pAquarius] = strval(content);
			cache_get_value_name(i, "Pizzas", content);  PropInfo[p][pPizzas] = strval(content);
			cache_get_value_name(i, "Vino", content);  PropInfo[p][pVino] = strval(content);
			cache_get_value_name(i, "Camara", content);  PropInfo[p][pCamara] = strval(content);
			cache_get_value_name(i, "Pala", content);  PropInfo[p][pPala] = strval(content);
			cache_get_value_name(i, "BateDeBeisbol", content);  PropInfo[p][pBateDeBeisbol] = strval(content);
			cache_get_value_name(i, "PaloDeGolf", content);  PropInfo[p][pPaloDeGolf] = strval(content);
			cache_get_value_name(i, "Manopla", content);  PropInfo[p][pManopla] = strval(content);
			cache_get_value_name(i, "PaloDeBillar", content);  PropInfo[p][pPaloDeBillar] = strval(content);
			cache_get_value_name(i, "ConsoladorRosa", content);  PropInfo[p][pConsoladorRosa] = strval(content);
			cache_get_value_name(i, "VibradorBlanco", content);  PropInfo[p][pVibradorBlanco] = strval(content);
			cache_get_value_name(i, "GranVibradorBlanco", content);  PropInfo[p][pGranVibradorBlanco] = strval(content);
			cache_get_value_name(i, "VibradorPlateado", content);  PropInfo[p][pVibradorPlateado] = strval(content);
			cache_get_value_name(i, "Baston", content);  PropInfo[p][pBaston] = strval(content);
			cache_get_value_name(i, "AK47", content);  PropInfo[p][pAK47] = strval(content);
			cache_get_value_name(i, "M4", content);  PropInfo[p][pM4] = strval(content);
			cache_get_value_name(i, "EscopetaNormal", content);  PropInfo[p][pEscopetaNormal] = strval(content);
			cache_get_value_name(i, "EscopetaDeCombate", content);  PropInfo[p][pEscopetaDeCombate] = strval(content);
			cache_get_value_name(i, "MP5", content);  PropInfo[p][pMP5] = strval(content);
			cache_get_value_name(i, "9mm", content);  PropInfo[p][p9mm] = strval(content);
			cache_get_value_name(i, "9mmSilenciada", content);  PropInfo[p][p9mmSilenciada] = strval(content);
			cache_get_value_name(i, "DesertEagle", content);  PropInfo[p][pDesertEagle] = strval(content);
			cache_get_value_name(i, "Rifle", content);  PropInfo[p][pRifle] = strval(content);
			cache_get_value_name(i, "Granada", content);  PropInfo[p][pGranada] = strval(content);
			cache_get_value_name(i, "Cuchillo", content);  PropInfo[p][pCuchillo] = strval(content);
			cache_get_value_name(i, "Katana", content);  PropInfo[p][pKatana] = strval(content);
			cache_get_value_name(i, "Crack", content);  PropInfo[p][pCrack] = strval(content);
			cache_get_value_name(i, "Medicamentos", content);  PropInfo[p][pMedicamentos] = strval(content);
			cache_get_value_name(i, "Marihuana", content);  PropInfo[p][pMarihuana] = strval(content);
			PropInfo[p][pEmisora] = 0;
			CargarPropiedad(p);
			count ++;
		}
	}
	printf("[PROPIEDADES]: %d",count);
	return true;
}
//
funcion MensajesAleatorios()
{
    SendClientMessageToAll(-1 ,Mensajes[random(sizeof(Mensajes))]);
    return 1;
}
//
public CargarPlanta(id)
{
	new string[256];
	switch(Marihuana[id][Status])
	{
		case 1:
		{
			if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
			if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
			if(!IsValidDynamicObject(Marihuana[id][Object])) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-2.3, 0.000000, 0.000000, -0.000000);
			format(string,sizeof(string),"{91ed00}Semillas de Marihuana{FFFFFF}\nSembradas por {4C94F6}%s{FFFFFF}\nSe secan en %dm %ds\n{FFFF04}/regar{FFFFFF}", Marihuana[id][Owner], Marihuana[id][Time]/60,Marihuana[id][Time]%(60));
			if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
			GuardarPlanta(id);
		}
		case 2:
		{
			if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
			if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
			if(Marihuana[id][Time]/3600 <= 1) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1, 0.000000, 0.000000, -0.000000);
			else if(Marihuana[id][Time]/3600 == 2) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.26, 0.000000, 0.000000, -0.000000);
			else if(Marihuana[id][Time]/3600 == 3) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.52, 0.000000, 0.000000, -0.000000);
			else if(Marihuana[id][Time]/3600 == 4) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1.78, 0.000000, 0.000000, -0.000000);
			else Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-2.04, 0.000000, 0.000000, -0.000000);
			format(string,sizeof(string),"{f21111}Planta de Marihuana{FFFFFF}\nSembrada por {f21111}%s{FFFFFF}\nMadura en %dh %dm %ds", Marihuana[id][Owner],Marihuana[id][Time]/3600, Marihuana[id][Time]/60%(60),Marihuana[id][Time]%(60));
			if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
			GuardarPlanta(id);
		}
		case 3:
		{
			if(IsValidDynamicObject(Marihuana[id][Object])) DestroyDynamicObject(Marihuana[id][Object]);
			if(IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[id][Etiqueta]);
			if(!IsValidDynamicObject(Marihuana[id][Object])) Marihuana[id][Object] = CreateDynamicObject(19473, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]-1, 0.000000, 0.000000, -0.000000);
			format(string, sizeof(string), "{f21111}Planta de Marihuana{FFFFFF}\nSembrada por {f21111}%s{FFFFFF}\nSe seca en %dh %dm %ds\n{FFFF04}/cosechar planta{FFFFFF}", Marihuana[id][Owner],Marihuana[id][Time]/3600, Marihuana[id][Time]/60%(60),Marihuana[id][Time]%(60));
			if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
			GuardarPlanta(id);
		}
	}
	return true;
}
GuardarPlanta(id)
{
	new query[256];
	mysql_format(handle_db,query,sizeof(query),"UPDATE marihuana SET Owner = '%e', X = '%f', Y = '%f', Z = '%f', Time = '%d', Estado = '%d', Creado = '%d' WHERE ID = '%d'",Marihuana[id][Owner],Marihuana[id][PosX],Marihuana[id][PosY],Marihuana[id][PosZ],Marihuana[id][Time],Marihuana[id][Status],Marihuana[id][Created],Marihuana[id][mID]);
	mysql_tquery(handle_db,query);
	return true;
}

CargarPropiedad(id)
{
    BorrarLabelCasa(id);
	new string[350];
	if(PropInfo[id][pEnVenta] == 0)
	{
		PropInfo[id][pAbierta] = 0;
		if(PropInfo[id][pTipo] == 2) // Oficina
		{
			format(string, sizeof(string), "{FF0000}Oficina de {868b9e}%s\n{FFFFFF}Localizacion {868b9e}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar ingresar.",PropInfo[id][pPropietario],PropInfo[id][pLocalizacion]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pRoperoX] != 0)
			{
				if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel4])) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel5])) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else if(PropInfo[id][pTipo] == 3) // Restaurante
		{
			format(string, sizeof(string), "{FF0000}Restaurante de {868b9e}%s\n{FFFFFF}Localizacion {868b9e}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar ingresar.",PropInfo[id][pPropietario],PropInfo[id][pLocalizacion]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pAbierta] == 1) PropInfo[id][pPickup] = CreateDynamicPickup(1318,23,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
			if(PropInfo[id][pRoperoX] != 0)
			{
				if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel4])) PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				if(!IsValidDynamic3DTextLabel(PropInfo[id][pLabel5])) PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else if(PropInfo[id][pTipo] == 4) // Empresa privada
		{
			format(string, sizeof(string), "{FF0000}Empresa privada de {868b9e}%s\n{FFFFFF}Localizacion {868b9e}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar ingresar.",PropInfo[id][pPropietario],PropInfo[id][pLocalizacion]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			PropInfo[id][Amater] = CreateDynamicObject(17951, 1403.85803, 601.39990, 1001.69550,   0.00000, 0.00000, 270.00000, PropInfo[id][pInterior],PropInfo[id][pVW]);
			PropInfo[id][PuertaIT] = CreateDynamicObject(19465, 1438.349976, 594.840027, 1002.510010, 0.000000, 0.000000, 90.000000,PropInfo[id][pInterior],PropInfo[id][pVW]);
			SetDynamicObjectMaterial(PropInfo[id][PuertaIT], 0, 14592, "casinoVault01", "copbtm_brown");
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/salir{FFFFFF} para salir del garaje.",COLOR_WHITE,1403.8179,601.0150,1001.0300+1,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else // Casa
		{
			format(string, sizeof(string), "{FF0000}Casa\n{868b9e}%s %d\n{FFFFFF}Propietario: {FFFF04}%s\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar ingresar.", PropInfo[id][pLocalizacion], PropInfo[id][pID], PropInfo[id][pPropietario]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
	}
	else
	{
		PropInfo[id][pAbierta] = 1;
		if(PropInfo[id][pTipo] == 2) // Oficina
		{
			if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{FFFF04}Oficina en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}$%d\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			else format(string, sizeof(string), "{FFFF04}Oficina en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}%d RZ\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pPickup] = CreateDynamicPickup(1273,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else if(PropInfo[id][pTipo] == 3) // Restaurante
		{
			if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{FFFF04}Restaurante en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}$%d\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			else format(string, sizeof(string), "{FFFF04}Restaurante en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}%d RZ\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pPickup] = CreateDynamicPickup(1272,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else if(PropInfo[id][pTipo] == 4) // Empresa privada
		{
			if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{FFFF04}Empresa privada en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}$%d\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			else format(string, sizeof(string), "{FFFF04}Empresa privada en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}%d RZ\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pPickup] = CreateDynamicPickup(1272,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			PropInfo[id][PuertaIT] = CreateDynamicObject(19465, 1438.349976, 594.840027, 1002.510010, 0.000000, 0.000000, 90.000000,PropInfo[id][pInterior],PropInfo[id][pVW]);
			SetDynamicObjectMaterial(PropInfo[id][PuertaIT], 0, 14592, "casinoVault01", "copbtm_brown");
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel6] = CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF04}/salir{FFFFFF} para salir del garaje.",COLOR_WHITE,1403.8179,601.0150,1001.0300+1,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
		else
		{
			if(PropInfo[id][pEnVentaPor] == 0) format(string, sizeof(string), "{FFFF04}Propiedad en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}$%d\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			else format(string, sizeof(string), "{FFFF04}Propiedad en venta\n{FFFFFF}Localizacion {868b9e}%s {FFFFFF}- Precio: {f21111}%d RZ\n\n{FFFFFF}Pulsa {FFFF04}'F' {FFFFFF}para entrar al interior\n{FFFFFF}Pulsa {FFFF04}'Y' {FFFFFF}para comprar la propiedad",PropInfo[id][pLocalizacion],PropInfo[id][pPrecio]);
			PropInfo[id][pLabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]+0.8,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			PropInfo[id][pPickup] = CreateDynamicPickup(1273,1,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ],0);
			PropInfo[id][pLabel2] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para salir.",COLOR_WHITE,PropInfo[id][pPosXS],PropInfo[id][pPosYS],PropInfo[id][pPosZS]+1.0,15.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			DarPosicionHeladera(id);
			if(PropInfo[id][pRoperoX] != 0)
			{
				PropInfo[id][pLabel4] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'F'{FFFFFF} para ingresar.",COLOR_WHITE,PropInfo[id][pRoperoX],PropInfo[id][pRoperoY],PropInfo[id][pRoperoZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,PropInfo[id][pVW],PropInfo[id][pInteriorID],-1,100.0);
			}
			if(PropInfo[id][pGX] != 0)
			{
				PropInfo[id][pLabel5] = CreateDynamic3DTextLabel("{FFFFFF}Pulsa {FFFF04}'H'{FFFFFF} para ingresar al garaje.",COLOR_WHITE,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]+0.6,7.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,0,0,-1,100.0);
			}
		}
	}
	return true;
}
BorrarLabelCasa(p)
{
	if(IsValidDynamicObject(PropInfo[p][PuertaIT])) DestroyDynamicObject(PropInfo[p][PuertaIT]);
	if(IsValidDynamicPickup(PropInfo[p][pPickup])) DestroyDynamicPickup(PropInfo[p][pPickup]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel])) DestroyDynamic3DTextLabel(PropInfo[p][pLabel]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel2]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel2]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel3]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel3]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel4]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel4]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel5]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel5]);
	if(IsValidDynamic3DTextLabel(PropInfo[p][pLabel6]))DestroyDynamic3DTextLabel(PropInfo[p][pLabel6]);
	if(IsValidDynamicObject(PropInfo[p][Amater])) DestroyDynamicObject(PropInfo[p][Amater]);
}

public LlenarBalde(playerid)
{
	Descongelar(playerid);
	BaldeAgua[playerid] = 1;
	StopAudioStreamForPlayer(playerid);
	SendClientMessage(playerid, -1, "Llenaste el balde de agua, ahora puedes {FFFF04}/regar{FFFFFF} tu plantación.");
	return 1;
}
public CrearPlanta(playerid,id)
{
	new Query[680], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	mysql_format(handle_db, Query, sizeof(Query),"INSERT INTO marihuana (X, Y, Z) VALUES ('%f', '%f', '%f')", X, Y, Z);
	mysql_tquery(handle_db, Query,  "CrearPlanta2", "dfffi", playerid, X, Y, Z,id);
	return 1;
}
public CrearPlanta2(playerid, Float:X, Float:Y, Float:Z,id)
{
	if(!IsValidDynamic3DTextLabel(Marihuana[id][Etiqueta])) Marihuana[id][Etiqueta] = CreateDynamic3DTextLabel("Sembrando...", COLOR_WHITE, Marihuana[id][PosX], Marihuana[id][PosY], Marihuana[id][PosZ]+0.9, 8.0);
	Streamer_Update(playerid,0);
	Marihuana[id][Created] = 1;
	Marihuana[id][mID] = id;
	Marihuana[id][PosX] = X;
	Marihuana[id][PosY] = Y;
	Marihuana[id][PosZ] = Z;
	Marihuana[id][Time] = 1020;
	Marihuana[id][Status] = 1;
	format(Marihuana[id][Owner], 24, PLAYER_INFO[playerid][Nickname]);
	GuardarPlanta(id);
	SetTimerEx("DescongelarCBUG",3000,false,"d",playerid);
	SetTimerEx("CargarPlanta",2500,false,"d",id);
	return 1;
}

EnAcademia(playerid)
{
	if(GetPlayerInterior(playerid) == 1 && GetPlayerVirtualWorld(playerid) == 9) return 1;
	return false;
}
EnSalonEvento(playerid)
{
	if(IsPlayerInArea(playerid, -1244.693847, 2027.578979, -1139.976074, 2129.051025) && GetPlayerInterior(playerid) == 13) return 1;
	return false;
}
EnSalonEvento2(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,500,-1191.9619,2035.5724,1248.3600)) return true;
	return false;
}
IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if (x > minx && x < maxx && y > miny && y < maxy) return 1;
	return 0;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(bloqueado[vehicleid] == 1)
	{
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
	}
	SetVehicleParamsForPlayer(vehicleid, forplayerid, iVehicleObjective[vehicleid][0], iVehicleObjective[vehicleid][1]);
}
public SalonTimer()
{
	KillTimer(AlquiladoTimer);
	new string[147], id = -1;
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(strcmp(Alquilador,PLAYER_INFO[i][Nickname],true) == 0)
			{
				id = i;
			}
		}
		if(Boleto[i] == true) Boleto[i] = false;
		if(EnSalonEvento(i) ||EnSalonEvento2(i))
		{
			if(Alquilado == true)
            {
				SendClientMessage(i,-1,"El evento acaba de terminar, por favor abandona el salón principal.");
				if(Humo1Ojb == 1)
				{
					DestroyDynamicObject(ObjHumo1[0]);
					DestroyDynamicObject(ObjHumo1[1]);
					Humo1Ojb = 0;
				}
				if(Humo2Ojb == 1)
				{
					DestroyDynamicObject(ObjHumo2[0]);
					DestroyDynamicObject(ObjHumo2[1]);
					Humo2Ojb = 0;
				}
			}
		}
		if(TipoEvento == 2)
		{
			if(BoxObj == 1)
			{
				for(new a = 0; a<33; a++)
				{
					if(IsValidDynamicObject(ObjBox[a]))
					{
						DestroyDynamicObject(ObjBox[a]);
					}
				}
				BoxObj = 0;
			}
		}
		if(TipoEvento == 3)
		{
			if(ExpObj == 1)
			{
				for(new b = 0; b<19; b++)
				{
					if(IsValidDynamicObject(ObjExp[b]))
					{
						DestroyDynamicObject(ObjExp[b]);
					}
				}
				ExpObj = 0;
			}
			SendClientMessage(i,-1,"Si llevaste un vehículo a la exposición, este fue remolcado al estacionamiento que se encuentra al costado del salón de eventos.");
			for(new k, h = GetVehiclePoolSize(); k <= h; k++)
			{
				if(GetVehicleInterior(k) == 13 && GetVehicleVirtualWorld(k) == 1)
				{
					if(k == autos[i]) Auto1(i, 5);
					if(k == autos2[i]) Auto2(i, 5);
					if(k == autos3[i]) Auto3(i, 5);
					if(k == autos4[i]) Auto4(i, 5);
					else Respawnear(k);
				}
			}
		}
		if(TipoEvento == 4)
		{
			if(ConObj == 1)
			{
				for(new c = 0; c<4; c++)
				{
					if(IsValidDynamicObject(ObjCon[c]))
					{
						DestroyDynamicObject(ObjCon[c]);
					}
				}
				ConObj = 0;
			}
		}
	}
	if(id != -1)
	{
		format(string,sizeof(string),"Ganaste {f21111}$%d{FFFFFF} por las entradas vendidas. El dinero ya se encuentra en tu cuenta bancaria.",Personas*PrecioSalon);
		SendClientMessage(id,-1,string);
		PLAYER_INFO[id][pBanco] += Personas*PrecioSalon;
	}
	format(Alquilador,sizeof(Alquilador),"Nadie");
	Alquilado = false;
	HorasSalon = 0;
	Personas = 0;
	PrecioSalon = 0;
	NivelSalon = 0;
	format(NombreEvento,sizeof(NombreEvento),"Sin Nombre");
	format(DescriEvento,sizeof(DescriEvento),"Sin Descripción");
	TipoEvento = 0;
	TextoSalon = Create3DTextLabel("{FFFFFF}Puedes {F6F61D}/alquilar salon{FFFFFF} de eventos.\nCosto por hora: {00D61C}$20.000", COLOR_WHITE, -1250.3397,2093.7437,1246.6360, 5, 1, 0);
	Delete3DTextLabel(TextoSalon2);
}
NombreTrabajo(trabajo)
{
	new jobstr[64];
	if(trabajo == 0) 						jobstr = "Ninguno";
	else if(trabajo == T_Medico) 			jobstr = "Médico";
	else if(trabajo == T_Taxista)			jobstr = "Taxista";
	else if(trabajo == T_Guardaespaldas)	jobstr = "Guardaespaldas";
	else if(trabajo == T_Camionero) 		jobstr = "Camionero";
	else if(trabajo == T_Basurero) 			jobstr = "Basurero";
	else if(trabajo == T_Armero) 			jobstr = "Fabricante de armas";
	else if(trabajo == T_Mecanico) 			jobstr = "Mecánico";
	else if(trabajo == T_Transportista) 	jobstr = "Transportista";
	else if(trabajo == T_Criminal) 			jobstr = "Criminal";
	else if(trabajo == T_Prostituta) 		jobstr = "Prostitucion";
	else if(trabajo == T_Trailero)          jobstr = "Trailero";
	return jobstr;
}
CMD:acento(playerid)
{
    ShowDialog(playerid, DIALOG_ACENTO);
	return 1;
}

CMD:colores(playerid, params[])
{
	if(PLAYER_INFO[playerid][pVIP] != 2 && PLAYER_INFO[playerid][pVIP] !=3) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas {f21111}VIP2 {FFFFFF}Para usar este comando.");
	SendClientMessage(playerid, COLOR_GREY, "{000000}______________________________________________");
	SendClientMessage(playerid, COLOR_GREY, "{00A6F7}Colores 'ID' de vehículos");
	SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}-- Negro [0] Blanco [1] Turquesa [2] Rojo [3] Gris claro / Verde oscuro [4] Rosa claro [5] --");
	SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}-- Amarillo [6] Azul claro [7] Blanco oscuro [8] Verde claro [9] Azul oscuro [10] Plateado [11] --");
	SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}-- Azul muy claro [12] Gris oscuro [13] [14 es como 8/1] Gris muy claro [15] Verde [16] --");
	SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}-- Rojo oscuro [17] Rosa oscuro [18] [19 es como 8] Azul cielo [20] Rosa [126] --");
	SendClientMessage(playerid, COLOR_GREY, "{000000}______________________________________________");
	return 1;
}

CMD:repararvip3(playerid)
{
	new string[250];
    if(PLAYER_INFO[playerid][pVIP] != 3) return SendClientMessage(playerid, -1, "Necesitas tener {f21111}VIP3{FFFFFF} para usar éste comando.");
   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
    if(PLAYER_TIMES[playerid][Tiempo_V3] > gettime())
	{
		if(PLAYER_TIMES[playerid][Tiempo_V3] - gettime() > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(PLAYER_TIMES[playerid][Tiempo_V3] - gettime()) /60, (PLAYER_TIMES[playerid][Tiempo_V3] - gettime())%(60));
		else if(PLAYER_TIMES[playerid][Tiempo_V3] - gettime() < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos",(PLAYER_TIMES[playerid][Tiempo_V3] - gettime())%(60));
		return SendClientMessage(playerid, -1,string);
	}
	PLAYER_TIMES[playerid][Tiempo_V3] = gettime() + 40*60;
	AccionesRol(playerid,"repara su vehículo con sus herramientas", 20);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:venderv(playerid)
{

	new string[200];
	if(PLAYER_TIMES[playerid][TiempoVenderv] > 0)
	{
		if(PLAYER_TIMES[playerid][TiempoVenderv] > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s){FFFFFF}.",PLAYER_TIMES[playerid][TiempoVenderv]/60, PLAYER_TIMES[playerid][TiempoVenderv]%(60));
		else if(PLAYER_TIMES[playerid][TiempoVenderv] < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos{FFFFFF}.",PLAYER_TIMES[playerid][TiempoVenderv]%(60));
		return SendClientMessage(playerid, -1,string);
	}
	VENDER_VPLAYER(playerid);
	return 1;
}

CMD:baneados(playerid)
{
	ShowDialog(playerid, DIALOG_MENU_DESBAN);
	return 1;
}
CMD:rac(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	resetearcoches();
	return 1;
}
CMD:racall(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	resetearcochesall();
	return 1;
}

CMD:testsh(playerid, params[])
{
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new Float:value;
    if(sscanf(params, "f", value)) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /testsh <Value ( Estable 60.0 )>");

    TEST_SPEED_PLAYER = value;
	return 1;
}

CMD:testtp(playerid, params[])
{
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new Float:value;
    if(sscanf(params, "f", value)) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /testsh <Value ( Estable 60.0 )>");

    TEST_TP = value;
	return 1;
}

CMD:adminarena(playerid)
{
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(EVENTO_DM == 0)
	{
	    new string[200];
	    format(string, 200, "Arena creado por {f21111}%s{ffffff}, si quieres ir usa {f21111}/irarena", PLAYER_INFO[playerid][Nickname]);
     	SendClientMessageToAll(-1,string);
		EVENTO_DM = 1;
	}
    else
	{
	    foreach(new i : Player) PLAYER_TEMP[i][pt_PLAYER_EVENTODM] = 0;
		EVENTO_DM = 0;
    }
	return 1;
}

CMD:salirarena(playerid)
{
	if(EVENTO_DM == 0) return SendClientMessage(playerid, -1, "El evento no esta activo.");
    if(PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] == 0) return SendClientMessage(playerid, -1, "No te encuentras en un evento.");

	SetPosEx(playerid, PLAYER_TEMP[playerid][pt_EVENTO_POS][0],PLAYER_TEMP[playerid][pt_EVENTO_POS][1],PLAYER_TEMP[playerid][pt_EVENTO_POS][2], 0, PLAYER_TEMP[playerid][pt_EVENTO_INT], PLAYER_TEMP[playerid][pt_EVENTO_VW]);
	PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] = 0;
 	SetPlayerHealthEx(playerid, PLAYER_TEMP[playerid][pt_EVENTO_HEALTH]);
	SetPlayerArmourEx(playerid, PLAYER_TEMP[playerid][pt_EVENTO_ARMOUR]);
	QuitarArmas(playerid);

	for(new i = 0; i < 13; i++)
	{
	    if(PLAYER_TEMP[playerid][pt_EVENTO_ARMAS][i] != 0)
	    {
			DarArma(playerid, PLAYER_TEMP[playerid][pt_EVENTO_ARMAS][i]);
		}
	}
	return 1;
}

CMD:irarena(playerid)
{
	if(EVENTO_DM == 0) return SendClientMessage(playerid, -1, "El evento no esta activo.");
	if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes ir al evento estando en combate");
	if(PLAYER_INFO[playerid][pCargos] >= 1) return SendClientMessage(playerid,-1,"No puedes ir al evento teniendo cargos.");
	if(PLAYER_INFO[playerid][pTiempoJail] != 0) return 1;
	if(PLAYER_INFO[playerid][pTiempoCarcel] != 0) return 1;
	
	if(PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] == 0)
    {
        if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][mDuty] == 1)
        {
	        SetPlayerColor(playerid, COLOR_WHITE);
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			PLAYER_INFO[playerid][pDuty] = 0;
			PLAYER_INFO[playerid][mDuty] = 0;
	    }
        PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] = 1;
	    PLAYER_TEMP[playerid][pt_EVENTO_INT] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][pt_EVENTO_VW] = GetPlayerVirtualWorld(playerid);
	    GetPlayerPos(playerid, PLAYER_TEMP[playerid][pt_EVENTO_POS][0],PLAYER_TEMP[playerid][pt_EVENTO_POS][1],PLAYER_TEMP[playerid][pt_EVENTO_POS][2]);
	    GetPlayerHealth(playerid, PLAYER_TEMP[playerid][pt_EVENTO_HEALTH]);
	    GetPlayerArmour(playerid, PLAYER_TEMP[playerid][pt_EVENTO_ARMOUR]);
	    for(new i = 0; i < 13; i++)
		{
			if(PLAYER_INFO[playerid][j_ARMAS][i] != 0)
			{
				PLAYER_TEMP[playerid][pt_EVENTO_ARMAS][i] = PLAYER_INFO[playerid][j_ARMAS][i];
			}
		}
    }
    SetPlayerHealthEx(playerid,100);
 	SetPlayerArmourEx(playerid,100);
	QuitarArmas(playerid);
	DarArma(playerid, 24);
	DarArma(playerid, 27);
	
	defer EnviarEventoDM(playerid);
	return 1;
}

CMD:control(playerid,params[])
{
    if(!sscanf(params, "s[17]d", params[0], params[1]))
	{
		if(strcmp(params[0],"policial",true) == 0)
		{
		    if(PLAYER_INFO[playerid][pFaccion] != 1) return SendClientMessage(playerid, -1, "No eres policía.");
		    if(PLAYER_INFO[playerid][pDuty] != 1) return SendClientMessage(playerid, -1, "No estás de servicio como policía.");
		    //
		    if(PLAYER_INFO[playerid][pFaccion] != 1) return SendClientMessage(playerid, -1, "No eres militar.");
		    if(PLAYER_INFO[playerid][mDuty] != 2) return SendClientMessage(playerid, -1, "No estás de servicio como militar.");
		    //
		    if(AUTORIZED_POLICE_OBJECT_ID == 0) return SendClientMessage(playerid, -1,"No hay autorización para colocar controles policíales.");
			if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, -1, "No puedes colocar objetos policiales aquí.");

			new modelid;
			switch(params[1])
			{
				case 1: modelid = 1459;
				case 2: modelid = 19425;
				case 3: modelid = 1238;
				case 4: modelid = 1425;
				case 5: modelid = 4519;
				case 6: modelid = 3265;
				case 7: modelid = 3091;
				case 8: modelid = 1237;
				case 9: modelid = 1424;
				case 10: modelid = 1423;
				default: return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/control [Tipo 1 - 10]");
			}
			new ID = GetFreePoliceObjectSlot();
			if(ID == -1) return SendClientMessage(playerid, -1, "No se pueden crear más objetos policiales.");

			POLICE_OBJECTS[ID][police_object_VALID] = true;
			format(POLICE_OBJECTS[ID][police_object_USER], 24, "%s", PLAYER_INFO[playerid][Nickname]);

			new Float:pos[3], Float:angle;
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(playerid, angle);
			pos[0] += (1.5 * floatsin(-angle, degrees));
			pos[1] += (1.5 * floatcos(-angle, degrees));

			POLICE_OBJECTS[ID][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, 0, 0);
			Streamer_Update(playerid);

            new info[2];
			info[0] = 1;
			info[1] = ID;
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[ID][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
			PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_ID] = ID;
			EditDynamicObject(playerid, POLICE_OBJECTS[ID][police_object_OBJECT_ID]);
			SendClientMessage(playerid, -1, "Coloca el objeto, posteriormente puedes usar {FFFF04}/editar control{ffffff} para moverlo o eliminarlo.");
			return 1;
		}
	    else SendClientMessage(playerid,-1,"Utiliza {FFFF04}/control [Tipo 1 - 10]");
	}
	else
	{
	    if(!IsPlayerInRangeOfPoint(playerid,5.0,-1192.7413,2064.7136,1254.8612)) return SendClientMessage(playerid,-1,"Solo se puede controlar el escenario desde el panel de control.");
	    
		new maquina1[50],maquina2[50],mensaje[100];
		if(Humo1Ojb == 0) maquina1="Encender maquinas de humo delanteras";
		else maquina1="Apagar maquinas de humo delanteras";
		if(Humo2Ojb == 0) maquina2="Encender maquinas de humo traseras";
		else maquina2="Apagar maquinas de humo traseras";
		format(mensaje, sizeof(mensaje), "%s\n%s",	maquina1,maquina2);
		return ShowPlayerDialog(playerid, CONTROLES, DIALOG_STYLE_LIST, "Panel de control", mensaje, "Accionar","Cancelar");
	}
	return 1;
}

CMD:editar(playerid, params[])
{
    if(PLAYER_INFO[playerid][pFaccion] != 1) return SendClientMessage(playerid, -1, "No eres policía.");
    if(PLAYER_INFO[playerid][pDuty] != 1) return SendClientMessage(playerid, -1, "No estás de servicio como policía.");
	    
    if(sscanf(params, "s[17]", params[0])) return SendClientMessage(playerid,-1,"Utiliza {FFFF04}/editar control.");
    else if(strcmp(params[0],"control",true) == 0)
	{
	    if(AUTORIZED_POLICE_OBJECT_ID == 0) return SendClientMessage(playerid, -1,"No hay autorización para editar controles policíales.");
	   	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, -1, "No puedes editar objetos policiales aquí.");
	   	
	   	SendClientMessage(playerid, -1, "Para editar tienes que hacer click en el objeto policíal.");
		return SelectObject(playerid);
	}
	return 1;
}

CMD:autorizar(playerid, params[])
{
    if(PLAYER_INFO[playerid][pFaccion] != 1) return SendClientMessage(playerid, -1, "No eres policía.");
    if(PLAYER_INFO[playerid][pDuty] != 1) return SendClientMessage(playerid, -1, "No estás de servicio como policía.");
    if(PLAYER_INFO[playerid][pRango] <= 3) return SendClientMessage(playerid, -1, "Debes ser al menos rango Sargento para colocar objetos policiales.");
    
    if(sscanf(params, "s[17]", params[0])) return SendClientMessage(playerid,-1,"Utiliza {FFFF04}/autorizar control.");
    else if(strcmp(params[0],"control",true) == 0)
    {
        if(AUTORIZED_POLICE_OBJECT_ID == 0) AUTORIZED_POLICE_OBJECT_ID = 1;
        else AUTORIZED_POLICE_OBJECT_ID = 0;

		new string[200];
        format(string, 200,"{3399FF}[Central de policía]{FFFFFF} %s %s %s a colocar controles a todos los policiás.",RangoBanda(PLAYER_INFO[playerid][pDuty], PLAYER_INFO[playerid][pRango]), PLAYER_INFO[playerid][Nickname], (AUTORIZED_POLICE_OBJECT_ID) ? ("autoriza") : ("qutio la autorización"));
		SendRadioPoliceMessage(-1, string);
		return 1;
    }
    return 1;
}

CMD:borrarcontrol(playerid, params[])
{
	new count;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) continue;

		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		count ++;
	}
	SendClientMessageEx(playerid, -1, "Se han eliminado todos los objetos policiales, %d objetos afectados.", count);
	return 1;
}

CMD:informacion(playerid, params[])
{
	new dialog[] = "{ff0000}Información importante:\n\n\
	{ffffff}- Desde ahora las propiedades que esten compradas por usuarios que no entren al servidor\n\
	{ffffff}  por una semana o más sera {ff0000}eliminada sin previo aviso{ffffff} ni devolucion de dinero/RZ´s.\n\
	{ffffff}  Lo mismo se aplica para las fabricas.\n\n\
	{ffffff}- Para pedir cambio de nombre o una propiedad usa {FFFF04}/crear pedido.\n\n\n\
	{ffffff}Discord Oficial: {3399FF}discord.gg/DcZmpwU45q";
	return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Información del servidor", dialog, "Aceptar", "");
}

CMD:skininfo(playerid, params[])
{
    new ID;
    if(sscanf(params,"u",ID)) return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/skininfo{ffffff} [ID].");
    
    SendClientMessageEx(playerid, -1,"Skin: %d | Skin Secundario( Trabajo ): %d | Skin Actual: %d", PLAYER_INFO[ID][pRopa], PLAYER_INFO[ID][pModelo], GetPlayerSkin(ID));
	return 1;
}

CMD:infoex(playerid, params[])
{
    new ID, type,Float:X, Float:Y, Float:Z, Float:Angulo;

    if(!sscanf(params, "dd", ID, type))
    {
        if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "{FF6347}El jugador no está conectado.");
    	if(PLAYER_INFO[ID][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, -1, "{FF6347}El rango administrativo de este jugador es superior al tuyo.");

	    switch(type)
	    {
	        case 1: SendClientMessageEx(playerid, -1,"{999999}%s(%d) tiene la animación: %d.",PLAYER_INFO[ID][Nickname], ID, GetPlayerAnimationIndex(ID));
	        case 2:
	        {
				GetPlayerFacingAngle(ID, Angulo);
			 	GetPlayerPos(ID, X, Y, Z);
			   	SendClientMessageEx(playerid, -1, "{999999}[Coordenadas %s[ID: %d] actuales X: %.2f | Y: %.2f | Z: %.2 | A: %.2f | Int: %d | VW: %d].", PLAYER_INFO[ID][Nickname], ID, X, Y, Z, Angulo, GetPlayerInterior(ID), GetPlayerVirtualWorld(ID));
			}
			case 3: SendClientMessageEx(playerid, -1, "{999999}Salud del jugador %s [ID: %d]: (Vida: %.1f) - (Chaleco: %.1f)", PLAYER_INFO[ID][Nickname], ID, PLAYER_INFO[ID][j_HEALTH], PLAYER_INFO[ID][j_ARMOUR]);
		}
		return 1;
	}
    else if(!sscanf(params, "d", type))
    {
	    switch(type)
	    {
	        case 1: SendClientMessageEx(playerid, -1,"{999999}Tienes la animación: %d.",GetPlayerAnimationIndex(playerid));
	        case 2:
	        {
				GetPlayerFacingAngle(playerid, Angulo);
			 	GetPlayerPos(playerid, X, Y, Z);

			   	SendClientMessageEx(playerid, -1, "{999999}[Tus coordenadas actuales X: %.2f | Y: %.2f | Z: %.2f | A: %.2f | Int: %d | VW: %d].", X, Y, Z, Angulo, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			}
			case 3: SendClientMessageEx(playerid, -1, "{999999}Tu salud es de: (Vida: %.1f) - (Chaleco: %.1f)", PLAYER_INFO[playerid][j_HEALTH], PLAYER_INFO[playerid][j_ARMOUR]);
		}
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, -1, "Uso 1: {FFFF04}/info{ffffff} [ID] [type: 1: animación | 2: cordenadas - 3: Vida y Chaleco");
	    SendClientMessage(playerid, -1, "Uso 2: {FFFF04}/info{ffffff} [type: 1: animación | 2: cordenadas - 3: Vida y Chaleco");
	}
	return 1;
}
CMD:estadocv(playerid)
{
	if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 1)
	{
	    if(CV_ACTIVATE == 0) CV_ACTIVATE = 1;
	    else CV_ACTIVATE = 0;

	    return SendClientMessageEx(playerid, -1,"Las convocatorias para SAPD estan %s.",  CV_ACTIVATE ? ("activadas") : ("desactivadas"));
	}
    else if(PLAYER_INFO[playerid][pRango] <= 7 && PLAYER_INFO[playerid][pFaccion] != 1)
    {
	    if(CV_ACTIVATE == 0) CV_ACTIVATE = 1;
	    else CV_ACTIVATE = 0;

	    return SendClientMessageEx(playerid, -1,"Las convocatorias para SAPD estan %s.",  CV_ACTIVATE ? ("activadas") : ("desactivadas"));
    }
    else SendClientMessage(playerid, -1,"No tienes los permisos necesarios.");
    return 1;
}

CMD:deletecvs(playerid)
{
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 1)
	{
	    new Query[70];
	    mysql_format(handle_db, Query, sizeof(Query),"TRUNCATE `curriculum_table`;",PLAYER_INFO[playerid][pID]);
	    mysql_query(handle_db, Query, false);

	    return SendClientMessage(playerid, -1,"Todos los curriculums fueron borrados correctamente.");
	}
	else if(PLAYER_INFO[playerid][pRango] == 8 && PLAYER_INFO[playerid][pFaccion] == 1)
	{
	    new Query[70];
	    mysql_format(handle_db, Query, sizeof(Query),"TRUNCATE `curriculum_table`;",PLAYER_INFO[playerid][pID]);
	    mysql_query(handle_db, Query, false);

	    return SendClientMessage(playerid, -1,"Todos los curriculums fueron borrados correctamente.");
    }
    else SendClientMessage(playerid, -1,"No tienes los permisos necesarios.");
    return 1;
}

CMD:curriculums(playerid)
{
    if(PLAYER_INFO[playerid][pRango] <= 7 && PLAYER_INFO[playerid][pFaccion] != 1) return SendClientMessage(playerid, -1,"No tienes los permisos necesarios.");
    if(PlayerToPoint(5.0, playerid, 275.8204,1865.2871,8.7578))
    {
        ShowDialog(playerid, DIALOG_CURRICULUMS);
    }
	return 1;
}

CMD:curriculum(playerid)
{
    if(PlayerToPoint(5.0, playerid, 252.3920, 117.3864, 1003.2188))
    {
        if(CV_ACTIVATE == 0) return SendClientMessage(playerid, -1,"Las convocatorias para SAPD no estan activas.");
        
        if(PLAYER_INFO[playerid][pFaccion] != 0) return SendClientMessage(playerid, -1,"No puedes pertenecer a una banda para hacer esta acción.");
        
        new Query[70];
	    mysql_format(handle_db, Query, sizeof(Query),"SELECT * FROM `curriculum_table` WHERE `ID_DB`='%d';",PLAYER_INFO[playerid][pID]);
	    mysql_query(handle_db, Query, true);

        if(!cache_num_rows()) ShowDialog(playerid, DIALOG_POSTULACION);
        else SendClientMessage(playerid, -1,"La base de datos ya tiene un registro de tu curriculum.");
        return 1;
    }
	return 1;
}

CMD:cambiarpass(playerid, params[])
{
    new ID;
    if(sscanf(params,"u",ID)) return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/cambiarpass{ffffff} [ID].");
  	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "{FF6347}El jugador no está conectado.");
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_INFO[ID][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, -1, "{FF6347}El rango administrativo de este jugador es superior al tuyo.");

    ShowDialog(ID, DIALOG_CHANGE_PASS);
	return 1;
}

CMD:cambiarpassoff(playerid, params[])
{
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 1;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new name[24],pass[19];
    if(sscanf(params,"s[24]s[19]",name,pass)) return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/cambiarpassoff{ffffff} [Nombre_Jugador] [Pass].");
 
    new escapepass[100],Query[250];
	mysql_escape_string(pass, escapepass);
	mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` set `Password`=md5('%e') WHERE `Username`='%e'",escapepass, name);
	mysql_query(handle_db, Query, true);
	return 1;
}
CMD:ref(playerid,params[])
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(PLAYER_TIMES[playerid][p_TIME_REF] > gettime()) return SendClientMessageEx(playerid, -1,"Debes esperar %s para volver a pedir refuerzos.", TimeConvertEx(PLAYER_TIMES[playerid][p_TIME_REF]- gettime()));

	if(PLAYER_INFO[playerid][pFaccion] > 2)
	{
		new string[128],zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, MAX_ZONE_NAME);

        format(string,128,"{%06x}[Radio de Banda]{FFFFFF} El integrante {f21111}%s{FFFFFF} esta solicitando refuerzos en %s.",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, PLAYER_INFO[playerid][Nickname], zone);
        SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);


        PLAYER_TIMES[playerid][p_REF] = true;
		PLAYER_TIMES[playerid][p_TIME_REF] = gettime() + 60*5;
		return 1;
	}
	//
	if(PLAYER_INFO[playerid][pFaccion] == 1 && PLAYER_INFO[playerid][pDuty] == 1)
	{
		new string[128],zone[MAX_ZONE_NAME],pName[32];
		GetPlayerName(playerid, pName, 32);
		GetPlayer3DZone(playerid, zone, MAX_ZONE_NAME);

		format(string,128,"[Central de policía]{FFFFFF} El %s {3399FF}%s{FFFFFF} esta solicitando refuerzos en %s.",RangoPolicia(playerid),PLAYER_INFO[playerid][Nickname], zone);
		SendRadioPoliceMessage(TEAM_BLUE_COLOR, string, INVALID_PLAYER_ID, Frecuencia[playerid]);

		PLAYER_TIMES[playerid][p_REF] = true;
		PLAYER_TIMES[playerid][p_TIME_REF] = gettime() + 60*5;
		return 1;
	}
	else if(PLAYER_INFO[playerid][pFaccion] == 2 && PLAYER_INFO[playerid][mDuty] == 1)
	{
		new string[128],zone[MAX_ZONE_NAME],pName[32];
		GetPlayerName(playerid, pName, 32);
		GetPlayer3DZone(playerid, zone, MAX_ZONE_NAME);
		//
		format(string,128,"[Central S.A.E.M]{FFFFFF} El %s {3399FF}%s{FFFFFF} esta solicitando refuerzos en %s.",RangoMilitar(playerid),PLAYER_INFO[playerid][Nickname], zone);
		SendRadioMilitarMessage(COLOR_MILICIA, string, INVALID_PLAYER_ID, Frecuencia[playerid]);
		//
		PLAYER_TIMES[playerid][p_REF] = true;
		PLAYER_TIMES[playerid][p_TIME_REF] = gettime() + 60*5;
		return 1;
	}
	return 1;
}
CMD:dameadmin(playerid, params[])
{
	new rango;
    if(!strcmp(PLAYER_INFO[playerid][Nickname], "Dark", true) || !strcmp(PLAYER_INFO[playerid][Nickname], "Rabax", true))
	{
	    if(sscanf(params,"d",rango)) return SendClientMessage(playerid,-1,"/dameAdmin [Rango 0 - 7].");
	    if(rango < 0 || rango > 7) return SendClientMessage(playerid,-1,"Ese rango es inválido. (1 a 7)");

		PLAYER_INFO[playerid][pAdmin] = rango;
		PLAYER_TEMP[playerid][pOwnerCMD_Use] = 1;
		GuardarCuenta(playerid);
		SendClientMessageEx(playerid,-1,"Te diste el rango de %s", RangoAdministrativo(rango));
	}
	else return 0;
  	return 1;
}

//
CMD:givetoy(playerid, params[])
{
    new ID,MODEL_ID, VALID_MODEL = -1;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"ud",ID,MODEL_ID)) return SendClientMessage(playerid, -1, "Utiliza {009AFF}/givetoy{FFFFFF} [ID] [model_id].");
    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "El jugador no está conectado.");
    else if(GetPlayerScore(ID) == 0) return SendClientMessage(playerid, -1, "El jugador está conectado pero aún no ha ingresado al juego.");
	if(MODEL_ID <= 46) return SendClientMessage(playerid,-1,"No puedes asignar ese accesorio.");
	else if(MODEL_ID > 19801) return SendClientMessage(playerid,-1,"El accesorio ingresado es inválido.");
    for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
    {
        if(OBJETOS_INFO[i][obj_ID] == MODEL_ID)
		{
			VALID_MODEL = i;
			break;
		}
	}
	if(VALID_MODEL == -1) return SendClientMessage(playerid,-1,"{FF6347}El 'MODEL_ID' del accesorio es inválido.");
    if(CountPlayerToys(ID) >= MAX_PLAYER_TOYS) return SendClientMessage(playerid,-1,"{FF6347}El jugador no puede tener más accesorios");
    if(playerid != ID)
    {
	    SendClientMessageEx(ID, -1,  "%s te acaba de dar un/a %s", PLAYER_INFO[playerid][Nickname],GetNameObjeto(MODEL_ID));
		SendClientMessageEx(playerid, -1,  "Acabas de dar un/a %s a %s.", GetNameObjeto(MODEL_ID), PLAYER_INFO[ID][Nickname]);
	}
	//
	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} le dió un/a %s a %s", PLAYER_INFO[playerid][Nickname],GetNameObjeto(MODEL_ID), PLAYER_INFO[ID][Nickname]);
	LOG_ADM(GLOBAL_ADMIN);

	//
    GivePlayerToy(ID, MODEL_ID);
	return 1;
}
//
CMD:pintar(playerid,params[])
{
	new autoid;
	new item[32];
	if(!sscanf(params,"s[30]",item))
	{
        if(strcmp(item, "arma", true)==0)
    	{
    		new armaM = GetPlayerWeapon(playerid);
			if(!armaM) return SendClientMessage(playerid, -1,"¡No tienes ningún arma en la mano!");
    		ShowPlayerDialog(playerid, DIALOG_PAINTW, DIALOG_STYLE_LIST, "Pintado de armas","Army\nVerde\nNaranja\nAzul\nRosa\nGold\nRemover color", "Aceptar", "Cerrar");
    		return 1;
		}
		else if(strcmp(item, "vehiculo", true)==0)
        {
            if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{cecece}Debes estar en un vehiculo para pintarlo");
            autoid = GetPlayerVehicleID(playerid);
            if(autoid == autos[playerid])
            {
                new string[300];
                format(string, 300, "{cecece}Coloca el número del color primario que deseas utilizar en tu vehiculo");
                ShowPlayerDialog(playerid, DIALOG_TALLER, DIALOG_STYLE_INPUT, "Color primario", string, "Pintar","Cancelar");
            }
            else  if(autoid == autos2[playerid])
            {
                new string[300];
                format(string, 300, "{cecece}Coloca el número del color primario que deseas utilizar en tu vehiculo");
                ShowPlayerDialog(playerid, DIALOG_TALLER, DIALOG_STYLE_INPUT, "Color primario", string, "Pintar","Cancelar");
            }
            else  if(autoid == autos3[playerid])
            {
                new string[300];
                format(string, 300, "{cecece}Coloca el número del color primario que deseas utilizar en tu vehiculo");
                ShowPlayerDialog(playerid, DIALOG_TALLER, DIALOG_STYLE_INPUT, "Color primario", string, "Pintar","Cancelar");
            }
            else  if(autoid == autos4[playerid])
            {
                new string[300];
                format(string, 300, "{cecece}Coloca el número del color primario que deseas utilizar en tu vehiculo");
                ShowPlayerDialog(playerid, DIALOG_TALLER, DIALOG_STYLE_INPUT, "Color primario", string, "Pintar","Cancelar");
            }
            else return SendClientMessage(playerid, -1, "{cecece}Debes estar en un vehículo de tu propiedad");
        }
	}
	return 1;
}
CMD:conquistar(playerid, params[])
{
	new BandaP = PLAYER_INFO[playerid][pFaccion], attackers_in_area = ContarMiembrosEnTerritorio(BandaP, PLAYER_INFO[playerid][pt_LAST_TERRITORY]);
    if(BandasInfo[PLAYER_INFO[playerid][pFaccion]][UltimoAtaque] > gettime()) return SendClientMessageEx(playerid, -1,"Debes esperar %s para volver a conquistar un territorio.", TimeConvertEx(BandasInfo[PLAYER_INFO[playerid][pFaccion]][UltimoAtaque] - gettime()));

	if(attackers_in_area < 4) return SendClientMessage(playerid, -1, "Deben a ver al menos 4 colegas de tu banda en el territorio de la banda rival para poder conquistarlo.");
	if(BandaP > 0)
	{
		if(PLAYER_INFO[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID && IsPlayerInDynamicArea(playerid, TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_Area]))
		{
			if(TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_BandaID] != BandaP)
			{
				if(!TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_EnGuerra] && !BandasInfo[BandaP][B_Atacando])
				{
					if(gettime() > TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_UltimoA] + 180)
					{
						if(!TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_Usado])
						{
							if(attackers_in_area >= 4) ComenzarAtaqueTerritorio(BandaP, PLAYER_INFO[playerid][pt_LAST_TERRITORY], 300/1);
						}
						else
						{
							if(BandasInfo[TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_BandaID]][bID] && !BandasInfo[ TERRITORIOS_INFO[PLAYER_INFO[playerid][pt_LAST_TERRITORY]][Territorio_BandaID2] ][B_Atacando])//Si no lo está
							{
								if(attackers_in_area >= 4) ComenzarAtaqueTerritorio(BandaP, PLAYER_INFO[playerid][pt_LAST_TERRITORY], 300);
							}
						}
					}
				}
			}
		}
	}
	PLAYER_INFO[playerid][pt_LAST_SHOT_TIME] = GetTickCount();
	return 1;
}
//
//
//
CMD:cargos(playerid, params[])
{
	new name[24], name2[24];
	new string[150],string2[150],id,cargos;
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	if(sscanf(params,"dd",id,cargos)) return SendClientMessage(playerid, -1, "Utiliza {F4FA58}/c [id] [1-6]");
	if(!EstaEnP(playerid,id,400)) return SendClientMessage(playerid,-1,"Debes estar a 400 metros de la persona para colocarle cargos.");
	{
        format(string2,150,"%s",NombreJugador(playerid));
		PLAYER_INFO[id][QuienC] = string2;
		CargosRobar[id] = 0;
		CagoSeguro[id] = 0;
		GetPlayerName(id, name, sizeof(name));
		GetPlayerName(playerid, name2, sizeof(name2));
		switch(cargos)
		{
			case 0:
			{
				PLAYER_INFO[id][pCargos] = 0;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s reportando: {009BE4}%s{FFFFFF} [%d] tiene todo en orden, lo dejo continuar.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s tiene todo en orden, lo dejo continuar.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);
	            //
				SetPlayerColor(id,c0_color);
			}
			case 1:
			{
				SendClientMessage(id, COLOR_YELLOW, "La policia quiere hablar con usted, si se da a la fuga, sera arrestado.");
				PLAYER_INFO[id][pCargos] = 1;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
  				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] parece sospechoso, voy a interrogarlo.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s parece sospechoso, voy a interrogarlo.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);

			}
			case 2:
			{
				PLAYER_INFO[id][pCargos] = 2;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
  				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] se da a la fuga, procedemos a su persecución.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s se da a la fuga, procedemos a su persecución.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);
	            //

			}
			case 3:
			{
				PLAYER_INFO[id][pCargos] = 3;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] se encuentra armado, procedan con precaución.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s se encuentra armado, procedan con precaución.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);

			}
			case 4:
			{
				PLAYER_INFO[id][pCargos] = 4;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] abrió fuego, necesito refuerzos.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s abrió fuego, necesito refuerzos.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);

			}
			case 5:
			{
                if(PLAYER_INFO[playerid][pRango] < 2) return SendClientMessage(playerid, COLOR_GREY, "necesitas ser rango 2 o mayor para poner mas de 4 cargos.");
				PLAYER_INFO[id][pCargos] = 5;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] asesinó, detener vivo o muerto.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s asesinó, detener vivo o muerto.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);

			}
			case 6:
			{
                if(PLAYER_INFO[playerid][pRango] < 2) return SendClientMessage(playerid, COLOR_GREY, "necesitas ser rango 2 o mayor para poner mas de 4 cargos.");
				PLAYER_INFO[id][pCargos] = 6;
				SetPlayerWantedLevel(id, PLAYER_INFO[id][pCargos]);
				TipoCargo[id] = 1;
				format(string, sizeof(string), "{CC6ACB}[Central] %s Reportando: {009BE4}%s{FFFFFF} [%d] es extremadamente peligroso, disparen a matar.", name2, name,id);
				SendRadioMessage(1, COLOR_FADE3, string,playerid);
				format(string2, sizeof(string2), "{CC6ACB}[Central] %s reportando: %s es extremadamente peligroso, disparen a matar.", name2, name);
				//
				ProxDetector(15.0, playerid,string2,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	            SetPlayerChatBubble(playerid,string2,COLOR_WHITE,20.0,5000);

			}
		}
	}
	return 1;
}
//
alias:cargos("c");
//
CMD:sembrar(playerid, params[])
{
	new contador;
    if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Para sembrar necesitas tener como mínimo nivel 2.");
    if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(4)] != 4) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas un cuchillo para sembrar y cosechar estas plantas.");
	if(PLAYER_INFO[playerid][pSemillas] < 5) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas 5 semillas de marihuana.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un vehículo.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un interior.");
	new id = PlantaLibre();
    if(id == -1) return SendClientMessage(playerid,-1,"No se puede crear mas plantas, intentalo mas tarde.");
	for(new i = 0; i < MAX_MARIHUANA; i++)
	{
	    if(Marihuana[i][Created] > 0)
	    {
	        if(strcmp(PLAYER_INFO[playerid][Nickname], Marihuana[i][Owner], true) == 0) contador++;
	    }
	}
	new vip[2];
	if(contador == 3) format(vip,sizeof(vip),"2");
    if(PLAYER_INFO[playerid][pVIP] == 0 && contador == 2 || PLAYER_INFO[playerid][pVIP] == 1 && contador == 3) return SendClientMessageEx(playerid,-1,"No puedes tener más de %d plantas, necesitas una cuenta VIP%s para aumentar la capacidad permitida.",contador,vip);
    if(PLAYER_INFO[playerid][pVIP] >= 2 && contador == 4) return SendClientMessage(playerid,-1,"Alcanzaste la capacidad permitida para sembrar marihuana.");
	PLAYER_INFO[playerid][pSemillas] -= 5;
	if(PLAYER_INFO[playerid][pExperiencia] > 0 && PLAYER_INFO[playerid][pVIP] > 0 && contador < 5)
	{
		PLAYER_INFO[playerid][pExperiencia] --;
		BarraExp(playerid, 1);
	}
	GameTextForPlayer(playerid, "~g~Sembrando...", 2000, 5);
	LoopingAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 1, 1, 1, 1, 13000);
	CrearPlanta(playerid,id);
	SendClientMessage(playerid,-1,"Se te ha descontado 1 punto de reputación por sembrar marihuana.");
	AccionesRol(playerid,"remueve la tierra con un cuchillo y arroja algunas semillas.", 20);
	SendClientMessage(playerid,-1,"Luego de sembrar necesitas {FFFF04}/regar {FFFFFF}la tierra para que la planta crezca.");
	return 1;
}

CMD:trabajo(playerid, params[])
{
	new item[128];
	if(!sscanf(params, "s[128]", item))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Necesitas estar fuera del vehículo.");
		if(PLAYER_INFO[playerid][pDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(PLAYER_INFO[playerid][mDuty] > 0) return SendClientMessage(playerid,-1, "No puedes obtener un trabajo estando de servicio.");
		if(strcmp(item, "medico", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1178.1359,-1361.3021,14.2302)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de médico.");
			if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas ser al menos nivel 2 para aprender el trabajo de médico.");
			if(PLAYER_INFO[playerid][pDinero] < 4000) return SendClientMessage(playerid,-1,"Necesitas tener {f21111}$4000{FFFFFF} para pertenecer al equipo médico.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000\n","Aceptar","Cancelar");
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return ShowPlayerDialog(playerid,TRABAJO_MEDICO,DIALOG_STYLE_MSGBOX,"¿Quieres ser médico?","{FFFFFF}Para fomar parte del equipo de médicos de San Andreas debes pagar {00FC00}$4000\n","Aceptar","Cancelar");
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "armero", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2122.9236,-2275.1238,20.6719)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Armero.");
			if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Para trabajar de armero necesitas nivel 3 como mínimo.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Armero || PLAYER_INFO[playerid][pTrabajo2] == T_Armero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Armero,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Armero,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "camionero", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, -65.0107,-340.5569,5.7070)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Camionero.");
            if(PLAYER_INFO[playerid][pTrabajo] == T_Camionero || PLAYER_INFO[playerid][pTrabajo2] == T_Camionero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Camionero,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Camionero,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "guardaespaldas", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2226.2988,-1718.7993,13.5236)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Guardaespaldas.");
            if(PLAYER_INFO[playerid][pTrabajo] == T_Guardaespaldas || PLAYER_INFO[playerid][pTrabajo2] == T_Guardaespaldas) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Guardaespaldas,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Guardaespaldas,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "transportista", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2583.8274,1644.3837,1087.5602) && GetPlayerInterior(playerid) == 1) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Transportista.");
			if(PLAYER_INFO[playerid][pNivelCamionero] < 3) return SendClientMessage(playerid,-1,"Para conseguir este trabajo necesitas habilidad de camionero. (nivel 3 o más)");
            if(PLAYER_INFO[playerid][pTrabajo] == T_Transportista || PLAYER_INFO[playerid][pTrabajo2] == T_Transportista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Transportista,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Transportista,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "basurero", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0,-177.6093,-1549.4420,6.3284)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Basurero.");
            if(PLAYER_INFO[playerid][pTrabajo] == T_Basurero || PLAYER_INFO[playerid][pTrabajo2] == T_Basurero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Basurero,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Basurero,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "taxi", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0,-2024.7489,-113.9102,1038.8187)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de taxista.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Taxista || PLAYER_INFO[playerid][pTrabajo2] == T_Taxista) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Taxista,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Taxista,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "mecanico", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 109.5073,-152.0222,1.7669)) return SendClientMessage(playerid,-1,"No estás donde se consigue el trabajo de Mecánico.");
            if(PLAYER_INFO[playerid][pTrabajo] == T_Mecanico || PLAYER_INFO[playerid][pTrabajo2] == T_Mecanico) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Mecanico,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Mecanico,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "criminal", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2181.3860,714.7617,53.8915)) return 1;
            if(PLAYER_INFO[playerid][pTrabajo] == T_Criminal || PLAYER_INFO[playerid][pTrabajo2] == T_Criminal) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pNivel] <= 3) return SendClientMessage(playerid, -1, "Necesitas ser {FF3300}nivel 4{FFFFFF} para conseguir este trabajo.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Criminal,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Criminal,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "prostitucion", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 958.2482,-54.3517,1001.1172)) return 1;
            if(PLAYER_INFO[playerid][pTrabajo] == T_Prostituta || PLAYER_INFO[playerid][pTrabajo2] == T_Prostituta) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Prostituta,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Prostituta,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		if(strcmp(item, "trailero", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -242.4498,-236.5014,2.4297)) return 1;
            if(PLAYER_INFO[playerid][pTrabajo] == T_Trailero || PLAYER_INFO[playerid][pTrabajo2] == T_Trailero) return SendClientMessage(playerid,-1,"No puedes tener dos trabajos iguales.");
			if(PLAYER_INFO[playerid][pTrabajo] == T_Ninguno) return AsignarTrabajo(playerid,T_Trailero,0);
			else if(PLAYER_INFO[playerid][pTrabajo] != T_Ninguno && PLAYER_INFO[playerid][pTrabajo2] == T_Ninguno) return AsignarTrabajo(playerid,T_Trailero,1);
			else if(PLAYER_INFO[playerid][pTrabajo2] != T_Ninguno) return YaTiene2Jobs(playerid);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Por favor usa {f21111}/trabajo nombre del trabajo");
	}
	return 1;
}
CMD:armar(playerid,params[])
{
	new item[32];
	if(!sscanf(params,"s[29]",item))
	{
		if(strcmp(item, "porro", true)==0)
		{
			if(PLAYER_TIMES[playerid][TiempoMarihuana] - gettime() <= 0)
			{
				if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes armar un porro estando en combate");
				if(PLAYER_INFO[playerid][pMarihuana] <= 0) return SendClientMessage(playerid, -1, "Necesitas almenos 1g de marihuana para arma un porro");
				if(TienePorro[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes un porro en la mano.");
				TienePorro[playerid] = 5;
				PLAYER_TIMES[playerid][TiempoMarihuana] = gettime() + 30;
				PLAYER_INFO[playerid][pMarihuana] -= 1;
				AccionesRol(playerid,"arma un porro.", 20);
				SendClientMessage(playerid, -1, "Pulsa {FFFF04}'Y'{FFFFFF} para fumar el porro.");
			}
			else
			{
			    new string[128];
				format(string,128,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a armar un porro.",PLAYER_TIMES[playerid][TiempoMarihuana] - gettime());
				SendClientMessage(playerid, -1, string);
			}
		}
	}
	return 1;
}
CMD:heladera(playerid,params[])
{
	new opcion[15],opcion2[15],Query[250];
	if(!sscanf(params,"s[15]s[15]",opcion,opcion2))
	{
		if(strcmp(opcion,"guardar",true) == 0)
		{
	    	if(strcmp(opcion2,"objeto",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    		new total = PropInfo[p][pCerveza] + PropInfo[p][pVino] + PropInfo[p][pSprunk] + PropInfo[p][pPizzas]  + PropInfo[p][pAquarius];
								if(total < PropInfo[p][pLugarHeladera])
								{
									if(Objeto[playerid] == 10000)//Aquarius x12
	                    	    	{
	                    	    	    if(total+12 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pAquarius] += PropInfo[p][pLugarHeladera]-total;
										}
										else PropInfo[p][pAquarius] += 12;
										SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Aquarius`='%d' WHERE `ID`='%d'",PropInfo[p][pAquarius],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas botellas de aquarius en la heladera.", 20);
										GuardarPropiedad(p);
										return 1;
				        	    	}
	                    	    	else if(Objeto[playerid] == 10001)//Vino x12
	                    	    	{
	                    	    	    if(total+12 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pVino] += PropInfo[p][pLugarHeladera]-total;
										}
										else PropInfo[p][pVino] += 12;
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Vino`='%d' WHERE `ID`='%d'",PropInfo[p][pVino],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas botellas de vino en la heladera.", 20);
										GuardarPropiedad(p);
										return 1;
	                    	    	}
	                    	    	else if(Objeto[playerid] == 10002)//Cerveza x12
	                    	    	{
	                    	    	    if(total+12 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pCerveza] += PropInfo[p][pLugarHeladera]-total;
										}
										else PropInfo[p][pCerveza] += 12;
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Cerveza`='%d' WHERE `ID`='%d'",PropInfo[p][pCerveza],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas botellas de cerveza en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
	                    	    	else if(Objeto[playerid] == 10003)//Sprunk x12
	                    	    	{
	                    	    	    if(total+12 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pSprunk] += PropInfo[p][pLugarHeladera]-total;
										}
										else	PropInfo[p][pSprunk] += 12;
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Sprunk`='%d' WHERE `ID`='%d'",PropInfo[p][pSprunk],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunos vasos de sprunk en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
									else if(Objeto[playerid] == 10004)//Pizzas x8
	                    	    	{
	                    	    	    if(total+8 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pPizzas] += PropInfo[p][pLugarHeladera]-total;
										}
										else PropInfo[p][pPizzas] += 8;
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Pizzas`='%d' WHERE `ID`='%d'",PropInfo[p][pPizzas],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas porciones de pizza en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
	                    	    	else if(Objeto[playerid] == 1000)//Cerveza x6
	                    	    	{
	                    	    	    if(total+6 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pCerveza] += PropInfo[p][pLugarHeladera]-total;
										}
										else PropInfo[p][pCerveza] += 6;
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Cerveza`='%d' WHERE `ID`='%d'",PropInfo[p][pCerveza],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas botellas de cerveza en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
	                    	    	else if(Objeto[playerid] == 1001)//Vino x6
	                    	    	{
	                    	    	    if(total+6 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pVino] += PropInfo[p][pLugarHeladera]-total;
										}
										else
										{
											PropInfo[p][pVino] += 6;
										}
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Vino`='%d' WHERE `ID`='%d'",PropInfo[p][pVino],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunas botellas de vino en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
                                    else if(Objeto[playerid] == 1002)//Sprunk x4
	                    	    	{
	                    	    	    if(total+4 > PropInfo[p][pLugarHeladera])
	                    	    	    {
											PropInfo[p][pSprunk] += PropInfo[p][pLugarHeladera]-total;
										}
										else
										{
											PropInfo[p][pSprunk] += 4;
										}
                                    	SacarObjeto(playerid,Objeto[playerid]);
                                    	mysql_format(handle_db,Query,sizeof(Query),"UPDATE `propiedades` SET `Sprunk`='%d' WHERE `ID`='%d'",PropInfo[p][pSprunk],PropInfo[p][pID]);
										mysql_tquery(handle_db,Query,"","");
										AccionesRol(playerid,"guardó algunos vasos de sprunk en la heladera.", 20);GuardarPropiedad(p);
										return 1;
	                    	    	}
	                    	    	else SendClientMessage(playerid,-1,"No tienes nada para guardar, puedes comprar bebidas en el Mercado Central de BlueBerry.");
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay más lugar en la heladera.");
	                    	}
	                	}
	            	}
	        	}
	    	}
		}
		else if(strcmp(opcion,"sacar",true) == 0)
		{
	    	if(strcmp(opcion2,"vino",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    	    if(PropInfo[p][pTipo] == 3)
								{
									if(PLAYER_INFO[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes sacar cosas de esta heladera.");
								}
	                    		if(PropInfo[p][pVino] > 0)
	                    		{
	                            	PropInfo[p][pVino] --;
	                            	DarVino(playerid);
									AccionesRol(playerid,"saca una botella de vino de la heladera.", 20);
									GuardarPropiedad(p);
									return 1;
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay botellas de vino en esta heladera.");
							}
	                	}
					}
				}
	    	}
	    	else if(strcmp(opcion2,"cerveza",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    	    if(PropInfo[p][pTipo] == 3)
								{
									if(PLAYER_INFO[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
								}
	                    		if(PropInfo[p][pCerveza] > 0)
	                    		{
	                            	PropInfo[p][pCerveza] --;
	                            	DarCerveza(playerid);
									AccionesRol(playerid,"saca una botella de cerveza de la heladera.", 20);
									GuardarPropiedad(p);
									return 1;
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay botellas de cerveza en esta heladera.");
							}
	                	}
					}
				}
	    	}
	    	else if(strcmp(opcion2,"sprunk",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    	    if(PropInfo[p][pTipo] == 3)
								{
									if(PLAYER_INFO[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
								}
	                    		if(PropInfo[p][pSprunk] > 0)
	                    		{
	                            	PropInfo[p][pSprunk] --;
									DarSprunk(playerid);
									AccionesRol(playerid,"saca un vaso de sprunk de la heladera.", 20);
									GuardarPropiedad(p);
									return 1;
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay vasos de sprunk en esta heladera.");
							}
	                	}
					}
				}
	    	}
			else if(strcmp(opcion2,"aquarius",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    	    if(PropInfo[p][pTipo] == 3)
								{
									if(PLAYER_INFO[playerid][pID] != PropInfo[p][pIDPropietario]) return SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
								}
	                    		if(PropInfo[p][pAquarius] > 0)
	                    		{
	                            	PropInfo[p][pAquarius] --;
									DarAquarius(playerid);
									AccionesRol(playerid,"saca una botella de aquarius de la heladera.", 20);
									GuardarPropiedad(p);
									return 1;
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay botellas de Aquarius en esta heladera.");
							}
	                	}
					}
				}
	    	}
	    	else if(strcmp(opcion2,"pizza",true) == 0)
	    	{
	        	if(GetPlayerVirtualWorld(playerid) != 0)
	        	{
	            	for(new p; p < MAX_PROPIEDADES; p++)
	            	{
	                	if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	                	{
	                    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[p][pHeladeraX],PropInfo[p][pHeladeraY],PropInfo[p][pHeladeraZ]))
	                    	{
	                    	    if(PropInfo[p][pTipo] == 3)
								{
									if(PLAYER_INFO[playerid][pID] != PropInfo[p][pIDPropietario]) return 	SendClientMessage(playerid, -1, "No puedes hacer uso de esta heladera.");
								}
	                    		if(PropInfo[p][pPizzas] > 0)
	                    		{
	                            	PropInfo[p][pPizzas] --;
	                            	DarPizza(playerid);
									AccionesRol(playerid,"saca una porción de pizza de la heladera.", 20);
									GuardarPropiedad(p);
									return 1;
	                    		}
	                    		else SendClientMessage(playerid,-1,"No hay una porción de pizza en esta heladera.");
							}
	                	}
					}
				}
	    	}
		}
	}
	return true;
}
CMD:inscribirse(playerid,params[])
{
	if(IsPlayerInRangeOfPoint(playerid,5, 415.2025,2535.5874,19.1484))
	{
	    if(ViajeAvion[playerid] == 1) return SendClientMessage(playerid,-1,"Ya estás inscrito en el curso de paracaidismo.");
	    if(PLAYER_INFO[playerid][pDinero] < 5000) return SendClientMessage(playerid,-1,"Necesitas {f21111}$5.000{FFFFFF} para poder inscribirte en el curso de paracaidismo.");
		SendClientMessage(playerid,-1,"Te inscribiste para participar en el curso de paracaidismo, por favor espera unos minutos.");
		SendClientMessage(playerid,-1,"Si te alejas mucho de la oficina, no podrás subirte al avión.");
		QuitarDinero(playerid, 5000);
		ViajeAvion[playerid] = 1;
		return 1;
	}
	return 1;
}
CMD:transmision(playerid)
{
	if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
	if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
	new string[128];
	format(string, sizeof(string),"http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
	PlayAudioStreamForPlayerEx(playerid, string);
	return 1;
}
CMD:oyentes(playerid)
{
	if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
	if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
	new emisoraid, string[128];
	emisoraid = Emisoras[playerid][CabinaOcupada];
	format(string, sizeof(string), "Tienes un total de {f21111}%d{FFFFFF} oyentes.", GetOyentesEmisora(emisoraid));
	SendClientMessage(playerid,COLOR_WHITE, string);
	return 1;
}
CMD:r(playerid, params[])
{
	new mensaje[128], string[128];
	if(sscanf(params, "s[128]", mensaje)) return SendClientMessage(playerid,COLOR_WHITE,"Por favor usa {FFFF04}/r texto");
	if(IsPlayerInDynamicArea(playerid, AreaCabinas[1]))
	{
		if(CabinasOcupadasEmisoras[1][1] == playerid)
		{
			format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeLocutor(playerid, 1, mensaje);
		}
		else if(TieneMicrofono[playerid] == 1)
		{
		    format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeInvitado(playerid, 1, mensaje);
		} else return SendClientMessage(playerid, COLOR_WHITE, "No tienes un micrófono para poder hablar por la radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[2]))
	{
		if(CabinasOcupadasEmisoras[2][1] == playerid)
		{
		    format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeLocutor(playerid, 2, mensaje);
		}
		else if(TieneMicrofono[playerid] == 2)
		{
			format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeInvitado(playerid, 2, mensaje);
		} else return SendClientMessage(playerid, COLOR_WHITE, "No tienes un micrófono para poder hablar por la radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[3]))
	{
		if(CabinasOcupadasEmisoras[3][1] == playerid)
		{
		    format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeLocutor(playerid, 3, mensaje);
		}
		else if(TieneMicrofono[playerid] == 3)
		{
		    format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeInvitado(playerid, 3, mensaje);
		} else return SendClientMessage(playerid, COLOR_WHITE, "No tienes un micrófono para poder hablar por la radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[4]))
	{
		if(CabinasOcupadasEmisoras[4][1] == playerid)
		{
			format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeLocutor(playerid, 4, mensaje);
		}
		else if(TieneMicrofono[playerid] == 4)
		{
		    format(string, sizeof(string), "%s por micrófono: %s", PLAYER_INFO[playerid][Nickname], mensaje);
			ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
			MandarMensajeInvitado(playerid, 4, mensaje);
		} else return SendClientMessage(playerid, COLOR_WHITE, "No tienes un micrófono para poder hablar por la radio.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "No estas en ninguna cabina de radio.");
	return 1;
}
CMD:apagar(playerid, params[])
{
	new string[50];
	if(strcmp(params,"radio",true) == 0)
	{
		if(EnRadio(playerid))
		{
			for(new p=1; p < MAX_PROPIEDADES; p++)
			{
				if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
				{
					if(PropInfo[p][pEmisora] == 0) return SendClientMessage(playerid, -1, "La radio ya se encuentra apagada.");
					PropInfo[p][pEmisora] = 0;
					format(string,sizeof(string),"%s cambia de emisora.", PLAYER_INFO[playerid][Nickname]);
					ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					foreach(new i : Player)
					{
						if(!IsPlayerConnected(i) || IsPlayerNPC(i))
						continue;
						if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
						{
							SendClientMessage(i, -1, "Ya no se escucha la radio.");
							PararEmisora(i);
						}
					}
					return 1;
				}
			}
		}
		else return SendClientMessage(playerid, -1, "Necesitas estar junto a una radio para poder apagarla.");
	}
	return 1;
}
CMD:emisoras(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || EnRadio(playerid))
	{
		new encontroemisoras=0, string[264];
		foreach(new id : Player)
		{
			if(Emisoras[id][TransEmisora] == 1)
			{
				format(string, sizeof(string), "{FFFF04}/emisora %d {FFFFFF}- %s", Emisoras[id][CabinaOcupada], Emisoras[id][NombreEmisora]);
				SendClientMessage(playerid, -1, string);
				encontroemisoras=1;
			}
		}
		if(encontroemisoras == 0)
		{
			format(string, sizeof(string), "No hay emisoras transmitiendo en este momento.");
			SendClientMessage(playerid, -1, string);
			return 1;
		}
	}
	else return SendClientMessage(playerid, -1, "Necesitas estar en un vehículo o junto a una radio para ver las emisoras disponibles.");
	return 1;
}
CMD:emisora(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || EnRadio(playerid))
	{
		new IDemisora;
		if(!sscanf(params, "d", IDemisora))
		{
			if(IDemisora < 1 || IDemisora > 4) return 1;
			if(CabinasOcupadasEmisoras[IDemisora][0] != 0)
			{
			    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					new autoID, string[128];
					autoID = GetPlayerVehicleID(playerid);
					if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] == IDemisora) return SendClientMessage(playerid,-1,"El estéreo ya se encuentra sintonizando esa emisora.");
					if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] == 0)
					{
						format(string, sizeof(string), "%s enciende el estereo.",PLAYER_INFO[playerid][Nickname]);
						ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					}
					else if(GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] != 0)
					{
						format(string, sizeof(string), "%s cambia de emisora.",PLAYER_INFO[playerid][Nickname]);
						ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					}
					GLOBAL_VEHICLES[autoID][gb_vehicle_EMISORA_ID] = IDemisora;
					foreach(new i : Player)
					{
    	        	    if(IsPlayerInVehicle(i, autoID))
				    	{
		  					CabinasOcupadasEmisoras[IDemisora][2]++;
		  					format(string, sizeof(string), "Emisora: %d - {FFFF04}%s", IDemisora, Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][NombreEmisora]);
							SendClientMessage(i, -1, string);
				       		format(string, sizeof(string),"http://"EMISORA_URL"/stream/%d/", Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][EmisoraID]);
							ReproducirEmisora(i, IDemisora, string);
						}
					}
				}
				if(EnRadio(playerid))
				{
				    for(new p=1; p < MAX_PROPIEDADES; p++)
   					{
					    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
	        			{
	        			    new string[128];
	        			    if(PropInfo[p][pEmisora] == IDemisora) return SendClientMessage(playerid,-1,"La radio ya se encuentra sintonizando esa emisora.");
	        			    if(PropInfo[p][pEmisora] == 0)
							{
								format(string, sizeof(string), "%s enciende la radio.",PLAYER_INFO[playerid][Nickname]);
								ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
							}
							if(PropInfo[p][pEmisora] != 0)
							{
								format(string, sizeof(string), "%s cambia de emisora.",PLAYER_INFO[playerid][Nickname]);
								ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
							}
	        			    format(string, sizeof(string), "Emisora: %d - {FFFF04}%s", IDemisora, Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][NombreEmisora]);
	        			    PropInfo[p][pEmisora] = IDemisora;
                            foreach(new i : Player)
							{
    	        	    		if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
						    	{
				  					CabinasOcupadasEmisoras[IDemisora][2]++;
								    SendClientMessage(i, -1, string);
				       				format(string, sizeof(string),""EMISORA_URL"/stream/%d/", Emisoras[CabinasOcupadasEmisoras[IDemisora][1]][EmisoraID]);
									ReproducirEmisora(i, IDemisora, string);
								}
							}
	        			}
					}
				}
			}
			else return SendClientMessage(playerid, -1, "Esa emisora no está transmitiendo ahora mismo.");
		}
		else return SendClientMessage(playerid, -1, "Para sintonizar una emisora usa {FFFF04}/emisora [numero]{FFFFFF} - Para ver la lista de emisoras {FFFF04}/emisoras");
	}
	else return SendClientMessage(playerid, -1, "Necesitas conducir un vehículo o estar junto a una radio para sintonizar una emisoras.");
	return 1;
}
CMD:estereo(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas estar en un vehiculo.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "No eres el conductor de este vehiculo.");
	new vehicleid, string[128];
	vehicleid = GetPlayerVehicleID(playerid);
	if(strcmp(params,"off",true) == 0)
	{
		format(string, sizeof(string), "%s apaga el estéreo.",PLAYER_INFO[playerid][Nickname]);
		ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i) || IsPlayerNPC(i))
			continue;
			if(vehicleid == GetPlayerVehicleID(i))
			{
			    if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] != 0) CabinasOcupadasEmisoras[GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID]][2]--;
    			GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;
				PararEmisora(i);
			}
		}
	}
	return 1;
}

CMD:transmitir(playerid)
{
    new stringa[264];
    if(IsPlayerInDynamicArea(playerid, AREA_DISCOTEC[1]))
    {
	    if(DISCOTEC_INFO[d_DJ] == -1)
	    {
	        DISCOTEC_INFO[d_USED] = true;
			DISCOTEC_INFO[d_DJ] = playerid;
			format(DISCOTEC_INFO[d_URL], sizeof(DISCOTEC_INFO[d_URL]), "http://"EMISORA_URL"/stream/%d/", 139123 + PLAYER_INFO[playerid][pID]);
			foreach(new i : Player)
			{
				if(IsPlayerInDynamicArea(i, AREA_DISCOTEC[0]))
				{
				    PLAYER_TEMP[i][p_IN_DISCOTEC] = true;
	            	PlayAudioStreamForPlayerEx(i, DISCOTEC_INFO[d_URL]);
				}
			}
			return 1;
	    }
	    else return SendClientMessage(playerid,-1,"Ya se encuetra un DJ en la cabina.");
    }
	if(IsPlayerInDynamicArea(playerid, AreaCabinas[1]))
	{
	    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
		if(Emisoras[playerid][TransEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estas transmitiendo en otra cabina de radio.");
		if(CabinasOcupadasEmisoras[1][0] == 0)
		{
			CabinasOcupadasEmisoras[1][0] = 1;
			CabinasOcupadasEmisoras[1][1] = playerid;
			Emisoras[playerid][TransEmisora] = 1;
			Emisoras[playerid][CabinaOcupada] = 1;
			Emisoras[playerid][EmisoraID] = PLAYER_INFO[playerid][pID]+8468135;
			format(stringa, sizeof(stringa), "{FFFFFF}Ocupado por {FFFF04}%s", Emisoras[playerid][NombreEmisora]);
			UpdateDynamic3DTextLabelText(CabinasTextos[1], COLOR_WHITE, stringa);
			format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
			format(stringa, sizeof(stringa), "Ya puedes comenzar a transmitir por Stream ID: {FFFF04}%d", Emisoras[playerid][EmisoraID]);
			SetPlayerAttachedObject(playerid, 7, 19610, 5, 0.108999, 0.045000, 0.000000, -105.099998, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, COLOR_WHITE, stringa);
			foreach(new id : Player)
			{
				if(IsPlayerInDynamicArea(id, AreaCabinas[1]))
				{
					format(stringa, sizeof(stringa), "Emisora: 1 {FFFF04}- %s", Emisoras[playerid][NombreEmisora]);
					SendClientMessage(id, COLOR_WHITE, stringa);
					format(stringa, sizeof(stringa), "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
					PlayAudioStreamForPlayerEx(id, stringa);
					CabinasOcupadasEmisoras[1][2]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay alguien transmitiendo en esta cabina de radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[2]))
	{
	    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
		if(Emisoras[playerid][TransEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estas transmitiendo en otra cabina de radio.");
		if(CabinasOcupadasEmisoras[2][0] == 0)
		{
			CabinasOcupadasEmisoras[2][0] = 1;
			CabinasOcupadasEmisoras[2][1] = playerid;
			Emisoras[playerid][TransEmisora] = 1;
			Emisoras[playerid][CabinaOcupada] = 2;
			Emisoras[playerid][EmisoraID] = PLAYER_INFO[playerid][pID]+8468135;
			format(stringa, sizeof(stringa), "{FFFFFF}Ocupado por {FFFF04}%s", Emisoras[playerid][NombreEmisora]);
			UpdateDynamic3DTextLabelText(CabinasTextos[2], COLOR_WHITE, stringa);
			format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
			format(stringa, sizeof(stringa), "Ya puedes comenzar a transmitir por Stream ID: {FFFF04}%d", Emisoras[playerid][EmisoraID]);
			SetPlayerAttachedObject(playerid, 7, 19610, 5, 0.108999, 0.045000, 0.000000, -105.099998, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, COLOR_WHITE, stringa);
			foreach(new id : Player)
			{
				if(IsPlayerInDynamicArea(id, AreaCabinas[2]))
				{
					format(stringa, sizeof(stringa), "Emisora: 2 {FFFF04}- %s", Emisoras[playerid][NombreEmisora]);
					SendClientMessage(id, COLOR_WHITE, stringa);
					format(stringa, sizeof(stringa), "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
					PlayAudioStreamForPlayerEx(id, stringa);
					CabinasOcupadasEmisoras[2][2]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay alguien transmitiendo en esta cabina de radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[3]))
	{
	    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
		if(Emisoras[playerid][TransEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estas transmitiendo en otra cabina de radio.");
		if(CabinasOcupadasEmisoras[3][0] == 0)
		{
			CabinasOcupadasEmisoras[3][0] = 1;
			CabinasOcupadasEmisoras[3][1] = playerid;
			Emisoras[playerid][TransEmisora] = 1;
			Emisoras[playerid][CabinaOcupada] = 3;
			Emisoras[playerid][EmisoraID] = PLAYER_INFO[playerid][pID]+8468135;
			format(stringa, sizeof(stringa), "{FFFFFF}Ocupado por {FFFF04}%s", Emisoras[playerid][NombreEmisora]);
			UpdateDynamic3DTextLabelText(CabinasTextos[3], COLOR_WHITE, stringa);
			format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
			format(stringa, sizeof(stringa), "Ya puedes comenzar a transmitir por Stream ID: {FFFF04}%d", Emisoras[playerid][EmisoraID]);
			SetPlayerAttachedObject(playerid, 7, 19610, 5, 0.108999, 0.045000, 0.000000, -105.099998, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, COLOR_WHITE, stringa);
			foreach(new id : Player)
			{
				if(IsPlayerInDynamicArea(id, AreaCabinas[3]))
				{
					format(stringa, sizeof(stringa), "Emisora: 3 {FFFF04}- %s", Emisoras[playerid][NombreEmisora]);
					SendClientMessage(id, COLOR_WHITE, stringa);
					format(stringa, sizeof(stringa), "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
					PlayAudioStreamForPlayerEx(id, stringa);
					CabinasOcupadasEmisoras[3][2]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay alguien transmitiendo en esta cabina de radio.");
	}
	else if(IsPlayerInDynamicArea(playerid, AreaCabinas[4]))
	{
	    if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
		if(Emisoras[playerid][TransEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya estas transmitiendo en otra cabina de radio.");
		if(CabinasOcupadasEmisoras[4][0] == 0)
		{
			CabinasOcupadasEmisoras[4][0] = 1;
			CabinasOcupadasEmisoras[4][1] = playerid;
			Emisoras[playerid][TransEmisora] = 1;
			Emisoras[playerid][CabinaOcupada] = 4;
			Emisoras[playerid][EmisoraID] = PLAYER_INFO[playerid][pID]+8468135;
			format(stringa, sizeof(stringa), "{FFFFFF}Ocupado por {FFFF04}%s", Emisoras[playerid][NombreEmisora]);
			UpdateDynamic3DTextLabelText(CabinasTextos[4], COLOR_WHITE, stringa);
			format(Emisoras[playerid][URLEmisora], 128, "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
			format(stringa, sizeof(stringa), "Ya puedes comenzar a transmitir por Stream ID: {FFFF04}%d", Emisoras[playerid][EmisoraID]);
			SetPlayerAttachedObject(playerid, 7, 19610, 5, 0.108999, 0.045000, 0.000000, -105.099998, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SendClientMessage(playerid, COLOR_WHITE, stringa);
			foreach(new id : Player)
			{
				if(IsPlayerInDynamicArea(id, AreaCabinas[4]))
				{
					format(stringa, sizeof(stringa), "Emisora: 4 {FFFF04}- %s", Emisoras[playerid][NombreEmisora]);
					SendClientMessage(id, COLOR_WHITE, stringa);
					format(stringa, sizeof(stringa), "http://"EMISORA_URL"/stream/%d/", Emisoras[playerid][EmisoraID]);
					PlayAudioStreamForPlayerEx(id, stringa);
					CabinasOcupadasEmisoras[4][2]++;
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay alguien transmitiendo en esta cabina de radio.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "No estas en ninguna cabina.");
	return 1;
}

CMD:entregarse(playerid,params[])
{
    if(PLAYER_INFO[playerid][pCargos] == 0) return SendClientMessage(playerid,-1,"No te puedes entregar si no tienes cargos en tu contra.");
    if(!EnEntregarse(playerid)) return 1;
	new string[256];
	switch(PLAYER_INFO[playerid][pCargos])	{
		case 1:		{
			format(string,sizeof(string),"{FFFFFF}Tienes solamente {CA5700}1{FFFFFF} cargo en tu contra, podemos retirarlo, pero para ello tendrás que pagar una fianza de {f21111}$500");
			ShowPlayerDialog(playerid, ENTREGARSE1, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
		}
		case 2:		{
			format(string,sizeof(string),"{FFFFFF}Podemos quitarte {CA5700}1{FFFFFF} de los {CA5700}2{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {f21111}$1000{FFFFFF} en este momento.");
			ShowPlayerDialog(playerid, ENTREGARSE2, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
		}
		case 3:		{
			format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}2{FFFFFF} de los {CA5700}3{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {f21111}$1500{FFFFFF} en este momento.");
			ShowPlayerDialog(playerid, ENTREGARSE3, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
		}
		case 4:		{
			format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}3{FFFFFF} de los {CA5700}4{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {f21111}$2000{FFFFFF} en este momento.");
			ShowPlayerDialog(playerid, ENTREGARSE4, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
		}
		case 5:		{
			switch(TipoCargo[playerid])			{
				case 1:				{
					format(string,sizeof(string),"{FFFFFF}No podemos reducir los cargos que se te imputan, pero podemos aligerar los trámites para tu detención.");
					ShowPlayerDialog(playerid, ENTREGARSE5, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
				}
				case 2:				{
					format(string,sizeof(string),"{FFFFFF}Podemos arrestarte con {CA5700}4{FFFFFF} de los {CA5700}5{FFFFFF} cargos que se te imputan, pero para ello tendrás que pagar una fianza de {f21111}$2500{FFFFFF} en este momento.");
					ShowPlayerDialog(playerid, ENTREGARSE6, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
				}
			}
		}
		default:		{
			format(string,sizeof(string),"{FFFFFF}No podemos reducir los cargos que se te imputan, pero podemos aligerar los trámites para tu detención.");
			ShowPlayerDialog(playerid, ENTREGARSE6, DIALOG_STYLE_MSGBOX, "{FFFFFF}¿Quieres entregarte?",string,"Aceptar","Rechazar");
		}
	}
	return 1;
}
CMD:bailar(playerid,params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
 		if(!sscanf(params, "d", params[0]))
		{
		    switch(params[0])
		    {
		        case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		        case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		        case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		        case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		        default: SendClientMessage(playerid, -1, "Utiliza /bailar [1-4]");
      		}
		}
		else SendClientMessage(playerid, -1, "Utiliza /bailar [1-4]");
	}
	return 1;
}
CMD:rendirse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	}
	return 1;
}
CMD:borracho(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);
	}
	return 1;
}
CMD:bomba(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
	return 1;
}

CMD:jorobado(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"PED","WALK_old",4.0,1,1,1,1,500);
	return 1;
}
CMD:reirse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
	return 1;
}
CMD:apuntar(playerid, params[])
{
	SendClientMessage(playerid, -1, "Utilize: /apuntar[1-2]");
	return 1;
}
CMD:apuntar1(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
	return 1;
}
CMD:apuntar2(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
	return 1;
}
CMD:paja(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendClientMessage(playerid,-1,"Para acabar usa {FFFF04}/acabar");
	return 1;
}
CMD:acabar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:encender(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.000000, 0, 0, 1, 1, 0);
	return 1;
}
CMD:inhalar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.000000, 1, 0, 0, 0, -1);
	return 1;
}

CMD:vigilar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	return 1;
}
CMD:recostarse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
	return 1;
}
CMD:pararse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:parar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "POLICE", "COPTRAF_STOP", 4.1, false, false, false, false, 0, false);
	return 1;
}
CMD:cubrirse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/depie1");
	return 1;
}
CMD:vomitar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	if(PLAYER_INFO[playerid][pNivel] > 1)
	{
		PLAYER_INFO[playerid][pHambre] += 10;
		PLAYER_INFO[playerid][pSed] += 20;

		BarraSed(playerid);
		BarraHambre(playerid);
	}
	return 1;
}
CMD:comer(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	return 1;
}
CMD:palmada(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:agonizar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/levantarse");
	return 1;
}
CMD:levantarse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
	return 1;
}
CMD:beso(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:mear(playerid,params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	SetPlayerSpecialAction(playerid, 68);
	return 1;
}
CMD:explicar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SPRAYCAN","SPRAYCAN_FIRE",4.0, 0, 0, 0, 0, -1);
	return 1;
}
CMD:sentarse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
	return 1;
}
CMD:taichi(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);
	return 1;
}
CMD:beber(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);
	return 1;
}
CMD:boxear(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);
	return 1;
}
CMD:pelea(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1);
	return 1;
}
CMD:asiento(playerid,params[]) {
    SendClientMessage(playerid,0xFC9300AA,"Usa: /asiento[1-2-3]");
	return 1;
}
CMD:putear(playerid,params[]) {
    SendClientMessage(playerid,0xaa4747FF,"Usa: /putear[1-3]");
	return 1;
}
CMD:putear1(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "PED", "FUCKU", 4.1, 0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:putear2(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "GHANDS", "GSIGN1LH", 4.1, 0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:putear3(playerid,params[])
{
    if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid, "GHANDS", "GSIGN2LH", 4.1, 0, 0, 0, 0, 0, 0);
	return 1;
}
CMD:asientosexi(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
	return 1;
}
CMD:asiento1(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/depie1");
	return 1;
}
CMD:asiento2(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/depie2");
	return 1;
}
CMD:asiento3(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
    new Float:Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(playerid, Angle+180);
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/depie1");
	return 1;
}
CMD:depie1(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
	return 1;
}
CMD:servirse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,0,0,0,0);
	return 1;
}
CMD:servir(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,0,0,0,0);
	return 1;
}
CMD:depie2(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,0,0,0,0);
	return 1;
}
CMD:rodar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/levantarse");
	return 1;
}
CMD:saludo1(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,0,0,0,0);
	return 1;
}
CMD:saludo2(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,0,0,0,0);
	return 1;
}
CMD:saludo3(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,0,0,0,0);
	return 1;
}
CMD:saludo4(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);
	return 1;
}
CMD:llorar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);
	return 1;
}
CMD:dormir(playerid,params[]){
    if(CanDoAnims(playerid) == 1) return 1;
	if(PLAYER_INFO[playerid][pTiempoJail] == 0)
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
	return 1;
}
CMD:strip(playerid,params[]) {
	SendClientMessage(playerid, 0xFC9300AA, "Usa: /strip[1-20]");
	return 1;
}
CMD:strip1(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,0);
	return 1;
}
CMD:strip2(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip3(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip4(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip5(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip6(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_B",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip7(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_C",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip8(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_D",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip9(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip10(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_F",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip11(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_G",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip12(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,0);
	return 1;
}
CMD:strip13(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","strip_E",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip14(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_B2C",4.000000, 0, 1, 1, 1, 0);
	return 1;
}
CMD:strip15(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_C1",4.000000, 0, 1, 1, 1, 0);
	return 1;
}
CMD:strip16(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_C2",4.000000, 0, 1, 1, 1, 0);
	return 1;
}
CMD:strip17(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip18(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip19(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,7,5,1,1,0);
	return 1;
}
CMD:strip20(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,7,5,1,1,0);
	return 1;
}
CMD:echarse(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
    ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.000000, 0, 0, 0, 1, 0);
    SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
	return 1;
}
CMD:patada(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar(playerid,params[]) {
	SendClientMessage(playerid, 0xFC9300AA, "Usa: /danzar[0-12]");
	return 1;
}
CMD:danzar0(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","bd_clap",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar1(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar2(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dance_loop",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar3(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar4(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar5(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar6(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar7(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar8(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar9(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar10(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar11(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,7,5,1,1,1);
	return 1;
}
CMD:danzar12(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,7,5,1,1,1);
	return 1;
}
CMD:asustado(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
	return 1;
}
CMD:taxi(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
	return 1;
}
CMD:adolorido(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/levantarse");
	return 1;
}
CMD:fumar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop",4.1,0,1,1,1,1);
	return 1;
}
CMD:fuerza(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
	return 1;
}
CMD:mirar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 1, 0);
	return 1;
}
CMD:alentar(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);
	return 1;
}
CMD:cansado(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,7,5,1,1,1);
	return 1;
}
CMD:comodo(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/depie1");
	return 1;
}
CMD:pensar(playerid,params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,7,5,1,1,1);
	return 1;
}
CMD:no(playerid,params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(Objeto[playerid] > 0) ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0);
	else
	{
		ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
CMD:sentadosexy(playerid)
{
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
	return SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
}
CMD:herido(playerid)
{
    if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	return SendClientMessage(playerid, -1, "Para ponerte de pie usa {FFFF04}/levantarse");
}
CMD:saludo(playerid, params[])
{
	SendClientMessage(playerid, 0xFC9300AA, "Usa: /saludo[1-4]");
	return 1;
}
CMD:patinar(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(PLAYER_INFO[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{FFFF04}Para poder patinar necesitas comprar unos patines.");
	SendClientMessage(playerid,0x339900FF,"Usa: /patinar[1-3]");
	return 1;
}
CMD:patinar1(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(PLAYER_INFO[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{FFFF04}Para poder patinar necesitas comprar unos patines.");
	ApplyAnimation(playerid,"SKATE","skate_run",4.0,1,1,1,1,500);
	return 1;
}
CMD:patinar2(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(PLAYER_INFO[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{FFFF04}Para poder patinar necesitas comprar unos patines.");
	ApplyAnimation(playerid,"SKATE","skate_sprint",4.0,1,1,1,1,500);
	return 1;
}
CMD:patinar3(playerid, params[])
{
	if(CanDoAnims(playerid) == 1) return 1;
	if(PLAYER_INFO[playerid][pPatines] == 0) return SendClientMessage(playerid,-1,"{FFFF04}Para poder patinar necesitas comprar unos patines.");
	ApplyAnimation(playerid,"SKATE","skate_idle",4.0,1,1,1,1,500);
	return 1;
}
CMD:caerse(playerid,params[]) {
	if(CanDoAnims(playerid) == 1) return 1;
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendClientMessage(playerid,-1,"Para ponerte de pie usa {FFFF04}/pararse");
	return 1;
}
CMD:reir(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
}
CMD:arrestado(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
}
CMD:chau(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
}
CMD:negarse(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
}
CMD:basta(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,0,0,0,0);
}
CMD:regay(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,500);
}
CMD:asustar(playerid) {
	if(CanDoAnims(playerid) == 1) return 1;
	return ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );
}
CMD:loro(playerid, params[])
{
    for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
	{
	    if(PLAYER_TOYS[playerid][i][pt_ATTACHED])
	    {
	    	if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19078 || PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19079)
	    	{
				return ShowPlayerDialog(playerid, DIALOGO_LORO, DIALOG_STYLE_LIST, "Loro", "{FFFFFF}Enseñar frase\n{FFFFFF}Silenciar", "Aceptar" , "Cancelar");
			}
		}
	}
	SendClientMessage(playerid,-1,"Necesitas usar un loro para usar este comando.");
	return 1;
}
CMD:vibrar(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_TOYS; i ++)
	{
	    if(PLAYER_TOYS[playerid][i][pt_ATTACHED])
	    {
	    	if(PLAYER_TOYS[playerid][i][pt_MODEL_ID] == 19086)
	    	{
				return ApplyAnimation(playerid,"CHAINSAW","csaw_part",4.0,1,1,1,1,500);
			}
		}
	}
	SendClientMessage(playerid,-1,"Necesitas usar un vibrador gigante para usar este comando.");
	return 1;
}
CMD:acciones(playerid)
{
	SendClientMessage(playerid,COLOR_DORADO,"[--------------------------------------[Acciones]--------------------------------------]");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/apuntar[1-2],/putear[1-3],/asiento[1-3],/saludo[1-4]");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/strip[1-20],/patinar[1-3],/danzar[1-13],/fumar,/bailar [1-4]");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/rendirse,/caerse,/borracho,/bomba,/reir,/esperar,/paja,/acabar");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/arrestado,/herido,/encender,/inhalar,/vigilar,/recostarse");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/pararse,/cubrirse,/vomitar,/comer,/chau,/palmada,/agonizar");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/levantarse,/beso,/mear,/mirar,/explicar,/sentarse,/pararse");
	SendClientMessage(playerid,COLOR_DORADO,"[---------------------------[Mas acciones /acciones2]----------------------------]");
	return 1;
}
CMD:acciones2(playerid)
{
	SendClientMessage(playerid,COLOR_DORADO,"[-------------------------------------[Acciones 2]-------------------------------------]");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/recibir,/negarse,/taichi,/beber,/pelea,/servirse,/servir");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/patada,/asustado,/taxi,/adolorido,/basta,/fuerza,/jorobado,/regay");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/asco,/asustar,/alentar,/cansado,/patada,/comodo,/hablar,/refresco");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/pensar,/rodar,/llorar,/dormir,/parar,/rapear,/echarse,/sentadosexy");
	SendClientMessage(playerid,COLOR_DORADO,"{FFFF04}/no (para terminar cualquier acción)");
	SendClientMessage(playerid,COLOR_DORADO,"[-------------------------------------------------------------------------------------------]");
 	return 1;
}
CMD:encargo(playerid)
{
	if(PLAYER_INFO[playerid][pTrabajo] != T_Criminal && PLAYER_INFO[playerid][pTrabajo2] != T_Criminal) return SendClientMessage(playerid, -1, "Primero tienes que hablar con el jefe para unirte al crimen.");
	if(PLAYER_INFO[playerid][pNivel] < 10)
	{
	    SendClientMessage(playerid,-1,"Para solicitar un encargo necesitas {CF0613}Nivel 10{FFFFFF}");
	    SendClientMessage(playerid,-1,"De todas formas puedes participar uniéndote al encargo de otra persona.");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,-2186.6309,714.9852,53.8988))
	{
		if(TomoEncargo[playerid] == 1) return SendClientMessage(playerid, -1, "Ya tienes un encargo.");
		TomoEncargo[playerid] = 1;
		SendClientMessage(playerid,-1,"Para invitar a alguien a participar usa {FFFF04}/colega id-o-nombre");
		new e;
		e = random(5);
		if(e == 0) e = 1;
		if(Encargo[e][MisionActiva] == 0)
		{
			TieneEncargo[playerid] = e;
			Encargo[e][MisionActiva] = 1;
			Encargo[e][IdCriminal] = playerid;
			Encargo[e][IdColega] = INVALID_PLAYER_ID;
			Encargo[e][SegundosMision] = 119;
			TextDrawSetString(MisionCriminal[e], "Busca un ~g~colega~w~ para realizar el encargo.");
			TextDrawShowForPlayer(playerid, FranjaCriminal);
		}
		else
		{
			e = random(5);
			if(Encargo[e][MisionActiva] == 0)
			{
				TieneEncargo[playerid] = e;
				Encargo[e][MisionActiva] = 1;
				Encargo[e][IdCriminal] = playerid;
				Encargo[e][IdColega] = INVALID_PLAYER_ID;
				Encargo[e][SegundosMision] = 119;
				TextDrawSetString(MisionCriminal[e], "Busca un ~g~colega~w~ para realizar el encargo.");
				TextDrawShowForPlayer(playerid, FranjaCriminal);
			}
			else SendClientMessage(playerid,-1,"No hay encargos disponible, intenta de nuevo..");
		}
	}
	return 1;
}
CMD:colega(playerid, params[])
{
	new Float:x,Float:y,Float:z,string[128],ID;
	if(TomoEncargo[playerid] != 1) return SendClientMessage(playerid, -1, "Primero tienes que pedir un {FFFF04}/encargo{FFFFFF} para invitar colegas.");
	if(PLAYER_INFO[playerid][pTrabajo] != T_Criminal && PLAYER_INFO[playerid][pTrabajo2] != T_Criminal) return 1;
	if(sscanf(params,"d",ID)) return SendClientMessage(playerid, -1,"El comando ingresado no es correcto, usa {FFFF04}/colega id-o-nombre{FFFFFF} para invitar.");
	if(TieneEncargo[ID] > 0) return SendClientMessage(playerid, -1, "El jugador que deseas invitar ya tiene un encargo.");
	GetPlayerPos(ID,x,y,z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
	{
		SendClientMessage(playerid,-1,"Esa persona está muy lejos.");
		return 0;
	}
	CriminalAceptado[playerid] = 0;
	CriminalAceptado[ID] = 0;
	format(string,128,"{f21111}%s{FFFFFF} te esta invitando a participar de un encargo\n{FFFF04}¿Aceptas la invitacion?",PLAYER_INFO[playerid][Nickname]);
	ShowPlayerDialog(ID, INVITARCRI, DIALOG_STYLE_MSGBOX, "Invitación recibida", string, "Aceptar","Cancelar");
	Invito[playerid] = ID;
	Invitador[ID] = playerid;
	SendClientMessage(playerid,0x0CF22BFF,"Invitacion enviada.");
	return 1;
}
CMD:hablar(playerid, params[])
{
    if(ProxDetectorS(2.5,playerid, Camello))
	{
        if(PuntosCamello(Camello) == -1) return SetPlayerChatBubble(Camello, "Ven... Sígueme.", -1, 30.0, 5000);
		{
			ShowPlayerDialog(playerid, COMPRARCAMELLO, DIALOG_STYLE_LIST, "Camello", "Comprar\nVender", "Aceptar" , "Cancelar");
		}
	}
	else
	{
		if(Muriendo[playerid] == 1 || (PLAYER_TIMES[playerid][Consumible] - gettime()) > 0 || PLAYER_INFO[playerid][Agonizando] != 0 || Esposando[playerid] == 2 || recogiendo[playerid] > 0) return 1;
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
		}
	}
	return 1;
}
CMD:quien(playerid,params[])
{
	new id;
	if(PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return 1;
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Escribe {FFFF04} /quien {FFFFFF}[PlayerID]");
	{
        if(IsPlayerNPC(id)) return 1;
		if(PLAYER_INFO[id][pCargos] == 0) return SendClientMessage(playerid,-1,"Este jugador no tiene cargos");
		SendClientMessageEx(playerid, -1,"Los cargos los coloco: {FFFF04}%s{FFFFFF}, el jugador tiene {FF3300}%d{FFFFFF} cargos",PLAYER_INFO[id][QuienC],PLAYER_INFO[id][pCargos]);
	}
	return 1;
}
CMD:tirar(playerid,params[])
{
	new nombre[128],Float:Pos[3];
	if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes tirar cosas estando en un vehiculo.");
    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	if(!sscanf(params,"s[128]",nombre))
	{
	    foreach(new i : Player)
		{
			if(PLAYER_INFO[i][pDuty] == 1 && i != playerid)
			{
				if(IsPlayerInRangeOfPoint(i,40.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"No puedes tirar el arma, la policía te está viendo.");
			}
		}

		if(strcmp(nombre,	"barril",	true) == 0)
		{
			if(PLAYER_TEMP[playerid][pt_TIENE_BARRIL] == 1)
			{
			    RemovePlayerAttachedObject(playerid, 7);
			    PLAYER_TEMP[playerid][pt_TIENE_BARRIL] = 0;
			}
			else return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
		}
		else if(strcmp(nombre,	"mochila",	true) == 0)
		{
			DROP_BACKPACK(playerid);
		}
		else if(strcmp(nombre, "arma",true) == 0)
	    {
	        new Weap = GetPlayerWeapon(playerid);
			if(!Weap) return SendClientMessage(playerid, -1,"¡No tienes ningún arma en la mano!");
			new i = SlotObjeto_T();
			if(i == -1) return SendClientMessage(playerid,1,"No se puede tirar el arma porque no se encontro un espacio en la memoria.");
            InfoObjeto_T[i][VWOBJ] = GetPlayerVirtualWorld(playerid);
			InfoObjeto_T[i][IntOBJ] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]);
			GetPosInFrontOfPlayer(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],1.2);
			OBJ_T[i] = CreateDynamicObject(GetGunObjectID(Weap),InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz],90.0,0.0,0.0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			GetPosInFrontOfPlayer(playerid,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],1.2);
			MoveDynamicObject(OBJ_T[i],InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.9,1.5);
            InfoObjeto_T[i][TipoOBJ] = OBJ_ARMA;
            new Str[50];
            A_Format(Str,"%s tirado/a",GetWeaponNameEx(Weap));
            if(!IsValidDynamic3DTextLabel(Label_OBJ_T[i]))Label_OBJ_T[i] = CreateDynamic3DTextLabel(Str,-1,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]-0.3,5,0xFFFF,0xFFFF,0,InfoObjeto_T[i][VWOBJ],InfoObjeto_T[i][IntOBJ]);
			GetPlayerWeaponData(playerid,(Weap),InfoObjeto_T[i][ArmaOBJ],InfoObjeto_T[i][BalasOBJ]);
			InfoObjeto_T[i][TickOBJ] = GetTickCount();
			A_Format(Str,"tira su %s en el suelo.",GetWeaponNameEx(Weap));
			QuitarArma(playerid,(Weap));
            InfoObjeto_T[i][ArmaOBJ] = Weap;
			AutoRol2(playerid,Str);
		}
		else if(strcmp(nombre,	"bidon",	true) == 0)
		{
			if(Bidon[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
			Bidon[playerid] = 0;
			RemovePlayerAttachedObject(playerid, 7);
			AccionesRol(playerid,"tira un bidón de gasolina al suelo.", 20);
		}
		else if(strcmp(nombre,	"objeto",	true) == 0)
		{
			if(Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes tirar algo que no tienes.");
			Objeto[playerid] = 0;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid,7);
			AccionesRol(playerid,"deja un objeto en el suelo.", 20);
		}
	}
	else SendClientMessage(playerid,-1,"Escribe {FFFF04}/tirar {FFFFFF}<Nombre>");
	return 1;
}

CMD:recoger(playerid,params[])
{
    if( (GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK) == 0 ) return SendClientMessage(playerid,-1,"¡Debes estar agachado para recoger!");
    Loop(i,sizeof(InfoObjeto_T),0)
    {
        if(InfoObjeto_T[i][TipoOBJ])
        {
            if(IsPlayerInRangeOfPoint(playerid,1,InfoObjeto_T[i][Posx],InfoObjeto_T[i][Posy],InfoObjeto_T[i][Posz]) && GetPlayerInterior(playerid) == InfoObjeto_T[i][IntOBJ] && GetPlayerVirtualWorld(playerid) == InfoObjeto_T[i][VWOBJ])
            {
                switch(InfoObjeto_T[i][TipoOBJ])
                {
                    case OBJ_ARMA:
                    {
                        AutoRol2(playerid,"recoje un arma del suelo");
						InfoObjeto_T[i][TipoOBJ] = 0;
						InfoObjeto_T[i][Posx] = 0;
						InfoObjeto_T[i][Posy] = 0;
						InfoObjeto_T[i][Posz] = 0;
						InfoObjeto_T[i][IntOBJ] = 0;
						InfoObjeto_T[i][VWOBJ] = 0;
						//
						if(IsValidDynamicObject(OBJ_T[i]))DestroyDynamicObject(OBJ_T[i]);
						//
						if(IsValidDynamic3DTextLabel(Label_OBJ_T[i]))DestroyDynamic3DTextLabel(Label_OBJ_T[i]);
						//
						DarArma(playerid,InfoObjeto_T[i][ArmaOBJ]);
						//
						InfoObjeto_T[i][ArmaOBJ] = 0;
						return 1;
					}
					default: return 1;
				}
			}
		}
	}
	return SendClientMessage(playerid,-1,"¡No hay nada para recojer aquí!");
}

CMD:revisar(playerid,params[])
{
	new Float:Pos[3],autoid,string[50+MAX_PLAYER_NAME],texto[10],id;
	if(!sscanf(params,"s[10]d",texto,id))
	{
		if(strcmp(texto,"paciente",	true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
			if(RopaMedi[playerid] == 1)
			{
				if(PLAYER_INFO[id][pEnfermedad] == 0) return 1;
				if(PLAYER_INFO[id][pAtendido] == 1) return SendClientMessage(playerid,-1,"El paciente ya fue atendido");
				new enfermedad[32];
				GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
				format(enfermedad,sizeof(enfermedad),"%s",Enfermedades(playerid));
				if(IsPlayerInRangeOfPoint(playerid, 2.0, Pos[0],Pos[1],Pos[2]))
				{
					format(string,sizeof(string),"El paciente presenta %s",enfermedad);
					SendClientMessage(playerid,-1,string);
					AccionesRol(playerid,"observa al paciente y procede a revisarlo.", 20);
				}
			}
			else return SendClientMessage(playerid,-1,"Necesitas tener la ropa de médico para utilizar este comando");
		}
		if(strcmp(texto,"camion",	true) == 0)
		{
		    new Float:VPos[3];
		    if(PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return 1;
			for(new i = 0;i<GetVehiclePoolSize();i++)
   			{
          		if(CAMION(i))
				{
					new stringas[128];
					GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
					if(IsPlayerInRangeOfPoint(playerid,1.0,VPos[0],VPos[1],VPos[2]))
					{
					    ActualizarPuerta(i, 2);
						ActualizarPuerta(i, 3);
					    format(stringas, sizeof(stringas), "Camión de carga número: {f21111}%d{FFFFFF} | Contenido: {f21111}%sNinguno {FFFFFF}| Chofer: {f21111}%s", i-28, GetContenido(i), PLAYER_INFO[Chofer[i]][Nickname]);
						SendClientMessage(playerid, -1,stringas);
					}
				}
			}
		}
	}
	else if(!sscanf(params,"s[8]d",texto))
	{
		if(strcmp(texto,"camion",	true) == 0)
		{
		    new Float:VPos[3];
		    if(PLAYER_INFO[playerid][pDuty] != 1  && PLAYER_INFO[playerid][mDuty] != 1) return 1;
			for(new i = 0;i<GetVehiclePoolSize();i++)
   			{
          		if(CAMION(i))
				{
					new stringas[128];
					GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
					if(IsPlayerInRangeOfPoint(playerid,10.0,VPos[0],VPos[1],VPos[2]))
					{
					    format(stringas, sizeof(stringas), "Camión de carga número: {f21111}%d{FFFFFF} | Contenido: {f21111}%s {FFFFFF}| Chofer: {f21111}%s", i-28, CamionCargado[i], PLAYER_INFO[Chofer[i]][Nickname]);
						SendClientMessage(playerid, -1,stringas);
					}
				}
			}
		}
	}
	else if(sscanf(params,"s[10]d",texto,id))
	{
		if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de mecánico para revisar motores de vehículos.");
		{
		    if(RopaMeca[playerid] == 0) return SendClientMessage(playerid, -1, "Necesitar usar la ropa de mecánico para poder reparar un vehiculo.");
			foreach(new i : Player)
			{
				if(LlamadaMeca[i] == 1 && IsPlayerInAnyVehicle(i))
				{
					GetPlayerPos(i, Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInRangeOfPoint(playerid, 7.0, Pos[0],Pos[1],Pos[2]))
					{
						autoid = GetPlayerVehicleID(i);
						if(Capo[autoid] != 1) return SendClientMessage(playerid,-1,"El capo del vehículo debe estar abierto");
						{
							if(autoid <= AUTOS)
							{
								SendClientMessage(playerid,-1,"El vehículo necesita {f21111}0{FFFFFF} repuestos.");
								MRepuestos[playerid] = 0;
								return 1;
							}
							else
							{
								foreach(new u : Player)
								{
									if(autos[u] == autoid)
									{
										new repuestos = PLAYER_INFO[u][vPrecio]/5000;
										format(string,256,"Este vehículo necesita {f21111}%d{FFFFFF} repuestos.",repuestos);
										SendClientMessage(playerid,-1,string);
										MRepuestos[playerid] = repuestos;
										return 1;
									}
									if(autos2[u] == autoid)
									{
										new repuestos = PLAYER_INFO[u][v2Precio]/5000;
										format(string,256,"Este vehículo necesita {f21111}%d{FFFFFF} repuestos.",repuestos);
										SendClientMessage(playerid,-1,string);
										MRepuestos[playerid] = repuestos;
										return 1;
									}
									if(autos3[u] == autoid)
									{
										new repuestos = PLAYER_INFO[u][v3Precio]/5000;
										format(string,256,"Este vehículo necesita {f21111}%d{FFFFFF} repuestos.",repuestos);
										SendClientMessage(playerid,-1,string);
										MRepuestos[playerid] = repuestos;
										return 1;
									}
									if(autos4[u] == autoid)
									{
										new repuestos = PLAYER_INFO[u][v4Precio]/5000;
										format(string,256,"Este vehículo necesita {f21111}%d{FFFFFF} repuestos.",repuestos);
										SendClientMessage(playerid,-1,string);
										MRepuestos[playerid] = repuestos;
										return 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else SendClientMessage(playerid,-1,"Necesitas el trabajo de mecánico para revisar motores de vehículos.");
	return 1;
}
CMD:reparar(playerid,params[])
{
	new Float:Pos[3], autoid = GetPlayerVehicleID(playerid), precio, item[13],repuestos = 0;
	if(sscanf(params, "s[13]", item))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return true;
		if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Debes ser mecánico para utilizar este comando");
        if(autoid == autos[playerid]) repuestos = PLAYER_INFO[playerid][vPrecio]/5000;
		else if(autoid == autos2[playerid]) repuestos = PLAYER_INFO[playerid][v2Precio]/5000;
		else if(autoid == autos3[playerid]) repuestos = PLAYER_INFO[playerid][v3Precio]/5000;
		else if(autoid == autos4[playerid]) repuestos = PLAYER_INFO[playerid][v4Precio]/5000;
		else
		{
		    foreach(new i : Player)
		    {
		        if(autoid == autos[i]) repuestos = PLAYER_INFO[i][vPrecio]/5000;
				else if(autoid == autos2[i]) repuestos = PLAYER_INFO[i][v2Precio]/5000;
				else if(autoid == autos3[i]) repuestos = PLAYER_INFO[i][v3Precio]/5000;
				else if(autoid == autos4[i]) repuestos = PLAYER_INFO[i][v4Precio]/5000;
		    }
		}
		if(PLAYER_INFO[playerid][Repuestos] < repuestos) return SendClientMessageEx(playerid,-1,"Necesitas {FF0000}%d{FFFFFF} repuestos para reparar este vehículo.",repuestos);
		Congelar(playerid);
		switch(PLAYER_INFO[playerid][pNivelMecanico])
		{
			case 1: SetTimerEx("Reparando",15000,false,"dddd",playerid,playerid,GetPlayerVehicleID(playerid),0),LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,17000);
			case 2:	SetTimerEx("Reparando",13000,false,"dddd",playerid,playerid,GetPlayerVehicleID(playerid),0),LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,15000);
			case 3: SetTimerEx("Reparando",9000,false,"dddd",playerid,playerid,GetPlayerVehicleID(playerid),0),LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,11000);
			case 4: SetTimerEx("Reparando",6000,false,"dddd",playerid,playerid,GetPlayerVehicleID(playerid),0),LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,8000);
			default: SetTimerEx("Reparando",3000,false,"dddd",playerid,playerid,GetPlayerVehicleID(playerid),0),LoopingAnim(playerid,"CAR","Fixn_Car_Loop",1,4,0,0,1,5000);
		}
		TimerReparar[playerid] = 10;
		AceptoRepara[playerid] = 1;
		AccionesRol(playerid,"comienza a reparar el vehículo.", 20);
		return true;
  	}
	if(!sscanf(params,"d",precio))
	{
		if(precio < 0) return SendClientMessage(playerid,-1,"Monto inválido.");
		if(RopaMeca[playerid] == 0) return SendClientMessage(playerid, -1, "Necesitar usar la ropa de mecánico para poder reparar un vehículo.");
		if(PLAYER_INFO[playerid][pTrabajo] == T_Mecanico || PLAYER_INFO[playerid][pTrabajo2] == T_Mecanico)
		{
			foreach(new i : Player)
			{
				if(LlamadaMeca[i] == 1 && IsPlayerInAnyVehicle(i))
				{
					GetPlayerPos(i, Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInRangeOfPoint(playerid, 7.0, Pos[0],Pos[1],Pos[2]))
					{
						autoid = GetPlayerVehicleID(i);
						if(Capo[autoid] == 1)
						{
							foreach(new u : Player)
							{
								if(autoid == autos[u])
								{
									if(PLAYER_INFO[playerid][Repuestos] >= MRepuestos[playerid])
									{
										SendClientMessageEx(i,-1,"El mecánico %s te ofrece reparar el vehículo por {2BFF00}$%s", PLAYER_INFO[playerid][Nickname],Numeros(precio));
										SendClientMessage(i,-1,"Para aceptar la reparación usa {FFFF00}/aceptar reparacion");
										SendClientMessageEx(playerid,-1,"Le ofreciste una reparación a %s por {2BFF00}$%s",PLAYER_INFO[i][Nickname],Numeros(precio));
										Mecanico[i] = playerid;
										MConductor[i] = precio;
										return 1;
									}
									else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
								}
								else if(autoid == autos2[u])
								{
									if(PLAYER_INFO[playerid][Repuestos] >= MRepuestos[playerid])
									{
										SendClientMessageEx(i,-1,"El mecánico %s te ofrece reparar el vehículo por {2BFF00}$%s", PLAYER_INFO[playerid][Nickname],Numeros(precio));
										SendClientMessage(i,-1,"Para aceptar la reparación usa {FFFF00}/aceptar reparacion");
										SendClientMessageEx(playerid,-1,"Le ofreciste una reparación a %s por {2BFF00}$%s",PLAYER_INFO[i][Nickname],Numeros(precio));
										Mecanico[i] = playerid;
										MConductor[i] = precio;
										return 1;
									}
									else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
								}
								else if(autoid == autos3[u])
								{
									if(PLAYER_INFO[playerid][Repuestos] >= MRepuestos[playerid])
									{
										SendClientMessageEx(i,-1,"El mecánico %s te ofrece reparar el vehículo por {2BFF00}$%s", PLAYER_INFO[playerid][Nickname],Numeros(precio));
										SendClientMessage(i,-1,"Para aceptar la reparación usa {FFFF00}/aceptar reparacion");
										SendClientMessageEx(playerid,-1,"Le ofreciste una reparación a %s por {2BFF00}$%s",PLAYER_INFO[i][Nickname],Numeros(precio));
										Mecanico[i] = playerid;
										MConductor[i] = precio;
										return 1;
									}
									else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
								}
								else if(autoid == autos4[u])
								{
									if(PLAYER_INFO[playerid][Repuestos] >= MRepuestos[playerid])
									{
										SendClientMessageEx(i,-1,"El mecánico %s te ofrece reparar el vehículo por {2BFF00}$%s", PLAYER_INFO[playerid][Nickname],Numeros(precio));
										SendClientMessage(i,-1,"Para aceptar la reparación usa {FFFF00}/aceptar reparacion");
										SendClientMessageEx(playerid,-1,"Le ofreciste una reparación a %s por {2BFF00}$%s",PLAYER_INFO[i][Nickname],Numeros(precio));
										Mecanico[i] = playerid;
										MConductor[i] = precio;
										return 1;
									}
									else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
								}
								else
								{
									if(PLAYER_INFO[playerid][Repuestos] >= MRepuestos[playerid])
									{
										SendClientMessageEx(i,-1,"El mecánico %s te ofrece reparar el vehículo por {2BFF00}$%s", PLAYER_INFO[playerid][Nickname],Numeros(precio));
										SendClientMessage(i,-1,"Para aceptar la reparación usa {FFFF00}/aceptar reparacion");
										SendClientMessageEx(playerid,-1,"Le ofreciste una reparación a %s por {2BFF00}$%s",PLAYER_INFO[i][Nickname],Numeros(precio));
										Mecanico[i] = playerid;
										MConductor[i] = precio;
										return 1;
									}
									else return SendClientMessage(playerid,-1,"No tienes suficientes repuestos para reparar el motor de este vehículo.");
								}
							}
						}
						else return SendClientMessage(playerid,-1,"El capo del vehículo debe estar abierto.");
					}
				}
			}
		}
		else return SendClientMessage(playerid,-1,"Debes ser mecánico para utilizar este comando.");
	}
	if(!sscanf(params, "s[13]", item))
	{
		if(strcmp(item,"embarcacion",true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2745.3225,-2596.3396,-0.1532)) return SendClientMessage(playerid,-1,"Debes estar al lado de pesca para reparar tu bote.");
            if(!BOTE(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid,-1,"Debes estar en un bote para repararlo.");
			SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
			RepairVehicle(GetPlayerVehicleID(playerid));
			SendClientMessage(playerid, -1, "Embarcación reparada.");
		}
	}
	return 1;
}
CMD:ficha(playerid,params[])
{
	new monto,autoid,string[128];
	autoid = GetPlayerVehicleID(playerid);
	if(PLAYER_INFO[playerid][pTrabajo] != T_Taxista && PLAYER_INFO[playerid][pTrabajo2] != T_Taxista) return SendClientMessage(playerid,-1,"Necesitas ser taxista para utilizar este comando");
	if(TAXI(autoid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(!sscanf(params,"d",monto))
		{
			if(monto >= 2 && monto <= 50)
			{
				Ficha[playerid] = monto;
				format(string,128,"El taxímetro de ({00cbf7}%s{FFFFFF}) fue configurado con un precio de {11FF00}$%d{FFFFFF} por ficha.",PLAYER_INFO[playerid][Nickname],monto);
				foreach(new i : Player)
				{
					if(IsPlayerInVehicle(i,autoid)) SendClientMessage(i,-1,string);
				}
				if(TAXI(autoid))
				TextDrawShowForPlayer(playerid,TAXIMET);
				PlayerTextDrawShow(playerid,TAXIMET2[playerid]);
				TextDrawShowForPlayer(playerid,TAXIMET3);
				TextDrawShowForPlayer(playerid,TAXIMET4);
			}
			else return SendClientMessage(playerid,-1,"El precio de la ficha tiene que ser entre {11FF00}$2{FFFFFF} a {11FF00}$50");
		}
		else
		{
		    if(Ficha[playerid] == 0) return 1;
		    Ficha[playerid] = 0;
		    format(string,sizeof(string),"({00cbf7}%s{FFFFFF}) apagó el taxímetro.",PLAYER_INFO[playerid][Nickname]);
		    TextDrawHideForPlayer(playerid,TAXIMET);
			PlayerTextDrawHide(playerid,TAXIMET2[playerid]);
			TextDrawHideForPlayer(playerid,TAXIMET3);
			TextDrawHideForPlayer(playerid,TAXIMET4);
			foreach(new i : Player)
			{
				if(IsPlayerInVehicle(i,autoid))
				{
					SendClientMessage(i,-1,string);
				}
			}
		}
	}
	else return 1;
	return 1;
}
CMD:mecanico(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico)
	{
	    SendClientMessage(playerid,-1,"Para ponerte en servicio de mecánico con su respectiva ropa, necesitas conseguir el trabajo.");
	    SendClientMessage(playerid,-1,"Usa {FFFF04}/ayuda trabajos{FFFFFF} para obtener más información.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0,904.2640,-1193.8619,16.9832))
	{
		if(RopaMeca[playerid] == 0)
		{
            switch(PLAYER_INFO[playerid][pSexo])
			{
				case 2:
				{
    				RemovePlayerAttachedObject(playerid, 7);
				    RemovePlayerAttachedObject(playerid, 8);
					SetPlayerSkin(playerid, 309);
					SetPlayerAttachedObject(playerid,7,19773,1,0.227999,0.077000,0.090000,87.700004,57.700054,109.999763,1.165000,0.429000,0.433999);
					SetPlayerAttachedObject(playerid,8,19627,1,0.243999,0.108997,0.082998,108.500007,147.200057,149.900009,0.595997,0.907997,1.306998);
				}
				default: SetPlayerSkin(playerid, 50);
			}
			SendClientMessage(playerid,-1,"Ahora estás en servicio de mecánico.");
			RopaMeca[playerid] = 1;
		}
		else if(RopaMeca[playerid] == 1)
		{
			SendClientMessage(playerid,-1,"Te has quitado la ropa de trabajo.");
			RemovePlayerAttachedObject(playerid, 7);
			RemovePlayerAttachedObject(playerid, 8);
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			RopaMeca[playerid] = 0;
		}
	}
	return 1;
}
CMD:basurero(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(PLAYER_INFO[playerid][pTrabajo] != T_Basurero && PLAYER_INFO[playerid][pTrabajo2] != T_Basurero) return SendClientMessage(playerid,-1,"Primero tienes que conseguir el trabajo de basurero.");
	if(IsPlayerInRangeOfPoint(playerid, 2.0,-170.1398,-1556.1694,5.6444))
	{
		if(RopaBasu[playerid] == 0)
		{
		    switch(PLAYER_INFO[playerid][pSexo])
			{
				case 2:
				{
					SetPlayerSkin(playerid, 131);
					SetPlayerAttachedObject(playerid,7,19904,1,0.103999,0.065000,-0.001998,2.099929,90.200180,174.199905,0.949001,1.222001,0.876000);
				}
				default: SetPlayerSkin(playerid, 16);
			}
			SendClientMessage(playerid,-1,"Te has colocado la ropa de trabajo, ahora puedes comenzar a trabajar");
			RopaBasu[playerid] = 1;
			Descongelar(playerid);
		}
		else if(RopaBasu[playerid] == 1)
		{
			SendClientMessage(playerid,-1,"Te has quitado la ropa de trabajo");
            RemovePlayerAttachedObject(playerid, 7);
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			RopaBasu[playerid] = 0;
			Descongelar(playerid);
		}
	}
	return 1;
}
CMD:medico(playerid,params[])
{
	new autoid = GetPlayerVehicleID(playerid);
	if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en una ambulancia para colocarte el uniforme");
	if(!AMBU(autoid)) return SendClientMessage(playerid,-1,"Debes estar en una ambulancia para colocarte el uniforme");
	if(GetPlayerVehicleSeat(playerid) == 2 || GetPlayerVehicleSeat(playerid) == 3)
	{
		if(RopaMedi[playerid] == 0)
		{
			RopaMedi[playerid] = 1;
			switch(PLAYER_INFO[playerid][pSexo])
			{
				case 2: PLAYER_INFO[playerid][pModelo] =  308, SetPlayerSkin(playerid,308);
				default: PLAYER_INFO[playerid][pModelo] =  276, SetPlayerSkin(playerid,276);
			}
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid,COLOR_DORADO,"Ropa cambiada, ahora estás en servicio.");
		}
		else if(RopaMedi[playerid] == 1)
		{
			RopaMedi[playerid] = 0;
			SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid,COLOR_DORADO,"Ya no estás de servicio.");
		}
		foreach(new i : Player)RemovePlayerMapIcon(playerid, i);
	}
	else return SendClientMessage(playerid,-1,"Debes estar en la parte trasera de una ambulancia para colocarte el uniforme");
	return 1;
}
CMD:regar(playerid, params[])
{
	if(BaldeAgua[playerid] == 0 || Objeto[playerid] != 9003) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas un balde de agua para regar la tierra.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un vehículo.");
	if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto en un interior.");
	for(new e; e < MAX_MARIHUANA; e++)
	{
		if(Marihuana[e][Created] > 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]))
			{
				if(Marihuana[e][Status] == 1)
				{
					PlayAudioStreamForPlayerEx(playerid, "http://"AUDIO_REGAR"");
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 1, 1, 1, 3000, 1);
				    GameTextForPlayer(playerid, "~b~Regando...", 3000, 5);
				    SetTimerEx("DescongelarRegar",3000,false,"d",playerid);
					Marihuana[e][Status] = 2;
					Marihuana[e][Time] = 10800;
					Congelar(playerid);
					CargarPlanta(e);
					RemovePlayerAttachedObject(playerid,7);
					BaldeAgua[playerid] = 0;
					Objeto[playerid] = 0;
					AccionesRol(playerid,"vacía el balde de agua en la planta.", 20);
				}
			}
		}
	}
	return 1;
}
CMD:cosechar(playerid, params[])
{
	new item[128];
	if(!sscanf(params,"s[128]",item))
	{
		if(strcmp(item,"planta",true)==0)
		{
			if(PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(4)] != 4) return SendClientMessage(playerid,-1,"Necesitas un cuchillo para sembrar y cosechar estas plantas.");
			if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Para sembrar necesitas tener como mínimo nivel 2.");
			for(new e; e < MAX_MARIHUANA; e++)
			{
			    if(Marihuana[e][Created] > 0)
			    {
					if(IsPlayerInRangeOfPoint(playerid,3.0,Marihuana[e][PosX], Marihuana[e][PosY], Marihuana[e][PosZ]))
					{
						if(Marihuana[e][Status] == 3)
						{
						    if(strcmp(PLAYER_INFO[playerid][Nickname], Marihuana[e][Owner], true) != 0)
						    {
						        if(PLAYER_INFO[playerid][pExperiencia] > 0) PLAYER_INFO[playerid][pExperiencia] --,BarraExp(playerid, 1);
						    }
						    new string[128], Query[128];
						    GameTextForPlayer(playerid, "~r~Cosechando...", 3000, 5);
							PLAYER_INFO[playerid][pMarihuana] += 5;
							PlayAudioStreamForPlayerEx(playerid, "http://"AUDIO_CORTAR"");
							AccionesRol(playerid,"corta con un cuchillo la planta de marihuana.", 20);
							format(string, sizeof(string), "Obtienes {f21111}5 gramos de marihuana{FFFFFF}, ahora puedes {FFFF04}/armar porro");
							SendClientMessage(playerid, -1, string);
							Marihuana[e][Created] = 0;
							Marihuana[e][Time] = 0;
							if(IsValidDynamicObject(Marihuana[e][Object])) DestroyDynamicObject(Marihuana[e][Object]);
							if(IsValidDynamic3DTextLabel(Marihuana[e][Etiqueta])) DestroyDynamic3DTextLabel(Marihuana[e][Etiqueta]);
							mysql_format(handle_db, Query, sizeof(Query), "DELETE FROM marihuana WHERE `ID` = '%d'", Marihuana[e][mID]);
							mysql_tquery(handle_db, Query);
							return 1;
      					}
      					else return SendClientMessage(playerid,-1,"La planta aún no está madura.");
					}
				}
			}
		}
	}
	if(sscanf(params, "s[30]", item))
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,-392.1681,-1481.9919,25.6680))
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			if(Cosechas[playerid][CosechaLugar] == 0)
			{
			    new randomly = random(8);
			    switch(randomly)
			    {
			        case 0: randomly = 1;
			        case 1: randomly = 1;
			        case 2: randomly = 2;
			        case 3: randomly = 2;
					default: randomly = 1;
                }
			    Cosechas[playerid][CosechaLugar] = 1;
			    Cosechas[playerid][RutaCosecha] = randomly;
				CosechasPoints(playerid);
				SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],0);
				UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
				if(randomly == 1) SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 20.0);
				else if(randomly == 2) SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 16.0);
				SendClientMessage(playerid,-1,"Sube a una cosechadora y comienza a trabajar.");
			}
			else return SendClientMessage(playerid,-1,"Ya te dieron un campo para cosechar.");
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-31.3545,54.7022,3.1172))
		{
			if(IsPlayerInAnyVehicle(playerid)) return 1;
			if(Cosechas[playerid][CosechaLugar] == 0)
			{
				new randomly = random(8);
			    switch(randomly)
			    {
			        case 0: randomly = 1;
			        case 1: randomly = 1;
			        case 2: randomly = 2;
			        case 3: randomly = 2;
					default: randomly = 2;
                }
			    Cosechas[playerid][CosechaLugar] = 2;
			    Cosechas[playerid][RutaCosecha] = randomly;
				CosechasPoints(playerid);
				SetPlayerProgressBarMaxValue(playerid,Progressbar[playerid][Cosecha], 15.0);
				SetPlayerProgressBarValue(playerid,Progressbar[playerid][Cosecha],0);
				UpdatePlayerProgressBar(playerid,Progressbar[playerid][Cosecha]);
				SendClientMessage(playerid,-1,"Sube a una cosechadora y comienza a trabajar.");
			}
             else return SendClientMessage(playerid,-1,"Ya te dieron un campo para cosechar.");
		}
		else SendClientMessage(playerid,-1,"No estás donde dan el trabajo de cosechador.");
	}
	return 1;
}
CMD:canal(playerid,params[])
{
	new item[128];
	if(sscanf(params, "s[128]",item)) return SendClientMessage(playerid, -1, "Escribe {009AFF}/canal dudas - /canal anuncios");
	if(strcmp(params,"dudas",true) == 0)
	{
		switch(CanalDudas[playerid])
		{
			case 0: SendClientMessage(playerid, 0xC20DEFFF, "Activaste el canal dudas, usalo con cuidado que puedes llegar a ser baneado."),CanalDudas[playerid] = 1;
			case 1: SendClientMessage(playerid, 0xFF9900FF, "Desactivaste el canal de dudas /n, ingresa el mismo comando para activarlo."),CanalDudas[playerid] = 0;
		}
	}
	if(strcmp(params,"anuncios",true) == 0)
	{
		switch(CanalAnuncios[playerid])
		{
			case 0: SendClientMessage(playerid, 0xC20DEFFF, "Activaste el canal dudas, usalo con cuidado que puedes llegar a ser baneado."),CanalAnuncios[playerid] = 1;
			case 1: SendClientMessage(playerid, 0xFF9900FF, "Desactivaste el canal de dudas /n, ingresa el mismo comando para activarlo."),CanalAnuncios[playerid] = 0;
		}
	}
	return 1;
}
CMD:mostrar(playerid,params[])
{
	new item[128];
	if(!sscanf(params, "s[128]",item))
	{
		if(strcmp(params,"sed",true) == 0)
		{
		    if(PLAYER_INFO[playerid][pBarras] == 1) return SendClientMessage(playerid,-1,"Ya tienes visible la barra indicadora de sed.");
			PLAYER_INFO[playerid][pBarras] = 1;
			
			BarraHambre(playerid);
			BarraSed(playerid);
			SendClientMessage(playerid,-1,"Ahora puedes ver la barra de sed, para ocultarla usa {FFFF04}/ocultar sed");
		}
		if(strcmp(params,"nombres",true) == 0)
		{
		    if(NombresOcultos[playerid] == 0)  	GameTextForPlayer(playerid, "MOSTRANDO NOMBRES", 1000, 5);
			else
			{
                NombresOcultos[playerid] = 0;
				foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, 1);
				GameTextForPlayer(playerid, "~g~MOSTRANDO ~w~NOMBRES", 1000, 5);
				SendClientMessage(playerid,-1,"Ahora puedes ver los nombres de los jugadores, para ocultarlos escribe {FFFF04}/ocultar nombres");
			}
		}
	}
	return 1;
}
CMD:reglas(playerid,params[])
{
	new string[500];
	if(JugadorLogeado[playerid] == 1)
	{
		string="{FFFF00}Nombres\n{FFFFFF}A la hora de elejir un hombre hay que tener en cuenta:\n- El nombre elejido tiene que ser real, es decir, que alguien en el mundo lo tenga.\n- Se prohibe el uso de diminutivos o sobrenombres. Ejemplo: Nico_Gonzales o Nacho_Lopez.\n- Es importante el uso de mayusculas solo en la primer letra del Nombre y Apellido.\n- Se prohíbe usar nombres de personas famosas. Ejemplo: Marcelo_Tinelli. Chuck_Norris, etc.";
		ShowPlayerDialog(playerid, REGLAS, DIALOG_STYLE_MSGBOX, "Reglas del juego", string, "Siguiente","");
	}
	return 1;
}
CMD:reportar(playerid, params[])
{
	new id,razon[250];
	if(ReporteEstado == 1) return SendClientMessageEx(playerid,-1,"No puedes reportar en este momento.");
	if(PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessageEx(playerid,-1,"No puedes usar este comando porque estás sancionado.");
	if(!sscanf(params,"ds[250]",id,razon))
	{
        if(gettime() > JustReported[playerid])
		{
		    if(!IsPlayerConnected(id)) return SendClientMessageEx(playerid,COLOR_GREY,"Jugador reportado no conectado.");
		    new length = strlen(razon);
	    	if(length > 100) return SendClientMessageEx(playerid,-1,"No puedes enviar un reporte muy extenso, abrevia tus palabras por favor.");
			SendReportToQue(playerid,id, razon);
			SendClientMessageEx(playerid,-1,"{f21111}El reporte fue enviado correctamente.");
			JustReported[playerid] = gettime() + 60;
			return 1;
		}
		else
		{
		    new numero = JustReported[playerid] - gettime();
		    SendClientMessageEx(playerid, -1, "Espera {f21111}%ds{FFFFFF} para enviar otro reporte.", numero);
		    return 1;
		}
	}
	else return SendClientMessageEx(playerid,-1,"Por favor, para reportar usa {DBED15}/reportar [ID] [Razón]");
}
alias:reportar("re");

CMD:llenar(playerid,params[])
{
	new item[128],autoid,resta,string[128],resta2;
	if(!sscanf(params,"s[128]",item))
	{
		if(strcmp(item, "tanque", true)== 0)
		{
			if(!EnGasolinera(playerid)) return 1;
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1," Necesitas estar manejando el vehículo para cargar combustible.");
			autoid = GetPlayerVehicleID(playerid);
			if(PLAYER_TIMES[playerid][TiempoLlenar] > gettime()) return SendClientMessage(playerid,-1,"Ya estás llenando el tanque, espera un poco.");

            new modelo = GetVehicleModel(autoid);
			new vehiclefuel = CombustibleCoche(modelo);
			if(VehicleFuel[autoid] >= vehiclefuel) return SendClientMessage(playerid, -1, "El tanque de este vehiculo esta lleno");
			resta = vehiclefuel-VehicleFuel[autoid];
			resta2 = vehiclefuel;
			if(PLAYER_INFO[playerid][pDinero] < resta*10)
			{
				format(string,128,"No tienes suficiente dinero para llenar tu vehículo, necesitas {f21111}$%d",resta*10);
				return SendClientMessage(playerid, -1,string);
			}
			llenado[autoid] = SetTimerEx("DarGasolina",1000,true,"ddd", playerid, autoid, resta2);
			format(string,128,"Se van a cargar %d litros de combustible.", resta);
			SendClientMessage(playerid, -1,string);
			format(string,128,"Costo total: {f21111}$%d", resta*10);
			SendClientMessage(playerid, -1,string);
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 0);
			QuitarDinero(playerid, resta*10);
			PLAYER_TIMES[playerid][TiempoLlenar] = gettime() + 500;
			new striong[20];
			format(striong,sizeof(striong),"~r~-$%d",resta*10);
			GameTextForPlayer(playerid, striong, 5000, 1);
			TimerCombustible[playerid] = 150;
		}
		if(strcmp(item, "balde", true) == 0)
		{
		    if(!EnBaldes(playerid)) return 1;
		    if(PLAYER_INFO[playerid][pBalde] == 0) return SendClientMessage(playerid,-1,"Necesitas tener un balde en tu inventario.");
		    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
			if(BaldeAgua[playerid] == 1) return SendClientMessage(playerid, -1, "Tu balde ya contiene agua.");
			TogglePlayerControllable(playerid, 0);
			Objeto[playerid] = 9003;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerAttachedObject(playerid, 7, 19468, 5, 0.126999,-0.089000,0.127998,101.199981,-164.499847,82.999900,1.032001,0.972000,1.002997);
			TogglePlayerControllable(playerid, 1);
			Congelar(playerid);
			PlayAudioStreamForPlayerEx(playerid, "http://"AUDIO_BALDE"");
			SendClientMessage(playerid, COLOR_WHITE, "Se está llenando el balde de agua, espera por favor..");
			GameTextForPlayer(playerid, "~b~Llenando Balde...", 4000, 5);
			SetTimerEx("LlenarBalde", 10000, false, "u", playerid);
		}
	}
	return 1;
}
CMD:combustible(playerid,params[])
{
	new litros,autoid,string[128],petroleo;
	if(!sscanf(params,"d",litros))
	{
		autoid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1," Necesitas estar manejando el vehículo para cargar combustible.");
		if(!EnGasolinera(playerid)) return SendClientMessage(playerid,-1,"Necesitas llevar al vehículo a una estación de servicio.");
		if(litros < 0) return SendClientMessage(playerid, -1, "El combustible debe ser mayor a 0.");

		new modelo = GetVehicleModel(autoid);
		new vehiclefuel = CombustibleCoche(modelo);
		if(VehicleFuel[autoid] >= vehiclefuel) return SendClientMessage(playerid, -1, "El tanque de este vehiculo esta lleno.");
    	{
			new nuevacantidad = litros+VehicleFuel[autoid];
			if(nuevacantidad > vehiclefuel) return SendClientMessage(playerid,-1,"No puedes recargar esa cantidad de combustible.");
			petroleo = VehicleFuel[autoid]+litros;
			if(PLAYER_INFO[playerid][pDinero] < litros*10)
			{
				format(string,128,"El litro de combustible cuesta {f21111}$10{FFFFFF}, necesitas {f21111}$%d{FFFFFF} para pagar {FFFF04}%d{FFFFFF} litros.",litros*10, litros);
				SendClientMessage(playerid, -1,string);
				return 1;
			}
			llenado[autoid] = SetTimerEx("DarGasolina",1000,true,"ddd", playerid, autoid, petroleo);
			format(string,128,"Se van a cargar %d litros de combustible.", litros);
			SendClientMessage(playerid, -1,string);
			format(string,128,"Costo total: {f21111}$%d", litros*10);
			SendClientMessage(playerid, -1,string);
			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 0);
			QuitarDinero(playerid, litros*10);
			TimerCombustible[playerid] = 150;
		}
	}
	return 1;
}
CMD:telefono(playerid,params[])
{
	if(PLAYER_INFO[playerid][pNumero] <= 0) return SendClientMessage(playerid,-1,"No tienes un teléfono celular.");
	SendClientMessage(playerid, -1, "Recuerda que también puedes usar {FFFF04}/agenda, /llamar, /sms.");
	AccionesRol(playerid, "mira su teléfono.",20);
	ShowDialog(playerid, DIALOG_PHONE);
	return 1;
}
CMD:config(playerid)
{
    ShowConfig(playerid);
    return 1;
}
CMD:ver(playerid,params[])
{
	new item[32],string[385];
	if(!sscanf(params, "s[32]",item))
	{
		if(strcmp(item, "botiquin", true)==0)
		{
			if(EnBotiquin(playerid)) MostrarBotiquin(playerid);
		}
		else if(strcmp(params,"mapa",true) == 0)
		{
			if(!EnVerMapa(playerid)) return 1;
			format(string, sizeof(string),"Tiendas de ropa\nLugares de trabajos\nConcesionarios");
			ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "Puntos de interés", string, "Siguiente", "Cancelar");
		}
		else if(strcmp(params,"estanteria",true) == 0)
	    {
	        if(!IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) != 14) return 1;
	        MostrarEstanteria(playerid);
	    }
	    else if(strcmp(params,"heladera",true) == 0 || strcmp(params,"geladeira",true) == 0)
	    {
	        MostrarHeladera(playerid);
	    }
	}
	return 1;
}
CMD:guardar(playerid,params[])
{
	new arma[20],armaid,string[150],cantidad;
	if(!sscanf(params,"s[20]d",arma,cantidad))
	{
	    if(strcmp(arma,"medicamentos",true) == 0 || strcmp(arma,"medicamento",true) == 0) armaid = 100;
	    if(strcmp(arma,"crack",true) == 0) armaid = 200;
	}
	else if(!sscanf(params,"s[20]",arma))
	{
	    if(strcmp(arma,"manopla",true) == 0) armaid = 1;
	    if(strcmp(arma,"palo-de-golf",true) == 0) armaid = 2;
	    if(strcmp(arma,"cuchillo",true) == 0) armaid = 4;
	    if(strcmp(arma,"bate-de-beisbol",true) == 0) armaid = 5;
	    if(strcmp(arma,"pala",true) == 0) armaid = 6;
	    if(strcmp(arma,"palo-de-billar",true) == 0) armaid = 7;
	    if(strcmp(arma,"katana",true) == 0) armaid = 8;
	    if(strcmp(arma,"consolador-rosa",true) == 0) armaid = 10;
	    if(strcmp(arma,"vibrador-blanco",true) == 0) armaid = 11;
	    if(strcmp(arma,"gran-vibrador-blanco",true) == 0) armaid = 12;
	    if(strcmp(arma,"vibrador-plateado",true) == 0) armaid = 13;
	    if(strcmp(arma,"ramo-de-flores",true) == 0) armaid = 14;
	    if(strcmp(arma,"baston",true) == 0) armaid = 15;
	    if(strcmp(arma,"granada",true) == 0) armaid = 16;
	    if(strcmp(arma,"9mm",true) == 0) armaid = 22;
	    if(strcmp(arma,"9mm-silenciada",true) == 0) armaid = 23;
	    if(strcmp(arma,"desert-eagle",true) == 0) armaid = 24;
	    if(strcmp(arma,"escopeta-de-madera",true) == 0 ) armaid = 25;
	    if(strcmp(arma,"escopeta-de-combate",true) == 0) armaid = 27;
	    if(strcmp(arma,"MP5",true) == 0) armaid = 29;
	    if(strcmp(arma,"AK-47",true) == 0) armaid = 30;
	    if(strcmp(arma,"M4",true) == 0) armaid = 31;
	    if(strcmp(arma,"rifle",true) == 0) armaid = 33;
	    if(strcmp(arma,"camara",true) == 0) armaid = 43;
	    if(strcmp(arma,"bolso",true) == 0) armaid = 1000;
	}
	if(armaid != 0 && armaid == 300) // Marihuana
	{
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
	    			if(PLAYER_INFO[playerid][pMarihuana] >= cantidad)
	    			{
	        			if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
						PLAYER_INFO[playerid][pMarihuana] -= cantidad;
						PropInfo[c][pMarihuana] += cantidad;
						GuardarPropiedad(c);
						AccionesRol(playerid,"coloca marihuana en el estante.", 20);
					}
					else SendClientMessage(playerid,-1,"No tienes esa cantidad de marihuana.");
				}
			}
	    }
	}
	if(armaid != 0 && armaid == 100)//Medicamentos
	{
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
	    			if(PLAYER_INFO[playerid][pRemedios] >= cantidad)
	    			{
	        			if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
						PLAYER_INFO[playerid][pRemedios] -= cantidad;
						PropInfo[c][pMedicamentos] += cantidad;
						GuardarPropiedad(c);
						AccionesRol(playerid,"coloca medicamentos en el estante.", 20);
					}
					else SendClientMessage(playerid,-1,"No tienes esa cantidad de medicamentos.");
				}
			}
	    }
	}
	else if(armaid != 0 && armaid == 200)//Crack
	{
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
	    			if(PLAYER_INFO[playerid][pCrack] >= cantidad)
	    			{
	        			if(cantidad <= 0) return SendClientMessage(playerid,-1,"Cantidad inválida.");
						PLAYER_INFO[playerid][pCrack] -= cantidad;
						PropInfo[c][pCrack] += cantidad;
						GuardarPropiedad(c);
	     				AccionesRol(playerid,"coloca gramos de crack en el estante.", 20);
					}
					else SendClientMessage(playerid,-1,"No tienes esa cantidad de crack.");
				}
			}
	    }
	}
 	else if(armaid != 0 && armaid != 100 && armaid != 200)//Armas
  	{
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
					if(EspacioRopero(c) < PropInfo[c][pLugarRopero])
					{
						if(SiTieneArma(playerid,armaid))
						{
						    if(armaid == 1) PropInfo[c][pManopla] ++;
						    else if(armaid == 2) PropInfo[c][pPaloDeGolf] ++;
						    else if(armaid == 4) PropInfo[c][pCuchillo] ++;
						    else if(armaid == 5) PropInfo[c][pBateDeBeisbol] ++;
						    else if(armaid == 6) PropInfo[c][pPala] ++;
						    else if(armaid == 7) PropInfo[c][pPaloDeBillar] ++;
						    else if(armaid == 8) PropInfo[c][pKatana] ++;
						    else if(armaid == 10) PropInfo[c][pConsoladorRosa] ++;
						    else if(armaid == 11) PropInfo[c][pVibradorBlanco] ++;
						    else if(armaid == 12) PropInfo[c][pGranVibradorBlanco] ++;
						    else if(armaid == 13) PropInfo[c][pVibradorPlateado] ++;
						    else if(armaid == 14) PropInfo[c][pFlores] ++;
						    else if(armaid == 15) PropInfo[c][pBaston] ++;
						    else if(armaid == 16) PropInfo[c][pGranada] ++;
							else if(armaid == 22) PropInfo[c][p9mm] ++;
							else if(armaid == 23) PropInfo[c][p9mmSilenciada] ++;
							else if(armaid == 24) PropInfo[c][pDesertEagle] ++;
							else if(armaid == 25) PropInfo[c][pEscopetaNormal] ++;
							else if(armaid == 27) PropInfo[c][pEscopetaDeCombate] ++;
							else if(armaid == 29) PropInfo[c][pMP5] ++;
							else if(armaid == 30) PropInfo[c][pAK47] ++;
							else if(armaid == 31) PropInfo[c][pM4] ++;
							else if(armaid == 33) PropInfo[c][pRifle] ++;
							else if(armaid == 43) PropInfo[c][pCamara] ++;
							QuitarArma(playerid,armaid);
							format(string,sizeof(string),"%s coloca su %s en el estante.",PLAYER_INFO[playerid][Nickname],ArmaNombre2[armaid]);
							ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
							GuardarPropiedad(c);
						}
						else SendClientMessage(playerid,-1,"No tienes esa arma en tus manos.");
					}
					else SendClientMessage(playerid,-1,"No hay espacios libres en el estante.");
				}
			}
		}
	}
	return true;
}
CMD:sacar(playerid,params[])
{
	new arma[128],armaid,string[150],cantidad;
	if(!sscanf(params,"s[128]d",arma,cantidad))
	{
	    if(strcmp(arma,"medicamentos",true) == 0 || strcmp(arma,"medicamento",true) == 0 || strcmp(arma,"remedio",true) == 0 || strcmp(arma,"remedios",true) == 0) armaid = 100;
	    if(strcmp(arma,"crack",true) == 0) armaid = 200;
	}
	else if(!sscanf(params,"s[128]",arma))
	{
	    if(strcmp(arma,"manopla",true) == 0) armaid = 1;
	    if(strcmp(arma,"palo-de-golf",true) == 0) armaid = 2;
	    if(strcmp(arma,"cuchillo",true) == 0) armaid = 4;
	    if(strcmp(arma,"bate-de-beisbol",true) == 0) armaid = 5;
	    if(strcmp(arma,"pala",true) == 0) armaid = 6;
		if(strcmp(arma,"palo-de-billar",true) == 0) armaid = 7;
	    if(strcmp(arma,"katana",true) == 0) armaid = 8;
	    if(strcmp(arma,"consolador-rosa",true) == 0) armaid = 10;
	    if(strcmp(arma,"vibrador-blanco",true) == 0) armaid = 11;
	    if(strcmp(arma,"gran-vibrador-blanco",true) == 0) armaid = 12;
	    if(strcmp(arma,"vibrador-plateado",true) == 0) armaid = 13;
	    if(strcmp(arma,"ramo-de-flores",true) == 0) armaid = 14;
	    if(strcmp(arma,"baston",true) == 0) armaid = 15;
	    if(strcmp(arma,"granada",true) == 0) armaid = 16;
	    if(strcmp(arma,"9mm",true) == 0) armaid = 22;
	    if(strcmp(arma,"9mm-silenciada",true) == 0) armaid = 23;
	    if(strcmp(arma,"desert-eagle",true) == 0) armaid = 24;
	    if( strcmp(arma,"escopeta-de-madera",true) == 0 ) armaid = 25;
	    if(strcmp(arma,"escopeta-de-combate",true) == 0) armaid = 27;
	    if(strcmp(arma,"MP5",true) == 0) armaid = 29;
	    if(strcmp(arma,"AK-47",true) == 0) armaid = 30;
	    if(strcmp(arma,"M4",true) == 0) armaid = 31;
	    if(strcmp(arma,"rifle",true) == 0) armaid = 33;
	    if(strcmp(arma,"camara",true) == 0) armaid = 43;
	}
	if(armaid == 300)
	{
	    if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
       			    if(PropInfo[c][pMarihuana] >= cantidad)
       			    {
       			        PropInfo[c][pMarihuana] -= cantidad;
       			        PLAYER_INFO[playerid][pMarihuana] += cantidad;
						AccionesRol(playerid,"toma marihuana del estante.", 20);
						GuardarPropiedad(c);
       			    }
       			    else SendClientMessage(playerid,-1,"No hay esa cantidad de marihuana en el estante.");
       			}
			}
		}
	}
	if(armaid == 100)
	{
	    if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
       			    if(PropInfo[c][pMedicamentos] >= cantidad)
       			    {
       			        PropInfo[c][pMedicamentos] -= cantidad;
       			        PLAYER_INFO[playerid][pRemedios] += cantidad;
						AccionesRol(playerid,"toma medicamentos del estante.", 20);
						GuardarPropiedad(c);
       			    }
       			    else SendClientMessage(playerid,-1,"No hay esa cantidad de medicamentos en el estante.");
       			}
			}
		}
	}
	else if(armaid == 200)
	{
	    if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
       			    if(PropInfo[c][pCrack] >= cantidad)
       			    {
       			        PropInfo[c][pCrack] -= cantidad;
       			        PLAYER_INFO[playerid][pCrack] += cantidad;
						AccionesRol(playerid,"toma gramos de crack del estante.", 20);
						GuardarPropiedad(c);
       			    }
       			    else SendClientMessage(playerid,-1,"No hay esa cantidad de crack en el estante.");
       			}
			}
		}
	}
 	else if(armaid != 0 && armaid != 200 && armaid != 100)
  	{
  	    if(PLAYER_INFO[playerid][pNivel] < 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 3 para sacar objetos de la estanteria.");
		if(IsPlayerInRangeOfPoint(playerid,10,254.2685,-41.5420,1002.0308) && GetPlayerInterior(playerid) == 14)
 		{
  			for(new c; c < MAX_PROPIEDADES; c++)
    		{
     			if(GetPlayerVirtualWorld(playerid) == PropInfo[c][pVW])
       			{
					if(SiRoperoTiene(c,armaid))
					{
					    if(armaid == 1) PropInfo[c][pManopla] --;
	    				else if(armaid == 2) PropInfo[c][pPaloDeGolf] --;
	    				else if(armaid == 4) PropInfo[c][pCuchillo] --;
	    				else if(armaid == 5) PropInfo[c][pBateDeBeisbol] --;
	    				else if(armaid == 6) PropInfo[c][pPala] --;
	    				else if(armaid == 7) PropInfo[c][pPaloDeBillar] --;
	    				else if(armaid == 8) PropInfo[c][pKatana] --;
	    				else if(armaid == 10) PropInfo[c][pConsoladorRosa] --;
						else if(armaid == 11) PropInfo[c][pVibradorBlanco] --;
						else if(armaid == 12) PropInfo[c][pGranVibradorBlanco] --;
						else if(armaid == 13) PropInfo[c][pVibradorPlateado] --;
	    				else if(armaid == 14) PropInfo[c][pFlores] --;
	    				else if(armaid == 15) PropInfo[c][pBaston] --;
		   				else if(armaid == 16) PropInfo[c][pGranada] --;
						else if(armaid == 22) PropInfo[c][p9mm] --;
						else if(armaid == 23) PropInfo[c][p9mmSilenciada] --;
						else if(armaid == 24) PropInfo[c][pDesertEagle] --;
						else if(armaid == 25) PropInfo[c][pEscopetaNormal] --;
						else if(armaid == 27) PropInfo[c][pEscopetaDeCombate] --;
						else if(armaid == 29) PropInfo[c][pMP5] --;
						else if(armaid == 30) PropInfo[c][pAK47] --;
						else if(armaid == 31) PropInfo[c][pM4] --;
						else if(armaid == 33) PropInfo[c][pRifle] --;
						else if(armaid == 43) PropInfo[c][pCamara] --;
						DarArma(playerid,armaid);
						format(string,sizeof(string),"%s toma un/una %s del estante.",PLAYER_INFO[playerid][Nickname],ArmaNombre2[armaid]);
						ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
						GuardarPropiedad(c);
					}
					else SendClientMessage(playerid,-1,"No hay esa arma en el estante.");
				}
			}
		}
	}
	return true;
}
CMD:garaje(playerid,params[])
{
	for(new p=1; p < MAX_PROPIEDADES; p++)
	{
		if(PropInfo[p][pEnUso] == 1 && GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
		{
		    if(PropInfo[p][pInterior] == 43) return 1;
		    if(PropInfo[p][pGX] != 0)
		    {
				SetPosEx(playerid, -1145.1444,-4229.9453,8076.1411,0.0, 4, PropInfo[p][pVW], 0);
			}
			else SendClientMessage(playerid,-1,"Esta propiedad no tiene garaje.");
		}
	}
	return true;
}
CMD:retirar(playerid,params[])
{
	new item[32],id,string[250];
	if(!sscanf(params,"s[32]d",item,id))
	{
		if(strcmp(item,"vehiculo", true)==0)
		{
		    if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 0 || PermisoSalon[playerid] == true)
			{
		    	new inte = GetVehicleInterior(id), vw = GetVehicleVirtualWorld(id);
				if(inte == 13 && vw == 1)
				{
					SendClientMessageEx(playerid,-1, "Retiraste el vehiculo %d del salón de eventos.", id);
				    format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} retiro el vehiculo {FFFF04}%s{FFFFFF} del salón de eventos.", PLAYER_INFO[playerid][Nickname], id);
					MandarMensajeSalon(string, playerid);
                	SetVehiclePassengersInteriorEx(id, 0);
					SetVehiclePassengersVWEx(id, 0);
					SetVehiclePosEx(id, 1410.2614,-1237.0621,13.3828);
					SetVehicleZAngle(id,177.9267);
				}
				else return SendClientMessage(playerid,-1,"Ese vehiculo no se encuentra en el salón de eventos.");
			}
		}
	}
	else return SendClientMessage(playerid,-1,"Escribe {FFFF04}/retirar vehiculo [{FFFF04}ID{FFFFFF}]");
	return 1;
}
CMD:dar(playerid,params[])
{
	new id,cantidad,acount=0,Float:x,Float:y,Float:z,string[256],item[15],item2[15];
	if(PLAYER_TIMES[playerid][TiempoDarDinero] > gettime())
	{
		if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime() > 60)format(string,sizeof(string),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())/60, (PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
		else if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime() < 60)format(string,sizeof(string),"Por favor espera {FF0000}%d segundos",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
		return SendClientMessage(playerid, -1,string);
	}
	if(!sscanf(params,"s[15]ddD(0)",item,id,cantidad))
	{
		if(strcmp(item,"vip", true)==0)
		{
			new str[126];
			if(PLAYER_INFO[playerid][pAdmin] != 7) return 1;
			if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 1;


			if(!AdminDuty[playerid]) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
			if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "El jugador está desconectado.");
			if(!GetPlayerScore(id)) return SendClientMessage(playerid, -1, "El jugador está conectado pero aún no ingresado al juego.");
			if(cantidad > 3 || cantidad < 0) return 1;

			DarVIP(id, cantidad);
			if(cantidad>0)format(str, sizeof str, "El jugador {00AAFF}%s{FFFFFF}(ID: %d) recibió su nueva membresía por 1 mes.", PLAYER_INFO[id][Nickname], id); else
			 format(str, sizeof str, "Removiste la membresía de {00AAFF}%s{FFFFFF}(ID: %d) con éxito.", PLAYER_INFO[id][Nickname], id);
			SendClientMessage(playerid, -1, str);
		}
	    if(strcmp(item,"microfono", true)==0)
	    {
			if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
			if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
			if(IsPlayerConnected(id))
			{
				if(ProxDetectorS(5.0, playerid, id))
				{
					if(TieneMicrofono[id] == Emisoras[playerid][CabinaOcupada]) return SendClientMessage(playerid, COLOR_WHITE, "Ya le habias prestado un micrófono a ese jugador.");
					format(string, sizeof(string), "%s le presta un micrófono a %s.",PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
					ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					TieneMicrofono[id] = Emisoras[playerid][CabinaOcupada];
				}	else SendClientMessage(playerid, -1, "Ese jugador esta lejos.");
			}	else SendClientMessage(playerid, -1, "Ese jugador esta desconectado.");
	    }
		if(strcmp(item,"dinero", true)==0)
		{
			if(PLAYER_INFO[playerid][pNivel] < 6) return SendClientMessageEx(playerid,-1,"Necesitas ser nivel %d para dar dinero.", 6);
			if(IsPlayerConnected(id)) GetPlayerPos(id, x,y,z);
			if(PLAYER_INFO[playerid][pDinero] < cantidad) return SendClientMessage(playerid,-1,"No tienes esa cantidad de dinero en tu billetera.");
			if(id == playerid) return 1;
			if(cantidad > 0 && cantidad < 5000000)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
				{
					new day,month,year,Query[200];
					getdate(day,month,year);
					DarDinero(id, cantidad);
					QuitarDinero(playerid, cantidad);
					AccionesRol(playerid,"saca dinero de su billetera.", 20);
					format(string, sizeof(string), "%s{FFFFFF} te acaba de dar {f21111}$%d",PLAYER_INFO[playerid][Nickname],cantidad);
					SendClientMessage(id,COLOR_AZUL,string);
					mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, comprador,fecha) VALUES ('%e','Dinero', '%d','%e','%02d/%02d/%02d')",PLAYER_INFO[playerid][Nickname],cantidad,PLAYER_INFO[id][Nickname],day,month,year);
					mysql_tquery(handle_db, Query);
					return 1;
				}
				else return SendClientMessage(playerid,-1,"No estas cerca de ese jugador.");
			}
			else return SendClientMessage(playerid,-1,"Cantidad invalida.");
		}
	}
	if(!sscanf(params,"s[15]d",item,id))
	{
	    if(strcmp(item,"acceso",true) == 0)
	    {
	    	if(Alquilado == false) return 1;
	    	if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 0)
	    	{
	            if(IsPlayerConnected(id))
	            {
	                if(EnSalonEvento(id) || EnSalonEvento2(id))
	                {
	                    if(PermisoSalon[id] == false)
	                    {
	                        PermisoSalon[id] = true;
	                        format(string,sizeof(string),"Le diste acceso al salón a {F6F61D}%s{FFFFFF}, escribe {F6F61D}/quitar acceso{FFFFFF} [id] para quitarle el acceso.",PLAYER_INFO[id][Nickname]);
							SendClientMessage(playerid,-1,string);
							format(string,sizeof(string),"Recibiste una tarjeta de acceso al salón, escribe {F6F61D}/ayuda salon{FFFFFF} para recibir información.");
							SendClientMessage(id,-1,string);
							return 1;
	                    }
	                    else SendClientMessage(playerid,-1,"Ya le diste el acceso a esa persona.");
	                }
	                else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
	            }
	            else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
	    	}
	    	else SendClientMessage(playerid,-1,"Para darle acceso a otra persona, tienes que ser el responsable del alquiler del salón.");
	    }
	    if(strcmp(item,"sprunk",true) == 0)
	    {
	        if(ProxDetectorS(5.0, playerid, id))
			{
			    if(TieneSprunk[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes un vaso de sprunk.");
                if(IsPlayerNPC(id)) return 1;
			    new cantidadd[10];
			    switch(TieneSprunk[playerid])
 				{
					case 5:     cantidadd = "500";
					case 4:     cantidadd = "400";
					case 3:     cantidadd = "300";
					case 2:     cantidadd = "200";
					case 1:     cantidadd = "100";
  				}
  				new stringas[128],string2[128];
				format(stringas, sizeof(stringas), "Le ofreciste un vaso de Sprunk con %s ml a {f21111}%s",cantidadd, PLAYER_INFO[playerid][Nickname]);
				SendClientMessage(playerid,-1,stringas);
				format(string2, sizeof(string2), "{f21111}%s{FFFFFF} te ofrece un vaso de sprunk con %s ml, para aceptar usa {DBED15}/aceptar consumible", PLAYER_INFO[playerid][Nickname], cantidadd);
				SendClientMessage(id,-1,string2);
				SprunkOfrecido[id] = TieneSprunk[playerid];
				TipoOferta[id] = 4;
				Ofertante[id] = playerid;
	    	}
	    	else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
	    }
	    if(strcmp(item,"vino",true) == 0)
	    {
	        if(ProxDetectorS(5.0, playerid, id))
			{
			    if(TieneVino[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes un vaso de sprunk.");
                if(IsPlayerNPC(id)) return 1;
			    new cantidadd[10];
			    switch(TieneVino[playerid])
 				{
					case 5:     cantidadd = "500";
					case 4:     cantidadd = "400";
					case 3:     cantidadd = "300";
					case 2:     cantidadd = "200";
					case 1:     cantidadd = "100";
  				}
  				new stringas[128],string2[128];
				format(stringas, sizeof(stringas), "Le ofreciste una copa de vino con %s ml a {f21111}%s",cantidadd, PLAYER_INFO[playerid][Nickname]);
				SendClientMessage(playerid,-1,stringas);
				format(string2, sizeof(string2), "{f21111}%s{FFFFFF} te ofrece una copa de vino con %s ml, para aceptar usa {DBED15}/aceptar consumible", PLAYER_INFO[playerid][Nickname], cantidadd);
				SendClientMessage(id,-1,string2);
				SprunkOfrecido[id] = TieneVino[playerid];
				TipoOferta[id] = 5;
				Ofertante[id] = playerid;
	    	}
	    	else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
	    }
	    if(strcmp(item,"cerveza",true) == 0)
	    {
	        if(ProxDetectorS(5.0, playerid, id))
			{
			    if(TieneCerveza[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes una cerveza.");
                if(IsPlayerNPC(id)) return 1;
			    new cantidadd[10];
			    switch(TieneCerveza[playerid])
 				{
					case 5:     cantidadd = "500";
					case 4:     cantidadd = "400";
					case 3:     cantidadd = "300";
					case 2:     cantidadd = "200";
					case 1:     cantidadd = "100";
  				}
  				new stringas[128],string2[128];
				format(stringas, sizeof(stringas), "Le ofreciste una cerveza con %s ml a {f21111}%s",cantidadd, PLAYER_INFO[playerid][Nickname]);
				SendClientMessage(playerid,-1,stringas);
				format(string2, sizeof(string2), "{f21111}%s{FFFFFF} te ofrece una cerveza con %s ml, para aceptar usa {DBED15}/aceptar consumible", PLAYER_INFO[playerid][Nickname], cantidadd);
				SendClientMessage(id,-1,string2);
				SprunkOfrecido[id] = TieneCerveza[playerid];
				TipoOferta[id] = 6;
				Ofertante[id] = playerid;
	    	}
	    	else SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
	    }
	}
	if(!sscanf(params,"s[15]s[15]",item,item2))
	{
	    if(strcmp(item,"acceso",true) == 0)
	    {
	    	if(Alquilado == false) return 1;
	    	if(strcmp(Alquilador,PLAYER_INFO[playerid][Nickname],true) == 0)
	    	{
	    	    foreach(new i : Player)
	    	    {
					if(IsPlayerConnected(i))
					{
						if(strcmp(item2,PLAYER_INFO[i][Nickname],true) == 0)
						{
						    if(EnSalonEvento(i) || EnSalonEvento2(i))
						    {
						        if(PermisoSalon[i] == false)
						        {
						            PermisoSalon[i] = true;
						            acount++;
	                        		format(string,sizeof(string),"Le diste acceso al salón a {F6F61D}%s{FFFFFF}, escribe {F6F61D}/quitar acceso{FFFFFF} [id] para quitarle el acceso.",PLAYER_INFO[id][Nickname]);
									SendClientMessage(playerid,-1,string);
									format(string,sizeof(string),"Recibiste una tarjeta de acceso al salón, escribe {F6F61D}/ayuda salon{FFFFFF} para recibir información.");
									SendClientMessage(i,-1,string);
									return 1;
						        }
						        else SendClientMessage(playerid,-1,"Ya le diste el acceso a esa persona.");
						    }
						    else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
						}
					}
	    	    }
	    	    if(acount == 0) return SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
	    	}
	    	else SendClientMessage(playerid,-1,"No tienes permiso para dar acceso.");
	    }
	}
	return 1;
}
CMD:quitar(playerid,params[])
{
	new opcion[15],id,string[147],naame[MAX_PLAYER_NAME],opcion2[40],naame2[MAX_PLAYER_NAME],acount=0;
	new jugadorid, seleccion[32];
	if(!sscanf(params,"s[15]d",opcion,id))
	{
	    if(strcmp(opcion,"acceso",true) == 0)
	    {
	    	if(Alquilado == false) return 1;
	    	if(strcmp(Alquilador,naame,true) == 0 || PermisoSalon[playerid] == true)
	    	{
	            if(IsPlayerConnected(id))
	            {
	                if(EnSalonEvento(id) || EnSalonEvento2(id))
	                {
	                    if(PermisoSalon[id] == true)
	                    {
	                        GetPlayerName(id,naame2,sizeof(naame2));
	                        if(strcmp(naame2,Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes quitarle el acceso a esa persona.");
	                        PermisoSalon[id] = false;
	                        format(string,sizeof(string),"Le quitaste el acceso al salón a {F6F61D}%s [%d]{F6F61D}.",PLAYER_INFO[playerid][Nickname],id);
	                        SendClientMessage(playerid,-1,string);
	                        format(string,sizeof(string),"Te quitaron tu acceso, ya no tendras los beneficios de la tarjeta.");
							SendClientMessage(id,-1,string);
							return 1;
	                    }
	                    else SendClientMessage(playerid,-1,"Ese jugador no tiene acceso al salón.");
	                }
	                else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
	            }
	            else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
	    	}
	    	else SendClientMessage(playerid,-1,"No tienes permiso para quitar acceso.");
	    }
	}
	if(!sscanf(params,"s[15]s[40]",opcion,opcion2))
	{
	    if(strcmp(opcion,"acceso",true) == 0)
	    {
	    	if(Alquilado == false) return 1;
	    	if(strcmp(Alquilador,naame,true) == 0)
	    	{
	    	    foreach(new i : Player)
	    	    {
					if(IsPlayerConnected(i))
					{
						GetPlayerName(i,naame2,sizeof(naame2));
						if(strcmp(opcion2,naame2,true) == 0 || PermisoSalon[playerid] == true)
						{
						    if(EnSalonEvento(i) || EnSalonEvento2(i))
						    {
						        if(PermisoSalon[i] == true)
						        {
						            if(strcmp(naame2,Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes quitarle el acceso a esa persona.");
						            PermisoSalon[i] = false;
						            acount++;
                  					format(string,sizeof(string),"Le quitaste el acceso al salón a {F6F61D}%s [%d]{F6F61D}.",PLAYER_INFO[playerid][Nickname],i);
	                        		SendClientMessage(playerid,-1,string);
	                        		format(string,sizeof(string),"Te quitaron tu acceso, ya no tendras los beneficios de la tarjeta.");
									SendClientMessage(id,-1,string);
									return 1;
						        }
						        else SendClientMessage(playerid,-1,"Ese jugador no tiene acceso al salón.");
						    }
						    else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
						}
					}
	    	    }
	    	    if(acount == 0) return SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
	    	}
	    	else SendClientMessage(playerid,-1,"No tienes permiso para quitar acceso.");
	    }
	}
	else if(!sscanf(params, "s[32]u", seleccion, jugadorid))
	{
		if(strcmp(seleccion,"microfono",true) == 0)
		{
			if(Emisoras[playerid][TieneEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una emisora, ve y consigue una en la entrada.");
			if(Emisoras[playerid][TransEmisora] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No estas transmitiendo en ninguna cabina de radio.");
			if(IsPlayerConnected(jugadorid))
			{
				if(ProxDetectorS(5.0, playerid, jugadorid))
				{
					if(TieneMicrofono[jugadorid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no tiene micrófono.");
					format(string, sizeof(string), "%s le quito el micrófono a %s.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[jugadorid][Nickname]);
					ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					TieneMicrofono[jugadorid] = -1;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Ese jugador esta lejos.");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ese jugador esta desconectado.");
		}
	}
	return true;
}
CMD:cubrir(playerid,params[])
{
	new id,precio,Float:x,Float:y,Float:z,string[256];
	if(PLAYER_INFO[playerid][pTrabajo] != T_Guardaespaldas && PLAYER_INFO[playerid][pTrabajo2] != T_Guardaespaldas) return SendClientMessage(playerid,-1,"Solamente los guardaespaldas pueden vender protección. Usa {FFFF04}/ayuda trabajos{FFFFFF} para más información.");
	if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes hacer esto en combate, espera unos segundos y reintenta.");
	if(!sscanf(params, "dd", id,precio))
	{
		if(IsPlayerConnected(id))
		GetPlayerPos(id, x,y,z);
		if(id == playerid) return 1;
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, -1, "No estas cerca de este jugador.");
		if(EnCombate[id] == 1) return SendClientMessage(playerid,-1,"No puedes ofrecer chaleco a un jugador que esta en combate.");
		if(precio >=400 && precio <= 1000)
		{
		    if(PLAYER_TIMES[playerid][TiempoCubrir] > gettime())
		    {
		        SendClientMessage(playerid,-1,"Solamente puedes cubrir a alguien una vez por minuto.");
		        SendClientMessageEx(playerid,-1,"Por favor espera {FF0000}%d{FFFFFF} segundos.",PLAYER_TIMES[playerid][TiempoCubrir] - gettime());
		        return 1;
			}
			format(string, 256, "{03C5DF}%s{FFFFFF} te ofrece un chaleco de protección por {2BFF00}$%d{FFFFFF}, para aceptarlo utiliza {FFFF04}/aceptar proteccion", PLAYER_INFO[playerid][Nickname], precio);
			SendClientMessage(id,-1,string);
			PLAYER_TIMES[playerid][TiempoCubrir] = gettime() + 60;
			GuardaEspalda[id] = playerid;
			SetTimerEx("OfertaPerdida",60000,false,"d",id);
			dineropedido[id] = precio;
		}
		else SendClientMessage(playerid, -1, "No puedes cobrar más de $1000 por cubrir a una persona con tu blindaje.");
	}
	else return SendClientMessage(playerid, -1, "Escribe {FFFF04}/cubrir {FFFFFF}<PlayerID> <Precio>");
	return 1;
}
//
CMD:cons(playerid)return ShowPlayerDialog(playerid, DIALOG_CONB, DIALOG_STYLE_LIST, "{009AFF}Consumibles", "» Consumir Crack\n» Consumir Medicamentos\n» Consumir heroína\n»Consumir Cocaína", "Consumir", "Cancelar");
//
CMD:consumir(playerid,params[])
{
	new item[32],string[256];
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item, "crack", true) == 0)
		{
			if(PLAYER_INFO[playerid][pCrack] <= 0) return SendClientMessage(playerid, -1, "No tienes gramos de crack.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCrack] - gettime() <= 0)
			{
				GivePlayerArmour(playerid, 30.0);
				PLAYER_INFO[playerid][pCrack]--;
				PLAYER_TIMES[playerid][TiempoCrack] = gettime() + 30;
				LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AccionesRol(playerid,"consume un poco de crack.", 20);
				PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCrack] - gettime());
				SendClientMessage(playerid, -1, string);
			}
		}
		else if(strcmp(item, "cocaina", true) == 0)
		{
			if(PLAYER_INFO[playerid][pCocaina] <= 0) return SendClientMessage(playerid, -1, "No tienes cocaina.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCocaina] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 100.0);
			    PLAYER_INFO[playerid][pCocaina]--;
			    PLAYER_TIMES[playerid][TiempoCocaina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de cocaina.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCocaina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}
		else if(strcmp(item, "perico", true) == 0)
		{
			if(PLAYER_INFO[playerid][pPerico] <= 0) return SendClientMessage(playerid, -1, "No tienes perico.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoCocaina] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 100.0);
			    PLAYER_INFO[playerid][pPerico]--;
			    PLAYER_TIMES[playerid][TiempoCocaina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de perico.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoCocaina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}
		//
		//
		else if(strcmp(item, "Preper", true) == 0)
		{
			if(PLAYER_INFO[playerid][pPreper] <= 0) return SendClientMessage(playerid, -1, "No tienes Preper.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoPreper] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 75.0);
			    PLAYER_INFO[playerid][pPreper]--;
			    PLAYER_TIMES[playerid][TiempoPreper] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de preper.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoPreper] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}
		else if(strcmp(item, "Gino", true) == 0)
		{
			if(PLAYER_INFO[playerid][pGino] <= 0) return SendClientMessage(playerid, -1, "No tienes Gino.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoGino] - gettime() <= 0)
			{
			    GivePlayerArmour(playerid, 75.0);
			    PLAYER_INFO[playerid][pGino]--;
			    PLAYER_TIMES[playerid][TiempoGino] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de Gino.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoGino] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}
		//
		else if(strcmp(item, "heroina", true) == 0)
		{
			if(PLAYER_INFO[playerid][pHeroina] <= 0) return SendClientMessage(playerid, -1, "No tienes heroína.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoHeroina] - gettime() <= 0)
			{
			    GivePlayerHealth(playerid, 100.0);
			    PLAYER_INFO[playerid][pHeroina]--;
			    PLAYER_TIMES[playerid][TiempoHeroina] = gettime() + 5*60;
			    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    AccionesRol(playerid,"consume un poco de heroina.", 20);
			    PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir drogas.",PLAYER_TIMES[playerid][TiempoHeroina] - gettime());
				SendClientMessage(playerid, -1, string);
			}
			return 1;
		}
		else if(strcmp(item, "medicamento", true) == 0 || strcmp(item, "medicamentos", true) == 0 || strcmp(item, "remedio", true) == 0)
		{
			if(PLAYER_INFO[playerid][pRemedios] < 1) return SendClientMessage(playerid, -1, "Ya no te quedan medicamentos.");
			if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes consumir estando en combate.");
			if(PLAYER_TIMES[playerid][TiempoMedicamentos] - gettime() <= 0)
			{
				GivePlayerHealth(playerid, 30.0);
				PLAYER_INFO[playerid][pRemedios]--;
    			PLAYER_TIMES[playerid][TiempoMedicamentos] = gettime() + 30;
				LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AccionesRol(playerid,"consume un medicamento.", 20);
				PLAYER_TIMES[playerid][Consumible] = gettime() + 6;
			}
			else
			{
				format(string,256,"Por favor espera {FF3300}%d{FFFFFF} segundos para volver a consumir medicamentos.",PLAYER_TIMES[playerid][TiempoMedicamentos] - gettime());
				SendClientMessage(playerid, -1, string);
			}
		}
		else SendClientMessage(playerid,-1,"Escribe {FFFF04}/consumir {FFFFFF}<Nombre>");
	}
	return 1;
}
CMD:banda(playerid)
{
    if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid, -1,"No perteneces a una banda.");
    if(PLAYER_INFO[playerid][pRango] == 8) return ShowDialog(playerid, CONFIG_BANDA);
	else ShowDialog(playerid, CREW_VIEW_MEMBERS);
	return 1;
}
CMD:invitaciones(playerid)
{
    if(PLAYER_INFO[playerid][pFaccion] != 0) return SendClientMessage(playerid,-1,"No puedes ver tus invitaciones si eres miembro de una organización.");

	new Query[150];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s'",PLAYER_INFO[playerid][Nickname]);
	mysql_query(handle_db, Query, true);

    new dialog[115 * 15 + 1], line_str[115], count = -1;
	dialog = "ID\tLider\tNombre\n";

 	for(new i = 0; i < cache_num_rows(); i++)
	{
	    if(count == 14) break;

		new content[20],BANDA_ID,ID;
        cache_get_value_name(i, "BandaID", content);	BANDA_ID = strval(content);
        cache_get_value_name(i, "ID", content);			ID = strval(content);

	    PLAYER_TEMP[playerid][p_INVITACIONES][i] = BANDA_ID;
        PLAYER_TEMP[playerid][p_INVITACIONES_ID][i] = ID;
		format(line_str, sizeof line_str, "%d.\t%s\t%s\n", i + 1, BandasInfo[BANDA_ID][BLider],BandasInfo[BANDA_ID][BNombre]);
		strcat(dialog, line_str);
		count = i;
	}
	if(count == -1) return SendClientMessage(playerid,-1,"No tienes invitaciones pendientes.");
	else
	{
		strcat(dialog, "{c4290d}Eliminar todo\n");
		PLAYER_TEMP[playerid][p_INVITACIONES][count+1] = -1;
	}
	ShowPlayerDialog(playerid, MENU_INVITACIONES, DIALOG_STYLE_TABLIST_HEADERS, "Menu Invitaciones", dialog, "Seleccionar", "Salir");
	return 1;
}
CMD:invitar(playerid, params[])
{
	if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No eres miembro de ninguna banda.");
	if(PuedeInvitar(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para invitar personas a la banda.");

	new ID;
	if(sscanf(params, "u", ID)) return SendClientMessage(playerid,-1,"Escribe {FFFF04}/invitar {FFFFFF}<PlayerID>");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,-1,"El jugador está desconectado.");
	if(ID == playerid) return SendClientMessage(playerid,-1,"No te puedes hacer esto.");

	new Float:pos[3]; GetPlayerPos(ID, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid,-1,"Este jugador no está cerca tuyo.");
	if(PLAYER_INFO[ID][pFaccion] > 0) return SendClientMessage(playerid,-1,"Este jugador ya se encuentra en una Banda.");

	new banda = PLAYER_INFO[playerid][pFaccion];
	if(BandasInfo[banda][BIntegrantes] >= 40) return SendClientMessage(playerid,-1,"La banda ya tiene el maximo de integrantes {EE0000}(40)");

    new Query[250];
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `invitaciones` WHERE `Invitado`='%s' AND `BandaID`='%d'",PLAYER_INFO[ID][Nickname],banda);
    new Cache:result = mysql_query(handle_db, Query, true);

	if(cache_num_rows())
	{
	    cache_delete(result);
		return SendClientMessage(playerid,-1,"El usuario ya ha sido invitado para esta organización.");
 	}
	else
	{
		mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `invitaciones`(`Invitador`, `Invitado`, `BandaID`) VALUES ('%s', '%s', '%d');",PLAYER_INFO[playerid][Nickname], PLAYER_INFO[ID][Nickname], PLAYER_INFO[playerid][pFaccion]);
		mysql_query(handle_db, Query, false);
        cache_delete(result);
		SendClientMessageEx(playerid,-1,"Invitaste a {33CCFF}%s {FFFFFF}a la banda, espera a que acepte.", PLAYER_INFO[ID][Nickname]);
		SendClientMessageEx(ID,-1,"Te han ofrecido unirte a {33CCFF}%s{FFFFFF}, Para unirte utilza {FFFF04}/invitaciones", BandasInfo[banda][BNombre]);
	}
	return 1;
}
CMD:ascender(playerid,params[])
{
    if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda");
	new pName[32],pSub[32];
	GetPlayerName(playerid, pName, 32);
	if(PLAYER_INFO[playerid][pFaccion] > 0)
	{
		new id,rango;
		if(PuedeAscDes(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para ascender/desender personas a la banda.");
		if(sscanf(params, "dd",id,rango)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/ascender {FFFFFF}<PlayerID> <Rango 1-8>");
		if(PLAYER_INFO[id][pFaccion] != PLAYER_INFO[playerid][pFaccion]) return SendClientMessage(playerid,-1,"Este jugador no es miembro de tu facción");
        if(rango <= 0 || rango >= 9) return SendClientMessage(playerid, -1, "Escribe {DBED15}/ascender {FFFFFF}<PlayerID> <Rango 1-8>");
        if(id == playerid) return SendClientMessage(playerid,-1,"No puedes modificar tu propio rango.");
		else if(rango == 8)
		{
		    PLAYER_INFO[id][pFaccion] = PLAYER_INFO[playerid][pFaccion];
		    PLAYER_INFO[id][pRango] = 8;

		    PLAYER_INFO[playerid][pFaccion] = 0;
		    PLAYER_INFO[playerid][pRango] = 0;
		}
		else
		{
		    if(PLAYER_INFO[id][pRango] == 8) return SendClientMessage(playerid,-1,"A este jugador no le puedes cambiar el rango.");
		    GetPlayerName(id, pSub, 32);
			new string[256];
			format(string,256,"{009BE4}%s{FFFFFF} cambió el rango de {009BE4}%s{FFFFFF} a {DEED15}%s",pName,pSub,RangoBanda(PLAYER_INFO[playerid][pFaccion], rango));
   			SendRadioMessage(PLAYER_INFO[playerid][pFaccion], 0xff9c00FF, string);
			PLAYER_INFO[id][pRango] = rango;
	    }
	}
	return 1;
}
CMD:despediroff(playerid,params[])
{
    if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda.");
    if(PLAYER_INFO[playerid][pRango] != 8) return SendClientMessage(playerid,-1,"Solo el dueño puede ocupar este comando.");
	new ID[32],string[256],Query[200],pName[32];
	GetPlayerName(playerid, pName, 32);
	if(!sscanf(params,"s[32]",ID))
	{
	    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Username`='%s' AND `Faccion`='%d'",ID,PLAYER_INFO[playerid][pFaccion]);
		mysql_query(handle_db, Query, true);

	    if(cache_num_rows())
	    {
	        if(PLAYER_INFO[playerid][pFaccion] == 1)
	        {
                format(string, 200, "{009BE4}%s {FFFFFF}fué expulsado de la banda por {009BE4}%s",ID,PLAYER_INFO[playerid][Nickname]);
	            SendRadioPoliceMessage(-1, string);
	        }
	        else
	        {
	        	format(string, 200, "{%06x}%s{FFFFFF} fué expulsado de la banda por {%06x}%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, ID, BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, PLAYER_INFO[playerid][Nickname]);
				SendRadioMessage(PLAYER_INFO[playerid][pFaccion], 0xff9c00FF, string);
			}
			mysql_format(handle_db, Query, sizeof(Query), "UPDATE `usuarios` SET `Faccion`='0',`Rango`='0',`Duty`='0' WHERE `Username`='%s'",ID);
			mysql_query(handle_db, Query, true);
		}
		else
		{
   			SendClientMessage(playerid,-1,"Este usuario no se encuentra en tu faccion.");
		}
	}
	else return SendClientMessage(playerid,-1,"Escribe {FFFF04}/despediroff {FFFFFF}<Nombre_Apellido>");
	return 1;
}

CMD:despedir(playerid,params[])
{
    if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No perteneces a ninguna banda");
    if(PuedeExpulsar(playerid)) return SendClientMessage(playerid,-1,"No tienes permiso para sacar personas a la banda.");

	new id,string[128],pName[32],pSub[32];
	GetPlayerName(playerid, pName, 32);
	if(!sscanf(params,"d",id))
	{
		if(id == playerid) return 1;
		if(PLAYER_INFO[id][pFaccion] != PLAYER_INFO[playerid][pFaccion]) return SendClientMessage(playerid,-1,"Este jugador no pertenece a tu facción");
		if(PLAYER_INFO[id][pRango] == 8) return SendClientMessage(playerid,-1,"No puedes despedir a este jugador.");
		
		GetPlayerName(id, pSub, 32);
		if(PLAYER_INFO[id][pFaccion] == 1)
        {
            format(string, 200, "{009BE4}%s {FFFFFF}fué expulsado de la faccion por {009BE4}%s",PLAYER_INFO[id][Nickname],PLAYER_INFO[playerid][Nickname]);
            SendRadioPoliceMessage(-1, string);
        }
        else
        {
        	format(string, 200, "{%06x}%s{FFFFFF} fué expulsado de la banda por {%06x}%s",BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, PLAYER_INFO[id][Nickname], BandasInfo[PLAYER_INFO[playerid][pFaccion]][BColor] >>> 8, PLAYER_INFO[playerid][Nickname]);
			SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, string);
		}
		if(PLAYER_INFO[id][pFaccion] == 1)
		{
			SetPlayerSkin(id, PLAYER_INFO[id][pRopa]);
			ClearAnimations(id);
		}
		PLAYER_INFO[id][pFaccion] = 0;
		PLAYER_INFO[id][pRango] = 0;
		PLAYER_INFO[id][pDuty] = 0;
	    HidePlayerGangZones(id);
	}
	else return SendClientMessage(playerid,-1,"Escribe {FFFF04}/despedir {FFFFFF}<PlayerID>");
	return 1;
}

CMD:forzar(playerid, params[])
{
	new item[10];
	if(!sscanf(params,"s[20]",item))
	{
		if(strcmp(item,	"cerradura",	true) == 0)
		{
			if(PLAYER_INFO[playerid][pNivel] < 5 && PLAYER_INFO[playerid][pVIP] < 2) return SendClientMessage(playerid,-1,"Necesitas ser nivel 5 o VIP2 para forzar una cerradura.");
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes hacer esto en un vehículo.");
			if(PLAYER_INFO[playerid][pNivelLadron] == 1 && PLAYER_INFO[playerid][pMartillo] == 0) return SendClientMessage(playerid,-1,"Necesitas un martillo.");
			else if(PLAYER_INFO[playerid][pNivelLadron] == 2 && PLAYER_INFO[playerid][pBarreta] == 0) return SendClientMessage(playerid,-1,"Necesitas una Barreta.");
			else if(PLAYER_INFO[playerid][pNivelLadron] >= 3 && PLAYER_INFO[playerid][pDestornillador] == 0) return SendClientMessage(playerid,-1,"Necesitas un Destornillador.");
            if(IsPlayerInRangeOfPoint(playerid, 2.0,-2277.1763,-9.9763,38.2523)) if(Forzada1 == 0) MostrarForzarCerradura(playerid,1); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,932.2239,1973.6547,11.6083)) if(Forzada2 == 0) MostrarForzarCerradura(playerid,2); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,-2394.6099,-14.3616,35.9529)) if(Forzada3 == 0) MostrarForzarCerradura(playerid,3); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,2373.8467,-1139.5442,30.0510)) if(Forzada4 == 0) MostrarForzarCerradura(playerid,4); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,-2727.5435,-50.9449,7.0301)) if(Forzada5 == 0) MostrarForzarCerradura(playerid,5); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,-2727.5054,-155.6168,7.2009)) if(Forzada6 == 0) MostrarForzarCerradura(playerid,6); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1762.8772,-2101.1462,13.9916)) if(Forzada7 == 0) MostrarForzarCerradura(playerid,7); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,2485.1733,-1997.1724,13.9166)) if(Forzada8 == 0) MostrarForzarCerradura(playerid,8); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1844.5101,770.9579,11.4838)) if(Forzada9 == 0) MostrarForzarCerradura(playerid,9); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		    if(IsPlayerInRangeOfPoint(playerid, 2.0,-1448.9193,2647.9514,56.4912)) if(Forzada10 == 0) MostrarForzarCerradura(playerid,10); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		    if(IsPlayerInRangeOfPoint(playerid, 2.0,1344.6938,2610.3264,11.5494)) if(Forzada11 == 0) MostrarForzarCerradura(playerid,11); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
			if(IsPlayerInRangeOfPoint(playerid, 2.0,1666.2400, 2610.7400, 10.4000)) if(Forzada12 == 0) MostrarForzarCerradura(playerid,12); else SendClientMessage(playerid,-1,"Los vecinos están alertados, vuelve más tarde.");
		}
	}
	return 1;
}
CMD:escapar(playerid,params[])
{
	new escapar = 0;
	if(IsPlayerInRangeOfPoint(playerid,2.5,-2278.8904,-10.3138,38.2993)) escapar = 1;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	932.2437,1975.8787,11.6227)) escapar = 2;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	-2396.0010,-13.0565,35.3486)) escapar = 3;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	2373.7302,-1136.8610,30.0583)) escapar = 4;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	-2730.4609,-155.6674,7.2174)) escapar = 5;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	2485.0527,-1995.0458,14.0434)) escapar = 7;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	-1449.7598,2647.9287,56.5345)) escapar = 8;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	1762.7701,-2098.9631,13.9989)) escapar = 9;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	1841.8738,770.7863,11.5959)) escapar = 10;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	1344.4647,2612.5925,11.5559)) escapar = 11;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	1666.9180,2612.6965,11.5559)) escapar = 12;
	if(IsPlayerInRangeOfPoint(playerid,2.5,	-2729.9800,-50.8513,7.0453)) escapar = 13;
	if(escapar > 0)
	{
	    NoTeleportHack(playerid);
	    if(Objeto[playerid] > 0)
		{
			AccionesRol(playerid,"dejó un objeto en el suelo.", 20);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid,7);
			Objeto[playerid] = 0;
		}
		switch(escapar)
		{
		    case 1: SetPlayerPosEx(playerid,-2277.1763,-9.9763,38.2523);
			case 2: SetPlayerPosEx(playerid,931.9277,1973.0038,11.3073);
			case 3: SetPlayerPosEx(playerid,-2393.9712,-13.1641,35.3125);
			case 4: SetPlayerPosEx(playerid,2373.8467,-1139.5442,30.0510);
			case 5: SetPlayerPosEx(playerid,-2727.5054,-155.6168,7.2009);
   			case 7: SetPlayerPosEx(playerid,2485.1733,-1997.1724,13.9166);
   			case 8: SetPlayerPosEx(playerid,-1448.9193,2647.9514,56.4912);
   			case 9: SetPlayerPosEx(playerid,1762.8772,-2101.1462,13.9916);
   			case 10: SetPlayerPosEx(playerid,1844.5101,770.9579,11.4838);
   			case 11: SetPlayerPosEx(playerid,1344.6938,2610.3264,11.5494);
	   		case 12: SetPlayerPosEx(playerid,1667.0402,2610.3267,11.5494);
	   		case 13: SetPlayerPosEx(playerid,-2727.9619,-51.2697,7.0297);
		}
		SendClientMessage(playerid,-1,"{f21111}Lograste salir{FFFFFF} de la casa, escapa de la zona.");
	}
	return 1;
}
CMD:abandonar(playerid,params[])
{
	new item[32];
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item, "carga", true) == 0)
		{
			new autoid = GetPlayerVehicleID(playerid);
			if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero) return SendClientMessage(playerid, -1, "No eres camionero");
			if(IsPlayerInAnyVehicle(playerid))
			if(!CAMION(autoid)) return SendClientMessage(playerid, -1, "No estas en un camión");
			if(CamionCargado[autoid] < 1) return SendClientMessage(playerid, -1, "Este camión no esta cargado.");
			Chofer[autoid] = INVALID_PLAYER_ID;
			CamionCargado[autoid]= 0;
			DisablePlayerCheckpoint(playerid);
			TimerCamionero[playerid] = 0;
			Respawnear(autoid);
			SendClientMessage(playerid, -1, "Fallaste en tu trabajo de camionero, no se te pagará nada.");
		}
		if(strcmp(item, "banda",true)==0)
		{
			new string[128], query[200];
		    if(PLAYER_INFO[playerid][pFaccion] != 0 && PLAYER_INFO[playerid][pRango] == 8) return SendClientMessage(playerid,-1,"No puedes abandonar una banda donde eres el lider.");
			if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"No estás en ninguna banda.");
			format(string,128,"{00E1FF}%s{FFFFFF} ha salido de la banda.", PLAYER_INFO[playerid][Nickname]);
			BandasInfo[PLAYER_INFO[playerid][pFaccion]-1][BIntegrantes]--;
			mysql_format(handle_db, query, sizeof(query), "UPDATE `facciones` SET `Integrantes`='%d' WHERE `id`='%d'", BandasInfo[PLAYER_INFO[playerid][pFaccion]-1][BIntegrantes],PLAYER_INFO[playerid][pFaccion]);
			mysql_pquery(handle_db, query);
			if(PLAYER_INFO[playerid][pFaccion] == 1)
			{
				SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
				ClearAnimations(playerid);
			}
			PLAYER_INFO[playerid][pFaccion] = 0;
			PLAYER_INFO[playerid][pRango] = 0;
			PLAYER_INFO[playerid][pDuty] = 0;
			PLAYER_INFO[playerid][mDuty] = 0;
		    HidePlayerGangZones(playerid);
		    return 1;
		}
	}
	return 1;
}
//
CMD:armas(playerid,params[])
{
    if(PLAYER_INFO[playerid][pDuty] != 1) return SendClientMessage(playerid, -1, "Antes de agarrar armas, debes tener el uniforme puesto.");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 271.4031,1873.6595,8.7578)) return SendClientMessage(playerid, -1,"No estás en la estantería");
    ShowPlayerDialog(playerid, ARMAS_PD, DIALOG_STYLE_LIST, "Armas:","DK\nEscopeta Normal\nMP5\nEDC\nM4\nSniper", "Aceptar", "Cerrar");
    return 1;
}
//
CMD:chaleco(playerid,params[])
{
    if(PLAYER_INFO[playerid][pDuty] == 0) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 278.9911,1865.0701,8.7578)) return SendClientMessage(playerid, -1, "No estas en la estanteria.");
    else if(PLAYER_INFO[playerid][pDuty] == 0) return SendClientMessage(playerid, -1, "Antes de coger un chaleco, debes tener el uniforme puesto.");

    new string[128];
	SetPlayerArmourEx(playerid, 100);
	format(string, sizeof(string), "%s %s se agachó y cogio un chaleco antibalas", RangoPolicia(playerid), PLAYER_INFO[playerid][Nickname]);
	ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}
CMD:blindaje(playerid,params[])
{
    if(PLAYER_INFO[playerid][pDuty] == 0) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1420.2274,-1582.7921,512.5981)) return SendClientMessage(playerid, -1, "No estas en la estanteria.");
    else if(PLAYER_INFO[playerid][pDuty] == 0) return SendClientMessage(playerid, -1, "Antes de coger un chaleco, debes tener el uniforme puesto.");

    new string[128];
	SetPlayerArmourEx(playerid, 100);
	format(string, sizeof(string), "%s %s se agachó y cogio un chaleco antibalas", RangoPolicia(playerid), PLAYER_INFO[playerid][Nickname]);
	ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}
CMD:cargar(playerid,params[])
{
	new item[128];
	if(!sscanf(params,"s[128]", item))
	{
		if(strcmp(item, "camion", true) == 0)
		{
			new autoid;
			if(IsPlayerInAnyVehicle(playerid))
			autoid = GetPlayerVehicleID(playerid);
			if(PLAYER_INFO[playerid][pTrabajo] != T_Camionero && PLAYER_INFO[playerid][pTrabajo2] != T_Camionero) return SendClientMessage(playerid,-1,"Necesitas ser camionero para cargar el camión. Para más información, usa {FFFF04}/ayuda trabajos");
			{
			    if(!IsPlayerInAnyVehicle(playerid)) return 1;
				if(!CAMION(autoid)) return 1;
				{
					for(new i=0;i<GetVehiclePoolSize();i++)
					{
        				if(Chofer[i] == playerid && Chofer[i] != INVALID_PLAYER_ID)
						{
						    Chofer[i] = INVALID_PLAYER_ID;
						    CamionCargado[i] = 0;
						}
					}
					if(CamionCargado[autoid] == 0)
					{
						if(CargandoC[playerid] == 0)
						{
							SendClientMessage(playerid, -1, "Se ha marcado en el mapa la ubicación donde van a cargar el camión.");
							MarcadoCamioneroGPS(playerid,-2.1931,-278.9248,5.4297,7.0);
							Localizando[playerid] = 0;
						}
					}
				}
			}
		}
		if(strcmp(item, "tanque", true)==0)
		{
			if(Bidon[playerid] == 0) return SendClientMessage(playerid, -1, "Tu no tienes un bidon de gasolina");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en un vehículo para utilizar el bidon");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar manejando el vehiculo para usar el bidon");
			{
			    new autoid = GetPlayerVehicleID(playerid), lleno, resta;
			    new modelo = GetVehicleModel(autoid);
			    new vehiclefuel = CombustibleCoche(modelo);
			    resta = vehiclefuel-VehicleFuel[autoid];
				lleno = vehiclefuel;
				if(VehicleFuel[autoid] == lleno) return SendClientMessage(playerid,-1,"El tanque de combustible está lleno");
				if(resta >= 5)
				{
					VehicleFuel[autoid] += 5;
					Bidon[playerid] = 0;
					SendClientMessage(playerid, -1,"El tanque de combustible fue cargado con el bidón de 5 litros.");
					RemovePlayerAttachedObject(playerid, 7);
				}
				else if(resta < 5)
				{
					VehicleFuel[autoid] += resta;
					Bidon[playerid] = 0;
					SendClientMessage(playerid, -1,"El tanque de combustible fue cargado con el bidón de 5 litros."); // No hay nada
					RemovePlayerAttachedObject(playerid, 7);
				}
			}
		}
	}
	return 1;
}
CMD:ofrecer(playerid,params[])
{
    new item[128], ID, precio, vehicleid = GetPlayerVehicleID(playerid);
    if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,COLOR_WHITE,"No puedes usar este comando en este momento");
    if(PLAYER_TIMES[playerid][TiempoSexoOfrecido] > gettime())
	{
		new string[128];
		format(string,sizeof(string),"Debes esperar %d segundos para volver a ofrecer sexo.",PLAYER_TIMES[playerid][TiempoSexoOfrecido] - gettime());
		SendClientMessage(playerid,-1,string);
	}
	else
	{
		new tipo;
        if(!sscanf(params, "s[128]dd", item,ID,precio))
		{
		    tipo = 1;
		}
		else if(!sscanf(params, "s[128]d", item,ID))
		{
		    precio = 0;
		    tipo = 2;
		}
		else return SendClientMessage(playerid, -1, "Usa el comando {FFFF04}/ofrecer sexo {FFFFFF}<PlayerID>");
		if(tipo > 0)
		{
		    if(strcmp(item, "sexo", true) == 0)
			{
			    if(tipo == 1 && precio < 0) return 1;
			    if(tipo == 1 && precio > 10000) return SendClientMessage(playerid,-1,"El precio máximo que puedes cobrar es de {f21111}$10000");
                if(ID == playerid) return 1;
                if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1, "El jugador no está conectado");
				if(tipo == 1 && precio > 0 && (PLAYER_INFO[playerid][pTrabajo] != T_Prostituta && PLAYER_INFO[playerid][pTrabajo2] != T_Prostituta)) return SendClientMessage(playerid,-1,"Para cobrar tienes que tener el trabajo de prostitución.");
                if(!IsPlayerInVehicle(ID, vehicleid)) return 1;
                if(GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid,-1,"Tienes que estar en el asiento del lado derecho del vehículo.");
				if(GetPlayerVehicleSeat(ID) != 0) return SendClientMessage(playerid,-1,"El otro tiene que estar en el asiento del lado izquierdo del vehículo.");
                if(AVION(vehicleid) || MOTO(vehicleid)) return SendClientMessage(playerid,-1,"Busca un vehículo más discreto.");
                if(tipo == 1) precioofertax[ID] = precio;
                SexoOral[ID] = playerid;
				PLAYER_TIMES[playerid][TiempoSexoOfrecido] = gettime() + 60;
                new string2[128];
				format(string2, sizeof(string2), "Ofreciste practicarle sexo oral a {f21111}%s {FFFFFF}por {f21111}$%d", PLAYER_INFO[ID][Nickname], precio);
				SendClientMessage(playerid,-1,string2);
				format(string2, sizeof(string2), "{f21111}%s {FFFFFF}quiere practicarte sexo oral por {f21111}$%d\n¿Quieres aceptar?", PLAYER_INFO[playerid][Nickname], precio);
				ShowPlayerDialog(ID, DSEXOO, DIALOG_STYLE_MSGBOX,"Oferta de sexo oral", string2, "Si", "No");
				return 1;
			}
		}
	}
	return true;
}
//
CMD:vender(playerid,params[])
{
	if(isnull(params)) return Mensaje(playerid,-1,"VENTAS:{DBED15} /vender objeto - /vender [dz/crack/piezas/marihuana/medicamentos] [ID] [cantidad] [precio]"),Mensaje(playerid,COLOR_YELLOW,"/vender [nombre-del-arma] [ID] [precio]");
 	new item[32],ID,precio, stringas[128],cantidad,Float:x,Float:y,Float:z;

	//VENDER CRACK |MEDIS ETC
	if(PLAYER_TIMES[playerid][TiempoDarDinero] > gettime())
	{
		if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime() > 60)format(stringas,sizeof(stringas),"Por favor espera {FF0000}%d:%d {FFFFFF}(m:s)",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())/60, (PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
		else if(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime()< 60)format(stringas,sizeof(stringas),"Por favor espera {FF0000}%d segundos",(PLAYER_TIMES[playerid][TiempoDarDinero] - gettime())%(60));
		return SendClientMessage(playerid, -1,stringas);
	}
	//gettime
	if(PLAYER_TIMES[playerid][TiempoVenta] - gettime() <= 0)
	{
 	//
	if(!sscanf(params,"s[32]ddd",item,ID,cantidad,precio))
	{
	    //
	    //B1
		if(strcmp(item, "medicamentos", true) == 0 || strcmp(item, "remedio", true) == 0 || strcmp(item, "remedios", true) == 0)
		{
		            new string[256];
		    		GetPlayerPos(ID,x,y,z);
				    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
				    if(PLAYER_INFO[playerid][pNivel] < 6) return SendClientMessageEx(playerid,-1,"Tienes que ser nivel %d para poder vender", 6);
				    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
				    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
				    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
				    if(PLAYER_INFO[playerid][pRemedios] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de medicamentos que quieres vender.");
				    if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada medicamento.");
					if(IsPlayerConnected(ID))
					{
					    format(string, 256, "Le ofreciste %d medicamentos a {f21111}%s{FFFFFF} por {00FF00}$%d",cantidad,PLAYER_INFO[ID][Nickname],precio);
						SendClientMessage(playerid, -1,string);
						MedicamentosOfrecidos[ID] = cantidad;
						dineropedido[ID] = precio;
						ofertador[ID] = playerid;
						TipoOferta[ID] = 2;
						format(string, 256, "{f21111}%s{FFFFFF} te ofrece %d medicamentos por {00FF00}$%d{FFFFFF}, para aceptar escribe {7401DF}/aceptar consumible", PLAYER_INFO[playerid][Nickname],cantidad,precio);
						SendClientMessage(ID, -1, string);
						PLAYER_TIMES[playerid][TiempoVenta] = gettime() + 60;
						if(idTimerOfertaPerdida[ID] != -1)
						{
							KillTimer(idTimerOfertaPerdida[ID]);
							idTimerOfertaPerdida[ID] = -1;
						}
						idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
						if(idTimerTiempoVenta[playerid] != -1)
						{
							KillTimer(idTimerTiempoVenta[playerid]);
							idTimerOfertaPerdida[playerid] = -1;
						}
						idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
      					if(precio <= 100)
						{
							format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d medicamentos por $%d a %s(ID: %d | Nivel: %d)", PLAYER_INFO[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PLAYER_INFO[ID][Nickname],ID,GetPlayerScore(ID));
							MensajeAdmin(COLOR_CHEAT, string, 3);
						}
					}

		}
		//B2
		if(strcmp(item,"crack",true) == 0)
		{

		            new string[256];
		    	 	GetPlayerPos(ID,x,y,z);
				    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
				    if(PLAYER_INFO[playerid][pNivel] < 6) return SendClientMessageEx(playerid,-1,"Tienes que ser nivel %d para poder vender", 6);
				    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
				    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
				    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
				    if(PLAYER_INFO[playerid][pCrack] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de crack que quieres vender.");
				    if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada gramo de crack.");
					if(IsPlayerConnected(ID))
					{
						format(string, 256, "Le ofreciste %dg de crack a {f21111}%s{FFFFFF} por {00FF00}$%d",cantidad,PLAYER_INFO[ID][Nickname],precio);
						SendClientMessage(playerid, -1,string);
						CrackOfrecidos[ID] = cantidad;
						dineropedido[ID] = precio;
						ofertador[ID] = playerid;
						TipoOferta[ID] = 1;
						format(string, 256, "{f21111}%s{FFFFFF} te ofrece %dg de crack por {00FF00}$%d{FFFFFF}, para aceptar escribe {7401DF}/aceptar consumible", PLAYER_INFO[playerid][Nickname],cantidad,precio);
						SendClientMessage(ID, -1, string);
						PLAYER_TIMES[playerid][TiempoVenta] = gettime() + 60;
						if(idTimerOfertaPerdida[ID] != -1)
						{
							KillTimer(idTimerOfertaPerdida[ID]);
							idTimerOfertaPerdida[ID] = -1;
						}
						idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
						if(idTimerTiempoVenta[playerid] != -1)
						{
							KillTimer(idTimerTiempoVenta[playerid]);
							idTimerOfertaPerdida[playerid] = -1;
						}
						idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
						if(precio <= 100)
						{
							format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d crack por $%d a %s(ID: %d | Nivel: %d)", PLAYER_INFO[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PLAYER_INFO[ID][Nickname],ID,GetPlayerScore(ID));
							MensajeAdmin(COLOR_CHEAT, string, 3);
						}
					}

		}
		//B3
		if(strcmp(item,"marihuana",true) == 0)
		{

		        new string[256];
		     	GetPlayerPos(ID,x,y,z);
			    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
			    if(PLAYER_INFO[playerid][pNivel] < 6) return SendClientMessageEx(playerid,-1,"Tienes que ser nivel %d para poder vender", 6);
			    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
			    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
			    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
			    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
			    if(PLAYER_INFO[playerid][pMarihuana] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de marihuana que quieres vender.");
			    if(precio > cantidad*500) return SendClientMessage(playerid,-1,"No puedes vender a más de $500 cada gramo de marihuana.");
				if(IsPlayerConnected(ID))
				{
					format(string, 256, "Le ofreciste %dg de marihuana a {f21111}%s{FFFFFF} por {00FF00}$%d",cantidad,PLAYER_INFO[ID][Nickname],precio);
					SendClientMessage(playerid, -1,string);
					MarihuanaOfrecida[ID] = cantidad;
					dineropedido[ID] = precio;
					ofertador[ID] = playerid;
					TipoOferta[ID] = 3;
					format(string, 256, "{f21111}%s{FFFFFF} te ofrece %d marihuana por {00FF00}$%d{FFFFFF}, para aceptar escribe {7401DF}/aceptar consumible", PLAYER_INFO[playerid][Nickname],cantidad,precio);
					SendClientMessage(ID, -1, string);
					PLAYER_TIMES[playerid][TiempoVenta] = gettime() + 60;
					if(idTimerOfertaPerdida[ID] != -1)
					{
						KillTimer(idTimerOfertaPerdida[ID]);
						idTimerOfertaPerdida[ID] = -1;
					}
					idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
					if(idTimerTiempoVenta[playerid] != -1)
					{
						KillTimer(idTimerTiempoVenta[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
					if(precio <= 100)
					{
						format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d marihuana por $%d a %s(ID: %d | Nivel: %d)", PLAYER_INFO[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PLAYER_INFO[ID][Nickname],ID,GetPlayerScore(ID));
						MensajeAdmin(COLOR_CHEAT, string, 3);
					}
				}
		}
		//B4
		if(strcmp(item,"piezas",true) == 0)
		{

		        new string[256];
		    	GetPlayerPos(ID,x,y,z);
			    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
       			if(PLAYER_INFO[playerid][pNivel] < 6) return SendClientMessageEx(playerid,-1,"Tienes que ser nivel %d para poder vender", 6);
			    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
			    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
			    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
			    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
			    if(PLAYER_INFO[playerid][pMateriales] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de piezas que quieres vender.");
			    if(precio > cantidad*400) return SendClientMessage(playerid,-1,"No puedes vender a más de $400 cada pieza.");
				if(IsPlayerConnected(ID))
				{
				    format(string, 256, "Le ofreciste %d piezas de armas a {f21111}%s{FFFFFF} por {00FF00}$%d",cantidad,PLAYER_INFO[ID][Nickname],precio);
					SendClientMessage(playerid, -1,string);
					PiezasOfrecidas[ID] = cantidad;
					dineropedido[ID] = precio;
					ofertador[ID] = playerid;
					format(string, 256, "{f21111}%s{FFFFFF} te ofrece %d piezas de armas por {00FF00}$%d{FFFFFF}, para aceptar escribe {7401DF}/aceptar piezas", PLAYER_INFO[playerid][Nickname],cantidad,precio);
					SendClientMessage(ID, -1, string);
					PLAYER_TIMES[playerid][TiempoVenta] = gettime() + 60;
					if(idTimerOfertaPerdida[ID] != -1)
					{
						KillTimer(idTimerOfertaPerdida[ID]);
						idTimerOfertaPerdida[ID] = -1;
					}
					idTimerOfertaPerdida[ID] = SetTimerEx("OfertaPerdida", 60000, false, "d", ID);
					if(idTimerTiempoVenta[playerid] != -1)
					{
						KillTimer(idTimerTiempoVenta[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
					if(precio <= 100)
					{
						format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d piezas por $%d a %s(ID: %d | Nivel: %d)", PLAYER_INFO[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PLAYER_INFO[ID][Nickname],ID,GetPlayerScore(ID));
						MensajeAdmin(COLOR_CHEAT, string, 3);
					}
				}

		}
		//B5
		if(strcmp(item,""SERVER_COIN"",true) == 0)
		{


		        new string[256];
		    	GetPlayerPos(ID,x,y,z);
			    if(!sscanf(params, "s[29]ddd", item,ID,cantidad,precio))
			    if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
	   			if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessageEx(playerid,-1,"Tienes que ser nivel %d para poder vender",2);
			    if(precio < 125000*cantidad && PLAYER_INFO[playerid][pNivel] < 5) return SendClientMessage(playerid,-1,"Tendrás que llegar a nivel 5 para vender "SERVER_COIN" por menos de $125.000 c/u");
			    if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte tu mismo.");
			    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Persona no encontrada.");
			    if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xEB0000FF,"Esa persona está muy lejos.");
			    if(cantidad == 0) return SendClientMessage(playerid,0xEB0000FF,"Ingresa la cantidad que quieres vender.");
			    if(PLAYER_INFO[playerid][Moneda] < cantidad) return SendClientMessage(playerid, -1, "{FF0000}No tienes{FFFFFF} la cantidad de "SERVER_COIN" que quieres vender.");
			    if(precio > cantidad*130000) return SendClientMessage(playerid,-1,"No puedes vender a más de $130.000 cada "SERVER_COIN".");
				if(IsPlayerConnected(ID))
				{
					EVOfrecidos[ID] = cantidad,	dineropedido[ID] = precio,	ofertador[ID] = playerid, LeOfreci[playerid] = ID,	Deposito[playerid] = ID;
			  		new stringg[512];
					format(stringg,sizeof(stringg),"{FFFFFF}Estás por ofrecerle {89746A}%d "SERVER_COIN"{FFFFFF} a {f21111}%s{FFFFFF} por {f21111}$%d\n\nCada "SERVER_COIN" lo estarías cobrando a {f21111}$%d{FFFFFF}\n\n¿Estás seguro de realizar esta transacción?",EVOfrecidos[ID],PLAYER_INFO[ID][Nickname],dineropedido[ID],dineropedido[ID]/EVOfrecidos[ID]);
					ShowPlayerDialog(playerid, VENDERRZ, DIALOG_STYLE_MSGBOX, "{DBED15}!ATENCIÓN!", stringg, "Si","No");
			  		YaOfrecio[playerid] = 0;
					if(idTimerOfertaPerdida[ID] != -1)
					{
						KillTimer(idTimerOfertaPerdida[ID]);
						idTimerOfertaPerdida[ID] = -1;
					}
					if(idTimerTiempoVenta[playerid] != -1)
					{
						KillTimer(idTimerTiempoVenta[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					idTimerTiempoVenta[playerid] = SetTimerEx("TiempoVender", 60000, false, "d", playerid);
					if(precio <= 100)
					{
						format(string, 256, "Jugador %s(ID: %d | Nivel: %d) ofrece %d "SERVER_COIN" por $%d a %s(ID: %d | Nivel: %d)", PLAYER_INFO[playerid][Nickname],playerid,GetPlayerScore(playerid),cantidad,precio,PLAYER_INFO[ID][Nickname],ID,GetPlayerScore(ID));
						MensajeAdmin(COLOR_CHEAT, string, 3);
					}
				}


		}
		//cierra

		//
	}
	//=============VENDER ARMAS================
	if(!sscanf(params,"s[32]dd",item,ID,precio))
	{
	            new string[256];
 	    		new arma;
				if(strcmp(item, "manopla", true) == 0) arma = 1;
				else if(strcmp(item, "palo-de-golf", true) == 0) arma = 2;
				else if(strcmp(item, "cuchillo", true) == 0) arma = 4;
				else if(strcmp(item, "bate-de-beisbol", true) == 0) arma = 5;
				else if(strcmp(item, "pala", true) == 0) arma = 6;
				else if(strcmp(item, "palo-de-billar", true) == 0) arma = 7;
				else if(strcmp(item, "katana", true) == 0) arma = 8;
				else if(strcmp(item, "9mm", true) == 0) arma = 22;
				else if(strcmp(item, "9mm-silenciada", true) == 0) arma = 23;
				else if(strcmp(item, "desert-eagle", true) == 0) arma = 24;
				else if(strcmp(item, "escopeta", true) == 0) arma = 25;
				else if(strcmp(item, "Escopeta-de-combate", true) == 0) arma = 27;
				else if(strcmp(item, "mp5", true) == 0) arma = 29;
				else if(strcmp(item, "granada", true) == 0) arma = 16;
				else if(strcmp(item, "ak-47", true) == 0) arma = 30;
				else if(strcmp(item, "M4", true) == 0) arma = 31;
				else if(strcmp(item, "rifle", true) == 0) arma = 33;
				else if(strcmp(item, "camara", true) == 0) arma = 43;
				else return SendClientMessage(playerid,-1,"SERVER: Unknown Command");

				if(HasWeapon(playerid,arma) == 0) return SendClientMessage(playerid, -1, "No puedes vender un arma que no tienes.");
				GetPlayerPos(ID,x,y,z);
				if(precio < 0) return SendClientMessage(playerid,0xFF0000FF,"Valor inválido.");
				if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid,0xFF0000FF,"Esa persona está muy lejos.");
				if(ID == playerid) return SendClientMessage(playerid,0xFF0000FF,"No puedes venderte un arma tu mismo.");
				if(!procesoOferta(arma, precio, playerid, ID))	return 1;
				format(string, 256, "Le ofrecistes a {f21111}%s{FFFFFF} una %s por {f21111}$%d",PLAYER_INFO[ID][Nickname],ArmaNombre2[arma],precio);
				SendClientMessage(playerid, -1,string);
				format(string, 256, "{f21111}%s{FFFFFF} te ofrece una %s por {f21111}$%d{FFFFFF}, para aceptar escribe {009AFF}/aceptar arma", PLAYER_INFO[playerid][Nickname],ArmaNombre2[arma],precio);
				SendClientMessage(ID, -1, string);
	}
	//===VENDER OBJETOS=============||
	if(!sscanf(params,"s[25]",item))
	{
		if(strcmp(item,"objeto",true)==0)
		{

            	if(PLAYER_INFO[playerid][pNivel] < 4) return SendClientMessage(playerid,-1,"Tendrás que llegar a nivel 4 para vender objetos.");
				if(!IsPlayerInRangeOfPoint(playerid, 5.0,196.3872,-231.1294,1.7786) && !IsPlayerInRangeOfPoint(playerid, 5.0,216.8291,-232.7234,1.7786)) return SendClientMessage(playerid,-1,"No estas en la tienda de objetos");
				{
					if(Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes ningun objeto para vender");
					new price;
					switch(Objeto[playerid])
					{
						case 1429:  price = 1500;
						case 1518:  price = 2000;
						case 2912:  price = 1300;
						case 2190:  price = 2000;
						case 1788:  price = 2100;
						case 1790:  price = 3200;
						case 2028:  price = 2750;
						case 2226:  price = 1500;
						case 19317: price = 3000;
						case 2404:  price = 1500;
						case 2405:  price = 1500;
						case 2406:  price = 1500;
						case 19318: price = 3000;
						case 1210:  price = 1500;
					}
					if(price == 0) return 1;
					MensajeEx(playerid,-1,"Vendiste un objeto a{f21111} $%d",price);
					DarDinero(playerid, price);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					RemovePlayerAttachedObject(playerid,4);
					Objeto[playerid] = 0;
				}
		}
		//
	}
	//===============
	}
	else
	{
		new string[128];
		format(string,128,"Por favor espera {FF3300}%s{FFFFFF} para volver a hacer una venta.",TimeConvertEx(PLAYER_TIMES[playerid][TiempoVenta] - gettime()));
		SendClientMessage(playerid, -1, string);
	}
	return 1;
}
//
CMD:cp(playerid, params[])
{
	new item[128];
	if(!sscanf(params,"s[128]", item))
	{
		if(strcmp(item, "armero", true) == 0)
		{
			if(PLAYER_INFO[playerid][piezas] > 0)
			{
				PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
				SendClientMessage(playerid, -1,"Se ha marcado en el mapa la posicion.");
			}
		}
		if(strcmp(item, "camionero", true) == 0)
		{
			if(PLAYER_TEMP[playerid][pt_Camionero])
			{
				SetPlayerCheckpoint(playerid,PuntoCX[playerid],PuntoCY[playerid],PuntoCZ[playerid], 7.0);
			}
		}
		if(strcmp(item, "transportista", true) == 0)
		{
		    if(PLAYER_TEMP[playerid][pt_Transportista])
			{
				SetPlayerCheckpoint(playerid,PuntoTraX[playerid],PuntoTraY[playerid],PuntoTraZ[playerid], 7.0);
			}
		}
		if(strcmp(item, "trailero", true) == 0)
		{
		    if(PLAYER_TEMP[playerid][pt_Trailero])
			{
				SetPlayerCheckpoint(playerid,PuntoTraileroX[playerid],PuntoTraileroY[playerid],PuntoTraileroZ[playerid], 7.0);
			}
		}
		if(strcmp(item, "basurero", true) == 0)
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
            if(PBasura[playerid] > 0 && PuntoBaX[playerid] != 0)
            {
				SetPlayerCheckpoint(playerid,PuntoBaX[playerid],PuntoBaY[playerid],PuntoBaZ[playerid], PuntoBaA[playerid]);
			}
		}
		if(strcmp(item, "medico", true) == 0)
		{
			if(MedicoCP2[playerid] == 1)
			{
				HospitalCercano(playerid);
				SendClientMessage(playerid, -1,"Se ha marcado en el mapa la posicion.");
			}
		}
		if(strcmp(item, "borrar", true) == 0)
		{
			Localizando[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
		}
	}
	return 1;
}

CMD:tienda(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0,1218.4177,-1549.3975,13.5664))
	{
		ShowPlayerDialog(playerid, MENU_TIENDA, DIALOG_STYLE_TABLIST_HEADERS, "RZ:RP | Tienda Especial","Nombre\tPrecio\n- Catalogo de Ropa \t5 "SERVER_COIN"\n- Catalogo de Botes\t30 "SERVER_COIN"\n- Catalogo de Motos\t35 "SERVER_COIN"\n- Catalogo de Vehiculos\t40 "SERVER_COIN"\n- Catalogo de Helicopteros\t80 "SERVER_COIN"\n- Creacion de Organizacion\n- Compra de VIP","Seleccionar", "Salir");
	}
	else SendClientMessage(playerid, -1, "No estas en el lugar correcto.");
	return 1;
}

CMD:ayuda(playerid,params[])
{
	new string[555];
    format(string, sizeof(string),"%s{FFFFFF}- General\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Propiedades\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Necesidades\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Trabajos\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Vehiculos\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Territorios\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Bandas\n", string);
    format(string, sizeof(string),"%s{FFFFFF}- Tunning\n", string);
    ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Menu de ayuda", string, "Siguiente", "Cerrar");
  	return 1;
}
CMD:crear(playerid,params[])
{
    new item[32];
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item, "radio", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid,5,391.1343,183.0587,1040.1156)) return SendClientMessage(playerid,-1,"Necesitas estar en la oficina principal del estudio de radio y televisión.");
			{
				if(Emisoras[playerid][TieneEmisora] == 1) return SendClientMessage(playerid,-1,"Ya tienes una emisora de radio");
				{
					if(Emisoras[playerid][TieneEmisora] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes una emisora de radio.");
					if(PLAYER_INFO[playerid][pDinero] < 15000) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas v$15000{FFFFFF} para crear una estación de radio");
					ShowPlayerDialog(playerid, COMPRARRADIO, DIALOG_STYLE_INPUT,"Crear estación de radio","Ingresa el nombre de tu nueva estación de radio:","Crear","Cancelar");
					return 1;
				}
			}
		}
		else if(strcmp(item, "pedido", true) == 0)
		{
			if(PLAYER_TIMES[playerid][pTIME_PEDIDO] > gettime()) return SendClientMessageEx(playerid, -1, "Tienes que esperar %s para poder enviar otro pedido.", TimeConvertEx(PLAYER_TIMES[playerid][pTIME_PEDIDO] - gettime()));
		    new dialog[] = "{FFFFFF}Este menu es únicamente para pedidos\nesto no es para reportar jugadores o para insultar a la administración\nen caso de hacerlo, vas a ser {FF0000}sancionado.";
			return ShowPlayerDialog(playerid, DIALOG_PEDIDO, DIALOG_STYLE_MSGBOX, "Información importante",dialog,"Siguiente","Salir");
		}
		if(PLAYER_INFO[playerid][pTrabajo] != T_Armero && PLAYER_INFO[playerid][pTrabajo2] != T_Armero) return SendClientMessage(playerid,-1,"Necesitas ser armero para poder crear armas.");
		if(PLAYER_INFO[playerid][Agonizando] == 1) return SendClientMessage(playerid,-1,"No puedes crear armas en este momento.");
		if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes crear un arma si estas en un vehiculo.");
		if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No puedes crear un arma en este momento.");
		if(puedeCrearArmas(playerid) == 0) return SendClientMessage(playerid,-1,"No puedes crear armas en este momento.");
		if(EstaHospital(playerid)) return SendClientMessage(playerid,-1,"No puedes crear armas en esta zona.");
		
		new nombre_arma[64],string[128],Piezas,armaid,lvlid;
		if(strcmp(item, "9mm",	 true) == 0) { armaid = 22; lvlid = 1; format(nombre_arma,sizeof(nombre_arma),"9mm"); Piezas = 10;}
		else if(strcmp(item, "9mm-silenciada",	true) == 0) { armaid = 23; lvlid = 2; format(nombre_arma,sizeof(nombre_arma),"9mm silenciada"); Piezas = 12; }
		else if(strcmp(item, "escopeta",	true) == 0) { armaid = 25; lvlid = 2; format(nombre_arma,sizeof(nombre_arma),"Escopeta"); Piezas = 20;}
		else if(strcmp(item, "desert-eagle",	true) == 0) { armaid = 24; lvlid = 3; format(nombre_arma,sizeof(nombre_arma),"Desert Eagle"); Piezas = 36;}
		else if(strcmp(item, "dk",	true) == 0) { armaid = 24; lvlid = 3; format(nombre_arma,sizeof(nombre_arma),"Desert Eagle"); Piezas = 36;}
		else if(strcmp(item, "mp5",	true) == 0) { armaid = 29; lvlid = 4; format(nombre_arma,sizeof(nombre_arma),"Mp5"); Piezas = 58;}
		else if(strcmp(item, "ak47",	true) == 0) { armaid = 30; lvlid = 5; format(nombre_arma,sizeof(nombre_arma),"AK-47"); Piezas = 82;}
		else if(strcmp(item, "m4",	true) == 0) { armaid = 31; lvlid = 5; format(nombre_arma,sizeof(nombre_arma),"M4"); Piezas = 96; }
  		else if(strcmp(item, "rifle",	true) == 0) { armaid = 33; lvlid = 5; format(nombre_arma,sizeof(nombre_arma),"Rifle"); Piezas = 52;}
  		else if(strcmp(item, "edc",	true) == 0) { armaid = 27; lvlid = 6; format(nombre_arma,sizeof(nombre_arma),"Escopeta de combate"); Piezas = 136;}
		else if(strcmp(item, "escopeta-de-combate",	true) == 0) { armaid = 27; lvlid = 6; format(nombre_arma,sizeof(nombre_arma),"Escopeta de combate"); Piezas = 136;}
		else return 1;
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes crear armas en vehículos.");
		if(PLAYER_INFO[playerid][pNivelArmero] < lvlid) return SendClientMessage(playerid, -1, "No tienes el nivel necesario para crear esta arma");
		if(PLAYER_INFO[playerid][pMateriales] >= Piezas)
		{
			PLAYER_INFO[playerid][pMateriales] -= Piezas;
			DarArma(playerid, armaid);
			format(string,sizeof(string),"%s saca piezas de su mochila y crea una %s.",PLAYER_INFO[playerid][Nickname], nombre_arma);
			ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
			SetHabilityWeaponJob(playerid,lvlid);
		}
		else return SendClientMessage(playerid, -1, "No tienes los materiales necesarios");
	}
	return 1;
}
CMD:minumero(playerid,params[])
{
	new string[256];
	if(PLAYER_INFO[playerid][pNumero] == 0) return SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para tener un número. Puedes comprar un teléfono en cualquier supermercado {FFFF04}24/7");
	format(string, 256,"Tu número de teléfono es: {FFFF04}%d",PLAYER_INFO[playerid][pNumero]);
	SendClientMessage(playerid, -1, string);
	return 1;
}
CMD:numero(playerid,params[])
{
	new ID,string[256];
	if(PLAYER_INFO[playerid][pAgenda] != 1) return SendClientMessage(playerid, -1, "Necesitas una guía telefónica para encontrar un número.");
	if(sscanf(params,"r", ID)) return SendClientMessage(playerid, -1, "Modo de uso: {FFFF04}/numero {FFFFFF}<PlayerID>");
	if(ID == playerid) return SendClientMessage(playerid,-1,"Para ver tu número de teléfono, usa: {FFFF04}/minumero");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,COLOR_WHITE,"Esa persona no aparece en la guía telefónica, probablemente no tenga teléfono.");
	if(PLAYER_INFO[ID][pNumero] == 0) return SendClientMessage(playerid, -1, "Esa persona no aparece en la guía telefónica, probablemente no tenga teléfono.");
	if(PLAYER_INFO[ID][pGuia] == 1)
	{
		format(string, 256, "{FFFF04}Guía telefónica: {FFFFFF}El numero de {f21111}%s{FFFFFF} es {FFFF04}%d",PLAYER_INFO[ID][Nickname],PLAYER_INFO[ID][pNumero]);
		SendClientMessage(playerid, -1, string);
	}
	else SendClientMessage(playerid, -1, "El número de teléfono de esa persona no está registrado en la guía.");
	return 1;
}
CMD:accesorios(playerid, params[])
{
    if(CountPlayerToys(playerid) == 0) return SendClientMessage(playerid, -1, "Tienes que tener al menos un accesorio para poder usar este comando.");
	ShowDialog(playerid, DIALOG_TOYS);
    return 1;
}
CMD:agenda(playerid, params[])
{
	if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el teléfono antes de meterte en la celda.");
	if(PLAYER_INFO[playerid][pNumero] == 0) return SendClientMessage(playerid, -1,"No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(TelefonoEstado[playerid] == 1) return SendClientMessageEx(playerid, -1, "Tu teléfono está apagado, para encenderlo escribe /telefono.");
	if(EnLlamada[playerid] == 1) return SendClientMessageEx(playerid, -1, "Estás en una llamada.");

	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}
CMD:llamar(playerid, params[])
{
	if(PLAYER_INFO[playerid][pNumero] == 0)
	{
	    SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para hacer llamadas.");
	    SendClientMessage(playerid,-1,"Puedes comprar un teléfono en cualquier {FFFF04}24/7");
	    return 1;
	}
	
	new string[250], phonenumb, tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "d", tmp_number))
	{
		found = true;
		phonenumb = tmp_number;
	}
	else if(!sscanf(params, "s[24]", tmp_contact))
	{
		for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	    {
			if(!strcmp(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], tmp_contact, true))
		    {
		        found = true;
				phonenumb = PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER];
				break;
			}
		}
	}
	else return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/llamar{FFFFFF} [Número o contacto de /agenda]");

	if(!found) return SendClientMessageEx(playerid, -1, "No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
	if(phonenumb <= 0) return SendClientMessage(playerid, -1, "El número destino no es válido.");
	
	if(GetPlayerMoney(playerid) < 25) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para realizar una llamada, necesitas {f21111}$15{FFFFFF} cada 30 segundos.");
	if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el teléfono antes de meterte en la celda.");
    if(phonenumb == 911 && PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][mDuty] == 1) return SendClientMessage(playerid, -1, "No puedes llamar al 911 si eres un policía en actividad, usa tu radio.");
	if(PLAYER_INFO[playerid][pNumero] == phonenumb) return SendClientMessage(playerid,-1,"Número inválido");
	if(EnLlamada[playerid] == 1) return SendClientMessage(playerid,-1,"Ya estas en una llamada, escribe /colgar para terminarla");
	if(TelefonoEstado[playerid] == 1)
	{
	    TelefonoEstado[playerid] = 0;
	    if(PLAYER_TEMP[playerid][@Specteando] == 0) AccionesRol(playerid,"encendió su teléfono móvil.", 20);
	}
	PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
	foreach(new i : Player)
	{
		if(phonenumb == 911)
		{
			PLAYER_INFO[playerid][MobileSub] = 911;
			if(PLAYER_INFO[playerid][Agonizando] != 1)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
			SetTimerEx("LlamadaCops",2000,false,"d",playerid);
            LlamadaTipo[playerid] = 1;
			SendClientMessage(playerid, -1, "Llamando a la policía... Escribe {FFFF04}/colgar{FFFFFF} para cancelar la llamada.");
			return 1;
		}
		if(phonenumb == 815)
		{
			PLAYER_INFO[playerid][MobileSub] = 815;
			if(PLAYER_INFO[playerid][Agonizando] != 1)	{  SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);   }
			SetTimerEx("LlamadaGrua",3000,false,"d",playerid);
            LlamadaTipo[playerid] = 1;
			SendClientMessage(playerid, -1, "Llamando al servicio de grúa. Escribe {FFFF04}/colgar{FFFFFF} para cancelar la llamada.");
			return 1;
		}
		if(phonenumb == 71)
		{
			new cual = 0;
			if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) cual = 1;
			if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) cual = 1;
			if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759)) cual = 1;
			if(cual == 1)
			{
			    if(PLAYER_INFO[playerid][pCama] > 0) return 1;
				new Float:calculo;

				if(PLAYER_INFO[playerid][j_HEALTH] > 99) return 1;

				calculo = 100 - PLAYER_INFO[playerid][j_HEALTH];
				ObtenerEstadoSalud(playerid);
				HCalculo[playerid] = floatround(calculo, floatround_round);
				format(string,256,"{FFFFFF}Necesitas ser internado con urgencia por {a9c4e4}%s\nCosto de internación {f21111}$%d",Enfermedades(playerid),HCalculo[playerid]*10);
				ShowPlayerDialog(playerid,DHOSPITAL,DIALOG_STYLE_MSGBOX,"Diagnóstico médico",string,"Aceptar","Cancelar");
			}
			else if(PLAYER_INFO[playerid][Agonizando] == 1)
			{
			    if(LlamadaMedicos[playerid] == 0)
			    {
					foreach(new x : Player)
					{
						if(PLAYER_INFO[x][pTrabajo] == T_Medico || PLAYER_INFO[x][pTrabajo2] == T_Medico)
						{
						    if(RopaMedi[x] == 1)
						    {
								if(GetPlayerVirtualWorld(playerid) == 0) SetPlayerMarkerForPlayer(x, playerid, COLOR_AMARILLO);

								format(string, sizeof(string), "{FFFFFF}Hay un nuevo paciente solicitando {FFFF04}/servicio medico{FFFFFF}, para avisarle que vas a atenderlo escribe {FFFF04}/responder medico", PLAYER_INFO[playerid][Nickname], playerid);
								SendClientMessage(x, 0x00CC00FF, string);
								TimerMedico[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,2);
								ResponderMedi[x] = 1;
							}
						}
				 	}
					SendClientMessage(playerid, -1,"Llamaste al servicio medico, por favor espera un momento.");
					TimerMalherido[playerid] = 100;
					MarcadoMedicos[playerid] = 1;
					LlamadaMedicos[playerid] = 1;
					return StopCell(playerid);
				}
			}
			else SendClientMessage(playerid, -1,"{FFFFFF}Para llamar al {FFFF04}/servicio medico{FFFFFF}, tienes que estar herido o dentro de un hospital.");
		}
		if(phonenumb == 82)
		{
			if(LlamadaTaxi[playerid] == 0)
			{
				foreach(new x : Player)
				{
					if(PLAYER_INFO[x][pTrabajo] == T_Taxista || PLAYER_INFO[x][pTrabajo2] == T_Taxista)
					{
						if(TAXI(GetPlayerVehicleID(x)))
						{
							SetPlayerMarkerForPlayer(x, playerid, COLOR_AMARILLO);
							SendClientMessage(x, 0xDBED15FF, "Hay un nuevo cliente {FFFFFF}llamando al {FFFF04}/servicio taxi{FFFFFF}, para avisarle que vas a buscarlo usa {FFFF04}/responder taxi");
							ResponderTaxi[x] = 1;
						}
					}
				}
				TimerTaxista[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,3);
				SendClientMessage(playerid, -1,"Llamaste al servicio de taxi, por favor espera un momento.");
				LlamadaTaxi[playerid] = 1;
				return StopCell(playerid);
			}
			else return SendClientMessage(playerid,-1,"Ya has solicitado un taxi");
		}
		if(phonenumb == 80)
		{
			new Float:vida, autoid = GetPlayerVehicleID(playerid);
			GetVehicleHealth(autoid, vida);
			if(PLAYER_INFO[playerid][pNivel] == 1 && PLAYER_INFO[playerid][pExperiencia] < 3)
			{
			    SendClientMessage(playerid,-1,"Para llamar al servicio mecánico, necesitas tener como mínimo 3 puntos de reputación.");
			    SendClientMessage(playerid,-1,"Se gana 1 punto de reputación por cada hora de juego.");
			    SendClientMessage(playerid,-1,"Puedes consultar en cualquier momento tu reputación usando el comando /estadisticas o /est.");
			    SendClientMessage(playerid,-1,"O sino también puedes ver la barra gris en la parte inferior de la pantalla.");
			    return 1;
			}
			if(AceptoRepara[playerid] == 1) return SendClientMessage(playerid,-1,"Ya aceptaste una reparación.");
			GetVehicleHealth(autoid, vida);
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(vida > 375.0) return SendClientMessage(playerid,-1,"El motor del vehículo no está averiado.");
				if(Capo[autoid] == 0) return SendClientMessage(playerid,-1,"Primero necesitas {FFFF00}/abrir capo");
				if(LlamadaMeca[playerid] == 0)
				{
					foreach(new x : Player)
					{
						if(RopaMeca[x] == 1 && (PLAYER_INFO[x][pTrabajo] == T_Mecanico || PLAYER_INFO[x][pTrabajo2] == T_Mecanico))
						{
							SetPlayerMarkerForPlayer(x, playerid, COLOR_AZUL);
							SendClientMessage(x, 0x33CCFFAA, "{FFFFFF}Hay un nuevo cliente llamando al {FFFF00}/servicio mecanico{FFFFFF}, para confimar usa {FFFF00}/responder mecanico");
							ResponderMeca[x] = 1;
							TimerMeca[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,1);
						}
					}
					SendClientMessage(playerid, -1,"Has solicitado un mecanico, espera que venga a tu posición.");
					LlamadaMeca[playerid] = 1;
					return StopCell(playerid);
				}
				else return SendClientMessage(playerid,-1,"Ya has solicitado un mecánico.");
			}
			else return SendClientMessage(playerid,-1,"Debes estar en un vehículo para solicitar un mecanico.");
		}
		if(PLAYER_INFO[playerid][Agonizando] != 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
		if(PLAYER_INFO[i][pNumero] == phonenumb && phonenumb != 0)
		{
		    if(PLAYER_INFO[i][pTiempoCarcel] > 0 || PLAYER_INFO[i][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"El numero que usted marco no esta disponible en este momento.");
			if(EnLlamada[i] == 1) return SendClientMessage(playerid,-1,"El numero que usted marco se encuentra ocupado");
			if(TelefonoEstado[i] == 1) return SendClientMessage(playerid,-1,"El numero que marco esta fuera de linea");
			{
				if(IsPlayerConnected(i)){
					if(i != INVALID_PLAYER_ID){
						if(PLAYER_INFO[i][MobileSub] == INVALID_PLAYER_ID)
						{
							if(PLAYER_TEMP[i][@Specteando] == 1) return 1;
							SendClientMessageEx(playerid,-1,"Llamando a %s... usa {FFFF04}/colgar{FFFFFF} para cancelar la llamada.", convertPhoneNumber(playerid, PLAYER_INFO[i][pNumero]));
							format(string, sizeof(string), "El teléfono de %s está sonando.", PLAYER_INFO[i][Nickname]);
							ProxDetector(30.0, i, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
							
							format(string, sizeof(string), "Te están llamando por teléfono: {FFFF04}%s{FFFFFF}, escribe {FFFF04}/atender{FFFFFF} o {FFFF04}/colgar", convertPhoneNumber(i, PLAYER_INFO[playerid][pNumero]));
							CLlamada[playerid] = SetTimerEx("finllamadax", 30000, false, "ii", playerid,i);
							SendClientMessage(i, -1, string);

							YoLlame[playerid] = 1;
							PLAYER_INFO[playerid][MobileSub] = i;
							PLAYER_INFO[i][MobileSub] = playerid;
							llamada(i);
							return 1;
						}
					}
				}
			}
		}
	}
	SendClientMessage(playerid, -1, "Su llamada no puede darse por el numero marcado, por favor, compruebe el número e inténtelo nuevamente.");
	SetTimerEx("StopCell",3000,false,"d",playerid);
	return 1;
}
CMD:sms(playerid, params[])
{
	if(PLAYER_INFO[playerid][pNumero] == 0)
	{
	    SendClientMessage(playerid,-1,"Necesitas comprar un teléfono móvil para enviar mensajes de texto.");
	    SendClientMessage(playerid,-1,"Puedes comprar un teléfono en cualquier {FFFF04}24/7");
	    return 1;
	}
    if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"Te quitaron el telefono antes de entrar a la celda.");
	if(PLAYER_INFO[playerid][pDinero] <= 15) return SendClientMessage(playerid, COLOR_WHITE, "No tienes suficiente dinero para enviar un SMS, necesitas {FF4202}$15");

	new to_number, message[145];
	new tmp_number, tmp_contact[24], bool:found;
	
	if(!sscanf(params, "ds[145]", tmp_number, message))
	{
		found = true;
		to_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]s[145]", tmp_contact, message))
	{
	    for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	    {
			if(!strcmp(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], tmp_contact, true))
		    {
		        found = true;
				to_number = PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER];
				break;
			}
		}
	}
	else return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/sms{FFFFFF} [Número o contacto de /agenda] [Mensaje]");
    if(PLAYER_INFO[playerid][pNumero] == to_number) return SendClientMessage(playerid,-1,"No puedes autoenviarte un SMS.");
    if(!found) return SendClientMessageEx(playerid, -1, "No hemos encontrado a '%s' en tu /agenda.", tmp_contact);
	if(to_number <= 0) return SendClientMessage(playerid, -1, "El número destino no es válido.");
	
	EnviarSMS(playerid, to_number, message);
	return 1;
}
CMD:atender(playerid, params[])
{
	new string[150],texto[10],id,Float:Pos[3];
	if(!sscanf(params,"s[10]d",texto,id))
	{
		if(strcmp(texto, "paciente", true)==0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
			if(GetPlayerSkin(playerid) == 274 || GetPlayerSkin(playerid) == 275 || GetPlayerSkin(playerid) == 276 || GetPlayerSkin(playerid) == 308)
			{
				if(PLAYER_INFO[playerid][pMedicina] == 0) return SendClientMessage(playerid,-1,"No tienes ninguna medicina para aplicar");
				GetPlayerPos(id,Pos[0],Pos[1],Pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"Tu no estas cerca de este paciente");
				if(PLAYER_INFO[id][pAtendido] == 1) return SendClientMessage(playerid,-1,"Este paciente ya fue atendido por otro médico");
				
				if(PLAYER_INFO[id][pEnfermedad] == PLAYER_INFO[playerid][pMedicina])
				{
					if(PLAYER_INFO[id][j_HEALTH] < 90)
					{
						SetPlayerHealthEx(id, 90);
					}
					AccionesRol(playerid,"aplica el tratamiento necesario con el paciente.", 20);
					format(string,sizeof(string),"%s comienza a curar las heridas de %s ",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[id][Nickname]);
					ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					format(string,sizeof(string),"El tratamiento parece ir correctamente");
					ProxDetector(5.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					PLAYER_INFO[id][pAtendido] = 1;
					PLAYER_INFO[playerid][pMedicina] = 0;
					if(PLAYER_INFO[id][pDinero] >= 600)
					{
						QuitarDinero(id,600);
						DarDinero(playerid,600);
						SendClientMessage(playerid,-1,"El paciente te ha pagado {f21111}$600{FFFFFF} por tu gran trabajo");
						SendClientMessage(id,-1,"Has pagado {f21111}$600{FFFFFF} de tu billetera al médico por su trabajo");
					}
					else if(PLAYER_INFO[id][pBanco] >= 600)
					{
						PLAYER_INFO[id][pBanco] -= 600;
						DarDinero(playerid,600);
						SendClientMessage(playerid,-1,"El paciente te ha pagado {f21111}$600{FFFFFF} por tu gran trabajo");
						SendClientMessage(id,-1,"Has pagado {f21111}$600{FFFFFF} del banco al médico por su trabajo");
					}
					else
					{
						DarDinero(playerid,250);
						SendClientMessage(playerid,-1,"El paciente no tiene suficiente dinero para pagar los servicios, el hospital te ha pagado $250");
						SendClientMessage(id,-1,"No has tenido dinero para pagarle al médico, el hospital cubrio tu cuota");
					}
				}
				else
				{
					if(PLAYER_INFO[id][j_HEALTH] > 10)
					{
						SetPlayerHealthEx(id, 10);
					}
					AccionesRol(playerid,"aplica el tratamiento erroneo con el paciente.", 20);
					SendClientMessage(playerid,COLOR_RED,"Haz aplicado un tratamiento erroneo con el paciente, tu reputacion como medico ha disminuido");
				}
			}
			else return SendClientMessage(playerid,-1,"Necesitas tener la ropa de médico para utilizar este comando");
		}
		return 1;
	}
	if(sscanf(params, "s[30]", texto))
	{
		foreach(new i : Player)
		{
			if(PLAYER_INFO[i][MobileSub] == 911)
			{
				if(PLAYER_INFO[playerid][pDuty] == 1)
				{
					EnLlamada[playerid] = 1;
					PLAYER_INFO[i][Mobile] = playerid;
					PLAYER_INFO[i][MobileSub] = INVALID_PLAYER_ID;
					EnLlamada911[i] = 911;
					PLAYER_INFO[playerid][Mobile] = i;
					PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
					EnLlamada911[playerid] = 911;
					format(string,sizeof(string),"{3399FF}[Central de policía]{FFFFFF} %s %s contesta la llamada de %s.",RangoPolicia(playerid),PLAYER_INFO[playerid][Nickname],PLAYER_INFO[i][Nickname]);
					SendRadioPoliceMessage(-1,string);
					format(string,sizeof(string),"{3399FF}[Central de policía]{FFFFFF} %s %s ha contestado su llamada",RangoPolicia(playerid),PLAYER_INFO[playerid][Nickname]);
					SendClientMessage(i, -1, string);
					if(PLAYER_INFO[i][Agonizando] != 1)	{  SetPlayerSpecialAction(i, SPECIAL_ACTION_USECELLPHONE);   }
					if(PLAYER_INFO[playerid][Agonizando] != 1)	{  SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);   }
					return 1;
				}
			}
		}
		if(Mobile2[playerid] == 2540)
		{
			finllamada(playerid);
			EnLlamada[playerid] = 1;
			Mobile2[playerid] = 0;
			PLAYER_INFO[playerid][MobileSub] = 2540;
			SendClientMessage(playerid,-1,"Atiendes la llamada.");
			SetTimerEx("MandarMensajeTransportistas",2000,false,"d",playerid);
		}
		else if(PLAYER_INFO[playerid][MobileSub] != INVALID_PLAYER_ID)
		{
			foreach(new u : Player)
			{
				if(PLAYER_INFO[u][MobileSub] == playerid)
				{
                    KillTimer(CLlamada[playerid]);
                    KillTimer(CLlamada[u]);
					finllamada(playerid);
					EnLlamada[playerid] = 1;
					EnLlamada[u] = 1;
					PLAYER_INFO[playerid][Mobile] = u;
					PLAYER_INFO[u][Mobile] = playerid;
					PLAYER_INFO[u][MobileSub] = INVALID_PLAYER_ID;
					PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
					SendClientMessage(playerid,-1,"Atiendes la llamada.");
					SendClientMessage(u,  -1, "Contestaron la llamada.");
					AccionesRol(playerid,"contesta su teléfono.", 20);
					if(PLAYER_INFO[playerid][Agonizando] != 1)	{  SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);   }
					if(PLAYER_INFO[u][Agonizando] != 1)	{  SetPlayerSpecialAction(u, SPECIAL_ACTION_USECELLPHONE);   }
					return 1;
				}
			}
		}
		else return SendClientMessage(playerid,-1,"No hay ninguna llamada para atender.");
	}
	return 1;
}
CMD:colgar(playerid)
{
	if(PLAYER_INFO[playerid][pNumero] > 0)
	{
		if(PLAYER_INFO[playerid][MobileSub] == 911 || PLAYER_INFO[playerid][MobileSub] == 2540 || Mobile2[playerid] == 2540 || PLAYER_INFO[playerid][MobileSub] == 815)
		{
			SendClientMessage(playerid,-1,"Cortaste la comunicación.");
			PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
			PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
			EnLlamada[playerid] = 0;
			Mobile2[playerid] = 0;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			finllamada(playerid);
			return 1;
		}
		else if(PLAYER_INFO[playerid][MobileSub] != INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid,-1,"Cortaste la comunicación.");
			PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
			PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
			EnLlamada[playerid] = 0;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			finllamada(playerid);
			return 1;
		}
		else if(PLAYER_INFO[playerid][Mobile] != INVALID_PLAYER_ID)
		{
			if(YoLlame[PLAYER_INFO[playerid][Mobile]] == 1)
			{
			    new striing[128],striong[20];
			    SendClientMessage(PLAYER_INFO[playerid][Mobile],-1,"Guardaste el teléfono móvil, llamada finalizada");
			    format(striing,sizeof(striing),"Costo total de la llamada que acabas de realizar:{f21111} $%d",MinutoLlamada[PLAYER_INFO[playerid][Mobile]]/2);
			    SendClientMessage(PLAYER_INFO[playerid][Mobile],-1,striing);
			    SendClientMessage(playerid,  -1, "Cortaron la comunicación.");
			    QuitarDinero(playerid, MinutoLlamada[PLAYER_INFO[playerid][Mobile]]/2);
			    format(striong,sizeof(striong),"~r~-$%d",MinutoLlamada[PLAYER_INFO[playerid][Mobile]]/2);
			    GameTextForPlayer(PLAYER_INFO[playerid][Mobile], striong, 5000, 1);
			    MinutoLlamada[PLAYER_INFO[playerid][Mobile]] = 0;
			}
			else if(YoLlame[playerid] == 1)
			{
			    new striing[128],striong[20];
			    SendClientMessage(playerid,-1,"Guardaste el teléfono móvil, llamada finalizada");
			    format(striing,sizeof(striing),"Costo total de la llamada que acabas de realizar:{f21111} $%d",MinutoLlamada[playerid]/2);
			    SendClientMessage(playerid,-1,striing);
			    SendClientMessage(PLAYER_INFO[playerid][Mobile],  -1, "Cortaron la comunicación.");
			    QuitarDinero(playerid, MinutoLlamada[playerid]/2);
			    format(striong,sizeof(striong),"~r~-$%d",MinutoLlamada[playerid]/2);
			    GameTextForPlayer(playerid, striong, 5000, 1);
			    MinutoLlamada[playerid] = 0;
			}
			EnLlamada911[playerid] = 0;
			EnLlamada911[PLAYER_INFO[playerid][Mobile]] = 0;
			PLAYER_INFO[PLAYER_INFO[playerid][Mobile]][MobileSub] = INVALID_PLAYER_ID;
			PLAYER_INFO[PLAYER_INFO[playerid][Mobile]][Mobile] = INVALID_PLAYER_ID;
			EnLlamada[PLAYER_INFO[playerid][Mobile]] = 0;
			SetPlayerSpecialAction(PLAYER_INFO[playerid][Mobile], SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(PLAYER_INFO[playerid][Mobile], SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			PLAYER_INFO[playerid][MobileSub] = INVALID_PLAYER_ID;
			PLAYER_INFO[playerid][Mobile] = INVALID_PLAYER_ID;
			EnLlamada[playerid] = 0;
			finllamada(playerid);
			return 1;
		}
		else return SendClientMessage(playerid,  -1, "No puedes colgar el teléfono si no lo estás usando.");
	}
	else SendClientMessage(playerid,  -1, "No puedes colgar el teléfono si no lo estás usando.");
	return 1;
}
CMD:reanimar(playerid,params[])
{
	new ID,Float:x,Float:y,Float:z;
	if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return 1;
	if(RopaMedi[playerid] == 0) return 1;
	if(sscanf(params,"d",ID)) return SendClientMessage(playerid, -1,"Escribe {FFFF04}/reanimar [ID]");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, -1,"Jugador desconectado");
	if(MarcadoMedicos[ID] != 1) return SendClientMessage(playerid, COLOR_DORADO,"Este jugador no llamó al servicio médico.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo");
	if(ID == playerid) return SendClientMessage(playerid,COLOR_DORADO,"No puedes reanimarte tu mismo.");
	GetPlayerPos(ID,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid, 2.0, x,y,z))
	{
		if(MedicoReanimo[ID] == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Ya reanimaste esta persona.");
    	SendClientMessage(playerid, COLOR_DORADO,"Reanimando...");
		LoopingAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("ReanimarMedico",8000,false,"dd",playerid,ID);
	}
	else SendClientMessage(playerid, -1,"Debes estar cerca de un paciente para reanimarlo");
	return 1;
}
CMD:estacionar(playerid, params[])
{
    new autoid = GetPlayerVehicleID(playerid),Float:Health;
	GetVehicleHealth(autoid, Health);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(Health < 500.0) return SendClientMessage(playerid,-1,"El vehiculo esta muy dañado, arreglalo primero");
	if(PLAYER_INFO[playerid][pEnEstacionamiento] == 1)
	{
		PLAYER_INFO[playerid][vEstacionado1] = 1;
		PLAYER_INFO[playerid][vEstacionado2] += 1;
		PLAYER_INFO[playerid][vEstacionado4] += 150;
		AccionesRol(playerid,"está apagando el motor de su vehículo.", 20);
		SetTimerEx("Estacionando",1200, false, "d",playerid);
	}
	else
	{
		AccionesRol(playerid,"está apagando el motor de su vehículo.", 20);
		SetTimerEx("Estacionando",1200, false, "d",playerid);
	}
	return 1;
}
CMD:ocultar(playerid, params[])
{
 	new item[128];
    if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,"sed",true) == 0)
		{
		    if(PLAYER_INFO[playerid][pBarras] == 0) return SendClientMessage(playerid,-1,"Ya tienes oculta la barra indicadora de sed.");
            PLAYER_INFO[playerid][pBarras] = 0;
            
			BarraSed(playerid);
			BarraHambre(playerid);
			SendClientMessage(playerid,-1,"Ocultaste la barra de sed, para volver a mostrarla usa {FFFF04}/mostrar sed");
		}
		if(strcmp(item,"nombres",true) == 0)
		{
	 		if(NombresOcultos[playerid] == 1) GameTextForPlayer(playerid, "OCULTANDO ~r~NOMBRES", 1000, 5);
			else
			{
	  			NombresOcultos[playerid] = 1;
				foreach(new i : Player) ShowPlayerNameTagForPlayer(playerid, i, 0);
				GameTextForPlayer(playerid, "~r~OCULTANDO ~w~NOMBRES", 1000, 5);
				SendClientMessage(playerid,-1,"Ocultaste los nombres de los jugadores, para volver a mostrarlo escribe {FFFF04}/mostrar nombres");
			}
		}
	}
	return 1;
}
CMD:recibirdatos(playerid, params[])
{
	new string[70];
	new interior = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	format(string,128,"Interior: %d - VW: %d",interior,vw);
	SendClientMessage(playerid,-1,string);
	return 1;
}
CMD:est(playerid, params[])
{
	new string[800], cuentaterris;
	new banda = PLAYER_INFO[playerid][pFaccion];

	format(string, sizeof(string), "{FFFFFF}| Nombre: {00E1FF}%s {FFFFFF}- Nivel: {FDB600}%d {FFFFFF}- Reputacion: {59FF00}%d/%d {FFFFFF}|\n",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[playerid][pNivel],PLAYER_INFO[playerid][pExperiencia],PLAYER_INFO[playerid][ExperienciaTotal]);
	if(PLAYER_INFO[playerid][pFaccion] > 0)
	{
	    for(new t = 0; t != MAX_T; t ++)
		{
			if(TERRITORIOS_INFO[t][Territorio_Valido] && TERRITORIOS_INFO[t][Territorio_BandaID] != 0) { if(TERRITORIOS_INFO[t][Territorio_BandaID] == PLAYER_INFO[playerid][pFaccion]) cuentaterris++; }
		}
		format(string, sizeof(string), "%s{FFFFFF}| Integrante de: {2B8FFF}%s {FFFFFF}- Rango: {2B8FFF}%s {FFFFFF}- Territorios dominados: {FFFF00}%d {FFFFFF}|\n",string,BandasInfo[banda][BNombre],RangoBanda(banda, PLAYER_INFO[playerid][pRango]),cuentaterris);
	}
	format(string, sizeof(string), "%s{FFFFFF}| Trabajo primario: {FFB500}%s {FFFFFF}- Trabajo secundario: {FFB500}%s {FFFFFF}|\n\n",string, NombreTrabajo(PLAYER_INFO[playerid][pTrabajo]), NombreTrabajo(PLAYER_INFO[playerid][pTrabajo2]));
	format(string, sizeof(string), "%s{FFFFFF}Para mayor información sobre tu cuenta, escribe {FFFF04}/ayuda\n",string);
	format(string, sizeof(string), "%s{FFFFFF}Recuerda que para subir de nivel, debes tener experiencia completa y usar {FFFF04}/comprar nivel",string);
	
	ShowPlayerDialog(playerid, DIALOG_ESTADISTICAS, DIALOG_STYLE_MSGBOX, "Estadisticas de tu cuenta", string,"Aceptar", "");
	return 1;
}
CMD:damedrogas(playerid)
{
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	PLAYER_INFO[playerid][pHeroina] += 500;
	PLAYER_INFO[playerid][pCocaina] += 500;
	PLAYER_INFO[playerid][pPreper] += 500;
	PLAYER_INFO[playerid][pGino] += 500;
	PLAYER_INFO[playerid][pPerico] += 500;
	return 1;
}
CMD:gps(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);
	if(PLAYER_INFO[playerid][pGPS] != 1 || GetVehicleModel(carid) != 416 && PLAYER_INFO[playerid][pGPS] != 1 || GetVehicleModel(carid) != 420 && PLAYER_INFO[playerid][pGPS] != 1  || GetVehicleModel(carid) != 438 && PLAYER_INFO[playerid][pGPS] != 1) return SendClientMessage(playerid, -1, "No tienes un {f21111}GPS {FFFFFF}Puedes comprar uno en cualquier 24/7");
	new string[555];
 	format(string, sizeof(string),"%s{f21111}{FFFFFF} Tiendas de ropa\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Lugares de trabajos\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Concesionarios\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Tienda RZ\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Modificación de vehículos\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Bancos\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Edificios del Gobierno\n", string);
	format(string, sizeof(string),"%s{f21111}{FFFFFF} Mercado Negro\n", string);
	ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST, "GPS: Puntos de interés", string, "Siguiente", "Cerrar");
	AccionesRol(playerid,"mira su GPS.", 20);
	return 1;
}
CMD:tiempo(playerid,params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 3) return VerTiempos(playerid,playerid);
	new id, string[70];
	if(sscanf(params,"d",id)) return VerTiempos(playerid,playerid);
	format(string,128,"TIEMPO DE %s",PLAYER_INFO[id][Nickname]);
	SendClientMessage(playerid,COLOR_ROJO,string);
	VerTiempos(playerid,id);
	return 1;
}
CMD:check(playerid, params[])
{
	new ID;
	if(!sscanf(params, "d", ID)) return ShowStats(ID, playerid);
	return 1;
}
CMD:inventario(playerid,params[])
{
	new ID,string[70];
	if(sscanf(params, "d", ID)) return Inventario(playerid, playerid);
	if(PLAYER_INFO[playerid][pAdmin] < 3) return Inventario(playerid, playerid);
	else
	{
	    if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
		format(string,128,"Inventario del jugador %s", PLAYER_INFO[ID][Nickname]);
		SendClientMessage(playerid,COLOR_MEGAPHONE,string);
		Inventario(ID,playerid);
	}
	return 1;
}

CMD:localizar(playerid, params[])
{
	new BSTINS[200];
	format(BSTINS, sizeof BSTINS, "{FFFFFF} Localizar Vehículos\n Localizar Propiedades");
	ShowPlayerDialog(playerid, DIALOG_LOC, DIALOG_STYLE_LIST, "Toma la opción que quieras", BSTINS, "Siguiente","Cancelar");
	return 1;
}
CMD:habilidad(playerid,params[])
{
	new ID,string[70];
	if(sscanf(params, "d", ID)) return Habilidad(playerid,playerid);
	if(PLAYER_INFO[playerid][pAdmin] > 2)
	{
		format(string,128,"Listado de Habilidades de %s", PLAYER_INFO[ID][Nickname]);
		SendClientMessage(playerid,COLOR_MEGAPHONE,string);
		Habilidad(ID,playerid);
	}
	else Habilidad(playerid,playerid);
	return 1;
}
CMD:frecuencias(playerid,params[])
{
    if(PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return 1;
	MostrarFrecuencias(playerid);
	return 1;
}
CMD:miranda(playerid,params[])
{
	new string[128];
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	format(string, sizeof(string), "%s dice: Tiene el derecho a guardar silencio.",PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
	format(string, sizeof(string), "%s dice: Cualquier cosa que diga puede y será usada en su contra en un tribunal de justicia.",PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
	format(string, sizeof(string), "%s dice: Tiene el derecho de hablar con un abogado y que un abogado esté presente durante cualquier interrogatorio.",PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
	format(string, sizeof(string), "%s dice: Si no puede pagar un abogado, se le asignará uno pagado por el gobierno.",PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
	format(string, sizeof(string), "%s pregunta: ¿Le han quedado claro los derechos previamente mencionados?",PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128) ProxDetector(15.0, playerid, string,Hablar,Hablar2,Hablar3,Hablar4,Hablar5);
	return 1;
}
//
CMD:esposar(playerid, params[])
{
	new data[144], Float:pos[3], id;
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	if(sscanf(params, "d", id) )return SendClientMessage(playerid,COLOR_WHITE,"Uso: {F4FA58}/esposar [ID]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,COLOR_WHITE,"Jugador desconectado o id incorrecta");
	if(PLAYER_INFO[id][pCargos] == 0) return SendClientMessage(playerid,-1,"Este jugador no tiene nivel de busqueda");
	GetPlayerPos(id, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid,-1,"Debes estar cerca de esta persona para esposarla");
	{
		Esposando[id] = 1;
		Oficial[id] = playerid;
		TogglePlayerControllable(id,0);
		SetPVarInt(id, "IsFrozen", 0);
		TimerEsposar[id] = SetTimerEx("TiempoArresto", 10000, false, "d", id);
		EnPatrulla[id] = 0;
		SetPlayerSpecialAction(id,SPECIAL_ACTION_HANDSUP);
		format(data, sizeof(data), "%s %s intenta esposar a %s", RangoPolicia(playerid),NombreJugador(playerid), NombreJugador(id));
		ProxDetector(30.0, playerid, data, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		SendClientMessage(id,-1,"Estas siendo esposado, tienes 10 segundos para {0079C9}/resistirte{FFFFFF}.");
	}
	return true;
}
//
CMD:resistirse(playerid, params[])
{
	new string[126],chatadmin[256];
	if(Esposando[playerid] == 1)
	{
		if(PLAYER_INFO[playerid][pCargos] == 1)
		{
			SetPlayerWantedLevel(playerid, PLAYER_INFO[playerid][pCargos] = 2);
			foreach(new i : Player)
			{
				if(PLAYER_INFO[i][pDuty] == 1)	SetPlayerMarkerForPlayer(i, params[0], COLORCARGO2);
			}
		}
		TogglePlayerControllable(playerid,1);
		SetPVarInt(playerid, "IsFrozen", 1);
		Esposando[playerid] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		KillTimer(TimerEsposar[playerid]);
		format(chatadmin,sizeof(chatadmin),"[Radio] {FFFFFF}%s %s: {f21111}%s{FFFFFF} se resistió al arresto, inicio persecución.",RangoPolicia(Oficial[playerid]),PlayerName(Oficial[playerid]), PLAYER_INFO[playerid][Nickname]);
		SendRadioPoliceMessage(TEAM_BLUE_COLOR, chatadmin, playerid);
  		format(string,sizeof(string),"[Radio de policía] (%s %s) dice: %s se resistió al arresto, inicio persecución.",RangoPolicia(Oficial[playerid]),PlayerName(Oficial[playerid]), PLAYER_INFO[playerid][Nickname]);
		ProxDetector(15.0, playerid, string, COLOR_GRAD6, COLOR_GRAD5, COLOR_GRAD4, COLOR_GRAD3, COLOR_GRAD2);
	}
	else return 1;
	return 1;
}
CMD:entregar(playerid,params[])
{
	new string[158],patrulla;
	patrulla = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	if(PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][mDuty] != 1) return 1;
	if(!SAPD(patrulla) && !HELISAPD(patrulla) && !HELIMILI(patrulla) && !MILI(patrulla)) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial");
	if(!EnComisaria(playerid)) return SendClientMessage(playerid,-1,"No estás en el área de entrega de ninguna comisaria");
	for(new i=0;i<MAX_PLAYERS; i++)
	{
		if(EnAuto[i] == patrulla && PLAYER_INFO[i][pCargos] > 0)
		{
			RemovePlayerFromVehicle(i);
			SetTimerEx("Encerrando",3000,false,"d",i);
			format(string, sizeof(string), "Oficial %s encierra a %s en su celda.", NombreJugador(playerid),NombreJugador(i));
			ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		}
	}
	return 1;
}
//
CMD:desposar(playerid,params[])
{
	new id,Float:x,Float:y,Float:z,string[128];
	if(!sscanf(params,"d",id))
	{
		if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pFaccion] == 1 && PLAYER_INFO[playerid][pDuty] != 1 && PLAYER_INFO[playerid][pFaccion] == 2)
		{
			GetPlayerPos(id, x,y,z);
			if(PLAYER_INFO[id][pCargos] > 1) return 1;
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z)) return SendClientMessage(playerid, -1, "No estas cerca de este jugador");
			if(PLAYER_INFO[id][Agonizando] == 1 || Esposando[id] == 2 || EnPatrulla[id] == 1)
			{
				if(IsPlayerInAnyVehicle(id)) RemovePlayerFromVehicle(id);
				PLAYER_INFO[id][Agonizando] = 0;
				Esposando[id] = 0;
				SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
				PLAYER_INFO[id][pCargos] = 0;
				SetPlayerWantedLevel(id,PLAYER_INFO[id][pCargos]);
				ActualizarRadar();
				TogglePlayerControllable(id, 1);
				SetPVarInt(id, "IsFrozen", 1);
				format(string, sizeof(string), "%s %s desposa al sospechoso",RangoPolicia(playerid),PLAYER_INFO[playerid][Nickname]);
				ProxDetector(15.0,playerid,string,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
			}
			else return SendClientMessage(playerid, -1, "El jugador debe estar abatido o esposado");
		}
	}
	else return SendClientMessage(playerid, -1, "Usa: {009AFF}/desposar id");
	return 1;
}
//
CMD:arrestar(playerid, params[])
{
	new string[126];
	new ID, Lugar, patrulla, Float:x, Float:y, Float:z;
	patrulla = GetPlayerVehicleID(playerid);
	if(sscanf(params, "dd", ID, Lugar))return SendClientMessage(playerid,COLOR_WHITE,"Uso: /arrestar [ID] [Asiento 1-2]");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,COLOR_WHITE,"Jugador desconectado o id incorrecta.");
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	if(PLAYER_INFO[ID][Agonizando] != 1 && Esposando[ID] != 2) return SendClientMessage(playerid,COLOR_WHITE,"El sospechoso no esta esposado o abatido.");
	if(PLAYER_INFO[ID][pCargos] == 0) return SendClientMessage(playerid,-1,"Este jugador no tiene nivel de busqueda.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial.");
	if(!SAPD(patrulla) && !HELISAPD(patrulla) && !HELIMILI(patrulla) && !MILI(patrulla)) return SendClientMessage(playerid,-1,"Debes estar en una patrulla o helicoptero policial.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar conduciendo la patrulla.");
	GetPlayerPos(ID, x,y,z);
	if(IsPlayerInRangeOfPoint(playerid, 40.0,  x, y,z))
	{
		if(Lugar == 1)
		{
			PutPlayerInVehicle(ID, patrulla, 2);
			SetPlayerArmedWeapon(ID, 0);
			BajandoV[ID] = 0;
			EnAuto[ID] = patrulla;
			EnPatrulla[ID] = 1;
			TogglePlayerControllable(ID, 0);
			SetPVarInt(ID, "IsFrozen", 0);
			format(string, sizeof(string), "%s %s sube al detenido a su patrullero.", RangoPolicia(playerid),NombreJugador(playerid));
			ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		}
		if(Lugar == 2)
		{
			PutPlayerInVehicle(ID, patrulla, 3);
			SetPlayerArmedWeapon(ID, 0);
			BajandoV[ID] = 0;
			EnAuto[ID] = patrulla;
			EnPatrulla[ID] = 1;
			TogglePlayerControllable(ID, 0);
			SetPVarInt(ID, "IsFrozen", 0);
			format(string, sizeof(string), "%s %s sube al detenido a su patrullero.", RangoPolicia(playerid),NombreJugador(playerid));
			ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		}
	}
	else SendClientMessage(playerid, -1, "No estas cerca de ese jugador.");
	return 1;
}
CMD:domiciliaria(playerid)
{
    if(Jail[playerid] != 1) return 1;
	new found;
	for(new n = 0; n < MAX_PCASAS; n++) if(PLAYER_INFO[playerid][CasaID][n] > 0) found++;
    if(found != 0) ShowPlayerDialog(playerid, DOMICILIARIA, DIALOG_STYLE_MSGBOX, "{FFFFFF}Cumplimiento de condena en domicilio", "{FFFFFF}El costo para cumplir la condena en tu domicilio es de {f21111}10RZ{FFFFFF}.","Aceptar","Rechazar");
    return 1;
}
CMD:pagar(playerid, params[])
{
    new item[32],total_deuda;
    if(Jail[playerid] == 0) return SendClientMessage(playerid,-1,"Necesitas estar en la carcel para poder pagar la fianza");
	if(!sscanf(params,"s[32]",item))
	{
		if(strcmp(item, "fianza", true)==0)
		{
		    if(PLAYER_INFO[playerid][pTiempoCarcel] < (10 * 60)) return SendClientMessage(playerid, -1, "Minimo tienes que tener 10 minutos para poder pagar la fianza.");
		    if(PLAYER_TEMP[playerid][pTiempoFianza] > gettime()) return SendClientMessageEx(playerid, -1, "Tienes que esperar %s para poder pagar la fianza.", TimeConvertEx(PLAYER_TEMP[playerid][pTiempoFianza]  - gettime()));
		    switch(PLAYER_INFO[playerid][arrestado])
			{
			    case 0..5: total_deuda = 1 * 50000;
				case 6..10: total_deuda = 2 * 50000;
				case 11..15: total_deuda = 3 * 50000;
			    case 16..20: total_deuda = 3 * 50000;
				case 21..25: total_deuda = 4 * 50000;
				case 26..30: total_deuda = 5 * 50000;
				case 31..35: total_deuda = 6 * 50000;
				case 36..40: total_deuda = 7 * 50000;
				case 41..45: total_deuda = 8 * 50000;
				case 46..50: total_deuda = 9 * 50000;
				case 51..55: total_deuda = 10 * 50000;
				default: total_deuda = (PLAYER_INFO[playerid][arrestado] * 50000);
			}
			PLAYER_TEMP[playerid][pFianzaTotal] = total_deuda;
		    new string[128];
			format(string, sizeof(string), "{FFFFFF}El costo para pagar tu fianza es de {04D616}%d$", total_deuda);
			ShowPlayerDialog(playerid, DIALOG_FIANZA, DIALOG_STYLE_MSGBOX, "Pagar fianza", string, "Confirmar","Rechazar");
		}
        else return SendClientMessage(playerid,-1,"Utiliza: {FFFF04}/pagar fianza");
	}
	else return SendClientMessage(playerid,-1,"Utiliza: {FFFF04}/pagar fianza");
	return 1;
}
CMD:entrar(playerid, params[])
{
    if(PLAYER_TIMES[playerid][Entrando] > gettime()) return 1;
    EntrarInterior(playerid);
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 1204.8096,12.6643,1000.9219)) return MostrarMenuBailarinas(playerid); //Puticlub salón privado
	return 1;
}
CMD:salir(playerid, params[])
{
    if(PLAYER_TIMES[playerid][Entrando] > gettime()) return 1;
	SalirInterior(playerid);
	return true;
}
CMD:uniforme(playerid, params[])
{
	new texto[128];
	if(!sscanf(params,"s[128]",texto))
	{
		if(strcmp(texto,"policia",true) == 0)
		{
			if(PLAYER_INFO[playerid][pFaccion] == 1)
			{
				if(PLAYER_INFO[playerid][suspendido] == 0)
				{
					if(PlayerToPoint(2.0,playerid, 278.0614,1873.7704,8.7578))
					{
						new string[555];
						format(string, sizeof(string),"%s{FFFFFF}- Cadete\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Oficial\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Cabo\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Sargento\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Teniente\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Capitán\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Inspector\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Comisario\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Oficial Motorizado\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Oficial Femenina 1\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Oficial Femenina 2\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Oficial Femenina 3\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Uniforme SWAT (Operaciones Especiales)\n", string);
					    format(string, sizeof(string),"%s{FFB600}- Quitar Uniforme\n", string);
					    ShowPlayerDialog(playerid, DIALOG_UNIFORMES, DIALOG_STYLE_LIST, "Uniformes de policía:", string, "Aceptar", "Cerrar");
						format(string, sizeof(string), "%s %s revisa su casillero del vestuario.", RangoPolicia(playerid), PLAYER_INFO[playerid][Nickname]);
						ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					}
					else SendClientMessage(playerid, -1, "No estás en los casilleros.");
				}
				else SendClientMessage(playerid, -1, "No puedes usar tu uniforme de policía mientras te encuentres suspendido.");
			}
			else SendClientMessage(playerid, -1, "Solámente los policías pueden ponerse el uniforme.");
		}
		//
		if(strcmp(texto,"militar",true) == 0) // militar papa
		{
			if(PLAYER_INFO[playerid][pFaccion] == 2)
			{
				if(PLAYER_INFO[playerid][suspendido] == 0)
				{
					if(PlayerToPoint(2.0,playerid, 1416.2917,-1576.3341,512.5913))
					{
						new string[555];
					    format(string, sizeof(string),"%s{FFFFFF}- Soldado\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Uniforme Mujer\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Asesino\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Francotirador\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Fuerzas Especiales\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Piloto\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Mayor\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- Coronel\n", string);
					    format(string, sizeof(string),"%s{FFFFFF}- General\n", string);
					    format(string, sizeof(string),"%s{FFB600}- Quitar Uniforme\n", string);
					    ShowPlayerDialog(playerid, DIALOG_UNIFORMES2, DIALOG_STYLE_LIST, "Uniforme Militar:", string, "Aceptar", "Cerrar");
						format(string, sizeof(string), "%s %s revisa su casillero del vestuario.", RangoMilitar(playerid), PLAYER_INFO[playerid][Nickname]);
						ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
						SetPlayerColor(playerid,COLOR_MILICIA);
					}
					else SendClientMessage(playerid, -1, "No estás en los casilleros.");
				}
				else SendClientMessage(playerid, -1, "No puedes usar tu uniforme de policía mientras te encuentres suspendido.");
			}
			else SendClientMessage(playerid, -1, "Solámente los militares pueden ponerse el uniforme.");
		}
		//
		if(strcmp(texto,"medico",true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico)
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0,1159.4829,-1356.8820,-10.7922))
				{
					PonerRopaMedico(playerid,1);
				}
				if(IsPlayerInRangeOfPoint(playerid,5.0,1234.4447,-830.0233,1164.2759))
				{
					PonerRopaMedico(playerid,2);
				}
				if(IsPlayerInRangeOfPoint(playerid,5.0,-2729.9434,614.0607,1385.6534))
				{
					PonerRopaMedico(playerid,3);
				}
			}
			else return SendClientMessage(playerid,-1,"Necesitas el trabajo de médico para utilizar este comando");
		}
 	}
	return 1;
}
CMD:dejar(playerid,params[])
{
	new item[32],ID,string[128];
	if(!sscanf(params,"s[32]", item))
	{
		if(strcmp(item, "trabajo",true)==0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] > T_Ninguno)
			{
				format(string,128,"Escribe {FFFF04}/dejar trabajo %d{FFFFFF} para abandonar el trabajo de %s.", PLAYER_INFO[playerid][pTrabajo], NombreTrabajo(PLAYER_INFO[playerid][pTrabajo]));
				SendClientMessage(playerid,-1,string);
			}
			if(PLAYER_INFO[playerid][pTrabajo2] > T_Ninguno)
			{
				format(string,128,"Escribe {FFFF04}/dejar trabajo %d{FFFFFF} para abandonar el trabajo de %s.", PLAYER_INFO[playerid][pTrabajo2], NombreTrabajo(PLAYER_INFO[playerid][pTrabajo2]));
				SendClientMessage(playerid,-1,string);
			}
		}
	}
	if(!sscanf(params,"s[32]d", item, ID))
	{
		if(strcmp(item, "trabajo",true)==0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] == ID && ID != T_Ninguno)
			{
			    format(string,128,"Has abandonado el trabajo de {FFFF04}%s", NombreTrabajo(PLAYER_INFO[playerid][pTrabajo]));
				SendClientMessage(playerid, -1, string);

				if(PLAYER_INFO[playerid][pTrabajo] == T_Medico)
				{
					if(RopaMedi[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaMedi[playerid] = 0;
				}
				if(PLAYER_INFO[playerid][pTrabajo] == T_Basurero)
				{
				    if(RopaBasu[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaBasu[playerid] = 0;
				}
				if(PLAYER_INFO[playerid][pTrabajo] == T_Mecanico)
				{
				    if(RopaMeca[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaMeca[playerid] = 0;
				}
				PLAYER_INFO[playerid][pTrabajo] = T_Ninguno;
			}
			else if(PLAYER_INFO[playerid][pTrabajo2] == ID && ID != T_Ninguno)
			{
				format(string,128,"Has abandonado el trabajo de {FFFF04}%s", NombreTrabajo(PLAYER_INFO[playerid][pTrabajo2]));
				SendClientMessage(playerid, -1, string);
				if(PLAYER_INFO[playerid][pTrabajo] == T_Medico)
				{
					if(RopaMedi[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaMedi[playerid] = 0;
				}
				if(PLAYER_INFO[playerid][pTrabajo] == T_Basurero)
				{
				    if(RopaBasu[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaBasu[playerid] = 0;
				}
				if(PLAYER_INFO[playerid][pTrabajo] == T_Mecanico)
				{
				    if(RopaMeca[playerid] != 0) SetPlayerSkin(playerid, PLAYER_INFO[playerid][pRopa]);
					RopaMeca[playerid] = 0;
				}
				PLAYER_INFO[playerid][pTrabajo2] = T_Ninguno;
			}
		}
	}
	return 1;
}
CMD:aceptar(playerid, params[])
{
	new item[128],Float:X,Float:Y,Float:Z,day,month,year;
	getdate(day,month,year);
	if(!IsPlayerConnected(playerid)) return 1;
	if(!sscanf(params, "s[128]", item))
	{
		if(strcmp(item, "arma", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes recibir un arma si estás en un vehículo.");
			if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un arma.");
			if(IsPlayerInAnyVehicle(ofertador[playerid])) return SendClientMessage(playerid,-1,"La persona que te ha ofrecido el arma se encuentra en un vehículo");
			if(PLAYER_INFO[playerid][pDinero] >= dineropedido[playerid])
			{
				GetPlayerPos(ofertador[playerid], X,Y,Z);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
				{
					if(!CheckArma(ofertador[playerid],armaofertada[playerid])) return SendClientMessage(playerid,-1,"El jugador ya no tiene el arma que te ha ofrecido");
					new string[256],Query[200];
					mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, arma, precio, comprador,fecha) VALUES ('%e','Arma', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],armaofertada[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
					mysql_tquery(handle_db, Query);
					QuitarDinero(playerid, dineropedido[playerid]);
					DarArma(playerid,armaofertada[playerid]);
					QuitarArma(ofertador[playerid],armaofertada[playerid]);
					DarDinero(ofertador[playerid],dineropedido[playerid]);
					format(string, 256, " %s recibe el arma de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ofertador[playerid]][Nickname]);
					ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					if(idTimerOfertaPerdida[playerid] != -1)
					{
						KillTimer(idTimerOfertaPerdida[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					if(idTimerTiempoVenta[ofertador[playerid]] != -1)
					{
						KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
						idTimerTiempoVenta[ofertador[playerid]] = -1;
					}
					armaofertada[playerid] = 0;
					dineropedido[playerid] = 0;
					ofertador[playerid] = INVALID_PLAYER_ID;
				}
			}
			else SendClientMessage(playerid,-1,"No tienes suficiente dinero");
		}
		if(strcmp(item,"Muerte", true) == 0)
		{
			if(PLAYER_INFO[playerid][Agonizando] == 1 && Muriendo[playerid] == 1)
			{
			    PLAYER_TEMP[playerid][@pHospital] = 1;
	   			ApareceHospital(playerid),		Muriendo[playerid] = 0;
				MarcadoMedicos[playerid] = 0,	LlamadaMedicos[playerid] = 0;
				TimerMalherido[playerid] = 0,	suicidio[playerid] = 0;
			}
		}
		if(strcmp(item,"reparacion", true) == 0)
		{
			if(MConductor[playerid] > 2000) return SendClientMessage(playerid,-1,"Solo puedes gastar $2000 en reparaciones.");
			if(AceptoRepara[playerid] == 1) return 1;
			if(Mecanico[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció una reparación.");
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Necesitas estar manejando el vehículo que deseas que te reparen.");
			if(PLAYER_INFO[playerid][pDinero] < MConductor[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero.");
			GetPlayerPos(Mecanico[playerid], X,Y,Z);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z))
			{
				new string[200],Float:angle,autoid = GetPlayerVehicleID(playerid);
				GetPlayerFacingAngle(Mecanico[playerid],angle);
				SetPlayerFacingAngle(Mecanico[playerid],angle+180);
				LoopingAnim(Mecanico[playerid],"CAR","Fixn_Car_Loop",4.1,0,0,0,1,15000);
				switch(PLAYER_INFO[Mecanico[playerid]][pNivelMecanico])
				{
					case 1:  SetTimerEx("Reparando",15000,false,"dddd",Mecanico[playerid],playerid,autoid,1);
					case 2:  SetTimerEx("Reparando",13000,false,"dddd",Mecanico[playerid],playerid,autoid,1);
					case 3:  SetTimerEx("Reparando",9000,false,"dddd",Mecanico[playerid],playerid,autoid,1);
					case 4:  SetTimerEx("Reparando",6000,false,"dddd",Mecanico[playerid],playerid,autoid,1);
					default: SetTimerEx("Reparando",4000,false,"dddd",Mecanico[playerid],playerid,autoid,1);
				}
				TimerReparar[Mecanico[playerid]] = 5;
				new msjadm[135];
				format(msjadm, sizeof(msjadm), "%s(ID:%d) recibe $%s por reparar el vehículo de %s(ID: %d - Nivel: %d - %dhs).", PLAYER_INFO[Mecanico[playerid]][Nickname], Mecanico[playerid], Numeros(MConductor[playerid]), PLAYER_INFO[playerid][Nickname], playerid, PLAYER_INFO[playerid][pNivel], PLAYER_INFO[playerid][horasjugadas]);
				MensajeAdmin(COLOR_CHEAT, msjadm, 3);
				format(string, sizeof(string), "%s comienzá a reparar el vehículo.", PLAYER_INFO[Mecanico[playerid]][Nickname]);
				ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				LlamadaMeca[playerid] = 0;
				SetPlayerColor(playerid, COLORCARGO0);
				QuitarDinero(playerid, MConductor[playerid]);
				DarDinero(Mecanico[playerid], MConductor[playerid]);
				PLAYER_INFO[Mecanico[playerid]][Repuestos] -= MRepuestos[Mecanico[playerid]];
				Mecanico[playerid] = INVALID_PLAYER_ID;
				AceptoRepara[playerid] = 1;
			}
			else return SendClientMessage(playerid,-1,"Debes estar cerca del mecánico para aceptar la reparación.");
		}
		if(strcmp(item,"consumible", true) == 0)
		{
			if(TipoOferta[playerid] == 1)
			{
				GetPlayerPos(ofertador[playerid], X,Y,Z);
				if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
				if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
				if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
				if(PLAYER_INFO[ofertador[playerid]][pCrack] < CrackOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de crack que te ha ofrecido");
				if(CrackOfrecidos[playerid] > 0)
				{
					new string[256],Query[200];
					mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','crack', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],CrackOfrecidos[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
					mysql_tquery(handle_db, Query);
					QuitarDinero(playerid,dineropedido[playerid]);
					DarDinero(ofertador[playerid],dineropedido[playerid]);
					PLAYER_INFO[playerid][pCrack] += CrackOfrecidos[playerid];
					TipoOferta[playerid] = 0;
					PLAYER_INFO[ofertador[playerid]][pCrack] -= CrackOfrecidos[playerid];
					format(string, 256, " %s recibió algo de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ofertador[playerid]][Nickname]);
					ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					if(idTimerOfertaPerdida[playerid] != -1)
					{
						KillTimer(idTimerOfertaPerdida[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					if(idTimerTiempoVenta[ofertador[playerid]] != -1)
					{
						KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
						idTimerTiempoVenta[ofertador[playerid]] = -1;
					}
					ofertador[playerid] = INVALID_PLAYER_ID;
					CrackOfrecidos[playerid] = 0;
				}
            }
            else if(TipoOferta[playerid] == 2)
			{
				if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
				GetPlayerPos(ofertador[playerid], X,Y,Z);
				if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
				if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
				if(PLAYER_INFO[ofertador[playerid]][pRemedios] < MedicamentosOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de medicamentos que te ha ofrecido");
				if(MedicamentosOfrecidos[playerid] > 0)
				{
					new string[256],Query[200];
					mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Medicamentos', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],MedicamentosOfrecidos[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
					mysql_tquery(handle_db, Query);
					QuitarDinero(playerid,dineropedido[playerid]);
					DarDinero(ofertador[playerid],dineropedido[playerid]);
					TipoOferta[playerid] = 0;
					PLAYER_INFO[playerid][pRemedios] += MedicamentosOfrecidos[playerid];
					PLAYER_INFO[ofertador[playerid]][pRemedios] -= MedicamentosOfrecidos[playerid];
					format(string, 256, " %s recibió algo de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ofertador[playerid]][Nickname]);
					ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					if(idTimerOfertaPerdida[playerid] != -1)
					{
						KillTimer(idTimerOfertaPerdida[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					if(idTimerTiempoVenta[ofertador[playerid]] != -1)
					{
						KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
						idTimerTiempoVenta[ofertador[playerid]] = -1;
					}
					ofertador[playerid] = INVALID_PLAYER_ID;
					MedicamentosOfrecidos[playerid] = 0;
				}
			}
			else if(TipoOferta[playerid] == 3)
			{
				if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció un consumible.");
				GetPlayerPos(ofertador[playerid], X,Y,Z);
				if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
				if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
				if(PLAYER_INFO[ofertador[playerid]][pMarihuana] < MarihuanaOfrecida[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de marihuana que te ha ofrecido");
				if(MarihuanaOfrecida[playerid] > 0)
				{
					new string[256],Query[200];
					mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Marihuana', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],MarihuanaOfrecida[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
					mysql_tquery(handle_db, Query);
					QuitarDinero(playerid,dineropedido[playerid]);
					TipoOferta[playerid] = 0;
					DarDinero(ofertador[playerid],dineropedido[playerid]);
					PLAYER_INFO[playerid][pMarihuana] += MarihuanaOfrecida[playerid];
					PLAYER_INFO[ofertador[playerid]][pMarihuana] -= MarihuanaOfrecida[playerid];
					format(string, 256, " %s recibió algo de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ofertador[playerid]][Nickname]);
					ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
					if(idTimerOfertaPerdida[playerid] != -1)
					{
						KillTimer(idTimerOfertaPerdida[playerid]);
						idTimerOfertaPerdida[playerid] = -1;
					}
					if(idTimerTiempoVenta[ofertador[playerid]] != -1)
					{
						KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
						idTimerTiempoVenta[ofertador[playerid]] = -1;
					}
					ofertador[playerid] = INVALID_PLAYER_ID;
					MarihuanaOfrecida[playerid] = 0;
				}
			}
			else
			{
				if(TipoOferta[playerid] == 4 && TieneSprunk[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene Sprunk.");
				if(TipoOferta[playerid] == 5 && TieneVino[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene una copa de vino.");
				if(TipoOferta[playerid] == 6 && TieneCerveza[Ofertante[playerid]] == 0) return SendClientMessage(playerid,-1,"El jugador ya no tiene cerveza.");
				if(TipoOferta[playerid] == 4)   {	TieneSprunk[playerid] = SprunkOfrecido[playerid];   }
				if(TipoOferta[playerid] == 5)   {	TieneVino[playerid] = SprunkOfrecido[playerid];   }
				if(TipoOferta[playerid] == 6)   {	TieneCerveza[playerid] = SprunkOfrecido[playerid];   }
    			new string[128];
				ClearAnimations(Ofertante[playerid]);
				new str[128];
				switch(TipoOferta[playerid])
				{
				    case 4: str = "sprunk",	DarSprunk(playerid, SprunkOfrecido[playerid]);
					case 5: str = "copa de vino", DarVino(playerid, SprunkOfrecido[playerid]);
					case 6: str = "cerveza",	DarCerveza(playerid, SprunkOfrecido[playerid]);
					default: return 1;
				}
				SprunkOfrecido[playerid] = 0,	TipoOferta[playerid] = 0;
				SetPlayerSpecialAction(Ofertante[playerid], SPECIAL_ACTION_NONE);
				format(string, sizeof(string), "%s recibió un vaso de %s de %s", PLAYER_INFO[playerid][Nickname],str, PLAYER_INFO[Ofertante[playerid]][Nickname]);
				ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				Ofertante[playerid] = -1;
			}
        }
		if(strcmp(item,"piezas", true) == 0)
		{
			GetPlayerPos(ofertador[playerid], X,Y,Z);
			if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ofreció piezas de armas");
			if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
			if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
			if(PLAYER_INFO[ofertador[playerid]][pMateriales] < PiezasOfrecidas[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de piezas de armas que te ha ofrecido");
			if(PiezasOfrecidas[playerid] > 0)
			{
				new string[256],Query[200];
				mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','piezas', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],PiezasOfrecidas[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
				mysql_tquery(handle_db, Query);
				QuitarDinero(playerid,dineropedido[playerid]);
				DarDinero(ofertador[playerid],dineropedido[playerid]);
				PLAYER_INFO[playerid][pMateriales] += PiezasOfrecidas[playerid];
				PLAYER_INFO[ofertador[playerid]][pMateriales] -= PiezasOfrecidas[playerid];
				format(string, 256, " %s recibió algo de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[playerid][Nickname]);
				ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				if(idTimerOfertaPerdida[playerid] != -1)
				{
					KillTimer(idTimerOfertaPerdida[playerid]);
					idTimerOfertaPerdida[playerid] = -1;
				}
				if(idTimerTiempoVenta[ofertador[playerid]] != -1)
				{
					KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
					idTimerTiempoVenta[ofertador[playerid]] = -1;
				}
				ofertador[playerid] = INVALID_PLAYER_ID;
				PiezasOfrecidas[playerid] = 0;
			}
		}
		if(strcmp(item,""SERVER_COIN"", true) == 0)
		{
			GetPlayerPos(ofertador[playerid], X,Y,Z);
			if(ofertador[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Nadie te ha ofrecido "SERVER_COIN"");
			if(LeOfreci[ofertador[playerid]] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Esta oferta ya ha caducado.");
			if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
			if(!IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z)) return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
			if(PLAYER_INFO[ofertador[playerid]][Moneda] < EVOfrecidos[playerid]) return SendClientMessage(playerid,-1,"El vendedor ya no tiene la cantidad de "SERVER_COIN" que te ha ofrecido");
			if(EVOfrecidos[playerid] > 0)
			{
				new string[256],Query[200];
				mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','"SERVER_COIN"', '%d','%d','%e','%02d/%02d/%02d')",PLAYER_INFO[ofertador[playerid]][Nickname],EVOfrecidos[playerid],dineropedido[playerid],PLAYER_INFO[playerid][Nickname],day,month,year);
				mysql_tquery(handle_db, Query);
				QuitarDinero(playerid,dineropedido[playerid]);
				DarDinero(ofertador[playerid],dineropedido[playerid]);
				PLAYER_INFO[playerid][Moneda] += EVOfrecidos[playerid];
				PLAYER_INFO[ofertador[playerid]][Moneda] -= EVOfrecidos[playerid];
				format(string, 256, "%s recibió algo de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ofertador[playerid]][Nickname]);
				ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				if(idTimerOfertaPerdida[playerid] != -1)
				{
					KillTimer(idTimerOfertaPerdida[playerid]);
					idTimerOfertaPerdida[playerid] = -1;
				}
				if(idTimerTiempoVenta[ofertador[playerid]] != -1)
				{
					KillTimer(idTimerTiempoVenta[ofertador[playerid]]);
					idTimerTiempoVenta[ofertador[playerid]] = -1;
				}
				ofertador[playerid] = INVALID_PLAYER_ID;
				EVOfrecidos[playerid] = 0;
			}
		}
		if(strcmp(item,"proteccion", true) == 0)
		{
			if(GuardaEspalda[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"No te han ofrecido ninguna protección");
			GetPlayerPos(GuardaEspalda[playerid], X,Y,Z);
			if(PLAYER_INFO[playerid][pDinero] < dineropedido[playerid]) return SendClientMessage(playerid,-1,"No tienes suficiente dinero");
			if(IsPlayerInRangeOfPoint(playerid, 4.0, X,Y,Z))
			{
			    new string[256],Query[200];
				mysql_format(handle_db, Query, sizeof(Query), "INSERT INTO `log_ventas` (Vendedor, item, cantidad, precio, comprador,fecha) VALUES ('%e','Proteccion', '50','%d','%e','%02d/%02d/%02d')",PlayerName(GuardaEspalda[playerid]),dineropedido[playerid],PlayerName(playerid),day,month,year);
				mysql_pquery(handle_db, Query);
				
				QuitarDinero(playerid,dineropedido[playerid]);
				DarDinero(GuardaEspalda[playerid],dineropedido[playerid]);
				
   				GivePlayerArmour(playerid, 50);

				format(string, sizeof(string), "%s recibe la protección de %s",PLAYER_INFO[playerid][Nickname],PLAYER_INFO[GuardaEspalda[playerid]][Nickname]);
				ProxDetector(20.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
				GuardaEspalda[playerid] = INVALID_PLAYER_ID;
				return 1;
			}
			else return SendClientMessage(playerid,-1,"No estas cerca del vendedor");
		}
		return 1;
	}
	return 1;
}
CMD:usar(playerid,params[])
{
	new item[32];
	if(!sscanf(params,"s[32]",item))
	{
		if(strcmp(item, "bidon", true)==0)
		{
			if(Bidon[playerid] == 0) return SendClientMessage(playerid, -1, "Tu no tienes un bidon de gasolina");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en un vehículo para utilizar el bidon");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,-1,"Debes estar manejando el vehiculo para usar el bidon");
			{
				new autoid = GetPlayerVehicleID(playerid);
				new resta = 100-VehicleFuel[autoid];
				if(resta > 5)
				{
					VehicleFuel[autoid] += 5;
					Bidon[playerid] = 0;
					SendClientMessage(playerid, -1,"{FFFF04}El tanque de combustible fue cargado con el bidón de 5 litros.");
					RemovePlayerAttachedObject(playerid, 7);
				}
				else if(resta < 5)
				{
					VehicleFuel[autoid] += resta;
					Bidon[playerid] = 0;
					SendClientMessage(playerid, -1,"{FFFF04}El tanque de combustible fue cargado con el bidón de 5 litros.");
					RemovePlayerAttachedObject(playerid, 7);
				}
			}
		}
	}
	return 1;
}

CMD:mochila(playerid, params)
{
	new Float: Pos[3];
	if(!BackPack[playerid][bDBID]) return 1;
	if(PLAYER_TEMP[playerid][pt_PLAYER_EVENTODM] == 1)return  SendClientMessage(playerid,-1,"No puedes usar en éste momento tu mochila.");
	if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No puedes usar la mochila en estos momento.");
 	foreach(new i : Player)
	{
			if(PLAYER_INFO[i][pDuty] == 1 && i != playerid)
			{
				if(IsPlayerInRangeOfPoint(i,40.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"No ver la mochila, la policía te está viendo.");
			}
	}
	PlayerBackPackShow(playerid);
	return 1;
}

CMD:tomarm(playerid, params[ ])
{
	if(BackPack[playerid][bDBID] > 0) return 1;

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new id = BUCAR_DROP(x, y, z);
	if(id != -1) TOMAR_BACKPACK(playerid, id);
	return 1;
}
CMD:comprar(playerid, params[])
{
	new item[128],day,month,year;
	getdate(day,month,year);
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[128]", item))
 	{
		if(strcmp(item,"entrada",true) == 0)
		{
	    	if(IsPlayerInRangeOfPoint(playerid,4.5,-1253.2917,2116.7095,1246.5457))
	    	{
	        	if(Alquilado == false) return SendClientMessage(playerid,-1,"No hay un evento en este momento.");
	        	{
	            	if(PLAYER_INFO[playerid][pNivel] <= NivelSalon) return SendClientMessage(playerid,-1,"No tienes el nivel necesario para entrar al salón.");
	            	{
	            		if(Boleto[playerid] == true) return SendClientMessage(playerid,-1,"Ya tienes una entrada.");
            			{
	            	    	if(PLAYER_INFO[playerid][pDinero] < PrecioSalon) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para comprar una entrada."); //Cambiar GetPlayerMoney
	                    	Boleto[playerid] = true;
	                    	SendClientMessage(playerid,-1,"Compraste una entrada, ya puedes ingresar al estadio");
	                    	QuitarDinero(playerid,PrecioSalon);
	                    	Personas ++;
	            		}
	            	}
	        	}
	    	}
			else SendClientMessage(playerid,-1,"Las entradas se compran en la boletería.");
		}
		else if(strcmp(item, "blindaje",true)==0)
	    {
	        if(EnCombate[playerid] == 1) return SendClientMessage(playerid,-1,"No puedes comprar chaleco mientras andas en combate.");
	        if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes hacer esto desde un vehículo.");
            if(PLAYER_INFO[playerid][pDinero] < 1000) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente.");
			if(IsPlayerInRangeOfPoint(playerid,1.0,2179.1619,-1777.8867,13.5345))
	        {
			    new string[128];
				SetPlayerArmourEx(playerid, 70);
				QuitarDinero(playerid, 1000);
				SendClientMessage(playerid, -1, "Compraste protección anti balas, te costo {f21111}$1000");
				format(string, sizeof(string), " %s compró un chaleco antibalas", PLAYER_INFO[playerid][Nickname]);
				ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	        }
	    }
		else if(strcmp(item, "objetos",true)==0)
	    {
	    	if(IsPlayerInRangeOfPoint(playerid,5.0,196.3872,-231.1294,1.7786))
	        {
	        	new string[250];
	            format(string, 250, "{FFFFFF}Guitarra - {f21111}$4600{FFFFFF}\n{FFFFFF}Tabla de Surf T1 - {f21111}$2400{FFFFFF}\n{FFFFFF}Maletin - {f21111}$4800{FFFFFF}\n{FFFFFF}Tabla de Surf T2 - {f21111}$2400{FFFFFF}\n{FFFFFF}Bajo (Instrumento Musical) - {f21111}$4200");
	            ShowPlayerDialog(playerid,CCCOBJETOS, DIALOG_STYLE_LIST,"Listado de Objetos En Venta",string,"Comprar","Cancelar");
          	}
	        else SendClientMessage(playerid, -1, "Tienes que ir a un negocio donde puedas {DBED15}/comprar objetos");
      	}
      	else if(strcmp(item,"fabrica",true) == 0)
		{
		    for(new ID = 1; ID < MAX_FABRICAS; ID++)
		    {
			    if(!FABRICAS_INFO[ID][f_VALID]) continue;
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, FABRICAS_INFO[ID][f_POS][0], FABRICAS_INFO[ID][f_POS][1], FABRICAS_INFO[ID][f_POS][2]))
				{
				    if(FABRICAS_INFO[ID][f_VENTA] == 1) return SendClientMessage(playerid,-1,"Esta fábrica no se encuentra en venta.");
				    if(PLAYER_INFO[playerid][pFaccion] == 0) return SendClientMessage(playerid,-1,"Necesitas una banda para comprar una fábrica");
		   			if(PLAYER_INFO[playerid][pFaccion] <= 1) return SendClientMessage(playerid,-1,"{3399FF}Bandas civiles{FFFFFF} no pueden adquirir {EB0000}fábricas de metanfetamina");
		   			if(TieneFabrica(PLAYER_INFO[playerid][pFaccion])) return SendClientMessage(playerid,-1,"Tu banda ya controla una {3399FF}fábrica de metanfetaminas");
		   			if(PLAYER_INFO[playerid][pRango] != 8) return SendClientMessageEx(playerid,-1,"Necesitas ser lider de una banda para poder comprar esta fabrica.");
		            if(3000000 > PLAYER_INFO[playerid][pBanco]) return SendClientMessageEx(playerid,-1,"Necesitas tener {f21111}%s{FFFFFF} en tu cuenta bancaria.",number_format(3000000));

		            DesocuparFabrica(ID);
		            FABRICAS_INFO[ID][f_SOBORNO_TIME] = gettime() + ((3600 * 24) * 7);
	             	FABRICAS_INFO[ID][f_VENTA] = 1;
	             	FABRICAS_INFO[ID][f_ACTIVIDAD] = ACTIVIDAD_NONE;
	             	FABRICAS_INFO[ID][f_FACCION_ID] = PLAYER_INFO[playerid][pFaccion];
	             	FABRICAS_INFO[ID][f_DINERO] = 3000000;
	             	CargarFabrica(ID);
	             	GuardarFabrica(ID);
	             	PLAYER_INFO[playerid][pBanco] -= 3000000;
	             	SendRadioMessage(PLAYER_INFO[playerid][pFaccion], -1, "Tu banda ahora controla una {3399FF}fábrica de metanfetamina");
	             	return 1;
				}
			}
		}
		else if(strcmp(item,"mochila",true) == 0)
 		{
 			for(new i; i < sizeof compraMochila; i++) if(IsPlayerInRangeOfPoint(playerid, 2.0, compraMochila[i][0], compraMochila[i][1], compraMochila[i][2]))
 			{
 				if(BackPack[playerid][bDBID] > 0) return SendClientMessage(playerid,-1,"Solo puedes tener una mochila a la vez.");
 				if(PLAYER_INFO[playerid][Moneda] < 25) return SendClientMessage(playerid,-1,"Necesitas {00FF00}25"SERVER_COIN"{FFFFFF} para comprar.");

 				BackPack[playerid][bDBID] = CREATE_BackPack(playerid);
 				DarMochila(playerid);

 				if(!BackPack[playerid][bDBID]) return 1;
 				PLAYER_INFO[playerid][Moneda] -= 25;
				SendClientMessage(playerid, -1, "Compraste una mochila por {00FF00}25"SERVER_COIN"{FFFFFF}, usa {FFFF00}/mochila{FFFFFF} para usar.");
				break;
 			}
 		}
		else if(strcmp(item, "blancas",true)==0)
	    {
   			if(GetPlayerState(playerid) == 2 || GetPlayerState(playerid) == 3) return SendClientMessage(playerid, -1, "No puedes crear un arma si estas en un vehiculo.");
 			if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No puedes crear un arma en este momento.");
	    	if(IsPlayerInRangeOfPoint(playerid,2.0,1220.9613,-1556.6808,13.5564))
	        {
				new string[555];
				format(string, sizeof(string),"Nombre de arma\tPrecio\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Puño americano\t{f21111}$3.000\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Palo de golf\t{f21111}$5.000\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Pala\t{f21111}$5.000\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Katana\t{f21111}$10.000\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Bate\t{f21111}$3.000\n", string);
			    format(string, sizeof(string),"%s{FFFFFF}Camara\t{f21111}$50.000\n", string);
                ShowPlayerDialog(playerid,DIALOG_COMPRABLANCA, DIALOG_STYLE_TABLIST_HEADERS,"Vendedor",string,"Comprar","Cancelar");
          	}
	        else SendClientMessage(playerid, -1, "No estás en el mercado negro.");
      	}
		else if(strcmp(item,"caja",true) == 0)
		{
	    	if(IsPlayerInRangeOfPoint(playerid,3.0,93.7855,-305.2337,1.5781))
	    	{
	    	    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                if(PLAYER_INFO[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($1560)");
	            SetPlayerAttachedObject(playerid, 7, 2969, 6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
				Objeto[playerid] = 10000;
				QuitarDinero(playerid, 1560);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SendClientMessage(playerid, -1, "Compraste una caja de aquarius de 12 unidades por {f21111}$1560");
				SendClientMessage(playerid, -1, "Puedes guardarla usando {f21111}/baul guardar objeto{FFFFFF} o tirarla con {f21111}/tirar objeto");
				return 1;
	    	}
	    	else if(IsPlayerInRangeOfPoint(playerid,3.0,93.7853,-309.5841,1.5781))
	    	{
	    	    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                if(PLAYER_INFO[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($600)");
	            SetPlayerAttachedObject(playerid, 7, 2969, 6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
				Objeto[playerid] = 10001;
				QuitarDinero(playerid, 600);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SendClientMessage(playerid, -1, "Compraste una caja de vino de 12 unidades por {f21111}$600");
				SendClientMessage(playerid, -1, "Puedes guardarla usando {f21111}/baul guardar objeto{FFFFFF} o tirarla con {f21111}/tirar objeto");
				return 1;
	    	}
	    	else if(IsPlayerInRangeOfPoint(playerid,3.0,93.7853,-313.7030,1.5781))
	    	{
	    	    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                if(PLAYER_INFO[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($480)");
	            SetPlayerAttachedObject(playerid, 7, 2969, 6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
				Objeto[playerid] = 10002;
				QuitarDinero(playerid, 480);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SendClientMessage(playerid, -1, "Compraste una caja de cerveza de 12 unidades por {f21111}$480");
				SendClientMessage(playerid, -1, "Puedes guardarla usando {f21111}/baul guardar objeto{FFFFFF} o tirarla con {f21111}/tirar objeto");
				return 1;
	    	}
	    	else if(IsPlayerInRangeOfPoint(playerid,3.0,86.0509,-315.2853,1.8494))
	    	{
	    	    if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Ya tienes un objeto en tu inventario.");
                if(PLAYER_INFO[playerid][pDinero] < 40) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($480)");
	            SetPlayerAttachedObject(playerid, 7, 2969, 6, 0.137999,0.039999,-0.168998,66.699996,-162.999877,-95.900085,0.533998,0.622999,0.756998);
				Objeto[playerid] = 10003;
				QuitarDinero(playerid, 480);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SendClientMessage(playerid, -1, "Compraste una caja de sprunk de 12 unidades por {f21111}$480");
				SendClientMessage(playerid, -1, "Puedes guardarla usando {f21111}/baul guardar objeto{FFFFFF} o tirarla con {f21111}/tirar objeto");
				return 1;
	    	}
		}
		else if(strcmp(item,"nivel",true)==0)
		{
			if(PLAYER_INFO[playerid][pNivel] > 0)
			{
				new infostring[128];
				if(PLAYER_INFO[playerid][pExperiencia] < PLAYER_INFO[playerid][ExperienciaTotal])
				{
					SendClientMessage(playerid, -1, "Necesitas aumentar reputación para comprar el siguiente nivel.");
					SendClientMessage(playerid, -1, "Escribe {f21111}/est{FFFFFF}adisticas para ver tu reputación.");
				}
				else
				{
					if(PLAYER_INFO[playerid][pDinero] < PLAYER_INFO[playerid][PrecioNivel])
					{
						format(infostring,sizeof(infostring),"Necesitas {f21111}$%d{FFFFFF} para comprar este nivel.",PLAYER_INFO[playerid][PrecioNivel]);
						return SendClientMessage(playerid,-1,infostring);
					}
					SendClientMessage(playerid, 0xFFFF00FF,"Felicidades, aumentaste un nivel. Ahora tu pago diario será mayor.");
					PLAYER_INFO[playerid][pNivel]++;
					SetPlayerScore(playerid, PLAYER_INFO[playerid][pNivel]);
					PLAYER_INFO[playerid][pExperiencia] = 1;
					QuitarDinero(playerid, PLAYER_INFO[playerid][PrecioNivel]);
					CalcularNivel(playerid);
					BarraExp(playerid,1);
					Actualizar(playerid);
                    SetPlayerStats(playerid);
					return 1;
				}
			}
			return 1;
		}
		else if(strcmp(item, "herramienta",true) == 0 || strcmp(item, "herramientas",true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,5.0,-1072.1169,354.2132,1180.5259))
			{
			    if(GetPlayerVirtualWorld(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 1 || GetPlayerVirtualWorld(playerid) == 2 || GetPlayerVirtualWorld(playerid) == 3)    {
				new string[520];
				format(string, sizeof(string), "{FFFFFF}Martillo - {f21111}$20{FFFFFF}\n{FFFFFF}Destornillador - {f21111}$25{FFFFFF}\n{FFFFFF}Barreta - {f21111}$60{FFFFFF}\n{FFFFFF}Balde - {f21111}$120");
				ShowPlayerDialog(playerid,HERRAMIENTAS, DIALOG_STYLE_LIST,"Herramientas",string,"Comprar","Cancelar");
				return 1;	}
			}
			else SendClientMessage(playerid,-1,"Solo se pueden {f21111}/comprar herramientas{FFFFFF} en las ferreterías.");
			return 1;
		}
		else if(strcmp(item, "sprunk",true)==0)
		{
			if(IsPlayerInRangeOfPoint(playerid,5.0,-21.0096,-74.3110,1003.5542) || IsPlayerInRangeOfPoint(playerid,5.0,498.6868,-76.0385,998.7578) || IsPlayerInRangeOfPoint(playerid,5.0,-225.1540,1404.1327,27.7734))
			{
				if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
				DarSprunk(playerid);
				QuitarDinero(playerid, 65);
				SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {f21111}'Y'{FFFFFF} para beber.");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,5.0,-19.4871,-180.4452,1007.7656) ||	IsPlayerInRangeOfPoint(playerid,5.0,-404.43790, -1433.28833, 25.81980) || IsPlayerInRangeOfPoint(playerid,5.0,-392.41141, 2244.42090, 42.52640) || IsPlayerInRangeOfPoint(playerid,5.0,172.1788,1431.5389,10.5912))
			{
				if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($65)");
				QuitarDinero(playerid, 65);
				DarSprunk(playerid);
				SendClientMessage(playerid, -1, "Compraste un vaso de Sprunk por {f21111}$65 {FFFFFF}Presiona {f21111}'Y'{FFFFFF} para beber.");
				return 1;
			}
			else SendClientMessage(playerid,-1,"Los vasos de Sprunk se consiguen en algunos de los 24/7 y restaurantes.");
   		}
		else if(strcmp(item, "vino",true)==0)
		{
			if(IsPlayerInRangeOfPoint(playerid,5.0,498.6868,-76.0385,998.7578) || IsPlayerInRangeOfPoint(playerid,5.0,-225.1540,1404.1327,27.7734))
			{
				if(PLAYER_INFO[playerid][pDinero] < 100) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente ($100)");
				QuitarDinero(playerid, 100);
				DarVino(playerid);
				SendClientMessage(playerid, -1, "Compraste una botella de vino por {f21111}$100 {FFFFFF}Presiona {f21111}'Y'{FFFFFF} para beber.");
				return 1;
			}
		}
		else if(strcmp(item, "bidon",true)==0)
		{
			if(!EnGasolinera(playerid)) return SendClientMessage(playerid, -1, "El bidón de combustible se vende en las estaciones de servicio.");
			if(Bidon[playerid] == 1) return SendClientMessage(playerid, -1, "Tu ya tienes un bidon de gasolina.");
			if(PLAYER_INFO[playerid][pDinero] < 65) return SendClientMessage(playerid, -1, "No tienes el dinero suficiente para comprar un bidon ($65).");
			{
				QuitarDinero(playerid, 65);
				SetPlayerAttachedObject(playerid,7,1650,5,0.125999,0.011999,0.000000,-4.999999,-98.099983,16.600004,1.000000,1.000000,1.000000);
				Bidon[playerid] = 1;
				SendClientMessage(playerid, -1,"Compraste un bidón con 5 litros de combustible por {f21111}$65 {FFFFFF}Para usarlo ingresa {f21111}/cargar tanque");
				return 1;
			}
		}
		else if(strcmp(item, "vehiculo",true)==0)
		{
		    new vehicleid = GetPlayerVehicleID(playerid),count_vehicles;
		    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No estas en un vehículo.");

			if(VehiculosInfo[vehicleid][vcomprable] != 1) return SendClientMessage(playerid,-1,"Este vehículo no esta en venta..");

			if(PLAYER_INFO[playerid][vModelo] != 0) count_vehicles ++;
			if(PLAYER_INFO[playerid][vModelo2] != 0) count_vehicles ++;
			if(PLAYER_INFO[playerid][vModelo3] != 0) count_vehicles ++;
			if(PLAYER_INFO[playerid][vModelo4] != 0) count_vehicles ++;

			else if(count_vehicles >= 4) return SendClientMessage(playerid, -1, "Solo puedes tener 4 vehículos.");

            new CONCE_ID = ConceCercano(playerid);
			switch(VehiculosInfo[vehicleid][vmoneda])
			{
				case 0: //dinero
				{
					if(VehiculosInfo[vehicleid][vprecio] > PLAYER_INFO[playerid][pDinero]) return SendClientMessageEx(playerid,-1, "Necesitas {f21111}$%d{FFFFFF} para comprar este vehículo.",VehiculosInfo[vehicleid][vprecio]);
                    RemovePlayerFromVehicle(playerid);
					CreatePlayerVehicle(playerid, VehiculosInfo[vehicleid][vmodelo], Concesionaria_Spawn_Positions[CONCE_ID][0], Concesionaria_Spawn_Positions[CONCE_ID][1], Concesionaria_Spawn_Positions[CONCE_ID][2], Concesionaria_Spawn_Positions[CONCE_ID][3], VehiculosInfo[vehicleid][vcolor1], VehiculosInfo[vehicleid][vcolor2], VehiculosInfo[vehicleid][vprecio],VehiculosInfo[vehicleid][vmoneda], -1);
                    QuitarDinero(playerid, VehiculosInfo[vehicleid][vprecio]);
				}
				case 1: //monedas RZ.
				{
				    if(VehiculosInfo[vehicleid][vprecio] > PLAYER_INFO[playerid][Moneda]) return SendClientMessageEx(playerid,-1,"Necesitas {f21111}%d "SERVER_COIN"{FFFFFF} para comprar este vehículo.",VehiculosInfo[vehicleid][vprecio]);
                    RemovePlayerFromVehicle(playerid);
					CreatePlayerVehicle(playerid, VehiculosInfo[vehicleid][vmodelo], Concesionaria_Spawn_Positions[CONCE_ID][0], Concesionaria_Spawn_Positions[CONCE_ID][1], Concesionaria_Spawn_Positions[CONCE_ID][2], Concesionaria_Spawn_Positions[CONCE_ID][3], VehiculosInfo[vehicleid][vcolor1], VehiculosInfo[vehicleid][vcolor2], VehiculosInfo[vehicleid][vprecio],VehiculosInfo[vehicleid][vmoneda], -1);
                    PLAYER_INFO[playerid][Moneda] -= VehiculosInfo[vehicleid][vprecio];
				}
			}
			return 1;
		}
 		else if(strcmp(item,"estacionamiento",true) == 0)
	 	{
	 	    for(new e = 0; e < MAX_GARAGES; e++)
    		{
    		    if(Estacionamientos[e][eEnUso] > 0)
    		    {
    		        if(IsPlayerInRangeOfPoint(playerid,2.0,Estacionamientos[e][PosX], Estacionamientos[e][PosY], Estacionamientos[e][PosZ]))
					{
					    if(Estacionamientos[e][Dueno] == PLAYER_INFO[playerid][pID]) return SendClientMessage(playerid, -1, "No puedes comprar un estacionamiento que ya es tuyo.");
					    if(ObtenerEstacionamientos(playerid) > 1) return SendClientMessage(playerid, -1, "Ya no puedes comprar mas estacionamientos.");
				    	if(Estacionamientos[e][Nivel] > PLAYER_INFO[playerid][pNivel]) return SendClientMessage(playerid, -1, "Necesitas un nivel superior para comprar el estacionamiento.");
	        	        if(Estacionamientos[e][ePrecio] > PLAYER_INFO[playerid][pBanco]) return SendClientMessage(playerid, -1, "No tienes el dinero necesario para comprar el estacionamiento.");
						SendClientMessage(playerid, -1, "¡Felicitaciones! Compraste el estacionamiento, para mas información visita nuestro foro.");
		                new paga = Estacionamientos[e][ePrecio]/2;
		                new newpaga = paga*90/100;
		                new iddueno = GetPlayerID(Estacionamientos[e][DuenoName]);
						if(iddueno == -1)
						{
						    if(strcmp(Estacionamientos[e][DuenoName], "Nadie", true) != 0)
							{
							    new query[128];
								mysql_format(handle_db, query, sizeof(query), "UPDATE `usuarios` SET `Banco`=Banco+'%d'  WHERE `ID`='%d'", newpaga, Estacionamientos[e][Dueno]);
								mysql_tquery(handle_db, query);
							}
						}
						else
						{
							PLAYER_INFO[iddueno][pBanco] = PLAYER_INFO[iddueno][pBanco]+newpaga;
							SendClientMessage(iddueno, -1, "Acaban de comprar tu estacionamiento, se ha hecho una transferencia a tu cuenta bancaria.");
							SendClientMessage(iddueno, -1, "El banco cobró el 10 porciento de la venta por la transacción ");
						}
 						Estacionamientos[e][Dueno] = PLAYER_INFO[playerid][pID];
						format(Estacionamientos[e][DuenoName],MAX_PLAYER_NAME,"%s",PLAYER_INFO[playerid][Nickname]);
						PLAYER_INFO[playerid][pBanco] -= Estacionamientos[e][ePrecio];
						Estacionamientos[e][ePrecio] = Estacionamientos[e][ePrecio]/2*3;
						Estacionamientos[e][Nivel] += 1;
						SaveParking(e);
						CargarParking(e);
					}
    		    }
			}
	 	}
		else if(strcmp(item,"repuestos", true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico) return SendClientMessage(playerid,-1,"Para {f21111}/comprar repuestos{FFFFFF} necesitas ir al taller donde te dieron el empleo.");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 95.9849,-162.9593,2.5938)) return SendClientMessage(playerid,-1,"No estás en el lugar indicado.");
			{
				ShowPlayerDialog(playerid, CREPUESTOS, DIALOG_STYLE_INPUT, "Repuestos", "Ingresa la cantidad de repuestos que deseas comprar\nRecuerda que cada repuesto cuesta $100 y solo puedes llevar 100 encima.", "Comprar", "Cancelar");
			}
		}
		else if(strcmp(item,"productos", true) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, -23.2806,-55.6424,1003.5469) || IsPlayerInRangeOfPoint(playerid, 1.5, -30.5101,-28.9864,1003.5573) || IsPlayerInRangeOfPoint(playerid, 1.5, -28.0060,-89.9514,1003.5469))  // 24/7
			{
			    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
		    	{
					new str[344+1];
					format(str, sizeof(str), "%sTeléfono móvil ($1500)\nGuía telefónica ($35)\nRadio comunicador ($2000)\nGPS ($1500)\nBebida par", str);
					format(str, sizeof(str), "%sa guardar en heladera: Cerveza x6 unidades ($470)\nBebida para guardar en heladera: Vino x6 unidades ($590)\nBebida para guardar en heladera: Sprunk x4 unidades ($200)\nBebida: Sprunk ($65)", str);
					ShowPlayerDialog(playerid, PRODUCTOS, DIALOG_STYLE_LIST, "{f21111}Productos y servicios (24/7).", str, "Comprar", "Salir");
					return 1;
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 1.5, -784.2098,500.1945,1371.7422)) // Restaurante
			{
			    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
		    	{
				    new cervezas[30],vino[30],sprunk[30],aquarius[30];
				    for(new p; p < MAX_PROPIEDADES; p++)
	   				{
					    if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
		        		{
		        		    switch(PropInfo[p][pCerveza])
							{
		        		        case 0: format(cervezas,sizeof(vino),"{EB0000}Cerveza");
		        		        default: format(cervezas,sizeof(vino),"{FFFFFF}Cerveza");
							}
							switch(PropInfo[p][pVino])
							{
		        		        case 0: format(vino,sizeof(vino),"{EB0000}Vino");
		        		        default: format(vino,sizeof(vino),"{FFFFFF}Vino");
							}
							switch( PropInfo[p][pSprunk])
							{
								case 0: format(sprunk,sizeof(sprunk),"{EB0000}Vaso de sprunk");
		        		        default: format(sprunk,sizeof(sprunk),"{FFFFFF}Vaso de sprunk");
							}
							switch( PropInfo[p][pAquarius])
							{
		        		        case 0: format(aquarius,sizeof(aquarius),"{EB0000}Aquarius");
		        		        default: format(aquarius,sizeof(aquarius),"{FFFFFF}Aquarius");
							}
		        		}
					}
					new string[256];
					format(string,sizeof(string),"Producto\tPrecio\n%s\t{f21111}$80{FFFFFF}\n%s\t{f21111}$100\n%s\t{f21111}$60{FFFFFF}\n%s\t{f21111}$160{FFFFFF}",cervezas,vino,sprunk,aquarius);
					ShowPlayerDialog(playerid, PRODUCTOS2, DIALOG_STYLE_TABLIST_HEADERS, "{f21111}Lista de productos",string,"Comprar", "Salir");
					return 1;
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 1.5, 373.7276,-118.8039,1001.4922)) // Pizzeria
			{
			    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
		    	{
					return ShowPlayerDialog(playerid, DIALOG_PIZZA, DIALOG_STYLE_TABLIST_HEADERS, "{f21111}Lista de productos","Producto\tPrecio\nPorción de pizza\t{f21111}$40{FFFFFF}\nPizza completa {232621}- (Para llevar)\t{f21111}$300{FFFFFF}\nSprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 1.5, 1214.8492,-13.3533,1000.9219) || IsPlayerInRangeOfPoint(playerid, 2.0, 969.3793,-44.8069,1001.1172) ||IsPlayerInRangeOfPoint(playerid, 2.0, 214.9070,-13.3532,1000.9219) ||IsPlayerInRangeOfPoint(playerid, 2.0, -1262.6428,2119.9490,1246.5457) || IsPlayerInRangeOfPoint(playerid, 2.0, -1396.3044,-320.4939,1052.0834) || IsPlayerInRangeOfPoint(playerid, 2.0, 499.9690,-20.6826,1000.6797)) // Salón de eventos
			{
			    if(TieneSprunk[playerid] == 0 && TieneVino[playerid] == 0 && TieneAquariu[playerid] == 0 && TieneCerveza[playerid] == 0)
		    	{
		    		return ShowPlayerDialog(playerid, DIALOG_SALON, DIALOG_STYLE_TABLIST_HEADERS, "{f21111}Lista de productos","Producto\tPrecio\nVino\t{f21111}$110{FFFFFF}\nCerveza\t{f21111}$80{FFFFFF}\nVaso de sprunk\t{f21111}$70{FFFFFF}\nAquarius\t{f21111}$170{FFFFFF}","Comprar", "Salir");
				}
			}
			return 1;
		}
		else if(strcmp(item,"juguetes", true) == 0)
		{
			if(EnSexShop(playerid))
			{
			    if(PLAYER_INFO[playerid][pNivel] < 2) return SendClientMessage(playerid,-1,"Necesitas nivel 2 como mínimo para hacer eso.");
				new string[400];
				format(string, sizeof(string),"Vibrador blanco ({f21111}$1000{FFFFFF})\n");
				format(string, sizeof(string),"%sVibrador plateado ({f21111}$1200{FFFFFF})\n",string);
				format(string, sizeof(string),"%sGran vibrador blanco ({f21111}$1600{FFFFFF})\nConsolador rosa ({f21111}$2500{FFFFFF})",string);
				ShowPlayerDialog(playerid, JUGUETES, DIALOG_STYLE_LIST, "Juguetes eróticos", string, "Comprar", "Cancelar");
            }
			else SendClientMessage(playerid,-1,"Solo se puede {f21111}/comprar juguetes{FFFFFF} en algunos negocios.");
			return 1;
		}
		else if(strcmp(item,"materiales", true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Armero && PLAYER_INFO[playerid][pTrabajo2] != T_Armero) return SendClientMessage(playerid,-1,"Necesitas tener el trabajo de fabricante de armas para comprar materiales.");
			if(IsPlayerInRangeOfPoint(playerid, 5.0,1422.6765,-1319.3438,13.5547) && Mats1[playerid] == 0)
			{
				if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
				{
					PLAYER_INFO[playerid][piezas] += 50;
					QuitarDinero(playerid, 1250);
					SendClientMessage(playerid,-1,"Compraste {f21111}50 materiales{FFFFFF} de armas por {f21111}$1250");
					SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
					PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
					Mats1[playerid] = 1;
					return 1;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0,2823.3486,-1420.3571,16.2562) && Mats2[playerid] == 0)
			{
				if(PLAYER_INFO[playerid][pDinero] < 2500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
				{
					PLAYER_INFO[playerid][piezas] += 50;
					QuitarDinero(playerid, 1250);
					SendClientMessage(playerid,-1,"Compraste {f21111}50 materiales{FFFFFF} de armas por {f21111}$1250");
					SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
					PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
					Mats2[playerid] = 1;
					return 1;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0,-1735.7610,1244.9299,7.5469) && Mats3[playerid] == 0)
			{
				if(PLAYER_INFO[playerid][pDinero] < 7500) return SendClientMessage(playerid,-1,"No tienes el dinero suficiente");
				{
					PLAYER_INFO[playerid][piezas] += 250;
					QuitarDinero(playerid, 6250);
					SendClientMessage(playerid,-1,"Compraste {f21111}250 materiales{FFFFFF} de armas por {f21111}$6250");
					SendClientMessage(playerid,-1,"Ahora dirígete a la fabrica (marcado en el mapa) para preparar las piezas.");
					PuntoMats[playerid] = SetPlayerCheckpoint(playerid,2160.7837,-2280.9233,13.3838, 5.0);
					Mats3[playerid] = 1;
					return 1;
				}
			}
		}
	}
	return 1;
}
CMD:cancelar(playerid, params[])
{
	new item[32];
	new vw = GetPlayerVirtualWorld(playerid);
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,"mutual",true) ==0)
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1147.9966,-1322.4128,-10.7922)) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que ir al hospital para cancelar la mutual.");
		    switch(PLAYER_INFO[playerid][pSocioHP])
			{
			    case 0: SendClientMessage(playerid,-1,"{FFFFFF}No eres socio de este hospital.");
			    case 1: // Central
			    {
			        if(vw != 6) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				    PLAYER_INFO[playerid][pSocioHP] = 0;
					SendClientMessage(playerid,-1,"{c04306}Dejaste de ser socio de este hospital.");
			    }
			    case 2: // Grove
			    {
			        if(vw != 9) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				    PLAYER_INFO[playerid][pSocioHP] = 0;
					SendClientMessage(playerid,-1,"{c04306}Dejaste de ser socio de este hospital.");
			    }
			    case 3: // SF
			    {
			        if(vw != 7) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				    PLAYER_INFO[playerid][pSocioHP] = 0;
					SendClientMessage(playerid,-1,"{c04306}Dejaste de ser socio de este hospital.");
			    }
			    case 4: // LV
			    {
			        if(vw != 8) return SendClientMessage(playerid, -1, "{FFFFFF}No eres socio de este hospital.");
				    PLAYER_INFO[playerid][pSocioHP] = 0;
					SendClientMessage(playerid,-1,"{c04306}Dejaste de ser socio de este hospital.");
			    }
			}
		}
	}
	return 1;
}
CMD:socio(playerid, params[])
{
	new item[32];
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,"ayuda",true) ==0)
		{
			SendClientMessage(playerid,-1,"{FFFFFF}Haciendote socio de este hospital, serás atendido a un menor costo.");
			SendClientMessage(playerid,-1,"{FFFFFF}El precio de la atención, pasará de {f21111}$450{FFFFFF} a {f21111}$400");
			SendClientMessage(playerid,-1,"{FFFFFF}Siempre que tengas un problema, serás atendido en este hospital.");
			SendClientMessage(playerid,-1,"{FFFFFF}Puedes hacerte {FFFF04}/socio{FFFFFF} por un único pago de {f21111}$500{FFFFFF}");
			SendClientMessage(playerid,-1,"{FFFFFF}Puedes usar en cualquier momento {FFFF04}/cancelar mutual{FFFFFF} para dejar de ser socio.");
		}
	}
	if(sscanf(params, "s[30]", item))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1242.1226,-809.4479,1164.2759)) //LV - Ganton
	    {
	        switch(GetPlayerVirtualWorld(playerid))
			{
			    case 7: // LS Groove
				{
				    SendClientMessage(playerid,-1,"{FFFFFF}Muchas gracias por hacerte socio de nuestro hospital.");
                    PLAYER_INFO[playerid][pSocioHP] = 2;
                    QuitarDinero(playerid,500);
				}
				case 9: // LV
				{
				    SendClientMessage(playerid,-1,"{FFFFFF}Muchas gracias por hacerte socio de nuestro hospital.");
                    PLAYER_INFO[playerid][pSocioHP] = 4;
                    QuitarDinero(playerid,500);
				}
			}
	    }
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.9966,-1322.4128,-10.7922))
		{
		    SendClientMessage(playerid,-1,"{FFFFFF}Muchas gracias por hacerte socio de nuestro hospital.");
            PLAYER_INFO[playerid][pSocioHP] = 1;
            QuitarDinero(playerid,500);
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, -2713.7925,636.4968,1385.654))
		{
		    SendClientMessage(playerid,-1,"{FFFFFF}Muchas gracias por hacerte socio de nuestro hospital.");
            PLAYER_INFO[playerid][pSocioHP] = 3;
        	QuitarDinero(playerid,500);
		}
  	}
	return 1;
}
CMD:expulsar(playerid,params[])
{
	new id,string[250];
	if(PLAYER_INFO[playerid][pNivel] == 1) return SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
	if(PLAYER_INFO[playerid][pTiempoCarcel] > 0 || PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
	if(!sscanf(params,"d",id))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
	    	if(Alquilado == false) return SendClientMessage(playerid,-1,"El salón debe estar alquilado.");
	    	if(strcmp(PLAYER_INFO[playerid][Nickname],Alquilador,true) == 0 || PermisoSalon[playerid] == true)
	    	{
	            if(IsPlayerConnected(id))
	            {
	                if(EnSalonEvento(id) || EnSalonEvento2(id))
	                {
						if(strcmp(PLAYER_INFO[id][Nickname],Alquilador,true) == 0) return SendClientMessage(playerid,-1,"No puedes expulsar a esa persona del salón.");
						NoTeleportHack(playerid);
	    				SetPlayerPosEx(id,1423.4301,-1180.1801,25.9922);
	    				SetPlayerVirtualWorld(id,0);
	    				SetPlayerInterior(id,0);
	    				format(string,sizeof(string),"Los guardias agarran a %s del brazo y lo expulsan del salón.",PLAYER_INFO[id][Nickname]);
						ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	    				SendClientMessage(id,-1,"Los guardias de seguridad de sacaron del salón de evento.");
						format(string,sizeof(string),"El jugador {FFFF04}%s{FFFFFF} expulso a {FFFF04}%s{FFFFFF} del salón de eventos.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
						MandarMensajeSalon(string, playerid);
	    				Boleto[id] = false;
						if(strcmp(PLAYER_INFO[playerid][Nickname],Alquilador,true) == 0)	PermisoSalon[id] = false;
	                }
	                else SendClientMessage(playerid,-1,"El jugador debe estar dentro del salón.");
	            }
	            else SendClientMessage(playerid,-1,"Ese jugador está desconectado.");
	    	}
	    	else SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(PLAYER_TIMES[playerid][TiempoExpulsar] > gettime())
			{
			    new tmpString[64];
			    format(tmpString, sizeof(tmpString), "Debes de esperar {f21111}%d segundos", PLAYER_TIMES[playerid][TiempoExpulsar] - gettime());
			    return SendClientMessage(playerid, COLOR_WHITE, tmpString);
			}
			if(IsPlayerConnected(id))
			{
				if(id == playerid) return SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
				if(IsPlayerInAnyVehicle(id))
				{
					if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id))
					{
						new resulT = random(2);
						switch(resulT)
						{
						    case 0:
						    {
							    format(string, sizeof(string), "%s intenta bajar a %s de su vehículo y lo logra.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
								ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
								RemovePlayerFromVehicle(id);
								PLAYER_TIMES[playerid][TiempoExpulsar] = gettime() + 59;
						    }
						    case 1:
						    {
						    	format(string, sizeof(string), "%s intenta bajar a %s de su vehículo y no lo logra.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
								ProxDetector(30.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
								PLAYER_TIMES[playerid][TiempoExpulsar] = gettime() + 59;
						    }
						}
					}
					else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
				}
				else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
			}
			else SendClientMessage(playerid, -1, "No puedes expulsar del vehículo a esa persona.");
		}
		else SendClientMessage(playerid,-1,"No tienes permiso para usar ese comando.");
	}
	else return SendClientMessage(playerid,-1,"Usa {FFFF04}/expulsar {FFFFFF}[{FFFF04}id o nombre{FFFFFF}]");
	return true;
}
CMD:servicio(playerid, params[])
{
	new item[128];
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[128]", item))
	{
		if(strcmp(item,	"medico",true) == 0)
		{
			new cual = 0;
			if(IsPlayerInRangeOfPoint(playerid,2.0,1148.0066,-1322.5038,-10.7922)) cual = 1;
			if(IsPlayerInRangeOfPoint(playerid,2.0,-2713.3152,636.8893,1385.6547)) cual = 1;
			if(IsPlayerInRangeOfPoint(playerid,2.0,1242.1221,-809.4786,1164.2759)) cual = 1;
			if(cual == 1)
			{
			    if(PLAYER_INFO[playerid][pCama] > 0) return 1;
				new Float:calculo,string[256];

				if(PLAYER_INFO[playerid][j_HEALTH] > 99) return 1;
				
				calculo = 100 - PLAYER_INFO[playerid][j_HEALTH];
				ObtenerEstadoSalud(playerid);
				HCalculo[playerid] = floatround(calculo, floatround_round);
				format(string,256,"{FFFFFF}Necesitas ser internado con urgencia por {a9c4e4}%s\nCosto de internación {f21111}$%d",Enfermedades(playerid),HCalculo[playerid]*10);
				ShowPlayerDialog(playerid,DHOSPITAL,DIALOG_STYLE_MSGBOX,"Diagnóstico médico",string,"Aceptar","Cancelar");
			}
			else if(PLAYER_INFO[playerid][Agonizando] == 1)
			{
			    if(LlamadaMedicos[playerid] == 0)
			    {
					foreach(new i : Player)
					{
						if(PLAYER_INFO[i][pTrabajo] == T_Medico || PLAYER_INFO[i][pTrabajo2] == T_Medico)
						{
						    if(RopaMedi[i] == 1)
						    {
								if(GetPlayerVirtualWorld(playerid) == 0) SetPlayerMarkerForPlayer(i, playerid, COLOR_AMARILLO);
								new string[256];
								format(string, sizeof(string), "{FFFFFF}Hay un nuevo paciente solicitando {FFFF04}/servicio medico{FFFFFF}, para avisarle que vas a atenderlo escribe {FFFF04}/responder medico", PLAYER_INFO[playerid][Nickname], playerid);
								SendClientMessage(i, 0x00CC00FF, string);
								TimerMedico[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,2);
								ResponderMedi[i] = 1;
							}
						}
				 	}
					SendClientMessage(playerid, -1,"Llamaste al servicio medico, por favor espera un momento.");
					TimerMalherido[playerid] = 100;
					MarcadoMedicos[playerid] = 1;
					LlamadaMedicos[playerid] = 1;
				}
			}
			else SendClientMessage(playerid, -1,"{FFFFFF}Para escribir {FFFF04}/servicio medico{FFFFFF}, tienes que estar herido o dentro de un hospital.");
		}
		else if(strcmp(item, "taxi",true) == 0)
		{
			if(LlamadaTaxi[playerid] == 0)
			{
				foreach(new i : Player)
				{
					if(PLAYER_INFO[i][pTrabajo] == T_Taxista || PLAYER_INFO[i][pTrabajo2] == T_Taxista)
					{
						if(TAXI(GetPlayerVehicleID(i)))
						{
							SetPlayerMarkerForPlayer(i, playerid, COLOR_AMARILLO);
							SendClientMessage(i, 0xDBED15FF, "Hay un nuevo cliente {FFFFFF}llamando al {FFFF04}/servicio taxi{FFFFFF}, para avisarle que vas a buscarlo usa {FFFF04}/responder taxi");
							ResponderTaxi[i] = 1;
						}
					}
				}
				TimerTaxista[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,3);
				SendClientMessage(playerid, -1,"Llamaste al servicio de taxi, por favor espera un momento.");
				LlamadaTaxi[playerid] = 1;
			}
			else return SendClientMessage(playerid,-1,"Ya has solicitado un taxi");
		}
		else if(strcmp(item, "mecanico",true) == 0)
		{
			new Float:vida, autoid = GetPlayerVehicleID(playerid);
			GetVehicleHealth(autoid, vida);
			if(PLAYER_INFO[playerid][pNivel] == 1 && PLAYER_INFO[playerid][pExperiencia] < 3)
			{
			    SendClientMessage(playerid,-1,"Para llamar al servicio mecánico, necesitas tener como mínimo 3 puntos de reputación.");
			    SendClientMessage(playerid,-1,"Se gana 1 punto de reputación por cada hora de juego.");
			    SendClientMessage(playerid,-1,"Puedes consultar en cualquier momento tu reputación usando el comando /estadisticas o /est.");
			    SendClientMessage(playerid,-1,"O sino también puedes ver la barra gris en la parte inferior de la pantalla.");
			    return 1;
			}
			if(AceptoRepara[playerid] == 1) return SendClientMessage(playerid,-1,"Ya aceptaste una reparación.");
			GetVehicleHealth(autoid, vida);
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(vida > 375.0) return SendClientMessage(playerid,-1,"El motor del vehículo no está averiado.");
				if(Capo[autoid] == 0) return SendClientMessage(playerid,-1,"Primero necesitas {FFFF00}/abrir capo");
				if(LlamadaMeca[playerid] == 0)
				{
					foreach(new i : Player)
					{
						if(RopaMeca[i] == 1 && (PLAYER_INFO[i][pTrabajo] == T_Mecanico || PLAYER_INFO[i][pTrabajo2] == T_Mecanico))
						{
							SetPlayerMarkerForPlayer(i, playerid, COLOR_AZUL);
							SendClientMessage(i, 0x33CCFFAA, "{FFFFFF}Hay un nuevo cliente llamando al {FFFF00}/servicio mecanico{FFFFFF}, para confimar usa {FFFF00}/responder mecanico");
							ResponderMeca[i] = 1;
							TimerMeca[playerid] = SetTimerEx("CancelarLlamada",minutos(5),false,"dd",playerid,1);
						}
					}
					SendClientMessage(playerid, -1,"Has solicitado un mecanico, espera que venga a tu posición.");
					LlamadaMeca[playerid] = 1;
				}
				else return SendClientMessage(playerid,-1,"Ya has solicitado un mecánico.");
			}
			else return SendClientMessage(playerid,-1,"Debes estar en un vehículo para solicitar un mecanico.");
		}
		else if(sscanf(params, "s[30]", item))
		{
		    SendClientMessage(playerid,-1,"SERVICIOS: {FFFF04}/servicio medico {FFFFFF}- {FFFF04}/servicio taxi {FFFFFF}- {FFFF04}/servicio grua {FFFFFF}- {FFFF04}/servicio mecanico");
		}
	}
	return 1;
}
CMD:subir(playerid,params[])
{
	new Float:X, Float:Y, Float:Z, carid, item[128],Float:X2,Float:Y2,Float:Z2;
	carid = GetPlayerVehicleID(playerid);
	if(!sscanf(params, "s[128]", item))
	{
		if(strcmp(item, "paciente", true) ==0)
		{
		    new Value = 1,Value2 = 1;
			if(PLAYER_INFO[playerid][pTrabajo] != T_Medico && PLAYER_INFO[playerid][pTrabajo2] != T_Medico) return 1;
			if(Paciente[playerid] == INVALID_PLAYER_ID && Paciente2[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1,"No has reanimado a ningun paciente para subirlo.");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1,"Debes estar en una ambulancia.");
			if(!AMBU(carid)) return SendClientMessage(playerid, -1,"Debes estar en una ambulancia.");
			if(Paciente[playerid] != INVALID_PLAYER_ID)
			{
				if(GetPlayerInterior(Paciente[playerid]) == 0)	GetPlayerPos(Paciente[playerid], X,Y,Z);
				else Value =  2,ObtenerCoordenadasPaciente(Paciente[playerid],X,Y,Z);
			}
			if(Paciente2[playerid] != INVALID_PLAYER_ID)
			{
				if(GetPlayerInterior(Paciente2[playerid]) == 0)	GetPlayerPos(Paciente2[playerid], X2,Y2,Z2);
				else Value = 2,ObtenerCoordenadasPaciente(Paciente2[playerid],X2,Y2,Z2);
			}
			if(GetPlayerInterior(playerid) == 0)
   			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z) || IsPlayerInRangeOfPoint(playerid, 5.0, X2,Y2,Z2))
				{
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, X,Y,Z))
				    {
				        if(!IsSeatTaken(GetPlayerVehicleID(playerid),1))
				    	{
				    	    NoTeleportHack(Paciente[playerid]);
					    	SetPlayerVirtualWorld(Paciente[playerid], 0);
							SetPlayerInterior(Paciente[playerid], 0);
							EnAuto[Paciente[playerid]] = carid;
							MarcadoMedicos[Paciente[playerid]] = 0;
							SetPlayerColor(Paciente[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente[playerid], carid, 2);
							Congelar(Paciente[playerid]);
							Reanimado[Paciente[playerid]] = 0;
							PacienteAmbu[Paciente[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
						else if(!IsSeatTaken(GetPlayerVehicleID(playerid),2))
				    	{
				    	    NoTeleportHack(Paciente[playerid]);
					    	SetPlayerVirtualWorld(Paciente[playerid], 0);
							SetPlayerInterior(Paciente[playerid], 0);
							EnAuto[Paciente[playerid]] = carid;
							MarcadoMedicos[Paciente[playerid]] = 0;
							SetPlayerColor(Paciente[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente[playerid], carid, 2);
							Congelar(Paciente[playerid]);
							Reanimado[Paciente[playerid]] = 0;
							PacienteAmbu[Paciente[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
				    }
				    else if(Value == 2) SendClientMessage(playerid,-1,"Acerca la ambulancia a la puerta de la propiedad.");
				    if(IsPlayerInRangeOfPoint(playerid, 5.0, X2,Y2,Z2))
				    {
				        if(!IsSeatTaken(GetPlayerVehicleID(playerid),1))
				    	{
				    	    NoTeleportHack(Paciente2[playerid]);
					    	SetPlayerVirtualWorld(Paciente2[playerid], 0);
							SetPlayerInterior(Paciente2[playerid], 0);
							EnAuto[Paciente2[playerid]] = carid;
							MarcadoMedicos[Paciente2[playerid]] = 0;
							SetPlayerColor(Paciente2[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente2[playerid], carid, 2);
							Congelar(Paciente2[playerid]);
							Reanimado[Paciente2[playerid]] = 0;
							PacienteAmbu[Paciente2[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
						else if(!IsSeatTaken(GetPlayerVehicleID(playerid),2))
				    	{
				    	    NoTeleportHack(Paciente2[playerid]);
					    	SetPlayerVirtualWorld(Paciente2[playerid], 0);
							SetPlayerInterior(Paciente2[playerid], 0);
							EnAuto[Paciente2[playerid]] = carid;
							MarcadoMedicos[Paciente2[playerid]] = 0;
							SetPlayerColor(Paciente2[playerid], COLOR_WHITE);
							PutPlayerInVehicleEx(Paciente2[playerid], carid, 2);
							Congelar(Paciente2[playerid]);
							Reanimado[Paciente2[playerid]] = 0;
							PacienteAmbu[Paciente2[playerid]] = 1;
							MedicoCP2[playerid] = 1;
							HospitalCercano(playerid);
						}
				    }
				    else if(Value2 == 2) SendClientMessage(playerid,-1,"Acerca la ambulancia a la puerta de la propiedad.");
				}
			}
		}
	}
	if(sscanf(params, "s[128]d", item))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,905.4720,-3021.9995,7.5059))	// Faro ISLA Salida
		{
			SetPosEx(playerid,909.7603,-3016.5725,49.9987,307.7599,0,0);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,154.1846,-1946.6228,5.3903))	// Faro Verona Beach Salida
		{
			SetPosEx(playerid,154.4787,-1953.9596,47.8722,151.6741,0,0);
			return 1;
		}
	}
	return 1;
}
CMD:bajar(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0,154.4787,-1953.9596,47.8722)) 		// Faro Verona Beach
	{
 		SetPosEx(playerid,154.1846,-1946.6228,5.3903,359.0472,0,0);
   	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,909.7603,-3016.5725,49.9987)) 		// Faro ISLA
	{
 		SetPosEx(playerid,905.4720,-3021.9995,7.5059,132.8333,0,0);
	}
	return 1;
}
CMD:responder(playerid, params[])
{
	new item[32];
	if(IsPlayerConnected(playerid))
	if(!sscanf(params, "s[32]", item))
	{
		if(strcmp(item,	"medico",true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] == T_Medico || PLAYER_INFO[playerid][pTrabajo2] == T_Medico)
			{
				if(ResponderMedi[playerid] == 1)
				{
				    if(RopaMedi[playerid] == 1)
				    {
					    foreach(new i : Player)
						{
							if(LlamadaMedicos[i] == 1)
							{
							    LlamadaMedicos[i] = 0;
								SendClientMessage(i,-1,"{f21111}Un médico respondió a tu llamado y va en camino.");
								if(GetPlayerInterior(i) != 0)
					   			{
					   			    new Float:X,Float:Y,Float:Z;
									SendClientMessage(playerid,-1,"El paciente que solicito médico se encuentra en un interior, se marcó la entrada de la puerta en tu {FFFF04}GPS");
		                            for(new p = 0; p < MAX_PROPIEDADES; p++)
									{
										if(GetPlayerVirtualWorld(i) == PropInfo[p][pVW])
										{
					                        X = PropInfo[p][pPosX];
											Y = PropInfo[p][pPosY];
											Z = PropInfo[p][pPosZ];
										}
									}
		                            SetPlayerMapIcon(playerid, i, X, Y, Z, 0, HexToInt("00CC00FF"), MAPICON_GLOBAL);
								}
								SendClientMessage(playerid, -1,"{f21111}Le acabas de avisar al paciente que vas a buscarlo.");
								ResponderMedi[playerid] = 0;
								break;
							}
						}
					}
				}
				else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
			}
		}
		if(strcmp(item,	"taxi",true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Taxista && PLAYER_INFO[playerid][pTrabajo2] != T_Taxista) return 1;
			if(ResponderTaxi[playerid] == 1)
			{
				foreach(new i : Player)
				{
					if(LlamadaTaxi[i] == 1)
					{
						SendClientMessage(i,-1,"{f21111}Un taxista respondió a tu llamado y va en camino.");
					}
				}
				SendClientMessage(playerid, -1,"{f21111}Acabas de avisarle al cliente que vas a buscarlo.");
				ResponderTaxi[playerid] = 0;
			}
			else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
		}
		if(strcmp(item,	"mecanico",true) == 0)
		{
			if(PLAYER_INFO[playerid][pTrabajo] != T_Mecanico && PLAYER_INFO[playerid][pTrabajo2] != T_Mecanico) return 1;
			if(ResponderMeca[playerid] == 1)
			{
				foreach(new i : Player)
				{
					if(LlamadaMeca[i] == 1)
					{
						SendClientMessage(i,-1,"{f21111}Un mecánico respondió a tu llamado y va en camino.");
					}
				}
				SendClientMessage(playerid, -1,"{f21111}Acabas de avisarle al cliente que vas a reparar su vehículo.");
				ResponderMeca[playerid] = 0;
			}
			else return SendClientMessage(playerid,-1,"Ya fueron atendidos todos los llamados.");
		}
	}
	return 1;
}
CMD:arrancar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
   	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
   	if(VehiculosInfo[vehicleid][vcomprable] == 1) return 1;
   	if(BICI(vehicleid)) return 1;
	if(MotorAuto[vehicleid] == 0 && PLAYER_TIMES[playerid][TiempoVehiculo] - gettime() <= 0)
	{
		PlayerTextDrawSetString(playerid,TEXTO_VEHICULOS[playerid], "Encendiendo..");
		PlayerTextDrawShow(playerid, TEXTO_VEHICULOS[playerid]);
		defer OcultarTextdrawVeh[1200](playerid);
		SetTimerEx("EncenderMotor",1200, false, "d",playerid);
	}
	return 1;
}

timer OcultarTextdrawVeh[2000](playerid)
    PlayerTextDrawHide(playerid, TEXTO_VEHICULOS[playerid]);

CMD:luces(playerid,params[])
{
	new autoid;
	autoid = GetPlayerVehicleID(playerid);
 	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(Luces[autoid] == 0)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, objective);
		Luces[autoid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Encendiendo luces...");
		AccionesRol(playerid,"enciende las luces de su vehículo.", 20);
	}
	else if(Luces[autoid] == 1)
	{

		new vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
		SendClientMessage(playerid, COLOR_WHITE, "Apagando luces...");
		AccionesRol(playerid,"apaga las luces de su vehículo.", 20);
		Luces[autoid] = 0;
	}
	return 1;
}
CMD:cerrar(playerid,params[])
{
	new item[10];
	new Float:x,Float:y,Float:z, Float:x2,Float:y2,Float:z2, Float:x3,Float:y3,Float:z3, Float:x4,Float:y4,Float:z4;
	GetVehiclePos(autos[playerid],  x,y,z);
	GetVehiclePos(autos2[playerid], x2,y2,z2);
	GetVehiclePos(autos3[playerid], x3,y3,z3);
	GetVehiclePos(autos4[playerid], x4,y4,z4);
	if(!sscanf(params,"s[10]",item))
	{
		if(strcmp(item,"patrulla",true)==0)
		{
			if(PLAYER_INFO[playerid][pDuty] != 1) return 1;
			new Float:VPos[3];
			for(new i = 0;i<GetPlayerPoolSize();i++)
			{
				if(SAPD(i))
				{
					GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
					if(IsPlayerInRangeOfPoint(playerid,2.0,VPos[0],VPos[1],VPos[2]))
					{
						if(bloqueado[i] == 1) return SendClientMessage(playerid,-1,"Esta patrulla ya esta cerrada");
						AccionesRol(playerid,"trabó las puertas de la patrulla.", 20);
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						PlayerPlaySound(playerid, 1145, VPos[0], VPos[1], VPos[2]);
						SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
						bloqueado[i] = 1;
					}
				}
			}
		}
		if(strcmp(item,"baul",true)==0 || strcmp(item,"maletero",true)==0 || strcmp(item,"portamalas",true)==0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, x,y,z))
			{
				if(Baul[autos[playerid]] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado");
				GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, 0, objective);
				Baul[autos[playerid]] = 0;
				AccionesRol(playerid,"cierra el maletero de su vehiculo.", 20);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x2,y2,z2))
			{
				if(Baul[autos2[playerid]] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado");
				GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, 0, objective);
				Baul[autos2[playerid]] = 0;
				AccionesRol(playerid,"cierra el maletero de su vehiculo.", 20);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x3,y3,z3))
			{
				if(Baul[autos3[playerid]] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado");
				GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, 0, objective);
				Baul[autos3[playerid]] = 0;
				AccionesRol(playerid,"cierra el maletero de su vehiculo.", 20);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x4,y4,z4))
			{
				if(Baul[autos4[playerid]] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado");
				GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, 0, objective);
				Baul[autos4[playerid]] = 0;
				AccionesRol(playerid,"cierra el maletero de su vehiculo.", 20);
				return 1;
			}
			else if(PLAYER_INFO[playerid][pAdmin] >= 4)
			{
				new id = GetPlayerVehicleID(playerid);
				if(!IsPlayerInAnyVehicle(playerid)) return 1;
				if(Baul[id] == 0) return SendClientMessage(playerid,-1,"El baul ya esta cerrado");
				AccionesRol(playerid,"cierra el maletero de su vehiculo.", 20);
				GetVehicleParamsEx(id, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(id, engine, lights, alarm, doors, bonnet, 0, objective);
				Baul[id] = 0;
			}
		}
		if(strcmp(item,"capo",true)==0)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new autoid = GetPlayerVehicleID(playerid);
				GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autoid, engine, lights, alarm, doors, 0, boot, objective);
				Capo[autoid] = 0;
				AccionesRol(playerid,"cierra el capó de su vehiculo.", 20);
				return 1;
			}
			else return SendClientMessage(playerid,-1,"Necesitas estar en el asiento del chofer para cerrar el capó.");
		}
		if(strcmp(item,"ropero",true) == 0 || strcmp(item,"roupeiro",true) == 0)
		{
			for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
					if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
					{
						if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
						{
						    if(IsPlayerInRangeOfPoint(playerid,1.5,254.2685,-41.5420,1002.0308) || IsPlayerInRangeOfPoint(playerid,5,PropInfo[p][pRoperoX],PropInfo[p][pRoperoY],PropInfo[p][pRoperoZ]))
						    {
						    	if(PropInfo[p][pRoperoAbierto] == 1)
						    	{
						        	PropInfo[p][pRoperoAbierto] = 0;
									AccionesRol(playerid,"cierra el ropero.", 20);
									GuardarPropiedad(p);
						    	}
						    	else SendClientMessage(playerid,-1,"El ropero ya está cerrado, escribe {DBED15}/abrir ropero{FFFFFF} para abrirlo.");
							}
					    }
					}
				}
			}
		}
		if(strcmp(item,"casa",true) == 0 || strcmp(item,"puerta",true) == 0)
		{
			for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
					if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
					{
						if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
						{
							if(PropInfo[p][pAbierta] == 1)
							{
							    if(PropInfo[p][pTipo] == 3)
								{
									if(IsValidDynamicPickup(PropInfo[p][pPickup])) DestroyDynamicPickup(PropInfo[p][pPickup]);
									if(IsValidDynamicMapIcon(PropInfo[p][pMapIcon])) DestroyDynamicMapIcon(PropInfo[p][pMapIcon]);
								}
								PropInfo[p][pAbierta] = 0;
								AccionesRol(playerid,"cierra la puerta de su propiedad.", 20);
								GuardarPropiedad(p);
							}
							else SendClientMessage(playerid,-1,"Esta propiedad ya está cerrada, escribe {DBED15}/abrir puerta{FFFFFF} para abrirla.");
						}
					}
				}
			}
		}
	}
	if(sscanf(params, "s[10]", item))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
		{
		    //if(PLAYER_INFO[playerid][vTraba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Para poder cerrar el vehiculo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
			if(bloqueado[autos[playerid]] == 0)
			{
				GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
				AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x, y, z);
				bloqueado[autos[playerid]] = 1;
				PLAYER_INFO[playerid][vSeguro] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está cerrado.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0, x2,y2,z2))
		{
		    //if(PLAYER_INFO[playerid][v2Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Para poder cerrar el vehiculo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
			if(bloqueado[autos2[playerid]] == 0)
			{
				GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
				AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x2, y2, z2);
				bloqueado[autos2[playerid]] = 1;
				PLAYER_INFO[playerid][vSeguro2] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está cerrado.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, x3,y3,z3))
		{
		    //if(PLAYER_INFO[playerid][v3Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Para poder cerrar el vehiculo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
			if(bloqueado[autos3[playerid]] == 0)
			{
				GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
				AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x3, y3, z3);
				bloqueado[autos3[playerid]] = 1;
				PLAYER_INFO[playerid][vSeguro3] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está cerrado.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, x4,y4,z4))
		{
		    //if(PLAYER_INFO[playerid][v4Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Para poder cerrar el vehiculo, necesitas instalar un sistema de traba. Puedes comprar uno en cualquier {DBED15}24/7");
			if(bloqueado[autos4[playerid]] == 0)
			{
				GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 1, bonnet, boot, objective);
				AccionesRol(playerid,"trabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x4, y4, z4);
				bloqueado[autos4[playerid]] = 1;
				PLAYER_INFO[playerid][vSeguro4] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está cerrado.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para destrabar las puertas de tu vehiculo.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Necesitas estar al lado de un vehiculo para poder cerrarlo.");
		}
	}
	return 1;
}
CMD:alarma(playerid,params[])
{
    new Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:x3, Float:y3, Float:z3, Float:x4, Float:y4, Float:z4;
	GetVehiclePos(autos[playerid],  x,y,z);
	GetVehiclePos(autos2[playerid], x2,y2,z2);
	GetVehiclePos(autos3[playerid], x3,y3,z3);
	GetVehiclePos(autos4[playerid], x4,y4,z4);
	if(IsPlayerInRangeOfPoint(playerid, 10.0, x,y,z))
	{
	    if(PLAYER_INFO[playerid][vAlarma] != 1) {
		    SendClientMessage(playerid,-1,"Tu vehículo no tiene instalado el sistema de alarma. Puedes comprar uno en cualquier {FFFF04}24/7");
		    SendClientMessage(playerid,-1,"Tienes que estar cerca o dentro de tu vehículo para activar o desactivar la {FFFF04}/alarma");
		    return 1;
     	}
		if(alarma[autos[playerid]] == 0)
		{
			AccionesRol(playerid,"activa la alarma de su vehículo.", 20);
			alarma[autos[playerid]] = 1;
		}
		else		{
			AccionesRol(playerid,"desactivó la alarma de su vehículo.", 20);
			alarma[autos[playerid]] = 0;
			DesactivarAlarma(autos[playerid]);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, x2,y2,z2))
	{
        if(PLAYER_INFO[playerid][v2Alarma] != 1) {
		    SendClientMessage(playerid,-1,"Tu vehículo no tiene instalado el sistema de alarma. Puedes comprar uno en cualquier {FFFF04}24/7");
		    SendClientMessage(playerid,-1,"Tienes que estar cerca o dentro de tu vehículo para activar o desactivar la {FFFF04}/alarma");
		    return 1;
     	}
		if(alarma[autos2[playerid]] == 0)
		{
			AccionesRol(playerid,"activa la alarma de su vehículo.", 20);
			alarma[autos2[playerid]] = 1;
		}
		else		{
			AccionesRol(playerid,"desactivó la alarma de su vehículo.", 20);
			alarma[autos2[playerid]] = 0;
			DesactivarAlarma(autos2[playerid]);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, x3,y3,z3))
	{
        if(PLAYER_INFO[playerid][v3Alarma] != 1) {
		    SendClientMessage(playerid,-1,"Tu vehículo no tiene instalado el sistema de alarma. Puedes comprar uno en cualquier {FFFF04}24/7");
		    SendClientMessage(playerid,-1,"Tienes que estar cerca o dentro de tu vehículo para activar o desactivar la {FFFF04}/alarma");
		    return 1;
     	}
		if(alarma[autos3[playerid]] == 0)
		{
			AccionesRol(playerid,"activa la alarma de su vehículo.", 20);
			alarma[autos3[playerid]] = 1;
		}
		else		{
			AccionesRol(playerid,"desactivó la alarma de su vehículo.", 20);
			alarma[autos3[playerid]] = 0;
            DesactivarAlarma(autos3[playerid]);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, x4,y4,z4))
	{
        if(PLAYER_INFO[playerid][v4Alarma] != 1) {
		    SendClientMessage(playerid,-1,"Tu vehículo no tiene instalado el sistema de alarma. Puedes comprar uno en cualquier {FFFF04}24/7");
		    SendClientMessage(playerid,-1,"Tienes que estar cerca o dentro de tu vehículo para activar o desactivar la {FFFF04}/alarma");
		    return 1;
     	}
		if(alarma[autos4[playerid]] == 0)
		{
			AccionesRol(playerid,"activa la alarma de su vehículo.", 20);
			alarma[autos4[playerid]] = 1;
		}
		else		{
			AccionesRol(playerid,"desactivó la alarma de su vehículo.", 20);
			alarma[autos4[playerid]] = 0;
			DesactivarAlarma(autos4[playerid]);
		}
	}
	else SendClientMessage(playerid,-1,"Tienes que estar cerca o dentro de tu vehículo para activar o desactivar la {FFFF04}/alarma");
	return 1;
}
CMD:abrir(playerid,params[])
{
	new item[128];
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:x3,Float:y3,Float:z3,Float:x4,Float:y4,Float:z4;
	GetVehiclePos(autos[playerid], x,y,z);
	GetVehiclePos(autos2[playerid], x2,y2,z2);
	GetVehiclePos(autos3[playerid], x3,y3,z3);
	GetVehiclePos(autos4[playerid], x4,y4,z4);
	if(!sscanf(params,"s[128]",item))
	{
		if(strcmp(item,"patrulla",true)==0)
		{
			if(PLAYER_INFO[playerid][pDuty] != 1) return 1;
			new Float:VPos[3];
			for(new i = 0;i<GetPlayerPoolSize();i++)
			{
				if(SAPD(i))
				{
					GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
					if(IsPlayerInRangeOfPoint(playerid,2.0,VPos[0],VPos[1],VPos[2]))
					{
						if(bloqueado[i] == 0) return SendClientMessage(playerid,-1,"Esta patrulla ya esta abierta");
						AccionesRol(playerid,"destrabó las puertas de la patrulla.", 20);
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						PlayerPlaySound(playerid, 1145, VPos[0], VPos[1], VPos[2]);
						SetVehicleParamsEx(i, engine, lights, alarm, 0, bonnet, boot, objective);
						bloqueado[i] = 0;
					}
				}
			}
		}
		else if(strcmp(item,"capo",true)==0)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new autoid = GetPlayerVehicleID(playerid);
				GetVehicleParamsEx(autoid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autoid, engine, lights, alarm, doors, 1, boot, objective);
				Capo[autoid] = 1;
				AccionesRol(playerid,"abre el capó de su vehiculo.", 20);
				return 1;
			}
			else return SendClientMessage(playerid,-1,"Necesitas estar en el asiento del chofer para abrir el capó.");
		}
		else if(strcmp(item,"baul",true)==0 || strcmp(item,"maletero",true)==0)
		{
			new var;
			if(IsPlayerInRangeOfPoint(playerid, 4.0, x,y,z)) { var = autos[playerid]; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x2,y2,z2)) { var = autos2[playerid]; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x3,y3,z3)) { var = autos3[playerid]; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0, x4,y4,z4)) { var = autos4[playerid]; }
            //
			if(!var) return 1;
			if(Baul[var] == 1) return SendClientMessage(playerid,-1,"El baul ya esta abierto");
			GetVehicleParamsEx(var, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(var, engine, lights, alarm, doors, bonnet, 1, objective);
			Baul[var] = 1;
			AccionesRol(playerid,"abre el maletero de su vehiculo.", 20);
			return 1;
		}
		else if(strcmp(item,"ropero",true) == 0)
		{
			for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
					if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW])
					{
						if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
						{
						    if(IsPlayerInRangeOfPoint(playerid,1.5,254.2685,-41.5420,1002.0308) || IsPlayerInRangeOfPoint(playerid,5,PropInfo[p][pRoperoX],PropInfo[p][pRoperoY],PropInfo[p][pRoperoZ]))
						    {
						    	if(PropInfo[p][pRoperoAbierto] == 0)
						    	{
						    	   	PropInfo[p][pRoperoAbierto] = 1;
									AccionesRol(playerid,"abre el ropero.", 20);
									GuardarPropiedad(p);
						    	}
						    	else SendClientMessage(playerid,-1,"El ropero ya está abierto, escribe {DBED15}/cerrar ropero{FFFFFF} para cerrarlo.");
							}
					    }
					}
				}
			}
		}
		else if(strcmp(item,"casa",true) == 0)
		{
			for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
					if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
					{
						if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
						{
							if(PropInfo[p][pAbierta] == 0)
							{
							    if(PropInfo[p][pTipo] == 3)
								{
									if(!IsValidDynamicPickup(PropInfo[p][pPickup])) PropInfo[p][pPickup] = CreateDynamicPickup(1318,23,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],0);
									if(!IsValidDynamicMapIcon(PropInfo[p][pMapIcon])) PropInfo[p][pMapIcon] = CreateDynamicMapIcon(PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ], 50, 0, 0, 0, -1, 600.0);
								}
								PropInfo[p][pAbierta] = 1;
								AccionesRol(playerid,"abre la puerta de su propiedad.", 20);
								GuardarPropiedad(p);
							}
							else SendClientMessage(playerid,-1,"Esta propiedad ya está abierta, escribe {DBED15}/cerrar puerta{FFFFFF} para cerrarla.");
							return 1;
						}
					}
				}
			}
		}
		else if(strcmp(item,"puerta",true) == 0)
		{
		    for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
				if(PropInfo[p][pEnUso] == 1)
				{
					if(PLAYER_INFO[playerid][pID] == PropInfo[p][pIDPropietario])
					{
						if(GetPlayerVirtualWorld(playerid) == PropInfo[p][pVW] && GetPlayerInterior(playerid) == PropInfo[p][pInteriorID])
						{
							if(PropInfo[p][pAbierta] == 0)
							{
							    if(PropInfo[p][pTipo] == 3)
								{
									if(!IsValidDynamicPickup(PropInfo[p][pPickup])) PropInfo[p][pPickup] = CreateDynamicPickup(1318,23,PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ],0);
									if(!IsValidDynamicMapIcon(PropInfo[p][pMapIcon])) PropInfo[p][pMapIcon] = CreateDynamicMapIcon(PropInfo[p][pPosX],PropInfo[p][pPosY],PropInfo[p][pPosZ], 50, 0, 0, 0, -1, 600.0);
								}
								PropInfo[p][pAbierta] = 1;
								AccionesRol(playerid,"abre la puerta de su propiedad.", 20);
								GuardarPropiedad(p);
							}
							else SendClientMessage(playerid,-1,"Esta propiedad ya está abierta, escribe {DBED15}/cerrar puerta{FFFFFF} para cerrarla.");
							return 1;
						}
					}
				}
			}
		}
		else SendClientMessage(playerid,-1,"Comando desconocido, usa {DBED15}/ayuda {FFFFFF}para más información.");
	}
	if(sscanf(params, "s[128]", item))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, x,y,z))
		{
		    //if(PLAYER_INFO[playerid][vTraba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar cerca de tu vehiculo para {DBED15}/abrir");
		    if(bloqueado[autos[playerid]] == 1)
			{
				GetVehicleParamsEx(autos[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
				AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x, y, z);
				bloqueado[autos[playerid]] = 0;
				PLAYER_INFO[playerid][vSeguro] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está abierto.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, x2,y2,z2))
		{
		    //if(PLAYER_INFO[playerid][v2Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar cerca de tu vehiculo para {DBED15}/abrir");
			if(bloqueado[autos2[playerid]] == 1)
			{
				GetVehicleParamsEx(autos2[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos2[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
				AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x2, y2, z2);
				bloqueado[autos2[playerid]] = 0;
				PLAYER_INFO[playerid][vSeguro2] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está abierto.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, x3,y3,z3))
		{
		    //if(PLAYER_INFO[playerid][v3Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar cerca de tu vehiculo para {DBED15}/abrir");
			if(bloqueado[autos3[playerid]] == 1)
			{
				GetVehicleParamsEx(autos3[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos3[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
				AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x3, y3, z3);
				bloqueado[autos3[playerid]] = 0;
				PLAYER_INFO[playerid][vSeguro3] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está abierto.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, x4,y4,z4))
		{
		   // if(PLAYER_INFO[playerid][v4Traba] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Tienes que estar cerca de tu vehiculo para {DBED15}/abrir");
			if(bloqueado[autos4[playerid]] == 1)
			{
				GetVehicleParamsEx(autos4[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(autos4[playerid], engine, lights, alarm, 0, bonnet, boot, objective);
				AccionesRol(playerid,"destrabó las puertas de su vehiculo.", 20);
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
				PlayerPlaySound(playerid, 1145, x4, y4, z4);
				bloqueado[autos4[playerid]] = 0;
				PLAYER_INFO[playerid][vSeguro4] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Este vehiculo ya está abierto.");
				SendClientMessage(playerid,-1,"{FFFFFF}Pulsa {f21111}Espacio + Y {FFFFFF}para trabar las puertas de tu vehiculo.");
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_WHITE, "Necesitas estar al lado de un vehiculo para poder abrirlo.");
		}
	}
	return 1;
}
CMD:detener(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
    ApagarMotor(playerid);
	return 1;
}
//
CMD:kill(playerid, params[])
{
	if(Jail[playerid] == 1 || PLAYER_INFO[playerid][pTiempoJail] > 0 || PLAYER_INFO[playerid][Agonizando] > 0 || Esposando[playerid] == 2 || San[playerid] == 1) return 1;
 	SetPlayerHealthEx(playerid, 0.0);
	TiempoVida[playerid] = gettime() + 5;
	suicidio[playerid] = 1;
	return 1;
}
//
CMD:m(playerid, params[])
{
	new text[128];
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	if(SAPD(GetPlayerVehicleID(playerid)))
	{
		if(!sscanf(params, "s[128]",text))
		{
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: ¡¡ {FFFFFF}%s{3399FF} !!",NombreJugador(playerid), text);
			ProxDetector(60.0, playerid, string,COLOR_ROJO,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_ROJO);
		}
	}
	else if(HELISAPD(GetPlayerVehicleID(playerid)))
	{
		if(!sscanf(params, "s[128]",text))
		{
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: ¡¡ {FFFFFF}%s{3399FF} !!",NombreJugador(playerid), text);
			ProxDetector(60.0, playerid, string,COLOR_ROJO,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_ROJO);
		}
	}
	else if(MILI(GetPlayerVehicleID(playerid)))
	{
		if(!sscanf(params, "s[128]",text))
		{
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: ¡¡ {FFFFFF}%s{3399FF} !!",NombreJugador(playerid), text);
			ProxDetector(60.0, playerid, string,COLOR_ROJO,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_ROJO);
		}
	}
	return 1;
}
CMD:radio(playerid, params[])
{
	new item[138];
	if(PLAYER_INFO[playerid][pRadio] != 1) return SendClientMessage(playerid, -1,"Tu no tienes un radio comunicador, puedes comprar uno en un 24/7");
	if(sscanf(params, "s[138]", item)) return SendClientMessage(playerid, -1,"Escribe {FFFF04}/radio {FFFFFF}[{FFFF04}on/off{FFFFFF}]");
	{
		if(strcmp(item,	"on",true) == 0)
		{
			if(EstadoRadio[playerid] == 1) return SendClientMessage(playerid,-1,"Tu radio comunicador ya se encuentra encendido.");
			EstadoRadio[playerid] = 1;
			if(PLAYER_TEMP[playerid][@Specteando] == 0) AccionesRol(playerid,"encendió su radio comunicador.", 20);
		}
		if(strcmp(item, "off", true) == 0)
		{
			if(EstadoRadio[playerid] == 0) return SendClientMessage(playerid,-1,"Tu radio comunicador ya se encuentra apagado.");
			EstadoRadio[playerid] = 0;
			if(PLAYER_TEMP[playerid][@Specteando] == 0) AccionesRol(playerid,"apagó su radio comunicador.", 20);
		}
	}
	return 1;
}
CMD:n(playerid, params[])
{
    new texto[128],string[400];
	if(GetPlayerScore(playerid) == 0) return 1;
	if(CanalDudas[playerid] == 0) return SendClientMessage(playerid,-1,"Tienes el canal de dudas desactivado");
	if(sscanf(params,"s[128]",texto)) return SendClientMessage(playerid,-1,"Usa {009AFF}/n {FFFFFF}({009AFF}y tu pregunta{FFFFFF}) para recibir ayuda de otros jugadores.");
	if(PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, 0x3AA000FF, "No puedes usar el canal de dudas mientras estas sancionado.");
	if(PLAYER_TIMES[playerid][TiempoDuda] > 0 && RecienDuda[playerid] == 1)
	{
		if(PLAYER_TIMES[playerid][TiempoDuda] < 60) format(string,sizeof(string),"Debes esperar %d segundos para volver a utilizar el canal de dudas.",PLAYER_TIMES[playerid][TiempoDuda]);
		else if(PLAYER_TIMES[playerid][TiempoDuda] >= 60) format(string,sizeof(string),"Debes esperar %dm %ds para volver a utilizar el canal de dudas.",PLAYER_TIMES[playerid][TiempoDuda]/60, PLAYER_TIMES[playerid][TiempoDuda]%(60));
		SendClientMessage(playerid, 0xff9a00FF,string);
		return 1;
	}
	if(PLAYER_TIMES[playerid][TiempoDuda] > 0 && RecienDuda[playerid] == 0)
	{
		if(PLAYER_TIMES[playerid][TiempoDuda] < 60) format(string, sizeof(string), "No se te permite hablar por el chat de ayuda. Espera {f21111}%ds{FFFFFF} para enviar otra consulta al canal de ayuda.",PLAYER_TIMES[playerid][TiempoDuda]);
		else if(PLAYER_TIMES[playerid][TiempoDuda] >= 60) format(string, sizeof(string), "No se te permite hablar por el chat de ayuda. Espera {f21111}%dm %ds{FFFFFF} para enviar otra consulta al canal de ayuda.", PLAYER_TIMES[playerid][TiempoDuda]/60, PLAYER_TIMES[playerid][TiempoDuda]%(60));
		SendClientMessage(playerid, -1,string);
		return 1;
	}
	if(PLAYER_INFO[playerid][pAdmin] == 0)
	{
		format(string,sizeof(string),"{FFFFFF}El canal de dudas /n es Unicamente para dudas.\n\nNO USES el canal de dudas para comunicarte con tus amigos, para vender cosas o para insultar.\nEn caso de hacerlo, vas a ser sancionado con descuento de dinero.\nTambin tu cuenta puede ser baneada permanentemente.\n\n                   Quieres enviar la duda o respuesta a la duda?");
		ShowPlayerDialog(playerid, DAYUDA, DIALOG_STYLE_MSGBOX, "{009AFF}ATENCION",string,"Si","No");
		DudaTexto[playerid] = texto;
	}
	if(PLAYER_INFO[playerid][pAdmin] > 0) return EnviarDuda2(playerid, params);
	return 1;
}
CMD:hora(playerid,params[])
{
    new hour, minute, second, string[180];
	new day,month,year;
	gettime(hour,minute,second);
	getdate(day,month,year);
	format(string, sizeof(string),"{FFFFFF}Fecha y hora actual del servidor: {FFFF04}%02d/%02d/%02d %02d:%02d:%02d.", day,month,year,hour,minute,second);
	SendClientMessage(playerid,-1,string);
	return 1;
}
CMD:intentar(playerid, params[])
{
    if(PLAYER_TIMES[playerid][TiempoIntentar] > gettime())
	{
	    new tmpString[64];
	    format(tmpString, sizeof(tmpString), "El comando {FFFF04}/intentar{FFFFFF} solo se puede usar una vez por minuto. Por favor espera {FFFF04}%d {FFFFFF}segundos.", PLAYER_TIMES[playerid][TiempoIntentar] - gettime());
	    return SendClientMessage(playerid, COLOR_WHITE, tmpString);
	}
    if(!isnull(params))
	{
		new string[128];
		format(string, sizeof(string), "%s intenta %s %s", PLAYER_INFO[playerid][Nickname], params, ((random(2)) ? ("y lo logra.") : ("y no puede.")));
		if(strlen(string) < 128) ProxDetector(30.0, playerid, string,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
		PLAYER_TIMES[playerid][TiempoIntentar] = gettime() + 59;
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {FFFF04}/intentar acción{FFFFFF}, por ejemplo: {FFFF04}/intentar encestar el balón en el aro");
	return 1;
}
CMD:p(playerid, params[])
{
    if(!isnull(params))
	{
		new string[128];
		format(string, sizeof(string), "* %s (( %s ))", params, PLAYER_INFO[playerid][Nickname]);
		if(strlen(string) < 128) ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {FFFF04}/p entorno{FFFFFF}, por ejemplo: {FFFF04}/p se cae una roca por la montaña");
	return 1;
}
//
CMD:b(playerid, params[])
{
    if(GetPlayerScore(playerid) == 0) return 1;
	if(!isnull(params))
	{
		new string[128];
		format(string, sizeof(string), "%s: (( %s ))", NombreJugador(playerid), params);
		ProxDetector(15.0, playerid, string,COLORCARGO0,COLORCARGO0,COLORCARGO0,CHAT,CHAT2);
	}
	else Mensaje(playerid, COLORCARGO0, "Usa {DBED15}/b [Texto]");
	return 1;
}

//
CMD:g(playerid, params[])
{
    if(!isnull(params))
	{
	    if(GetPlayerDrunkLevel(playerid) > 5000)
		{
		    new string[128];
			format(string, sizeof(string), "%s grita alcoholizado: ¡%s!", PLAYER_INFO[playerid][Nickname], params);
			if(strlen(string) < 128) ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
			format(string, sizeof(string), "¡%s!", params);
			if(strlen(string) < 128) SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
		}
		else
		{
			new string[128];
			format(string, sizeof(string), "%s grita: ¡%s!", PLAYER_INFO[playerid][Nickname], params);
			if(strlen(string) < 128)ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
			format(string, sizeof(string), "¡%s!", params);
			if(strlen(string) < 128)SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {FFFF04}/g texto{FFFFFF}, por ejemplo: {FFFF04}/g Espérame.");
	return 1;
}
CMD:s(playerid, params[])
{
    if(!isnull(params))
	{
	    if(GetPlayerDrunkLevel(playerid) > 5000)
		{
		    new string[128];
			format(string, sizeof(string), "%s susurra alcoholizado: %s",PLAYER_INFO[playerid][Nickname], params);
			if(strlen(string) < 128) ProxDetector(5.0, playerid, string,CHAT,CHAT2,CHAT3,CHAT4,CHAT5);
		}
		else
		{
			new string[128];
			format(string, sizeof(string), "%s susurra: %s", PLAYER_INFO[playerid][Nickname], params);
			if(strlen(string) < 128) ProxDetector(5.0, playerid, string,CHAT,CHAT2,CHAT3,CHAT4,CHAT5);
        }
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {FFFF04}/s texto{FFFFFF}, por ejemplo: {FFFF04}/s ¿Dónde robamos?");
	return 1;
}
CMD:y(playerid, params[])
{
    if(!isnull(params))
	{
		new string[128];
		format(string, sizeof(string), "* %s %s", PLAYER_INFO[playerid][Nickname], params);
		if(strlen(string) < 128) ProxDetector(15.0, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Por favor escribe {FFFF04}/y texto{FFFFFF}, por ejemplo: {FFFF04}/y se rie");
	return 1;
}
CMD:alquilar(playerid,params[])
{
	if(PLAYER_INFO[playerid][pNivel] <= 3) return SendClientMessage(playerid,-1,"Necesitas nivel 4 o más para poder alquilar este salón.");
	if(strcmp(params[0],"salon",true) == 0)
	{
	    if(!IsPlayerInRangeOfPoint(playerid,5,-1250.3397,2093.7437,1246.6360)) return SendClientMessage(playerid,-1,"No estás en donde se alquila el salón.");
        if(Alquilado == true) return SendClientMessage(playerid,-1,"El salón ya se encuentra alquilado.");
        if(Boleto[playerid] == true) return SendClientMessage(playerid,-1,"Ya compraste una entrada.");
		ShowPlayerDialog(playerid,AlquilarSalon1,DIALOG_STYLE_INPUT,"Alquiler de salón","Tiempo en horas:","Siguiente","Salir");
	}
	return 1;
}
CMD:buscar(playerid, params[])
{
    if(PLAYER_INFO[playerid][pDuty] != 1) return 1;
	ShowPlayerDialog(playerid, BUSCARCOCHE, DIALOG_STYLE_LIST, "Buscar información", "Vehículo", "Siguiente", "Cancelar");
    return 1;
}
CMD:id(playerid, params[])
{
	new string[128], giveplayerid, day,month,year, hour, minute, second;
	gettime(hour,minute,second);
	getdate(day,month,year);
	if(sscanf(params, "r", giveplayerid)) return SendClientMessage(playerid, -1, "Para ver el ID de una persona, escribe /id [nombre_apellido]");
	else if (!IsPlayerConnected(giveplayerid)) SendClientMessage(playerid,COLOR_WHITE,"No se encontró ningún jugador.");
	else
	{
		new score = GetPlayerScore(giveplayerid);
		if(score == 0 || IsPlayerNPC(giveplayerid)) SendClientMessage(playerid, -1, "El jugador está conectado pero aún no ha ingresado al juego.");
		else
		{
		    if(giveplayerid == playerid)    {
			    format(string, sizeof(string), "El jugador {f21111}%s{FFFFFF} tiene el ID: {FF0000}%d {FFFFFF}(Nivel: {e77d31}%d{FFFFFF})", PLAYER_INFO[giveplayerid][Nickname], giveplayerid , PLAYER_INFO[giveplayerid][pNivel]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Detalles (Ping: %s | P: %.2f)", StringPing(playerid),NetStats_PacketLossPercent(playerid));
				SendClientMessage(playerid, -1, string);
		    }
			else if( giveplayerid != playerid)  {
				SendClientMessage(playerid,-1," ");
				format(string, sizeof(string),"{FFFFFF}Fecha y Hora Actual del Servidor: {FFFF04}%02d/%02d/%02d %02d:%02d:%02d.", day,month,year,hour,minute,second);
				SendClientMessage(playerid,-1,string);
				format(string, sizeof(string), "El jugador {f21111}%s{FFFFFF} tiene el ID: {FF0000}%d {FFFFFF}(Nivel: {e77d31}%d{FFFFFF})", PLAYER_INFO[giveplayerid][Nickname], giveplayerid , PLAYER_INFO[giveplayerid][pNivel]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Detalles (Ping: %s | P: %.2f | Cod: {f21111}#%d{FFFFFF} | Ping propio: %s)", StringPing(giveplayerid),NetStats_PacketLossPercent(giveplayerid),PLAYER_INFO[giveplayerid][pID]+245100,StringPing(playerid));
				SendClientMessage(playerid, -1, string);
			}
			if(PLAYER_INFO[playerid][pAdmin] >= 3) SendClientMessage(playerid,-1,string);
		}
	}
	return 1;
}

CMD:iniciar(playerid, params[])
{
	if(PLAYER_INFO[playerid][pDuty] == 1 && PLAYER_INFO[playerid][pFaccion] == 1)
	{
		if(PLAYER_INFO[playerid][pRango] < 3)
		{
			return SendClientMessage(playerid, -1, "Necesitas ser mayor de rango 3.");
		}
		new id;
		if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Escribe {FFFF04}/iniciar [id]");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid,-1,"No se encontró ningún jugador.");
		if(!EnAcademia(id)) return SendClientMessage(playerid, -1, "Ese jugador no se encuentra en la academia.");
		else
		{
		    SendClientMessage(playerid, -1, "Iniciaste el recorrido para ese jugador.");
		    SendClientMessage(id, -1, "Para iniciar el recorrido, ingresa al primer {FF3300}punto de control{FFFFFF} y continua a los siguientes.");
			DisablePlayerCheckpoint(id);
			SetPlayerCheckpoint(id, 635.3787,-222.2007,1276.7941, 3.0);
			EnPrueba[id] = true;
			return 1;
		}
	}
	return 1;
}
CMD:baul(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utlizar este comando estando en un vehículo");
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:x3,Float:y3,Float:z3,Float:x4,Float:y4,Float:z4,Float:x5,Float:y5,Float:z5;
	new item[25],item2[25],id,string[1024],Float:Pos[3];
	GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	if(!sscanf(params,"s[25]s[25]",item,item2))
	{
	    if(strcmp(item,	"guardar",	true) == 0)
		{
			if(PLAYER_INFO[playerid][Agonizando] == 1) return 1;
			if(VerBaul[playerid] != INVALID_PLAYER_ID && SAPD(VerBaul[playerid]) && PLAYER_INFO[playerid][pDuty] == 1) GetVehiclePos(VerBaul[playerid],x5,y5,z5);
			else if(VerBaul[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");

			GetVehiclePos(autos[VerBaul[playerid]],x,y,z);
			GetVehiclePos(autos2[VerBaul[playerid]],x2,y2,z2);
			GetVehiclePos(autos3[VerBaul[playerid]],x3,y3,z3);
			GetVehiclePos(autos4[VerBaul[playerid]],x4,y4,z4);
            new t_o, veh_c,autoid_slot,Query[256];
            
			if(IsPlayerInRangeOfPoint(playerid, 4.0,x,y,z)) { veh_c = autos[VerBaul[playerid]]; autoid_slot = 1; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x2,y2,z2)) { veh_c = autos2[VerBaul[playerid]]; autoid_slot = 2; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x3,y3,z3)) { veh_c = autos3[VerBaul[playerid]]; autoid_slot = 3; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x4,y4,z4)) { veh_c = autos4[VerBaul[playerid]]; autoid_slot = 4; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x5,y5,z5)) { veh_c = VerBaul[playerid]; }
			else return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");
			
			if(strcmp(item2,		"bidon",	true) == 0) 				t_o = 1650; //
			else if(strcmp(item2,   "objeto",   true) == 0)                 t_o = Objeto[playerid];
			else if(strcmp(item2,	"manopla",	true) == 0) 				t_o = 1;  //
			else if(strcmp(item2,	"palo-de-golf",	true) == 0) 			t_o = 2;  //
			else if(strcmp(item2,	"cuchillo",	true) == 0) 				t_o = 4;  //
			else if(strcmp(item2,	"bate-de-beisbol",	true) == 0) 		t_o = 5;  //
			else if(strcmp(item2,	"palo-de-billar",	true) == 0) 		t_o = 7;  //
			else if(strcmp(item2,	"katana",	true) == 0) 				t_o = 8;  //
			else if(strcmp(item2,	"consolador-rosa",	true) == 0) 		t_o = 10; //
			else if(strcmp(item2,	"vibrador-blanco",	true) == 0) 		t_o = 11; //
			else if(strcmp(item2,	"gran-vibrador-blanco",	true) == 0) 	t_o = 12; //
			else if(strcmp(item2,	"vibrador-plateado",	true) == 0) 	t_o = 13; //
			else if(strcmp(item2,	"ramo-de-flores",	true) == 0) 		t_o = 14; //
			else if(strcmp(item2,	"baston",	true) == 0) 				t_o = 15; //
			else if(strcmp(item2,	"camara",	true) == 0) 				t_o = 43; //
			else if(strcmp(item2,	"desert-eagle",	true) == 0) 			t_o = 24; //
			else if(strcmp(item2,	"escopeta",	true) == 0) 				t_o = 25; //
			else if(strcmp(item2,	"escopeta-de-combate",	true) == 0) 	t_o = 27; //
			else if(strcmp(item2,	"pala",	true) == 0) 					t_o = 6;  //
			else if(strcmp(item2,	"mp5",	true) == 0) 					t_o = 29; //
			else if(strcmp(item2,	"granada",	true) == 0) 				t_o = 16; //
			else if(strcmp(item2,	"9mm",	true) == 0) 					t_o = 22; //
			else if(strcmp(item2,	"9mm-silenciada",	true) == 0) 		t_o = 23; //
			else if(strcmp(item2,	"ak-47",	true) == 0) 				t_o = 30; //
			else if(strcmp(item2,	"m4",	true) == 0) 					t_o = 31; //
			else if(strcmp(item2,	"rifle",	true) == 0) 				t_o = 33; //
			else return SendClientMessage(playerid,-1,"SERVER: Unknown Command");
			
			if(Baul[veh_c] == 1)
			{
			    if(t_o == 1650 && Bidon[playerid] == 0)            		return SendClientMessage(playerid,-1,"Tu no tienes un bidón de gasolina");
				else if(t_o == Objeto[playerid] && Objeto[playerid] == 0) return SendClientMessage(playerid,-1,"No tienes ningun objeto para guardar");
				else if(t_o == 22 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(22)] != 22)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 27 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(27)] != 27)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 31 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(31)] != 31)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 33 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(33)] != 33)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 25 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(25)] != 25)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 5  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(5)] != 5)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 30 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(33)] != 30)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 23 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(23)] != 23)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 16 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(16)] != 16)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 29 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(29)] != 29)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 6  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(6)] != 6)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 24 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(24)] != 24)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 1  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(1)] != 1)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 2  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(2)] != 2)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 4  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(4)] != 4)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 5  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(5)] != 5)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 7  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(7)] != 7)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 8  && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(8)] != 8)   return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 10 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(10)] != 10) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 11 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(11)] != 11) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 12 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(12)] != 12) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 13 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(13)] != 13) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 14 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(14)] != 14) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 15 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(15)] != 15) return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
				else if(t_o == 43 && PLAYER_INFO[playerid][j_ARMAS][GetWeaponSlot(43)] != 43)  return SendClientMessage(playerid, -1, "Tu no tienes esta arma para guardar");
	            if(t_o == 1 || t_o == 4 || t_o == 8 || t_o == 24 || t_o == 25 || t_o == 27 || t_o == 29 || t_o == 16 || t_o == 22 || t_o == 23 || t_o == 30 || t_o == 31 || t_o == 33)
	            {
					if(PLAYER_INFO[playerid][pCargos] > 2 && PLAYER_INFO[playerid][pDuty] == 0)
					{
						foreach(new i : Player)
						{
							if(PLAYER_INFO[i][pDuty] == 1) {	if(IsPlayerInRangeOfPoint(i,50.0,Pos[0],Pos[1],Pos[2])) return SendClientMessage(playerid,-1,"No puedes guardar un arma si la policía te está viendo."); }
						}
					}
				}
	            new counter = 4,espacio[10];
	            if(BAUL6(veh_c)) counter = 6;
				else if(BAUL8(veh_c)) counter = 8;
				if(MOTO(veh_c)) counter = 0;
				if(PLAYER_INFO[VerBaul[playerid]][pVIP] == 1 && !MOTO(veh_c)) counter += 1;
				if(PLAYER_INFO[VerBaul[playerid]][pVIP] >= 2 && !MOTO(veh_c)) counter += 2;
				
	            for(new i = 1; i <= counter; i++)
	            {
					if(EspacioBaul[veh_c][i] == 0)
					{
						switch(i)
						{
			                case 1: espacio = "vBaul";
							case 2: espacio = "vBaul2";
							case 3: espacio = "vBaul3";
			                case 4: espacio = "vBaul4";
							case 5: espacio = "vBaul5";
							case 6: espacio = "vBaul6";
			                case 7: espacio = "vBaul7";
							case 8: espacio = "vBaul8";
							case 9: espacio = "vBaul9";
							case 10: espacio = "vBaul10";
							case 11: espacio = "vBaul11";
							case 12: espacio = "vBaul12";
			            }
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
			            if(SAPD(veh_c) && PLAYER_INFO[playerid][pDuty] == 1)
			            {
               				EspacioBaul[veh_c][i] = t_o;
		    				MensajeBaulGuardar(playerid, t_o);
							break;
			            }
					    EspacioBaul[veh_c][i] = t_o;
					    MensajeBaulGuardar(playerid,t_o);
						mysql_format(handle_db, Query, 200, "UPDATE `p_vehicles` SET `%s`='%d' WHERE `Propietario`='%d' AND `Slot` = '%d'",espacio,t_o,PLAYER_INFO[VerBaul[playerid]][pID],autoid_slot);
						mysql_tquery(handle_db, Query);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 7);
						break;
					}
				}
			}
			else SendClientMessage(playerid,-1,"El maletero está cerrado.");
			return 1;
    	}
	}
	if(!sscanf(params,"s[32]d",item,id))
	{
		if(strcmp(item,	"sacar",true) == 0)
		{
		    if(id == 0) return 1;
		    if(SAPD(VerBaul[playerid]) && PLAYER_INFO[playerid][pDuty] == 1) GetVehiclePos(VerBaul[playerid],x5,y5,z5);
		    else if(VerBaul[playerid] == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"Primero mira el {FFFF04}/maletero{FFFFFF} o si no es tuyo {FFFF04}/maletero [id o nombre del dueño].");
			GetVehiclePos(autos[VerBaul[playerid]],x,y,z);
			GetVehiclePos(autos2[VerBaul[playerid]],x2,y2,z2);
			GetVehiclePos(autos3[VerBaul[playerid]],x3,y3,z3);
			GetVehiclePos(autos4[VerBaul[playerid]],x4,y4,z4);
			
			new veh_c, auto_slot,Query[256];
			if(IsPlayerInRangeOfPoint(playerid, 4.0,x,y,z)) { veh_c = autos[VerBaul[playerid]]; auto_slot = 1; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x2,y2,z2)) { veh_c = autos2[VerBaul[playerid]]; auto_slot = 2; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x3,y3,z3)) { veh_c = autos3[VerBaul[playerid]]; auto_slot = 3; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x4,y4,z4)) { veh_c = autos4[VerBaul[playerid]]; auto_slot = 4; }
			else if(IsPlayerInRangeOfPoint(playerid, 4.0,x5,y5,z5)) { veh_c = VerBaul[playerid]; }
			else return SendClientMessage(playerid,-1,"Estás muy lejos del último maletero que revisaste.");
			
			if(Baul[veh_c] == 1&& SAPD(veh_c) && PLAYER_INFO[playerid][pDuty] == 1)
            {
                new cont;
			    if(BAUL6(veh_c)) cont = 6;
				else if(BAUL8(veh_c)) cont = 8;
				else cont = 4;
                if(id > cont) return 1;
				if(EspacioBaul[veh_c][id] == 0) return SendClientMessage(playerid,-1,"Este espacio esta vacío");
				if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Tienes un objeto en tus manos.");
				
                MensajeBaulSacar(playerid, EspacioBaul[veh_c][id]);
                EspacioBaul[veh_c][id] = 0;
                return 1;
            }
			if(auto_slot > 0)
			{
			    if(Baul[veh_c] == 1)
				{
				    new cont;
				    if(BAUL6(veh_c)) cont = 6;
					else if(BAUL8(veh_c)) cont = 8;
					else cont = 4;
					if(MOTO(veh_c)) cont = 0;
					if(PLAYER_INFO[VerBaul[playerid]][pVIP] == 1 && !MOTO(veh_c)) cont++;
					if(PLAYER_INFO[VerBaul[playerid]][pVIP] >= 2 && !MOTO(veh_c)) cont += 2;
					
					if(id > cont) return 1;
					if(EspacioBaul[veh_c][id] == 0) return SendClientMessage(playerid,-1,"Este espacio esta vacío");
					if(Objeto[playerid] > 0) return SendClientMessage(playerid,-1,"Tienes un objeto en tus manos.");

					MensajeBaulSacar(playerid,EspacioBaul[veh_c][id]);
		            EspacioBaul[veh_c][id] = 0;

					new espacio[10];
					switch(id)
					{
		                case 1:  espacio = "vBaul";                case 2:  espacio = "vBaul2";              	case 3:  espacio = "vBaul3";
		                case 4:  espacio = "vBaul4";               case 5:  espacio = "vBaul5";              	case 6:  espacio = "vBaul6";
		                case 7:  espacio = "vBaul7";               case 8:  espacio = "vBaul8";				 	case 9:  espacio = "vBaul9";
						case 10: espacio = "vBaul10";			   case 11: espacio = "vBaul11";				case 12: espacio = "vBaul12";
		            }
		            mysql_format(handle_db, Query, sizeof(Query), "UPDATE `p_vehicles` SET `%s`='0' WHERE `Propietario`='%d' AND `Slot` = '%d'",espacio,PLAYER_INFO[playerid][pID],auto_slot);
					mysql_tquery(handle_db, Query);
				}
				else SendClientMessage(playerid,-1,"El maletero está cerrado.");
			}
			return 1;
		}
	}
	else if(!sscanf(params,"d",id))
	{
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid,-1,"No puedes revisar el baúl de un jugador de nivel 3 o inferior.");
		if(PLAYER_INFO[id][pNivel] <= 3) return SendClientMessage(playerid,-1,"No puedes revisar el baúl de un jugador de nivel 3 o inferior.");
		if(PLAYER_INFO[playerid][pNivel] <= 3) return SendClientMessage(playerid,-1,"Necesitas ser nivel 4 para revisar el baul de otro jugador.");
		new Float:CPos[3],Float:CPos2[3],Float:CPos3[3],Float:CPos4[3], var;
		GetVehiclePos(autos[id], CPos[0],CPos[1],CPos[2]);
		GetVehiclePos(autos2[id], CPos2[0],CPos2[1],CPos2[2]);
		GetVehiclePos(autos3[id], CPos3[0],CPos3[1],CPos3[2]);
		GetVehiclePos(autos4[id], CPos4[0],CPos4[1],CPos4[2]);
		if(IsPlayerInRangeOfPoint(playerid, 4.0,CPos[0],CPos[1],CPos[2])) var = autos[id];
		else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos2[0],CPos2[1],CPos2[2])) var = autos2[id];
		else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos3[0],CPos3[1],CPos3[2])) var = autos3[id];
		else if(IsPlayerInRangeOfPoint(playerid,4.0,CPos4[0],CPos4[1],CPos4[2])) var = autos4[id];
		else return 1;
		if(Baul[var] == 1)
		{
		    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"No puedes utilizar este comando estando en un vehículo.");
		    AccionesRol(playerid,"comienza a revisar el interior del baúl.", 20);
			Revisado(playerid,id);
		    TimerRevisar[playerid] = 10;
		}
		else return SendClientMessage(playerid,-1,"El baul del vehículo esta cerrado.");
	}
	else
	{
	    new var,counter,contador = 1;
		GetVehiclePos(autos[playerid],x,y,z),GetVehiclePos(autos2[playerid],x2,y2,z2),GetVehiclePos(autos3[playerid],x3,y3,z3),GetVehiclePos(autos4[playerid],x4,y4,z4);
		if(IsPlayerInRangeOfPoint(playerid, 5.0,x,y,z)) var = autos[playerid];
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,x2,y2,z2)) var = autos2[playerid];
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,x3,y3,z3)) var = autos3[playerid];
		else if(IsPlayerInRangeOfPoint(playerid, 5.0,x4,y4,z4)) var = autos4[playerid];
		else if(PLAYER_INFO[playerid][pDuty] == 1)
	    {
			new Float:VPos[3];
			for(new i = 0; i < GetVehiclePoolSize(); i++)
			{
				if(SAPD(i))
				{
				    GetVehiclePos(i,VPos[0],VPos[1],VPos[2]);
					if(IsPlayerInRangeOfPoint(playerid,5.0,VPos[0],VPos[1],VPos[2]))
					{
						var = i;
						break;
					}
				}
			}
		}
		else return 1;
		
		if(BAUL6(var)) counter = 6;
		else if(BAUL8(var)) counter = 8;
		else counter = 4;
		if(MOTO(var)) counter = 0;
		counter = counter/2;
		if(Baul[var] > 0)
		{
		    if(SAPD(var) && PLAYER_INFO[playerid][pDuty] == 1)
		    {
		        VerBaul[playerid] = var;
		    	AccionesRol(playerid,"revisa el interior del baúl de la patrulla.", 20);
		    }
		    else
			{
				VerBaul[playerid] = playerid;
		    	AccionesRol(playerid,"revisa el interior de su baúl.", 20);
		    }
			SendClientMessage(playerid, -1, "{FFFF04}Maletero{FFFFFF}:");
			for(new i = 1; i <= counter; i++)
			{
			    format(string, sizeof(string), "Lugar {FFFF04}%d{FFFFFF}: %s {f21111}| Lugar {FFFF04}%d{FFFFFF}: %s",contador,GetWeaponNameEx(EspacioBaul[var][contador]),contador+1,GetWeaponNameEx(EspacioBaul[var][contador+1]));
			    SendClientMessage(playerid,-1,string);
			    contador += 2;

			}
			SendClientMessage(playerid,-1,string);
		}
	}
	return 1;
}
CMD:a(playerid, params[])
{
    new texto[128],string[128];
	if(PLAYER_INFO[playerid][pAdmin] > 0)
	{
		if(!sscanf(params,"s[128]",texto))
		{
           	format(string,128,"{34495E}[Canal Admin] {FFFFFF}%s %s(ID: %d) dice: %s", RangoAdministrativo(PLAYER_INFO[playerid][pAdmin]), PLAYER_INFO[playerid][Nickname],playerid,texto);
 			MensajeAdmin(COLOR_CHEAT, string, 1);
		}
	}
	return 1;
}
CMD:mutear(playerid,params[])
{
	new id,tiempo,string[128],razon[200],string2[128],day,month,year, hora, minuto,segundo;
	getdate(day,month,year);
	gettime(hora, minuto, segundo);
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dds[200]",id,tiempo,razon))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	    if(tiempo <= 0) return 1;
	   	if(PLAYER_TIMES[id][TiempoDuda] > 240) return SendClientMessage(playerid,-1,"Ese jugador ya esta muteado.");
		foreach(new i : Player)
		{
		    if(JugadorLogeado[i] == 1)
	    	{
		    	if(PLAYER_INFO[i][pMuteos] == 1)
				{
				    format(string, sizeof(string), "El jugador {FFB000}%s {FFFFFF}fue muteado por %s, razón: {FFB000}%s",PLAYER_INFO[id][Nickname],PLAYER_INFO[playerid][Nickname], razon);
					SendClientMessage(i,-1,string);
            	}
            }
		}
	    RecienDuda[id] = 0;
		PLAYER_TIMES[id][TiempoDuda] = tiempo*60;
		format(string2,128,"{FFFFFF}Ahora tendrás que esperar {f21111}%d minutos {FFFFFF}para volver utilizar el canal dudas.", tiempo);
		SendClientMessage(id,-1,string2);
	}
	else return SendClientMessage(playerid, -1, "Escribe {FFFF04}/mutear {FFFFFF}<PlayerID> <Tiempo> <Razón>");
	return 1;
}
CMD:desmutear(playerid,params[])
{
	new id,razon[200];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"ds[200]",id,razon))
	{
	    if(IsPlayerNPC(id)) return 1;
		foreach(new i : Player)
		{
		    if(JugadorLogeado[i] == 1)
		    {
				if(PLAYER_INFO[i][pMuteos] == 1)
				{
					SendClientMessageEx(i,-1, "El jugador {FFB000}%s {FFFFFF}fue desmuteado por %s, razón: {FFB000}%s",PLAYER_INFO[id][Nickname],PLAYER_INFO[playerid][Nickname], razon);
				}
			}
		}
		PLAYER_TIMES[id][TiempoDuda] = 0;
		RecienDuda[id] = 1;
		SendClientMessage(id,-1,"{FFFFFF}Se te quito la restricción del canal de dudas.");
	}
	else return SendClientMessage(playerid, -1, "Escribe {FFFF04}/desmutear {FFFFFF}<PlayerID> <Razón>");
	return 1;
}
CMD:log(playerid, params[])
{
	new string[70];
	format(string, 70, "%s borro el log del chat.", PLAYER_INFO[playerid][Nickname]);
	MensajeAdmin(COLOR_CHEAT, string, 1);
	LimpiarLog(150);
	return 1;
}
CMD:cc(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 2) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	for(new i = 0; i < 150 ; i++) SendClientMessageToAll(-1, "");
	new string[70];
	format(string, 151, "{f21111}%s borro log del chat.", PLAYER_INFO[playerid][Nickname]);
	MensajeAdmin(COLOR_CHEAT, string, 2);
	return 1;
}
CMD:sancionar(playerid, params[])
{
	new string[126],string2[126],day,month,year,hora,minuto,segundo;
	gettime(hora,minuto,segundo);
	getdate(day,month,year);
	new ID,ADMIN[256],tiempo;
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dds[256]", ID,tiempo,ADMIN)) return SendClientMessage(playerid, -1, "Escribe {FFFF04}/sancionar {FFFFFF}<PlayerID> <Tiempo> <Razón>");
 	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
 	if(San[ID] == 1) return SendClientMessage(playerid,COLORCARGO0,"Ese jugador ya esta sancionado.");
 	if(PLAYER_INFO[ID][pAdmin] >= PLAYER_INFO[playerid][pAdmin] && ID != playerid)
	{
		format(string, sizeof(string), "%s intentó sancionar a un administrador %s",PLAYER_INFO[playerid][Nickname], PLAYER_INFO[ID][Nickname]);
		MensajeAdmin(COLOR_CHEAT, string, 3);
		return 1;
	}
	QuitarArmas(ID);
	PLAYER_INFO[ID][pCargos] = 0;
	ActualizarRadar();
	PLAYER_INFO[ID][pTiempoCarcel] = 0;
	CeldaJugador[ID] = 0;
	SetPlayerWantedLevel(ID, PLAYER_INFO[ID][pCargos]);
	SetPlayerColor(ID,COLORCARGO0);
	SetPlayerInterior(ID, 6);
	SetPlayerVirtualWorld(ID, ID);
	PLAYER_INFO[ID][pTiempoJail] = tiempo*60;
	foreach(new i : Player)
	{
	    if(JugadorLogeado[i] == 1)
	    {
		    if(PLAYER_INFO[i][pMuteos] == 1)
			{
				format(string, sizeof(string), "El jugador {FFB000}%s {FFFFFF}fue sancionado por %s, razón: {FFB000}%s",PLAYER_INFO[ID][Nickname],PLAYER_INFO[playerid][Nickname], ADMIN);
				SendClientMessage(i,-1, string);
			}
		}
	}
	PLAYER_INFO[ID][sancionado] ++;
	format(string2,sizeof(string2),"Fuiste sancionado por un tiempo de {f21111}%d minutos", tiempo);
	SendClientMessage(ID,-1,string2);
	San[ID] = 1;
	Revivir(ID);
	mysql_format(handle_db, string, sizeof(string), "UPDATE `usuarios` SET `RazonSan`='%e' WHERE `ID`='%d'", ADMIN, PLAYER_INFO[ID][pID]);
	mysql_tquery(handle_db, string);
    NoTeleportHack(ID);
	SetPosEx(ID, -992.1902,-6656.0366,52.8119,0.0, ID, 0);
	for(new i = 1; i < MAX_REPORTS; i++)
	{
	    if(REPORT_INFO[i][r_PLAYERID] == ID)
	    {
	        REPORT_INFO[i][r_ID] = 0;
	    	REPORT_INFO[i][r_ESTADO] = 1;
	    	break;
	    }
	}
	return 1;
}
alias:sancionar("san");

CMD:spec(playerid, params[])
{
	new id, string99[128];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(sscanf(params,"u", id)) return SendClientMessage(playerid, -1, "Escribe {FFFF04}/spec {FFFFFF}<PlayerID>");
	if(GetPlayerScore(id) == 0) return SendClientMessage(playerid, -1, "El jugador que quieres spectear está conectado pero aún no ha ingresado al juego.");
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return 1;
	if(id == playerid) return 1;
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PLAYER_TEMP[playerid][@Specteando] == 0)
	{
		GetPlayerPos(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
		SpecInt[playerid] = GetPlayerInterior(playerid);
		SpecVW[playerid] = GetPlayerVirtualWorld(playerid);
	}
	PLAYER_TEMP[playerid][@Specteando] = 1;
	SpecJugador[playerid] = id;
	Specteado[id] = 1;
	TogglePlayerSpectating(playerid, true);
	if(!IsPlayerInAnyVehicle(id))
	{
	    SetPlayerInterior(playerid,GetPlayerInterior(id));
	 	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));
	    PlayerSpectatePlayer(playerid,id);
	}
	else
	{
     	SetPlayerInterior(playerid,GetPlayerInterior(id));
		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));
	    PlayerSpectateVehicle(playerid,GetPlayerVehicleID(id));
	}
	format(string99,128,"%s(ID: %d | Nivel %d) ahora es el specteador de %s(ID: %d | Nivel: %d)",PLAYER_INFO[playerid][Nickname],playerid,PLAYER_INFO[playerid][pNivel],PLAYER_INFO[id][Nickname],id,PLAYER_INFO[id][pNivel]);
	MensajeAdmin(COLOR_CHEAT,string99,5);
 	return 1;
}
CMD:specoff(playerid)
{
	if(PLAYER_TEMP[playerid][@Specteando] == 0) return 1;
	if(JugadorLogeado[playerid] == 0) return 0;
 	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	TogglePlayerSpectating(playerid, false);
	SetPlayerArmourEx(playerid, PLAYER_INFO[playerid][j_ARMOUR]);
    SetPlayerHealthEx(playerid, PLAYER_INFO[playerid][j_HEALTH]);
    NoTeleportHack(playerid);
    DarRopa(playerid);
    DarArmas(playerid);
    DarPrendas(playerid);
    SetPlayerPosEx(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
    SetPlayerInterior(playerid,SpecInt[playerid]);
    SetPlayerVirtualWorld(playerid,SpecVW[playerid]);
    PLAYER_TEMP[playerid][@Specteando] = 0;
    Specteado[SpecJugador[playerid]] = 0;
    SpecJugador[playerid] = INVALID_PLAYER_ID;
	return 1;
}
CMD:kick(playerid, params[])
{
	new string[256],ID,ADMIN[128];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "ds[128]", ID,ADMIN)) return SendClientMessage(playerid, -1, "Escribe {FFFF04}/kick {FFFFFF}<PlayerID> <Razón>");
	if(PLAYER_INFO[ID][pAdmin] >= PLAYER_INFO[playerid][pAdmin] && PLAYER_INFO[playerid][pAdmin] <= 3) return 1;
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	format(string, sizeof(string), "{FFFFFF}El jugador {FFB000}%s {FFFFFF}fue expulsado por %s, razón: {FFB000}%s",PLAYER_INFO[ID][Nickname],PLAYER_INFO[playerid][Nickname], ADMIN);
	MandarMensajeTodos(string);
 	ExpulsarJugador(ID,"Fuiste expulsado por un admin.");
	return 1;
}
CMD:rtcar(playerid,params[])
{
	new ID;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params, "i", ID))
	{
		Respawnear(ID);
	}
	else return SendClientMessage(playerid, -1,"Escribe {FFFF04}/rtcar {FFFFFF}<VehicleID");
	return 1;
}
CMD:pedidos(playerid, params[])
{
    for(new i = 0; i != MAX_LISTITEMS; i++) PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][i] = -1;
    
    new dialog[256 * 100 + 1], line_str[256], count;
	dialog = "ID\tEstado\tNombre\tPedido\n";

	for(new i = 0; i < MAX_PEDIDOS; i++)
	{
	    if(PEDIDO_INFO[i][pi_ID] != 0)
		{
		    PLAYER_TEMP[playerid][p_PLAYER_LISTITEM][count] = PEDIDO_INFO[i][pi_ID];
	        format(line_str, sizeof line_str, "%d.\t%s\t%s\t%s\n", i, (PEDIDO_INFO[i][pi_ESTADO]) ? ("{FF0000}Sin revisar") : ("{07C400}Revisado"), PEDIDO_INFO[i][pt_NAME],PEDIDO_INFO[i][pi_TEXT]);
			strcat(dialog, line_str);
			count ++;
		}
	}
	if(count == 0) return SendClientMessage(playerid,-1,"No hay pedidos de usuarios pendientes.");
	ShowPlayerDialog(playerid, MENU_PEDIDOS, DIALOG_STYLE_TABLIST_HEADERS, "Menu Pedidos", dialog, "Seleccionar", "Salir");
	return 1;
}
CMD:reportes(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 3) return 1;
	new reportdialog[4000], itemid = 0;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(REPORT_INFO[i][BeingUsed] == 1 && itemid < 100)
		{
			ListItemReportId[playerid][itemid] = i;
			itemid++;
            format(reportdialog, sizeof(reportdialog), "%s#%i (%ds) ID:%i a ID:%i | R: %s", reportdialog, i, gettime() - REPORT_INFO[i][TiempoReport], REPORT_INFO[i][ReportFrom], REPORT_INFO[i][ReportadoID], REPORT_INFO[i][Report]);
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
		}
	}
	CancelReport[playerid] = itemid;
	format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
	format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
	ShowPlayerDialog(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reportes", reportdialog, "Aceptar", "Rechazar");
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 3) return 1;
	new reportid;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_GREY, "USE: /ar [Report ID]");
	if(reportid < 0 || reportid > 1000) { SendClientMessageEx(playerid, COLOR_GREY, "ID del reporte no debe ser menor de 0 ni mayor de 1000!"); return 1; }
	if(REPORT_INFO[reportid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "  Ese ID ya fue atendido.");
	if(!IsPlayerConnected(REPORT_INFO[reportid][ReportFrom]))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "El que reportó se ha desconectado !");
		REPORT_INFO[reportid][ReportFrom] = 999;
		REPORT_INFO[reportid][BeingUsed] = 0;
		return 1;
	}
 	for(new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_INFO[i][pAdmin] > 2 && VerAdmin[i] == 1)
		{
			if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(i,0xF00000FF,"Un Administrador{FFFFFF} aceptó el reporte de {FF3300}%s{FFFFFF} (ID: %i a ID: %i, #%i).", NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], REPORT_INFO[reportid][ReportadoID], reportid);
			else SendClientMessageEx(i,0xF00000FF,"%s{FFFFFF} aceptó el reporte de {FF3300}%s{FFFFFF} (ID: %i a ID: %i, #%i).", NombreJugador(playerid), NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], REPORT_INFO[reportid][ReportadoID], reportid);
			IDReporte[playerid] = REPORT_INFO[reportid][ReportadoID];
  			format(IDReporteMensaje[playerid], 150, REPORT_INFO[reportid][Report]);
		}
	}
  	SendClientMessageEx(playerid,-1,"Usa el comando {F4FA58}/spec %d{FFFFFF} para verificar el estado del jugador reportado.", IDReporte[playerid]);
	if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{f21111}Un Administrador está viendo tu reporte.");
	else SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{f21111}Un administrador está viendo tu reporte.", NombreJugador(playerid));
	REPORT_INFO[reportid][CheckingReport] = playerid;
	REPORT_INFO[reportid][BeingUsed] = 0;
	strmid(REPORT_INFO[reportid][Report], "Ninguno", 0, 4, 4);
	return 1;
}

CMD:rr(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 3) return 1;
	new reportid;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_GREY,"USE: /rr [Report ID]");
	if(reportid < 0 || reportid > 1000) { SendClientMessageEx(playerid, COLOR_GREY, "ID del reporte no debe ser menor de 0 ni mayor de 250"); return 1; }
	if(REPORT_INFO[reportid][BeingUsed] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ese ID ya fue atendido!");
	if(!IsPlayerConnected(REPORT_INFO[reportid][ReportFrom]))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "El que reportó se ha desconectado !");
		REPORT_INFO[reportid][ReportFrom] = 999;
		REPORT_INFO[reportid][BeingUsed] = 0;
		return 1;
	}
 	for(new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_INFO[i][pAdmin] > 2 && VerAdmin[i] == 1)
		{
			if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(i,0xF00000FF,"Un Administrador{FFFFFF} rechazó el reporte de {FF3300}%s{FFFFFF} (ID:%d) (#%i).", NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], reportid);
			else SendClientMessageEx(i,0xF00000FF,"%s{FFFFFF} rechazó el reporte de {FF3300}%s{FFFFFF} (ID:%d) (#%i).", NombreJugador(playerid), NombreJugador(REPORT_INFO[reportid][ReportFrom]), REPORT_INFO[reportid][ReportFrom], reportid);
    		IDReporte[playerid] = REPORT_INFO[reportid][ReportadoID];
  			format(IDReporteMensaje[playerid], 150, REPORT_INFO[reportid][Report]);
		}
	}
	if(PLAYER_TEMP[playerid][pt_TempName]) SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{FF3300}Un Administrador ha rechazado tu reporte.");
	else SendClientMessageEx(REPORT_INFO[reportid][ReportFrom], -1,"{FF3300}Un administrador ha rechazado tu reporte.", NombreJugador(playerid));
	REPORT_INFO[reportid][ReportFrom] = 999;
	REPORT_INFO[reportid][BeingUsed] = 0;
	strmid(REPORT_INFO[reportid][Report], "Ninguno", 0, 4, 4);
	return 1;
}

CMD:limpiarreportes(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 5) return 1;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");

	
	ClearReports();
	new string[200];
	format(string,sizeof(string),"%s[%d] limpio todos los reportes.",NombreJugador(playerid),playerid);
	MensajeAdmin(COLOR_GREY, string, 3);
	return 1;
}
//
CMD:traer(playerid,params[])
{
	new Float:Pos[3],id;
    if(PLAYER_INFO[playerid][pAdmin] < 3) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1,"Escribe {009AFF}/traer {FFFFFF}<PlayerID");
	{
		if(IsPlayerConnected(id))
		{
		    if(IsPlayerNPC(id)) return 1;
		    if(IsPlayerPaused(id)) return SendClientMessage(playerid, -1,"No se puede traer este jugador a tu posición ya que se encuentra AFK");
		    if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return 1;
		    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		    {
                PLAYER_INFO[id][jPosE_x] = PLAYER_INFO[playerid][jPosE_x];
				PLAYER_INFO[id][jPosE_y] = PLAYER_INFO[playerid][jPosE_y];
				PLAYER_INFO[id][jPosE_z] = PLAYER_INFO[playerid][jPosE_z];
		    }
			GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
			SetPlayerPosEx(id, Pos[0],Pos[1],Pos[2]+1);
			SetPlayerVirtualWorld(id,GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(id,GetPlayerInterior(playerid));
            NoTeleportHack(id);
            //
           	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} %s llevó a su posición a %s.", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
			LOG_ADM(GLOBAL_ADMIN);
            //

		}
	}
	return 1;
}
CMD:ir(playerid, params[])
{
    if(PLAYER_INFO[playerid][pAdmin] < 3) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params, "d", params[0]))
	{
		if(IsPlayerConnected(params[0]))
		{
			if(PLAYER_INFO[params[0]][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
			new Float:p_x,Float:p_y,Float:p_z,vw = GetPlayerVirtualWorld(params[0]),interior = GetPlayerInterior(params[0]);
			GetPlayerPos(params[0], p_x,p_y,p_z);
            NoTeleportHack(playerid);
			SetPlayerPosEx(playerid, p_x,p_y,p_z);
			SetPlayerInterior(playerid, interior);
			SetPlayerVirtualWorld(playerid, vw);
			if(GetPlayerInterior(params[0]) > 0 || GetPlayerVirtualWorld(params[0]) > 0)
		    {
                PLAYER_INFO[playerid][jPosE_x] = PLAYER_INFO[params[0]][jPosE_x];
				PLAYER_INFO[playerid][jPosE_y] = PLAYER_INFO[params[0]][jPosE_y];
				PLAYER_INFO[playerid][jPosE_z] = PLAYER_INFO[params[0]][jPosE_z];
		    }
		    DarPrendas(playerid);
		    //
			format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} %s fue a la posición de %s .", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[params[0]][Nickname]);
			LOG_ADM(GLOBAL_ADMIN);
		    //
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Esa id es inválida.");
	}
	else return SendClientMessage(playerid, -1,"Escribe {009AFF}/ir {FFFFFF}<PlayerID>");
	return 1;
}
CMD:getcar(playerid,params[])
{
	new id,Float:Pos[3];
	if(PLAYER_INFO[playerid][pAdmin] < 4) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"d",id))
	{
	    if(!IsValidVehicle(id)) return SendClientMessage(playerid,-1,"Vehículo inválido.");
	    EnAuto[playerid] = id;
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		SetVehicleInterior(id,GetPlayerInterior(playerid));
		SetVehicleVirtualWorldEx(id,GetPlayerVirtualWorld(playerid));
		SetVehiclePosEx(id,Pos[0],Pos[1],Pos[2]);
		PutPlayerInVehicleEx(playerid, id, 0);
		MostrarVelocimetro(playerid);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[STAFF]: %s trajo el vehículo ID: %d a su posición.", PLAYER_INFO[playerid][Nickname], id);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	else return SendClientMessage(playerid, -1,"Escribe {009AFF}/getcar {FFFFFF}<VehicleID>");
	return 1;
}
CMD:gotocar(playerid, params[])
{
    new vehicleid,Float:cwx2,Float:cwy2,Float:cwz2;
    if(PLAYER_INFO[playerid][pAdmin] < 4) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
  	if(sscanf(params,"d",vehicleid)) return SendClientMessage(playerid, -1, "Utiliza {009AFF}/gotocar{FFFFFF} <vehicle_id>.");
    if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid,-1,"El 'vehicle_id' ingresado es inválido.");
	GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
	SetPlayerPosEx(playerid, cwx2, cwy2, cwz2+2);
	//
	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[STAFF]: %s fue a el vehículo ID: %d.", PLAYER_INFO[playerid][Nickname], vehicleid);
	LOG_ADM(GLOBAL_ADMIN);
	//
	return 1;
}
CMD:desvolcar(playerid, params[])
{
    new vehicleid, Float:angulo;
  	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"d",vehicleid)) return SendClientMessage(playerid, -1, "Utiliza {FFFF04}/gotocar{FFFFFF} <vehicle_id>.");
    if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid,-1,"El 'vehicle_id' ingresado es inválido.");

	GetVehicleZAngle(vehicleid, angulo);
	SetVehicleZAngle(vehicleid, angulo);
	return 1;
}
CMD:slap(playerid,params[])
{
	new szMessage[128],string[128];
	if(PLAYER_INFO[playerid][pAdmin] < 4) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new id,Float:x,Float:y,Float:z;
	if(!sscanf(params,"d",id))
	{
	    if(IsPlayerNPC(id)) return 1;
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	 	format(szMessage, sizeof(szMessage), "Jugador {f21111}%s{FFFFFF} antes del slap: {f21111}%f", PLAYER_INFO[id][Nickname], PLAYER_INFO[id][j_HEALTH]);
		SendClientMessage(playerid, -1, szMessage);
		Slapeo[playerid] = id;
		GetPlayerPos(id,x,y,z);
		SetPlayerPosEx(id,x,y,z+8);
		KillTimer(TimerSlap[playerid]);
		TimerSlap[playerid] = SetTimerEx("DarSlap",2000,false,"d",playerid);
		//
		format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF}%s uso slap con %s", PLAYER_INFO[playerid][Nickname],PLAYER_INFO[id][Nickname]);
		MensajeAdmin(-1,string, 3);
		//
	}
	else return SendClientMessage(playerid,-1,"Escribe {009AFF}/slap {FFFFFF}<PlayerID>");
	return 1;
}
CMD:ganton(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), 2210.4285,-1743.5837,13.4069);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, 2210.4285,-1743.5837,13.4069,280.9816,0,0,0);
		SetCameraBehindPlayer(playerid);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} uso el comando /ganton ", PLAYER_INFO[playerid][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:trailero(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), -242.0839,-230.9277,2.3852);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, -242.0839,-230.9277,2.3852,176.2413,0,0,0);
		SetCameraBehindPlayer(playerid);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} uso el comando /trailero ", PLAYER_INFO[playerid][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:tiendadp(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), 1216.7203,-1550.6823,13.5664);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, 1216.7203,-1550.6823,13.5664,312.3547,0,0,0);
		SetCameraBehindPlayer(playerid);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} uso el comando /tiendadp ", PLAYER_INFO[playerid][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:saem(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), -283.0258,2644.0442,63.1049);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, -283.0258,2644.0442,63.1049,356.5583,0,0,0);
		SetCameraBehindPlayer(playerid);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} uso el comando /saem ", PLAYER_INFO[playerid][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:ls(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), 1534.6351,-1609.6844,13.5446);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, 1513.4125,-1669.4844,14.0469,273.1677,0,0,0);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

CMD:sf(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if(GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),180.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), -1567.0959,711.4836,7.1929);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, -1612.7053,715.6451,13.2788,0,0,0,0);
		return 1;
	}
}
CMD:lv(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	NoTeleportHack(playerid);
	if (GetPlayerState(playerid) == 2)
	{
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),0.0000);
		SetVehiclePosEx(GetPlayerVehicleID(playerid), 1573.0610,1851.9330,10.8305);
	    SetPlayerInterior(playerid, 0);
	    SetVehicleInterior(playerid, 0);
	    SetVehiclePassengersInteriorEx(GetPlayerVehicleID(playerid), 0);
	    SetVehiclePassengersVWEx(GetPlayerVehicleID(playerid), 0);
	    return SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SetPosEx(playerid, 1592.5369,1817.5045,10.8203,0,0,0,0);
		return 1;
	}
}
CMD:fix(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "r", params[0])) return SendClientMessage(playerid, -1,"Escribe {FFFF04}/fix {FFFFFF}<PlayerID>");
	if(IsPlayerNPC(params[0])) return 1;
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	SetPosEx(params[0], 1510.2300,-1671.5197,14.0469,0, 0 ,0,0);
	SetPlayerInterior(params[0], 0);
	SetPlayerVirtualWorld(params[0], 0);
	SetCameraBehindPlayer(params[0]);
	return 1;
}
CMD:revive(playerid,params[])
{
	new id,string[128];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_INFO[playerid][pAdmin] < 4)return 0;
	if(!sscanf(params,"d",id))
	{
	    if(IsPlayerNPC(id)) return 1;
	    Revivir(id);
   		format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF}%s revivio a %s", PLAYER_INFO[playerid][Nickname],PLAYER_INFO[id][Nickname]);
		MensajeAdmin(-1,string, 3);
	}
	else return SendClientMessage(playerid, -1, "Escribe {009AFF}/revive {FFFFFF}<PlayerID>");
	return 1;
}
CMD:unbanip(playerid, params[])
{
    if(JugadorLogeado[playerid] == 0) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params, "s[128]", params[0]))
    {
        new string[150];
        format(string,sizeof(string),"unbanip %s",params[0]);
        SendRconCommand(string);
        SendRconCommand("reloadbans");
        format(string, sizeof(string), "IP desbaneada por %s (%s)", PLAYER_INFO[playerid][Nickname], params[0]);
        SendClientMessage(playerid, -1, string);
        format(string, sizeof(string), "%s[%d] desbaneó la IP: %s", PLAYER_INFO[playerid][Nickname],playerid,params[0]);
        MensajeAdmin(COLOR_CHEAT,string,3);
    }
    else return SendClientMessage(playerid, -1, "Escribe {FFFF04}/unbanip {FFFFFF}<IP>");
    return 1;
}
//
CMD:darchaleco(playerid,params[])
{
	new id,chaleco;
	if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dd",id,chaleco))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
	    if(chaleco > 100) chaleco = 100;
		SetPlayerArmourEx(id, chaleco);
		new string[128];
		format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF}%s dió %d de chaleco a %s", PLAYER_INFO[playerid][Nickname],chaleco,PLAYER_INFO[id][Nickname]);
		MensajeAdmin(-1,string, 3);
	}
	else return SendClientMessage(playerid, -1, "Escribe {009AFF}/setar {FFFFFF}<PlayerID> <Cantidad>");
	return 1;
}
//
CMD:darvida(playerid,params[])
{
	new id,vida;
	if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dd",id,vida))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
		if(vida > 100) vida = 100;
        SetPlayerHealthEx(id, vida);
		new string[128];
		format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF}%s dió %d de vida a %s", PLAYER_INFO[playerid][Nickname],vida,PLAYER_INFO[id][Nickname]);
		MensajeAdmin(-1,string, 3);
	}
	else return SendClientMessage(playerid, -1, "Escribe {009AFF}/sethp {FFFFFF}<PlayerID> <Cantidad>");
	return 1;
}

CMD:darsed(playerid,params[])
{
	new id,sed;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dd",id,sed))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(sed > 100) sed = 100;
		PLAYER_INFO[id][pSed] = sed;
		BarraSed(id);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFFF04}/darsed {FFFFFF}<PlayerID> <Cantidad>");
	return 1;
}
CMD:darhambre(playerid,params[])
{
	new id,hambre;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dd",id,hambre))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(hambre > 100) hambre = 100;
		PLAYER_INFO[id][pHambre] = hambre;
		BarraHambre(id);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFFF04}/darhambre {FFFFFF}<PlayerID> <Cantidad>");
	return 1;
}
CMD:cord(playerid,params[])
{
	new int, vw;
	static Float:pos[3];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "fffdd", pos[0], pos[1], pos[2], int, vw)) return SendClientMessage(playerid, COLOR_WHITE, "Escribe {FFFF04}/cord {FFFFFF}<Coordenada X> <Coordenada Y> <Coordenada Z> <Interior> <VirtualWorld>");
    NoTeleportHack(playerid);
	SetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
	SetPlayerInterior(playerid, int);
	SetPlayerVirtualWorld(playerid, vw);
	return 1;
}
CMD:congelar(playerid,params[])
{
	new id;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"d",id))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
		Congelar(id);
	}
	else return SendClientMessage(playerid, -1, "Escribe {f21111}/congelar {FFFFFF}<PlayerID>");
	return 1;
}
CMD:descongelar(playerid,params[])
{
	new id;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"d",id))
	{
	    if(IsPlayerNPC(id)) return 1;
	    if(PLAYER_INFO[id][pAdmin] > PLAYER_INFO[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "Error.");
		Descongelar(id);
	}
	else return SendClientMessage(playerid, -1, "Escribe {f21111}/descongelar {FFFFFF}<PlayerID>");
	return 1;
}
CMD:darskin(playerid,params[])
{
	new Query[200],id,skin;
	if(PLAYER_INFO[playerid][pAdmin] < 5) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"dd",id,skin)) return SendClientMessage(playerid, -1, "Escribe {009AFF}/darskin {FFFFFF}<PlayerID> <RopaID>");

	if(IsPlayerNPC(id)) return 1;
	PLAYER_INFO[id][pRopa] = skin;
	SetPlayerSkin(id, PLAYER_INFO[id][pRopa]);
	mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Skin`='%d' WHERE `Username`='%e'",skin,PLAYER_INFO[id][Nickname]);
	mysql_tquery(handle_db, Query);
	//
	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} %s le dió el skin ID: %d a %s .", PLAYER_INFO[playerid][Nickname],skin, PLAYER_INFO[id][Nickname]);
	LOG_ADM(GLOBAL_ADMIN);
	//
	return 1;
}
CMD:liberar(playerid, params[])
{
	new id,string[250];
	if(PLAYER_INFO[playerid][pAdmin] < 5) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"d",id))
	{
	    if(IsPlayerNPC(id)) return 1;
	    NoTeleportHack(id);
		SetPlayerInterior(id, 0);
		SetPlayerVirtualWorld(id, 0);
		PLAYER_INFO[id][pTiempoCarcel] = 0;
		PLAYER_INFO[playerid][Agonizando] = 0;
		San[id] = 0;
		Jail[id] = 0;
		CeldaJugador[id] = 0;
		PLAYER_INFO[id][pTiempoJail] = 0;
		SetPlayerPos(id, 1510.23,-1672.60,14.05);
		Revivir(id);
		format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF}%s liberó de la cárcel a %s", PLAYER_INFO[playerid][Nickname],PLAYER_INFO[id][Nickname]);
		MensajeAdmin(-1,string, 3);

	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {009AFF}/liberar {FFFFFF}<PlayerID>");
	return 1;
}
alias:liberar("unsan");

CMD:crearcasa(playerid,params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
	new precio,nivel,moneda,Float:Pos[4],query[600],interior;
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"dddd",precio,nivel,moneda,interior))
	{
	    new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
	    if(interior <= 0 || interior > 43 || interior == 39) return SendClientMessage(playerid,-1,"Ese interior es inválido.");
	    new id = CasaDesocupada();
	    if(id == -1) return SendClientMessage(playerid,-1,"No se puede crear mas propiedades.");
	    GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	    GetPlayerFacingAngle(playerid,Pos[3]);
        if(IsPlayerInRangeOfPoint(playerid,700.0,727.1412,-3320.2461,5.8700)) format(zone, sizeof(zone), "Isla Santa Carolina");
        new nopuede = 0;
        for(new i = 0; i < MAX_PROPIEDADES; i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 10.0, PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ])) nopuede = 1;
        }
        if(nopuede == 1) return SendClientMessage(playerid,-1,"No puedes crear una propiedad tan cerca de otra.");
		mysql_format(handle_db, query,sizeof(query),"INSERT INTO `propiedades` (`ID`,`Localizacion`,`PosX`,`PosY`,`PosZ`,`PosA`,`Interior`,`VW`,`Propietario`,`EnUso`) VALUES ('%d','%e','%f','%f','%f','%f','%d','%d','Nadie','1')", id, zone, Pos[0], Pos[1], Pos[2], Pos[3]+180, interior, id+1);
		mysql_tquery(handle_db,query,"","");

		PropInfo[id][pEnUso] = 1;
		DarInteriorCasa(id,interior);
		PropInfo[id][pPrecio] = precio;
		PropInfo[id][pNivel] = nivel;
		PropInfo[id][pEnVentaPor] = moneda;
		if(interior == 40) PropInfo[id][pTipo] = 2;
		else if(interior == 41) PropInfo[id][pTipo] = 3;
		else if(interior == 43) PropInfo[id][pTipo] = 4;
		else PropInfo[id][pTipo] = 1;
		PropInfo[id][pPosX] = Pos[0];
		PropInfo[id][pPosY] = Pos[1];
		PropInfo[id][pPosZ] = Pos[2];
		PropInfo[id][pPosA] = Pos[3];
		PropInfo[id][pAbierta] = 1;
		PropInfo[id][pRoperoAbierto] = 0;
		PropInfo[id][pID] = id;
		PropInfo[id][pVW] = id+1;
		format(PropInfo[id][pPropietario],40,"Nadie");
		format(PropInfo[id][pLocalizacion],80,zone);
		PropInfo[id][pInterior] = interior;
		PropInfo[id][pEnVenta] = 1;
		BorrarLabelCasa(id);
		GuardarPropiedad(id);
	    CargarPropiedad(id);
	    
		if(moneda == 0)	mysql_format(handle_db, query,sizeof(query),"Creaste la casa ID: {f21111}%d {FFFFFF}(Precio: {f21111}$%s {FFFFFF}- Interior: %d)",id,Numeros(precio),interior);
		else			mysql_format(handle_db, query,sizeof(query),"Creaste la casa ID: {f21111}%d {FFFFFF}(Precio: {f21111}%d RZ {FFFFFF}- Interior: %d).",id,precio,interior);
		SendClientMessage(playerid,-1,query);

		mysql_format(handle_db, query,sizeof(query),"Escribe {f21111}/creargaraje {FFFFFF}%d para crear el garaje. Recuerda mirar para el lado del portón.", id);
		SendClientMessage(playerid,-1,query);
	}
	else SendClientMessage(playerid,-1,"Escribe {f21111}/crearcasa {FFFFFF}<Precio> <Nivel> <Moneda> <Interior>");
	return true;
}
CMD:ircasa(playerid,params[])
{
	new id, string[150];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Usa {f21111}/ircasa [ID]");
 	if(PropInfo[id][pEnUso] == 0) return SendClientMessage(playerid,-1,"ID de casa inválido.");
 	
	format(string,sizeof(string),"Fuiste a la posición de la casa ID {f21111}%d",id);
	SendClientMessage(playerid,-1,string);
 	SetPlayerPosEx(playerid,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]);
	return true;
}

CMD:irgaraje(playerid,params[])
{
	new id, string[150];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,-1,"Usa {f21111}/irgaraje [ID]");
 	if(PropInfo[id][pEnUso] == 0) return SendClientMessage(playerid,-1,"ID de casa inválido.");
 	if(PropInfo[id][pGX] == 0) return SendClientMessage(playerid,-1,"Esa propiedad no tiene garaje.");
 	
	format(string,sizeof(string),"Fuiste a la posición del garaje de la casa ID {f21111}%d",id);
	SendClientMessage(playerid,-1,string);
 	SetPlayerPosEx(playerid,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]);
	return true;
}
CMD:centrada(playerid,params[])
{
	new casa,string[70];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "d", casa))return SendClientMessage(playerid,COLOR_GRAD2,"Escribe {f21111}/centrada {FFFFFF}<CasaID>");
	{
	    if(PropInfo[casa][pEnUso] == 1)
		{
			new Float:X,Float:Y,Float:Z,Float:A;
 			GetPlayerPos(playerid, X,Y,Z);
			GetPlayerFacingAngle(playerid,A);
			PropInfo[casa][pPosX] = X;
			PropInfo[casa][pPosY] = Y;
			PropInfo[casa][pPosZ] = Z;
			PropInfo[casa][pPosA] = A;
			BorrarLabelCasa(casa);
			GuardarPropiedad(casa);
	    	CargarPropiedad(casa);
			format(string,sizeof(string),"Editaste la entrada de la casa con id: {f21111}%d", casa);
			SendClientMessage(playerid,-1,string);
		}
	    else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
	}
	return 1;
}
CMD:editarc(playerid,params[])
{
	new id,precio,nivel,moneda,comprable,string[70];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"ddddd",id,precio,nivel,moneda,comprable))
	{
	    if(PropInfo[id][pEnUso] == 1)
		{
		    if(moneda < 0 || moneda > 1) return SendClientMessage(playerid,-1,"Esa moneda es inválida.");
		    if(comprable < 0 || comprable > 1) return SendClientMessage(playerid,-1,"Ese comprable es inválido.");
	        PropInfo[id][pPrecio] = precio;
			PropInfo[id][pNivel] = nivel;
			PropInfo[id][pEnVentaPor] = moneda;
			PropInfo[id][pEnVenta] = comprable;
			BorrarLabelCasa(id);
			GuardarPropiedad(id);
		    CargarPropiedad(id);
			format(string,sizeof(string),"Editaste el estado de la casa con id: {f21111}%d", id);
			SendClientMessage(playerid,-1,string);
		}
		else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
	}
	else SendClientMessage(playerid,-1,"Escribe {f21111}/editarc {FFFFFF}<CasaID> <Precio> <Nivel> <Moneda> <Comprable>");
	return true;
}
CMD:creargaraje(playerid,params[])
{
    if(JugadorLogeado[playerid] == 0) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"d",params[0]))
    {
		new Float:Pos[4],p = params[0],string[500];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPlayerFacingAngle(playerid,Pos[3]);
		if(PropInfo[p][pEnUso] == 1)
		{
		    if(PropInfo[p][pGX] == 0)
		    {
		        PropInfo[p][pGX] = Pos[0];
		        PropInfo[p][pGY] = Pos[1];
		        PropInfo[p][pGZ] = Pos[2];
		        PropInfo[p][pGA] = Pos[3];
		        format(string,sizeof(string),"Creaste un garaje a la casa con id: {f21111}%d",p);
				SendClientMessage(playerid,-1,string);
				format(string,sizeof(string),"UPDATE `propiedades` SET `GX`='%f',`GY`='%f',`GZ`='%f',`GA`='%f' WHERE `ID`='%d'",
				PropInfo[p][pGX],
				PropInfo[p][pGY],
				PropInfo[p][pGZ],
				PropInfo[p][pGA],
				PropInfo[p][pID]);
				mysql_tquery(handle_db,string,"","");
				BorrarLabelCasa(p);
				CargarPropiedad(p);
		    }
		    else SendClientMessage(playerid,-1,"Esa propiedad ya tiene un garage.");
		}
		else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
    }
    else SendClientMessage(playerid,-1,"Escribe {f21111}/creargaraje {FFFFFF}<CasaID>");
	return true;
}
CMD:ponerint(playerid,params[])
{
    new id,interior,string[126];
    if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dd", id,interior)) return SendClientMessage(playerid,-1,"Escribe {f21111}/ponerint {FFFFFF}<CasaID> <Interior>");
	{
 		if(PropInfo[id][pEnUso] == 1)
		{
		    DarInteriorCasa(id,interior);
		    switch(interior)
		    {
		        case 40: PropInfo[id][pTipo] = 2;
		        case 41: PropInfo[id][pTipo] = 3;
		        case 43: PropInfo[id][pTipo] = 4;
		        default: PropInfo[id][pTipo] = 1;
			}
		    PropInfo[id][pInterior] = interior;
		    BorrarLabelCasa(id);
		    CargarPropiedad(id);
			GuardarPropiedad(id);
			format(string,sizeof(string),"Cambiaste el interior de la casa (ID: {f21111}%d {FFFFFF}- Interior: %d)",id,interior);
   			SendClientMessage(playerid,-1,string);
		}
		else SendClientMessage(playerid,-1,"Esa propiedad no existe.");
	}
	return 1;
}
alias:ponerint("cint", "cinterior");

CMD:info(playerid,params[])
{
    if(JugadorLogeado[playerid] == 0) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	for(new id = 0; id < MAX_PROPIEDADES; id++)
    {
    	if(IsPlayerInRangeOfPoint(playerid,2,PropInfo[id][pPosX],PropInfo[id][pPosY],PropInfo[id][pPosZ]))
    	{
        	if(PropInfo[id][pEnUso] == 1)
        	{
       			new string[170];
       			format(string,sizeof(string),"Esta propiedad tiene la (ID {FFFF04}%d {FFFFFF}- Propietario: {FFFF04}%s{FFFFFF} - Interior: {FFFF04}%d)",id,PropInfo[id][pPropietario],PropInfo[id][pInterior]);
 				SendClientMessage(playerid,-1,string);
 				return 1;
        	}
        }
        if(IsPlayerInRangeOfPoint(playerid,4.5,PropInfo[id][pGX],PropInfo[id][pGY],PropInfo[id][pGZ]) && PropInfo[id][pGX] != 0)
		{
			if(PropInfo[id][pEnUso] == 1)
	    	{
	   			new string[170];
	   			format(string,sizeof(string),"Esta propiedad tiene la (ID {FFFF04}%d {FFFFFF}- Propietario: {FFFF04}%s{FFFFFF} - Interior: {FFFF04}%d)",id,PropInfo[id][pPropietario],PropInfo[id][pInterior]);
				SendClientMessage(playerid,-1,string);
				return 1;
	    	}
    	}
    }
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
        if(!FABRICAS_INFO[ID][f_VALID]) continue;
        if(IsPlayerInRangeOfPoint(playerid, 3.0, FABRICAS_INFO[ID][f_POS][0], FABRICAS_INFO[ID][f_POS][1], FABRICAS_INFO[ID][f_POS][2]))
		{
		    if(FABRICAS_INFO[ID][f_VENTA] == 1) SendClientMessageEx(playerid,-1,"Esta fábrica tiene la (ID {FFFF04}%d {FFFFFF}- Nombre de banda: {FFFF04}%s{FFFFFF})",ID, BandasInfo[FABRICAS_INFO[ID][f_FACCION_ID]][BNombre]);
            else SendClientMessageEx(playerid,-1,"Esta fábrica tiene la (ID {FFFF04}%d {FFFFFF}- {FFFF04}En venta{FFFFFF})", ID);
		}
	}
	return 1;
}
CMD:dararma(playerid,params[])
{
	new id,arma;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_INFO[playerid][pAdmin] < 7) return 0;
	if(!sscanf(params,"dd",id,arma))
	{
	    if(IsPlayerNPC(id)) return 1;
		DarArma(id,arma);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} le dió un %s a %s", PLAYER_INFO[playerid][Nickname],OBJETOS_INFO[arma][obj_NAME], PLAYER_INFO[id][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {009AFF}/dararma {FFFFFF}<PlayerID> <WeaponID>");
	return 1;
}
alias:dararma("givegun");

CMD:npckick(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
	if(npctoggle == 0) return SendClientMessage(playerid, -1, " Todos los NPC están desconectados.");
	for(new i, p = GetPlayerPoolSize(); i <= p; i++)
	{
		if(IsPlayerNPC(i)) Kick(i);
	}
    for(new a = 0; a <= 8; a++) UpdateDynamic3DTextLabelText(TextBot[a],COLOR_BLANCO,"");
	npctoggle = 0;
	SendClientMessage(playerid, -1, "NPCs Kickeados.");
	return 1;
}

/*CMD:npcjoin(playerid, params[])
{
	if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
	if(npctoggle == 0)
	{
		LoadNPCs();
		SendClientMessage(playerid, -1, "NPCs Cargados.");
	}
	else SendClientMessage(playerid, -1, " Todos los NPC están cargados.");
	return 1;
}*/

CMD:glob(playerid,params[])
{
	new texto[128];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params,"s[128]",texto))
	{
		new string[128];
		format(string,128,"Root Zone: %s",texto);
		SendClientMessageToAll(COLOR_MEGAPHONE,string);
		format(string, sizeof(string), "{FF5733}[Administracion]: {FFFFFF} comando /glob usado por %s ", PLAYER_INFO[playerid][Nickname]);
        MensajeAdmin(-1,string, 3);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {7401DF}/glob {FFFFFF}<Texto>");
	return 1;
}
CMD:yo(playerid,params[])
{
	new texto[128];
	if(!sscanf(params,"s[128]",texto))
	{
		new string[128];
		format(string,128,"%s %s: %s",ADMIN_RANKS[PLAYER_INFO[playerid][pAdmin]],PlayerName(playerid),texto);
		SendClientMessageToAll(COLOR_MEGAPHONE,string);
	}
	else return SendClientMessage(playerid,-1,"Escribe {ef00ff}/yo {FFFFFF}<Texto>");
	return 1;
}
CMD:fixveh(playerid, params[])
{
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "No estás en un vehículo.");
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	new string[128];
    format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF} comando /fixveh usado por %s ", PLAYER_INFO[playerid][Nickname]);
	MensajeAdmin(-1,string, 3);
	return 1;
}
CMD:shopcar(playerid, params[])
{
	new giveplayerid, modelid, color1, color2;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_INFO[playerid][pAdmin] < 7) return 0;
	if(sscanf(params, "dddd", giveplayerid, modelid, color1, color2)) return SendClientMessage(playerid, -1, "Escribe {009AFF}/shopcar {FFFFFF}<PlayerID> <Modelo> <Color Primario> <Color Secundario>");
	if(IsPlayerNPC(giveplayerid)) return 1;
	if(color1 < 0 || color1 > 255) { SendClientMessage(playerid, -1, "Numero de color no debe ser menor de 0 o mayor que 255 !"); return 1; }
	if(color2 < 0 || color2 > 255) { SendClientMessage(playerid, -1, "Numero de color 2 no debe ser menor de 0 o mayor que 255 !"); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, -1, "ID del vehiculo debe ser del 400 al 611 !"); return 1; }
	new Float:X,Float:Y,Float:Z, Float:Angle;
	GetPlayerPos(giveplayerid,X,Y,Z);
	GetPlayerFacingAngle(giveplayerid,Angle);
 	CreatePlayerVehicle(giveplayerid, modelid, X, Y, Z, Angle, color1, color2, 1, 50, playerid);
 	new string[128];
	format(string, sizeof(string), "{f21111}[Administración]: {FFFFFF} comando /shopcar usado por %s ", PLAYER_INFO[playerid][Nickname]);
	MensajeAdmin(-1,string, 3);
	return 1;
}
CMD:disarm(playerid,params[])
{
	if(!sscanf(params,"d",params[0]))
	{
	    if(IsPlayerNPC(params[0])) return 1;
		QuitarArmas(params[0]);
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Escribe {f21111}/disarm {FFFFFF}<PlayerID>");
	return 1;
}

CMD:fstat(playerid, params[])
{
	if(JugadorLogeado[playerid] == 0) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dii", params[0],params[1],params[2]))
	{
		SendClientMessage(playerid, -1, "Escribe {f21111}/fstat {FFFFFF}<Fabrica_ID> <Numero> <Valor>");
		SendClientMessage(playerid, -1, "{FE6F00}Tanques {FFFFFF}1. Tanque #1 | 2. Tanque #2 | 3. Tanque #3 | 4. Tanque #4 | 5. Tanque #5");
		SendClientMessage(playerid, -1, "{FE6F00}Tanques {FFFFFF}6. Tanque #6 | 7. Tanque #7 | 8. Tanque #8 | 9. Tanque #9");
		SendClientMessage(playerid, -1, "{FE6F00}Moledores {FFFFFF}10. Actor #1 | 11. Actor #2 | 12. Actor #3 | 13. Actor #4 | 14. Actor #5");
		SendClientMessage(playerid, -1, "{FE6F00}Almacen {FFFFFF}15. Almacen #1 | 16. Almacen #2 | 17. Almacen #3 | 18. Almacen #4 | 19. Almacen #5");
		SendClientMessage(playerid, -1, "{FE6F00}Almacen {FFFFFF}20. Almacen #6 | 21. Almacen #7 | 22. Almacen #8 | 23. Almacen #9 | 24. Almacen #10");
		return 1;
	}
	if(params[0] >= MAX_FABRICAS) return SendClientMessage(playerid,-1,"No puedes dar stats a una fábrica que no existe.");
	if(!FABRICAS_INFO[params[0]][f_VALID]) return SendClientMessage(playerid,-1,"No puedes dar stats a una fábrica que no existe.");

	switch(params[1])
	{
		case 1..9:
		{
			FABRICAS_INFO[params[0]][f_TANQUE][params[1]-1] = params[2];
			ActualizarLabelsFabrica(params[0]);
			return 1;
		}
		case 10..14:
		{
			FABRICAS_INFO[params[0]][f_PORCIENTO_COCINERO][params[1] - 10] = params[2];
			FABRICAS_INFO[params[0]][f_ESTADO_COCINERO][params[1] - 10] = 2;
			CargarActoresFabrica(params[0]);
			return 1;
		}
		case 15..24:
		{
			FABRICAS_INFO[params[0]][f_CAJAS_SLOT][params[1] - 15] = params[2];
			ActualizarAlmacenFabrica(params[0]);
			return 1;
		}
		default:
		{
			SendClientMessage(playerid, -1, "Escribe {f21111}/fstat {FFFFFF}<Fabrica_ID> <Numero> <Valor>");
			SendClientMessage(playerid, -1, "{FE6F00}Cocinas {FFFFFF}1. Tanque #1 | 2. Tanque #2 | 3. Tanque #3 | 4. Tanque #4 | 5. Tanque #5");
			SendClientMessage(playerid, -1, "{FE6F00}Cocinas {FFFFFF}6. Tanque #6 | 7. Tanque #7 | 8. Tanque #8 | 9. Tanque #9");
			SendClientMessage(playerid, -1, "{FE6F00}Moledores {FFFFFF}10. Actor #1 | 11. Actor #2 | 12. Actor #3 | 13. Actor #4 | 14. Actor #5");
			SendClientMessage(playerid, -1, "{FE6F00}Almacen {FFFFFF}15. Almacen #1 | 16. Almacen #2 | 17. Almacen #3 | 18. Almacen #4 | 19. Almacen #5");
			SendClientMessage(playerid, -1, "{FE6F00}Almacen {FFFFFF}20. Almacen #6 | 21. Almacen #7 | 22. Almacen #8 | 23. Almacen #9 | 24. Almacen #10");
			return 1;
		}
	}
	return 1;
}

CMD:dstat(playerid, params[])
{
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dii", params[0],params[1],params[2]))
	{
		SendClientMessage(playerid, -1, "Escribe {f21111}/dstat {FFFFFF}<PlayerID> <Numero> <Valor>");
		SendClientMessage(playerid, -1, "{FE6F00}Personaje {FFFFFF}1. Nivel - 2. Teléfono - 3. Reputación - 4. Sexo - 5. Trabajo - 6. Trabajo2");
		SendClientMessage(playerid, -1, "{FE6F00}Trabajos {FFFFFF}7. Fabricante - 8. Camionero - 9. Transportista - 10. Basurero 11. Mecánico - 12. Médico - 13. Ladrón - 14. Trailero");
	}
	else if(!IsPlayerConnected(params[0])) SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	else
	{
		switch(params[1])
		{
			case 1:
			{
			    SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
			    SetPlayerScore(params[0], params[2]);
			    PLAYER_INFO[params[0]][pNivel] = params[2];
				CalcularNivel(params[0]);
				SetPlayerStats(params[0]);
				Actualizar(params[0]);
			}
			case 2:
			{
                SendClientMessageEx(playerid,-1,"Le diste el número telefónico {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
				PLAYER_INFO[params[0]][pNumero] = params[2];
			}
			case 3:
			{
				SendClientMessageEx(playerid,-1, "Le diste reputación de {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
				PLAYER_INFO[params[0]][pExperiencia] = params[2];
				CalcularNivel(params[0]);
				Actualizar(params[0]);
			}
			case 4:
			{
				SendClientMessageEx(playerid,-1, "Le diste el sexo {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
				PLAYER_INFO[params[0]][pSexo] = params[2];
			}
			case 5:
			{
				SendClientMessageEx(playerid,-1, "Le diste trabajo primario de {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
				PLAYER_INFO[params[0]][pTrabajo] = params[2];
			}
			case 6:
			{
				SendClientMessageEx(playerid,-1, "Le diste trabajo secundario de {00D7EA}%d {FFFFFF}al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
				PLAYER_INFO[params[0]][pTrabajo2] = params[2];
			}
			case 7:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de fabricante de armas al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelArmero] = params[2];
			}
			case 8:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de camionero al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelCamionero] = params[2];
			}
			case 9:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de transportista al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelTransportista] = params[2];
			}
			case 10:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de basurero al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelBasurero] = params[2];
			}
			case 11:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de mecánico al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelMecanico] = params[2];
			}
			case 12:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de médico al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelMedico] = params[2];
			}
			case 13:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de ladrón al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelLadron] = params[2];
			}
			case 14:
			{
                SendClientMessageEx(playerid,-1, "Le diste nivel {00D7EA}%d {FFFFFF}de trailero al jugador %s",params[2],PLAYER_INFO[params[0]][Nickname]);
                PLAYER_INFO[params[0]][pNivelTrailero] = params[2];
			}
			default:
			{
				SendClientMessage(playerid, -1, "Escribe {f21111}/dstat {FFFFFF}<PlayerID> <Numero> <Valor>");
				SendClientMessage(playerid, -1, "{FE6F00}Personaje {FFFFFF}1. Nivel - 2. Teléfono - 3. Reputación - 4. Sexo - 5. Trabajo - 6. Trabajo2");
				SendClientMessage(playerid, -1, "{FE6F00}Trabajos {FFFFFF}7. Fabricante - 8. Camionero - 9. Transportista - 10. Basurero 11. Mecánico - 12. Médico - 13. Ladrón - 14. Trailero");
            }
		}
	}
	return 1;
}

CMD:menu(playerid,params[])
{
	new mensaje[256],string[24];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PayDayActive == true) string = "Activo";
	else string = "Inactivo";
	format(mensaje,sizeof(mensaje),"{FFFFFF}\
		- Medicamentos\n\
		- Crack\n\
		- Marihuana\n\
		- Piezas de armas\n\
		- Patines\n\
		- Dinero\n\
		- Monedas(RZ)\n\
		- Cocaina\n\
		- Heroina\n\
		- RootCoins\n\
		- Preper\n\
		- Gino\n\
		- Perico\n\
		- Pago diario (%s)\n\
		- Evento DM (%s)",string, EVENTO_DM ? ("Activo") : ("Inactivo"));

	ShowPlayerDialog(playerid, D_REGALOS, DIALOG_STYLE_LIST, "{f21111}Menu de regalos | "SERVER_COIN":RP", mensaje, "Siguiente","Cerrar");
	return 1;
}

CMD:banear(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new string[256],day,month,year,hora,minuto,segundo;
	gettime(hora,minuto,segundo);
	getdate(day,month,year);
	new ID,ADMIN[256],Query[200];
	if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "rs[256]", ID,ADMIN)) return SendClientMessage(playerid, -1,"Escribe {f21111}/banear {FFFFFF}<PlayerID> <Razon>");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PLAYER_INFO[ID][pAdmin] >= PLAYER_INFO[playerid][pAdmin] && PLAYER_INFO[ID][pAdmin] >= 3) return 1;
	if(JugadorLogeado[ID] == 0) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	if(PLAYER_INFO[playerid][BaneosD] >= 6 && PLAYER_INFO[playerid][pAdmin] != 7 && PLAYER_INFO[playerid][BaneosD2] > gettime()) return SendClientMessage(playerid,-1,"Solamente puedes banear 6 jugadores por día.");

	foreach(new i : Player)
    {
        if(JugadorLogeado[i] == 1)
	    {
			if(PLAYER_INFO[i][pMuteos] == 1)
			{
				format(string, sizeof(string), "El jugador {FFB000}%s {FFFFFF}fue baneado por %s, razon: {FFB000}%s",PLAYER_INFO[ID][Nickname],PLAYER_INFO[playerid][Nickname], ADMIN);
				SendClientMessage(i,-1, string);
			}
		}
	}
	PLAYER_INFO[ID][pAdmin] = 0;
	mysql_format(handle_db, Query, 200, "UPDATE `usuarios` SET `Baneado` = '1',`razon` = '%e',`Banpor` = '%e' WHERE `Username`='%e'", ADMIN,PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ID][Nickname]);
	mysql_tquery(handle_db, Query);

	if(PLAYER_INFO[playerid][pAdmin] > 2)
	{
		PLAYER_INFO[playerid][BaneosD] ++;
		PLAYER_INFO[playerid][BaneosD2] = gettime() + 86400;
	}

	ExpulsarJugador(ID,"Fuiste baneado por un admin.");
	return 1;
}
alias:banear("ban");

CMD:admins(playerid)
{
	new info[200];
 	SendClientMessageEx(0x00BB28FF, COLOR_WHITE, "Administradores en línea::");
  	foreach(new i : Player)
   	{
  		if(PLAYER_INFO[i][pAdmin] > 0)
  		{
	   		format(info, sizeof(info), "%s | %s - En servicio: %s",PLAYER_INFO[i][Nickname],RangoAdministrativo(PLAYER_INFO[i][pAdmin]), AdminDuty[i] == 1 ? ("Si") : ("No"));
			SendClientMessage(playerid, AdminDuty[i] == 1? 0x33AA33AA : DEFAULT_COLOR, info);
		}
	}
 	return 1;
}

CMD:duty(playerid, params[])
{
    new string[200];
    if(PLAYER_INFO[playerid][pAdmin] <= 1) return false;
    if(Verificado[playerid] == 0)
    {
    	new Estring[170];
   		format(Estring, sizeof Estring, "%s(ID: %d) fue expulsado por intentar usar comandos administrativos sin verificarse.", PLAYER_INFO[playerid][Nickname], playerid);
		MensajeAdmin(COLOR_GREY, Estring, 1);
    	return ExpulsarJugador(playerid, "Fuiste expulsado por no verificarte.");
    }
    switch(AdminDuty[playerid])
    {
        case 0:
        {
            format(string,sizeof(string),"{f21111}[Administracion] {FFFFFF}%s(ID: %d) ahora está en servicio administrativo", PLAYER_INFO[playerid][Nickname], playerid);
            MensajeAdmin(COLOR_GREY, string, 2);
            SetPlayerColor(playerid, COLOR_ADMIN);
            AdminDuty[playerid] = 1;
        }
        default:
        {
            format(string,sizeof(string),"{f21111}[Administracion] {FFFFFF}%s(ID: %d) ahora está fuera de servicio administrativo", PLAYER_INFO[playerid][Nickname], playerid);
            MensajeAdmin(COLOR_GREY, string, 2);
            SetPlayerColor(playerid, DEFAULT_COLOR);
            AdminDuty[playerid] = 0;
        }
    }
    return true;
}

CMD:dadmin(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new string[128],strong[128], ID, ADMIN;
	if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
	if(JugadorLogeado[playerid] == 0) return 0;

	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dd", ID,ADMIN)) return SendClientMessage(playerid,COLOR_GRAD2,"{f21111}[Administración]: {ff5757}Modo de uso: {0073FF}/dstaff {FFFFFF}[{0073FF}ID{FFFFFF}] {FFFFFF}[{0073FF}Cargo [1-7]{FFFFFF}]");
    {
        if(PLAYER_INFO[ID][pAdmin] == ADMIN) return SendClientMessage(playerid, COLOR_WHITE, "{0073FF}Ese jugador ya tiene ese rango en la administracion.");
        if(ADMIN < 0 || ADMIN > 7) return SendClientMessage(playerid,COLOR_GRAD2,"{f21111}[Administración]: {ff5757}Modo de uso: {0073FF}/dstaff {FFFFFF}[{0073FF}ID{FFFFFF}] {FFFFFF}[{0073FF}Cargo [1-7]{FFFFFF}]");
		switch(ADMIN)
		{
			case 0:	{ format(string, sizeof(string), " %s fue expulsado de la administracion.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te expulso de la administracion.",NombreJugador(playerid)); }
			case 1:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Helper.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Ayudante.",NombreJugador(playerid)); }
			case 2:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Moderador Dudas.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Moderador de Dudas.",NombreJugador(playerid)); }
			case 3:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Moderador Juego.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Moderador de Juego.",NombreJugador(playerid)); }
			case 4:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Moderador Global.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Moderador Global.",NombreJugador(playerid)); }
			case 5:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Administrador.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Administrador.",NombreJugador(playerid)); }
			case 6:	{ format(string, sizeof(string), " %s se le ha otorgado el rango SubDueño.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a SubDueño.",NombreJugador(playerid)); }
			case 7:	{ format(string, sizeof(string), " %s se le ha otorgado el rango Fundador.",NombreJugador(ID)); format(strong, sizeof(strong), "{f21111}%s{FFFFFF} te asigno a Dueño.",NombreJugador(playerid)); }
		}
		if(ADMIN > 0) VerAdmin[ID] = 1;
		SendClientMessage(ID, -1, strong);
		MensajeAdmin(-1, string, 2);
		PLAYER_INFO[ID][pAdmin] = ADMIN;
	}
	return 1;
}
//
//
CMD:dstaff(playerid)
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new Query[150],dialog[115 * 25 + 1], line_str[115],Conexion,admin,name[24],online,count;
    mysql_format(handle_db, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Admin` > '0'");
	mysql_query(handle_db, Query, true);
	dialog = "Nombre\tRango\tUlt. conexion\n";
 	for(new i = 0; i < cache_num_rows(); i++)
	{
	    cache_get_value_name_int(i, "ID", PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][count]);
	    cache_get_value_name(i, "Username", name);
	    cache_get_value_name_int(i, "Admin", admin);
        cache_get_value_name_int(i, "Conexion",Conexion);
        cache_get_value_name_int(i, "Online",online);
        cache_get_value_name_int(i, "TiempoOffline",Conexion);

        PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID_LEVEL][count] = admin;
		PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID_ONLINE][count] = online;

        if(online == 0) format(line_str, sizeof line_str, "%s\t%s\t%s\n", name, RangoAdministrativo(admin), FormatTimeleft(gettime() - Conexion));
        else format(line_str, sizeof line_str, "%s\t%s\t{80D465}Conectado{FFFFFF}\n", name, RangoAdministrativo(admin));
		strcat(dialog, line_str);
		count ++;
	}
	if(PLAYER_INFO[playerid][pAdmin] >= 7)
	{
		strcat(dialog, "{FF0000}Añadir miembro");
		PLAYER_TEMP[playerid][p_SELECT_ADMIN_ID][count] = -1;
	}
    else return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Aceptar", "");
	ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Opciones", "Salir");
	return 1;
}
CMD:vehiculos(playerid)
{
	new info[200];
	if(PLAYER_INFO[playerid][vModelo] > 0 || PLAYER_INFO[playerid][vModelo2] > 0 || PLAYER_INFO[playerid][vModelo3] > 0 || PLAYER_INFO[playerid][vModelo4] > 0)
	{
		format(info, sizeof(info), "Modelo\tSpawneado\n");
		if(PLAYER_INFO[playerid][vModelo] > 0)
		{
			format(info, sizeof(info), "%s {FFFFFF}%s\t%s\n", info, NombreAuto[PLAYER_INFO[playerid][vModelo]-400], autosSpawned[playerid][0] ? "{00FF00}Si" : "{FF0000}No");
		}
		else format(info, sizeof(info), "%s {FFFFFF}Vacío\t - \n", info);
		if(PLAYER_INFO[playerid][vModelo2] > 0)
		{
			format(info, sizeof(info), "%s {FFFFFF}%s\t%s\n", info, NombreAuto[PLAYER_INFO[playerid][vModelo2]-400], autosSpawned[playerid][1] ? "{00FF00}Si" : "{FF0000}No");
		}
		else format(info, sizeof(info), "%s {FFFFFF}Vacío\t - \n", info);
		if(PLAYER_INFO[playerid][vModelo3] > 0)
		{
			format(info, sizeof(info), "%s {FFFFFF}%s\t%s\n", info, NombreAuto[PLAYER_INFO[playerid][vModelo3]-400], autosSpawned[playerid][2] ? "{00FF00}Si" : "{FF0000}No");
		}
		else format(info, sizeof(info), "%s {FFFFFF}Vacío\t - \n", info);
		if(PLAYER_INFO[playerid][vModelo4] > 0)
		{
			format(info, sizeof(info), "%s {FFFFFF}%s\t%s\n", info, NombreAuto[PLAYER_INFO[playerid][vModelo4]-400], autosSpawned[playerid][3] ? "{00FF00}Si" : "{FF0000}No");
		}
		else format(info, sizeof(info), "%s {FFFFFF}Vacío\t - \n", info);
		ShowPlayerDialog(playerid, DIALOG_PLAYER_VEHICLES, DIALOG_STYLE_TABLIST_HEADERS, "Vehiculos", info, "Spawnear", "Cancelar");
	}
	else SendClientMessage(playerid, 0xFF0000FF, "No tienes vehiculos!");
	return 1;
}

CMD:dcuenta(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;

	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new Jugador[MAX_PLAYER_NAME];
	if(sscanf(params, "s[25]", Jugador)) return SendClientMessage(playerid,-1,"Escribe {FFFF04}/dcuenta {FFFFFF}<Nombre>");
	new DB_Query[128];
	mysql_format(handle_db, DB_Query,sizeof(DB_Query), "UPDATE `usuarios` SET `Bloqueado` = '0' WHERE `Username`='%s'", Jugador);
	mysql_query(handle_db, DB_Query);
	return 1;
}

CMD:ca(playerid,params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
    
    new color1,color2,precio[28],comprable,monedas,faccion,trabajo;
   	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Debes estar en un auto");
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "ddddddd", color1,color2,precio,comprable,monedas,faccion,trabajo)) return SendClientMessage(playerid,-1,"Escribe {FFFF04}/ca {FFFFFF}<Color primario> <Color secundario> <Precio> <Comprable> <Moneda> <Faccion> <Trabajo>");
    {
        new Float:X,Float:Y,Float:Z,Float:z_A,car,modelo,query[900];
        car = GetPlayerVehicleID(playerid);
        GetVehiclePos(car, X,Y,Z);
        GetVehicleZAngle(car, z_A);
        modelo = GetVehicleModel(car);
        SendClientMessage(playerid,-1,"Auto guardado");
        mysql_format(handle_db, query,sizeof(query),"INSERT INTO vehicles (propietario, modelo, precio,x,y,z,a,color1,color2,comprable,moneda,faccion,trabajo) VALUES ('Gobierno', '%d','%d','%f','%f','%f','%f','%d','%d','%d','%d','%d','%d')", modelo,precio,Float:X,Float:Y,Float:Z,Float:z_A,color1,color2,comprable,monedas,faccion,trabajo);
        mysql_tquery(handle_db, query,"","");
    }
    return 1;
}

CMD:fabricas(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
    new dialog[1000], line_str[200], count = 0;
    dialog = "ID\tZona\tNombre de la banda\n";

    for(new ID = 0; ID < MAX_FABRICAS; ID++)
    {
     	if(FABRICAS_INFO[ID][f_VALID])
     	{
            if(FABRICAS_INFO[ID][f_VENTA] == 0) format(line_str, sizeof line_str, "%d\t%s\tEn Venta\n", ID, FABRICAS_INFO[ID][f_LOCALITATION]);
	        else format(line_str, sizeof line_str, "%d\t%s\t%s\n", ID, FABRICAS_INFO[ID][f_LOCALITATION], BandasInfo[FABRICAS_INFO[ID][f_FACCION_ID]][BNombre]);
			strcat(dialog, line_str);
			count ++;
		}
	}
	if(count == 0) return SendClientMessage(playerid, -1,"No hay fabricas compradas por usuarios");
    return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Fabricas", dialog, "Aceptar", "");
}

CMD:dfabrica(playerid,params[])
{
    if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	new cantidad, f;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "dd", f,cantidad)) return SendClientMessage(playerid, -1, "Escribe {FFFF04}/dfabrica {FFFFFF}<FabricaID> <Cantidad>");
	if(f >= MAX_FABRICAS) return SendClientMessage(playerid,-1,"No puedes dar dinero a una fábrica que no existe.");
	if(!FABRICAS_INFO[f][f_VALID]) return SendClientMessage(playerid,-1,"No puedes dar dinero a una fábrica que no existe.");

	DarDineroFabrica(f, cantidad);
    return 1;
}

CMD:recargarcamello(playerid)
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
    if(JugadorLogeado[playerid] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
    CrackCamello = 15000;
	MarihuanaCamello = 15000;
	MedicamentosCamello = 15000;
	CocainaCamello = 15000;
	HeroinaCamello = 15000;
	DineroCamello = 1000000;
	SendClientMessage(playerid,-1,"Camello recargado");
	return 1;
}

CMD:infocamello(playerid)
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
    if(JugadorLogeado[playerid] == 0) return 0;
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	SendClientMessageEx(playerid, -1, "Crack %d | Marihuana %d | Medicamentos %d | Cocaina %d | Heroina %d | Dinero %d", CrackCamello, MarihuanaCamello, MedicamentosCamello,CocainaCamello,HeroinaCamello, DineroCamello);
	return 1;
}

CMD:darfaccion(playerid, params[])
{
	new string[126], ID, FACCION, RANGO;
    if(PLAYER_INFO[playerid][pAdmin] < 6) return 0;
    if(sscanf(params, "ddd", ID,FACCION,RANGO)) return SendClientMessage(playerid,-1,"Escribe {009AFF}/darfaccion {FFFFFF}<PlayerID> <BandaID> <Rango 1-8>");
    if(RANGO > 8) return SendClientMessage(playerid,-1,"No puedes asignar un rango mas alto");
    if(RANGO == 0 && FACCION != 0) return SendClientMessage(playerid,-1,"No puedes asignar el rango 0");
    if(FACCION == 0)
    {
	    format(string, sizeof(string), "{f21111}%s{FFFFFF} te sacó de la facción en la que estabas.", PLAYER_INFO[playerid][Nickname]);
	    SendClientMessage(ID,-1, string);
        if(PLAYER_INFO[ID][pFaccion] == 1)
	    {
		    SetPlayerSkin(ID, PLAYER_INFO[ID][pRopa]);
		    ClearAnimations(ID);
	    }
	    PLAYER_INFO[ID][pDuty] = 0;
	    PLAYER_INFO[ID][mDuty] = 0;
	    PLAYER_INFO[ID][pFaccion] = 0;
	    PLAYER_INFO[ID][pRango] = 0;
	    HidePlayerGangZones(ID);
	    return 1;
	}
    if(FACCION > 0)
	{
	    if(BandasInfo[FACCION][EnUso] == 0) return SendClientMessage(playerid,-1,"Error, esa banda no existe.");
		PLAYER_INFO[ID][pFaccion] = FACCION;
		PLAYER_INFO[ID][pRango] = RANGO;
	    format(string, sizeof(string), "{f21111}%s{FFFFFF} te asignó rango %s en la facción %s", PLAYER_INFO[playerid][Nickname],RangoBanda(FACCION,PLAYER_INFO[ID][pRango]),BandasInfo[FACCION][BNombre]);
        SendClientMessage(ID,-1, string);
	 }
	return 1;
}
CMD:v(playerid,params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	new modelo,id,Float:X,Float:Y,Float:Z,car,Float:angle,color1,color2;
	if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params, "dddd", modelo,id,color1,color2))
	{
		GetPlayerPos(id, X,Y,Z);
		GetPlayerFacingAngle(id,angle);
		car = CreateVehicle(modelo, X+1.0,Y,Z+2.0,angle,color1,color2,-1);
		GLOBAL_VEHICLES[car][gb_vehicle_TYPE] = 1;
		VehicleFuel[car] = 80;
		EnAuto[id] = car;
		ROBO_COCHE[car][EsRobo] = 0;
		PutPlayerInVehicleEx(id, car, 0);
	}
	else if(!sscanf(params, "ddd", modelo,color1,color2))
	{
		GetPlayerPos(playerid, X,Y,Z);
		GetPlayerFacingAngle(playerid,angle);
		car = CreateVehicle(modelo, X+1.0,Y,Z+2.0,angle,color1,color2,-1);
		GLOBAL_VEHICLES[car][gb_vehicle_TYPE] = 1;
		VehicleFuel[car] = 80;
		ROBO_COCHE[car][EsRobo] = 0;
		PutPlayerInVehicleEx(playerid, car, 0);
	}
	else return SendClientMessage(playerid, -1,"Escribe {FFFF04}/v {FFFFFF}<Modelo> <Color primario> <Color secundario>");
	return 1;
}
CMD:inactivas(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	ShowDialog(playerid, DIALOG_INACTIVOS);
	return 1;
}
alias:inactivas("inactivos");

CMD:mp(playerid,params[])
{
	new pName[50],id,msj[128];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	GetPlayerName(playerid,pName,50);
	if(sscanf(params,"ds[128]",id,msj)) return SendClientMessage(playerid, -1,"Escribe {009AFF}/mp {FFFFFF}<player_id> <texto>");
	SendClientMessageEx(id,-1,"* {DBED15}Mensaje de %s: {FFFFFF}%s",pName,msj);
	SendClientMessage(playerid,-1,"Enviaste este mensaje con exito");
	//
	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[STAFF]: %s mandó un mp: %s  a %s.", PLAYER_INFO[playerid][Nickname],msj, PLAYER_INFO[id][Nickname]);
	LOG_ADM(GLOBAL_ADMIN);
	//
	return 1;
}
//

CMD:dardinero(playerid,params[])
{
	new id,cantidad;
	if(PLAYER_TEMP[playerid][pOwnerCMD_Use] == 0) return 0;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params,"dd",id,cantidad)) return SendClientMessage(playerid, -1,"Escribe {FFFF04}/dardinero{FFFFFF} <cantidad>");

	PLAYER_INFO[id][pBanco] += cantidad;
	SendClientMessageEx(id,-1,"Recibiste una transferencia de {f21111}$%d {FFFFFF}a tu cuenta bancaria.", cantidad);
	return 1;
}
CMD:reloadfabricas(playerid)
{
    for(new ID = 1; ID < MAX_FABRICAS; ID++)
    {
        if(FABRICAS_INFO[ID][f_VALID])
        {
            GuardarFabrica(ID);
		}
	}
	CargarFabricas();
	return 1;
}

CMD:borrarauto(playerid, params[])
{
   	new ID;
    if(sscanf(params, "d", ID)) return SendClientMessage(playerid,-1,"Escribe {FFFF04}/borrarauto{ffffff} [id].");
    if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
   
    PLAYER_TEMP[playerid][pDELETE_CAR_PLAYERID] = ID;
	new vehiculo1[100],vehiculo2[100],vehiculo3[100],vehiculo4[100],mensaje[500];

	if(autos[ID] > 0) format(vehiculo1, sizeof(vehiculo1), "{F6E200}%s{FFFFFF}\t{2BD5C4}%s{FFFFFF}\t%d", NombreAuto[GetVehicleModel(autos[ID])-400], PLAYER_INFO[ID][vpatente], autos[ID]);
	else vehiculo1="Vacio";

	if(autos2[ID] > 0) format(vehiculo2, sizeof(vehiculo2), "{F6E200}%s{FFFFFF}\t{2BD5C4}%s{FFFFFF}\t%d", NombreAuto[GetVehicleModel(autos2[ID])-400], PLAYER_INFO[ID][v2patente], autos2[ID]);
	else vehiculo2="Vacio";

	if(autos3[ID] > 0) format(vehiculo3, sizeof(vehiculo3), "{F6E200}%s{FFFFFF}\t{2BD5C4}%s{FFFFFF}\t%d", NombreAuto[GetVehicleModel(autos3[ID])-400], PLAYER_INFO[ID][v3patente], autos3[ID]);
	else vehiculo3="Vacio";

	if(autos4[ID] > 0) format(vehiculo4, sizeof(vehiculo4), "{F6E200}%s{FFFFFF}\t{2BD5C4}%s{FFFFFF}\t%d", NombreAuto[GetVehicleModel(autos4[ID])-400], PLAYER_INFO[ID][v4patente], autos4[ID]);
	else vehiculo4="Vacio";

	format(mensaje, sizeof(mensaje), "{F6E200}Vehiculo\t{2BD5C4}Patente\t{999999}ID\n%s\n%s\n%s\n%s",	vehiculo1,vehiculo2,vehiculo3,vehiculo4);
	ShowPlayerDialog(playerid, MENU_BORRAR_AUTO, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehiculo que deseas borrar", mensaje, "Localizar","Cancelar");
	return 1;
}

CMD:desbug(playerid, params[])
{
	new id;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(!sscanf(params, "d", id))
	{
	    if(PLAYER_INFO[playerid][pAdmin] < 3) return 1;
	    if(sscanf(params, "r", id)) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /desbug <PlayerID>");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
		
       	SetPlayerInterior(id, 0);
		SetPlayerVirtualWorld(id, 0);
		SetCameraBehindPlayer(id);
		return SendClientMessage(playerid, COLOR_GRAD2, "¡Jugador enviado a la VW: 0 / Int: 0!");
	}
    if(PLAYER_INFO[playerid][pTiempoJail] == 0 && PLAYER_INFO[playerid][pTiempoCarcel] == 0)
	{
        SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
	    return SendClientMessage(playerid, -1, "Si aun tienes problemas, por favor usa el comando {f21111}/reportar [Tu ID] [Descripción del problema]");
    }
    else return SendClientMessage(playerid, -1, "No puedes usar este comando en prisión.");
}
//
CMD:dc(playerid, params[])
{
    new texto[50],string[128];
    if(sscanf(params,"s[50]",texto)) return SendClientMessage(playerid,-1,"Usa {2566B9}/dc [texto]");
    if(PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, -1, "No puedes hacer esto mientras estas sancionado.");
    if(BloquearDC[playerid] == 1) return SendClientMessage(playerid, -1, "estas bloqueado del /dc");
	if(PLAYER_TIMES[playerid][TiempoTW] - gettime() > 0)
    {
    	format(string, sizeof(string), "No se te permite hablar por el chat de Discord. Espera {2566B9}%s{FFFFFF} para enviar otro mensaje.", TimeConvertEx(PLAYER_TIMES[playerid][TiempoTW] - gettime()));
        SendClientMessage(playerid, -1,string);
        return 1;
    }
    if(PLAYER_INFO[playerid][pNumero] == 0) return SendClientMessage(playerid,-1,"Necesitas tener un celular para poder usar Discord.");
    new Nombre[MAX_PLAYER_NAME];
    GetPlayerName(playerid,Nombre,sizeof(Nombre));//{00C1FF}
    if(strlen(texto) > 50) return SendClientMessage(playerid,-1,"El texto debe tener maximo 50 caracteres.");
    format(string, sizeof(string), "{2566B9}[Discord]%s - {2566B9}[{FFFFFF}@%d %s{00C1FF}]:{FFFFFF} %s",(PLAYER_INFO[playerid][pVIP] == 3)?("[{666666}VIP 3{00C1FF}]"):(""),playerid, PLAYER_INFO[playerid][Nickname], params);
    foreach(new i : Player)
    {
        if(CanalDudas[i] == 1)
        {
            SendClientMessage(i,-1,string);
        }
    }
    PLAYER_TIMES[playerid][TiempoTW] = gettime() + (5);
    PlayerPlaySound(playerid,1137,0.0,0.0,0.0);
    //
   
    //
    return 1;
}
CMD:muteardc(playerid,params[])
{
	new id,tiempo,razon[200],string2[128];
	if(PLAYER_INFO[playerid][pAdmin] < 3) return 0;
	if(!sscanf(params,"dds[200]",id,tiempo,razon))
	{
	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid,COLOR_WHITE,"No se encontro ningun jugador.");
	    if(tiempo <= 3) return SendClientMessage(playerid,-1,"El tiempo minimo de muteo es de 3 minutos.");
		if(PLAYER_TIMES[id][TiempoTW] - gettime() > 240) return SendClientMessage(playerid,-1,"Ese jugador ya esta muteado.");
		PLAYER_TIMES[id][TiempoTW] = gettime() + (tiempo*60);
		format(string2,128,"No se te permite hablar en el {0B00B9}chat de Discord{FFFFFF}. Por %d minuto(s)",tiempo);
		SendClientMessage(id,-1,string2);
		new message[120];
  		format(message, sizeof(message), "El jugador {3862AB}%s {FFFFFF}fue muteado del chat de Discord por %s, razon: {7B8AFF}%s",PLAYER_INFO[id][Nickname],PLAYER_INFO[playerid][Nickname], razon);
		SendClientMessageToAll(-1,message);
	}
	else return SendClientMessage(playerid,-1,"Usa: {3862AB}/muteardc [id] [minutos] [razon]");
	return 1;
}
//
CMD:unmutead(playerid,params[])
{
	new id,razon[200];
	if(sscanf(params,"ds[200]",id,razon)) return SendClientMessage(playerid, -1, "Escribe {009AFF}/unmutead {FFFFFF}<PlayerID> <Razon>");
	if(IsPlayerNPC(id)) return 1;
	foreach(new i : Player)
	{
		if(JugadorLogeado[i] == 1)
		{
			if(PLAYER_INFO[i][pMuteos] == 1) MensajeEx(i,-1, "El jugador {FF3300}%s {FFFFFF}fue desmuteado del canal de anuncios por %s, Razon: {FF3300}%s",PLAYER_INFO[id][Nickname],PLAYER_INFO[playerid][Nickname], razon);
		}
	}
	PLAYER_TIMES[id][TiempoAnuncio] = 0;
	SendClientMessage(id,-1,"{FFFFFF}Se te quito la restriccion del canal de anuncios.");
	return 1;
}
CMD:ad(playerid, params[])
{
	new texto[80],string[128];
	if(CanalAnuncios[playerid] == 0) return SendClientMessage(playerid,-1,"Tienes desactivado el canal de anuncios /ad, para activarlo utiliza /canal anuncios");
	if(sscanf(params,"s[80]",texto)) return SendClientMessage(playerid,-1,"Usa {18DDFC}/ad anuncio");
    if(PLAYER_INFO[playerid][pTiempoJail] > 0) return SendClientMessage(playerid, 0x3AA000FF, "No puedes usar el canal de anuncios mientras estas sancionado.");
	if(BloquearAnuncio[playerid] == 1) return SendClientMessage(playerid, -1, "Estas bloqueado del /ad");
	if(PLAYER_INFO[playerid][pNumero] == 0) return SendClientMessage(playerid,-1,"Tu no tienes un telefono para hacer un anuncio.");
	if(PLAYER_TIMES[playerid][TiempoAD] - gettime() > 0)
    {
    	format(string, sizeof(string), "No se te permite hablar por el chat de Anuncios. Espera {2566B9}%s{FFFFFF} para enviar otro mensaje.", TimeConvertEx(PLAYER_TIMES[playerid][TiempoAD] - gettime()));
        SendClientMessage(playerid, -1,string);
        return 1;
    }
	if(PLAYER_TIMES[playerid][TiempoAD] - gettime() > 0)
	{
		format(string, sizeof(string), "No se te permite hablar por el chat de Anuncios. Espera {2566B9}%s{FFFFFF} para enviar otro mensaje.", TimeConvertEx(PLAYER_TIMES[playerid][TiempoAD] - gettime()));
		SendClientMessage(playerid, -1,string);
		return 1;
	}
	new Nombre[MAX_PLAYER_NAME];
	GetPlayerName(playerid,Nombre,sizeof(Nombre));
	if(strlen(texto) > 80) return SendClientMessage(playerid,-1,"El anuncio debe contener como maximo 80 cararactees.");
	if(PLAYER_INFO[playerid][pDinero] < strlen(texto)*20) return SendClientMessage(playerid,-1,"No tienes suficiente dinero para enviar un anuncio.");
	format(string, sizeof(string), "[Anuncio]: {FFFFFF}%s {FF0000}[#%d]", texto, PLAYER_INFO[playerid][pNumero]);
	for(new i=0;i<MAX_PLAYERS;i++)
	{

		if(CanalAnuncios[i] == 1)
		{

			SendClientMessage(i,0x00FAFFFF,string);
		}
	}
	new str_anuncio[260];
	format(str_anuncio, sizeof(str_anuncio), "Anuncio enviado por: {FF0000}%s{FFFFFF} | ID: {FF0000}%d", Nombre, playerid);
	MensajeAdmin(-1,str_anuncio,3);
	new str[60];
	if(PLAYER_INFO[playerid][pVIP] != 0)PLAYER_TIMES[playerid][TiempoAD] = gettime() + (1*50);
    PlayerPlaySound(playerid,1137,0.0,0.0,0.0);
	format(str, sizeof(str), "Enviaste un anuncio por {fc00ff}%d$.", strlen(texto)*40);
	SendClientMessage(playerid,-1,str);
	QuitarDinero(playerid, strlen(texto)*40);
	DudaOff[playerid] = 1;
	return 1;
}

//
CMD:payday(playerid,params[])
{
    new string[500];
    if(PayDayRZ == 1)
    {
        PayDayRZ = 0;
        format(string,128,"%s tomo el regalo de este payday.",PLAYER_INFO[playerid][Nickname]);
        SendClientMessageToAll(0x00FF00FF,string);
        AbrirRegalo(playerid);
        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
        return 1;
    }
    if(PayDayRZ == 0)
    {
        SendClientMessage(playerid, -1, "Ya alguien tomo el regalo de este payday.");
        PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
        return 1;
    }
    return 1;
}
CMD:gcuenta(playerid, params[])
{
	if(PLAYER_TIMES[playerid][TiempoGuardarC] - gettime() > 0){
		SendClientMessageEx(playerid, -1, "Tienes que esperar %s para poder guardar tu cuenta de nuevo.", TimeConvertEx(PLAYER_TIMES[playerid][TiempoGuardarC]  - gettime()));
		return 1;
	}
	if(LoggedYet[playerid] > 0) GuardarCuenta(playerid);
    SendClientMessage(playerid,-1,"La cuenta fue guardada con éxito.");
    PlayerPlaySoundEx(playerid,1052,0.0,0.0,0.0);
    PLAYER_TIMES[playerid][TiempoGuardarC] = gettime() + (60*2);
	return 1;
}
//
//============================Macros==================================//
CMD:m1(playerid, params[])
{
    if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	AccionesRol(playerid,"saca sus esposas del cinturón de su cinturón táctico.", 20);
	AccionesRol(playerid,"toma dichas esposas y se las pone al sújeto.", 20);
	return 1;
}
CMD:m2(playerid, params[])
{
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	AccionesRol(playerid,"se pone sus guantes de latex.", 20);
	AccionesRol(playerid,"procede a revisar al sujeto.", 20);
	return 1;
}
CMD:m3(playerid, params[])
{
	new patrulla = GetPlayerVehicleID(playerid);
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(SAPD(patrulla) || HELISAPD(patrulla) || MILI(patrulla))
		{
			AccionesRol(playerid,"saca un megáfono de su guantera y proceder hablar por el mismo.", 20);
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: {3399FF}¡¡ {FFFFFF}ALTO DETENGASE AHORA MISMO O ABRIREMOS FUEGO{3399FF} !!",PLAYER_INFO[playerid][Nickname]);
			ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
		}
	}
	return 1;
}
CMD:m4(playerid, params[])
{
	new string[128];
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	format(string, sizeof(string), "%s grita: ¡ALTO, DETENGASE O PROCEDERE ABRIR FUEGO!", PLAYER_INFO[playerid][Nickname]);
	if(strlen(string) < 128)ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,CHAT,CHAT2);
	format(string, sizeof(string), "¡¡ALTO, DETENGASE O PROCEDERE ABRIR FUEGO!!");
	if(strlen(string) < 128)SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
	return 1;
}
CMD:m5(playerid, params[])
{
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	AccionesRol(playerid,"toma su radio de su cinturón táctico y procede hablar por el mismo.", 20);
	return 1;
}
CMD:m6(playerid, params[])
{
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	AccionesRol(playerid,"toma al sújeto del brazo, seguidamente lo lleva hacia la patrulla", 20);
	AccionesRol(playerid,"abre la puerta de la patrulla y lo mete dentro, acto seguido cierra la puerta.", 20);
	return 1;
}
CMD:macros(playerid, params[])
{
	if(PLAYER_INFO[playerid][mDuty] != 1 && PLAYER_INFO[playerid][pDuty] != 1) return 1;
	new string[2000];
	string="{FFFFFF}¡Hola Agente de {3399FF}policía/S.A.EM!\n {FFFFFF}Estos son los {3399FF}macros{FFFFFF} puedes utilizar para llevar acabo tus roles:\n{3399FF}(/m1):{FFFFFF} Rol para esposar sújeto, {3399FF}(/m2):{FFFFFF} Rol para revisar sújeto, {3399FF}(/m3):{FFFFFF} Rol para hablar megáfono.\n {3399FF}(/m4):{FFFFFF} Rol para advertir mientras corres, {3399FF}(/m5):{FFFFFF} Rol para hablar por la radio de policía, {3399FF}(/m6):{FFFFFF} Rol para subir al sújeto a la patrulla.";
	ShowPlayerDialog(playerid, 500, DIALOG_STYLE_MSGBOX, "Macros para policías",string,"Cerrar","");
	return 1;
}
//
CMD:armamento(playerid,params[])
{
    if(PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid, -1, "Antes de agarrar armas, debes tener el uniforme puesto.");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1419.9457,-1576.6808,512.5977)) return SendClientMessage(playerid, -1,"No estás en la estantería");
    ShowPlayerDialog(playerid, DIALOG_MILI, DIALOG_STYLE_LIST, "Armas:","DK\nEscopeta Normal\nMP5\nEDC\nM4\nSniper", "Aceptar", "Cerrar");
    return 1;
}
//
CMD:chalecos(playerid,params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1420.2274,-1582.7921,512.5981)) return SendClientMessage(playerid, -1, "No estas en la estanteria.");
    else if(PLAYER_INFO[playerid][mDuty] != 1) return SendClientMessage(playerid, -1, "Antes de agarrar armas, debes tener el uniforme puesto.");

    new string[128];
	SetPlayerArmourEx(playerid, 100);
	format(string, sizeof(string), "%s %s se agachó y cogio un chaleco antibalas", RangoMilitar(playerid), PLAYER_INFO[playerid][Nickname]);
	ProxDetector(20, playerid, string, COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO,COLOR_VERDECLARO);
	return 1;
}
CMD:catalogo(playerid, params[])
{
    if(GetPlayerVirtualWorld(playerid) != 7)return 1;
    new item[32];
	if(!sscanf(params, "s[32]",item))
	{
 		if(IsPlayerInRangeOfPoint(playerid,5.0,207.6111,-100.3305,1005.2578) || IsPlayerInRangeOfPoint(playerid, 5.0, 161.5224,-83.2529,1001.8047) || IsPlayerInRangeOfPoint(playerid, 5.0, 204.3374,-159.3523,1000.5234) || IsPlayerInRangeOfPoint(playerid, 5.0, 206.3758,-8.0859,1001.2109) || IsPlayerInRangeOfPoint(playerid, 5.0, 1382.9111,-20.6444,1001.0047)|| IsPlayerInRangeOfPoint(playerid, 5.0, 207.0922,-129.1800,1003.5078))
		{
		    
			if(strcmp(item, "ropa", true) == 0)
			{
			   	ShowPlayerDialog(playerid, DIALOG_ROPA, DIALOG_STYLE_LIST, "Catalogo de ropa", "Ropa Hombre\t$1.500\nRopa Mujer\t$1.500","Aceptar", "Cancelar");
			}
			else if(strcmp(item, "prendas", true) == 0)
			{
		    	ShowModelSelectionMenu(playerid, Prendas, "Ver prendas");
			}

		}
		else SendClientMessage(playerid, -1, "No estás en el lugar adecuado.");
	    return 1;
	}
	else SendClientMessage(playerid, -1,"Escribe {DBED15}/catalogo <Nombre>\n{DBED15}ropa - prendas");
	return 1;
}
CMD:eliminarcasa(playerid,params[])
{
	new Query[200], casa, string[128];
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "d", casa)) return SendClientMessage(playerid,COLOR_GRAD2,"Uso /eliminarcasa [ID]");
	{
	    if(PropInfo[casa][pEnUso] == 1)
		{
			mysql_format(handle_db,Query,sizeof(Query),"DELETE FROM `propiedades` WHERE ID = '%d'",casa);
			mysql_tquery(handle_db,Query,"","");
			PropInfo[casa][pEnVenta] = 0;
			PropInfo[casa][pEnUso] = 0;
			BorrarLabelCasa(casa);
            format(string,128,"La casa (ID:%d) fue eliminada.",casa);
			SendClientMessage(playerid,-1,string);
			format(string, sizeof(string), "{FF5733}[Administracion]: {FFFFFF} comando /eliminarcasa usado por %s ", PLAYER_INFO[playerid][Nickname]);
            MensajeAdmin(-1,string, 3);
		}
	}
	return 1;
}
CMD:ah(playerid, params[])
{
	new string[555];
	{
	    format(string, sizeof(string),"%s{f21111}{FFFFFF} Moderador Dudas\n", string);
	    format(string, sizeof(string),"%s{f21111}{FFFFFF} Moderador Juego\n", string);
	    format(string, sizeof(string),"%s{f21111}{FFFFFF} Moderador Global\n", string);
	    format(string, sizeof(string),"%s{f21111}{FFFFFF} Administrador\n", string);
	    format(string, sizeof(string),"%s{f21111}{FFFFFF} Sub Dueño\n", string);
	 	ShowPlayerDialog(playerid, DIALOG_COMANDOS, DIALOG_STYLE_LIST, "Comandos STAFF", string, "Siguiente", "Cerrar");
  	}
  	return 1;
}
CMD:explotar(playerid, params[])
{
	if(!sscanf(params, "ddd", params[0], params[1], params[2]))
	{
		if(IsPlayerConnected(params[0]))
		{
			new Float:p_x,Float:p_y,Float:p_z;
			GetPlayerPos(params[0], p_x,p_y,p_z);
			CreateExplosion(p_x, p_y, p_z, params[1], params[2]);
			return Mensaje(playerid, COLORCARGO0, "Explotado!");
		}
		else Mensaje(playerid, COLORCARGO0, "Esa id es inválida.");
	}
	else Mensaje(playerid, COLORCARGO0, "Usa {f21111}/explotar [id] [tipo] [radio]");
	return 1;
}
CMD:jetpack(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		JetPack[playerid] = 1;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} uso el comando /jetpack", PLAYER_INFO[playerid][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:darjetpack(playerid,params[])
{
	new id;
	if(!sscanf(params,"d",id))
	{
		new cadena[50];
		format(cadena, sizeof(cadena), "%s le diste un jetpack a %s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
		Mensaje(playerid, -1, cadena);
		JetPack[id] = 1;
		SetPlayerSpecialAction(id, SPECIAL_ACTION_USEJETPACK);
		//
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} le dió Jetpack a %s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
		//
	}
	return 1;
}

CMD:quitarjetpack(playerid,params[])
{
	new id;
	if(!sscanf(params,"d",id))
	{
		new cadena[50];
		format(cadena, sizeof(cadena), "%s le quitaste el jetpack a %s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
		Mensaje(playerid, -1, cadena);
		JetPack[id] = 0;
		SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		//
		new ID;
		format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} %s le quito el Jetpack a %s", PLAYER_INFO[playerid][Nickname],PLAYER_INFO[ID][Nickname]);
		LOG_ADM(GLOBAL_ADMIN);
		//
	}
	return 1;
}
CMD:musicaadmin(playerid, Params[])
{
{
ShowPlayerDialog(playerid,NMusica,DIALOG_STYLE_INPUT,"Dialogo de música administrativa","Ingresa el link .mp3 para reproducir","Reproducir","Cancelar");
}
return 1;
}
CMD:rp(playerid, params[])
{
	new id;
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid,-1,"No puedes usar este comando en fuera de servicio administrativo");
	if(sscanf(params, "r", params[0])) return SendClientMessage(playerid, -1,"Escribe {f21111}/rp {FFFFFF}<PlayerID>");
	if(IsPlayerNPC(params[0])) return 1;
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid,0x25AB26FF,"Jugador no conectado");
	SetPosEx(params[0], 1689.7102,-2325.4473,13.5469,0, 0 ,0,0);
	SetPlayerInterior(params[0], 0);
	SetPlayerVirtualWorld(params[0], 0);
	SetCameraBehindPlayer(params[0]);
	//
	format(GLOBAL_ADMIN, sizeof(GLOBAL_ADMIN), ""CO_LOG"[Administración]{FFFFFF} %s respawneo a el  el usuario %s", PLAYER_INFO[playerid][Nickname], PLAYER_INFO[id][Nickname]);
	LOG_ADM(GLOBAL_ADMIN);
	//
	return 1;
}
CMD:comprarchal(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0,2224.5872,-1742.6190,13.5624))
	{
		ShowPlayerDialog(playerid, CHALECOS_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{f21111}RZ:RP | {f21111}Tienda de protección","Nombre\tPrecio\n {f21111} {FFFFFF}Proteccion Baja \t2,500\n {f21111} {FFFFFF}Proteccion Media\t3,500\n {f21111} {FFFFFF}Proteccion Alta\t4,500","Seleccionar", "Salir");
	}
	else SendClientMessage(playerid, -1, "No estas en el lugar correcto.");
	return 1;
}
CMD:mercadonegro(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0,1322.7557,11678.7080,294.1751))
	{
		ShowPlayerDialog(playerid, MERCADO_NEGRO, DIALOG_STYLE_TABLIST_HEADERS, "{f21111}RZ:RP | {f21111}Mercado Negro","Nombre\tPrecio\n {f21111} {FFFFFF}Pack Armas \t5,500\n {f21111} {FFFFFF}Pack Drogas\t150,000\n {f21111} {FFFFFF}Franco Tirador\t14,500","Seleccionar", "Salir");
	}
	else SendClientMessage(playerid, -1, "No estas en el lugar correcto.");
	return 1;
}
CMD:breakserver(playerid, params[])
{
  
    new passw[120];
	if(sscanf(params, "s[120]", passw)) return SendClientMessage(playerid, -1, "Escribe {DBED15}/breaksv {FFFFFF}[{DBED15}password{FFFFFF}]");
	new string[120];
	format(string, sizeof(string), "password %s",passw);
	SendRconCommand(string);
	MensajeEx(playerid, COLOR_GREY, "Nueva password de ingreso %s.", passw);
	return 1;
}
//
//======================================================================================//

//Permisos Moderador Dudas
flags:ah(CMD_MOD_DUDAS);
flags:log(CMD_MOD_DUDAS);
flags:ls(CMD_MOD_DUDAS);
flags:tiendadp(CMD_MOD_DUDAS);
flags:saem(CMD_MOD_DUDAS);
flags:ganton(CMD_MOD_DUDAS);
flags:trailero(CMD_MOD_DUDAS);
flags:sf(CMD_MOD_DUDAS);
flags:lv(CMD_MOD_DUDAS);
flags:mutear(CMD_MOD_DUDAS);
flags:muteardc(CMD_MOD_DUDAS);
flags:desmutear(CMD_MOD_DUDAS);
flags:mutead(CMD_MOD_DUDAS);
flags:unmutead(CMD_MOD_DUDAS);

//Permisos Moderador Juego
flags:mp(CMD_MOD_JUEGO);
flags:skininfo(CMD_MOD_JUEGO);
flags:sancionar(CMD_MOD_JUEGO);
flags:spec(CMD_MOD_JUEGO);
flags:specoff(CMD_MOD_JUEGO);
flags:kick(CMD_MOD_JUEGO);
flags:rtcar(CMD_MOD_JUEGO);
flags:reportes(CMD_MOD_JUEGO);
flags:limpiarreportes(CMD_MOD_JUEGO);
flags:traer(CMD_MOD_JUEGO);
flags:ir(CMD_MOD_JUEGO);
flags:getcar(CMD_MOD_JUEGO);
flags:gotocar(CMD_MOD_JUEGO);
flags:slap(CMD_MOD_JUEGO);
flags:rp(CMD_MOD_JUEGO);
flags:fix(CMD_MOD_JUEGO);
flags:revive(CMD_MOD_JUEGO);
flags:crearcasa(CMD_MOD_JUEGO);
flags:banear(CMD_MOD_JUEGO);
flags:pedidos(CMD_MOD_JUEGO);
flags:unbanip(CMD_MOD_JUEGO);
flags:setarmor(CMD_MOD_JUEGO);
flags:eliminarcasa(CMD_MOD_JUEGO);
flags:sethealth(CMD_MOD_JUEGO);
flags:darsed(CMD_MOD_JUEGO);
flags:darhambre(CMD_MOD_JUEGO);
flags:check(CMD_MOD_JUEGO);
flags:centrada(CMD_MOD_JUEGO);
flags:editar(CMD_MOD_JUEGO);
flags:cg(CMD_MOD_JUEGO);
flags:ponerint(CMD_MOD_JUEGO);
flags:ircasa(CMD_MOD_JUEGO);
flags:irgaraje(CMD_MOD_JUEGO);
flags:desvolcar(CMD_MOD_JUEGO);

//Permisos Moderador Global
flags:cambiarpass(CMD_MOD_GLOBAL);
flags:newname(CMD_MOD_GLOBAL);
flags:cord(CMD_MOD_GLOBAL);
flags:congelar(CMD_MOD_GLOBAL);
flags:descongelar(CMD_MOD_GLOBAL);
flags:setskin(CMD_MOD_GLOBAL);
flags:conteo(CMD_MOD_GLOBAL);
flags:liberar(CMD_MOD_GLOBAL);
flags:jetpack(CMD_MOD_GLOBAL);
flags:info(CMD_MOD_GLOBAL);
flags:borrarauto(CMD_MOD_GLOBAL);
flags:musicaadmin(CMD_MOD_GLOBAL);
flags:borrarcontrol(CMD_MOD_GLOBAL);
flags:gd(CMD_MOD_GLOBAL);
flags:rac(CMD_MOD_GLOBAL);
flags:explotar(CMD_MOD_GLOBAL);
flags:racall(CMD_MOD_GLOBAL);

//Permisos Administrador
flags:adminarena(CMD_ADM);
flags:inactivas(CMD_ADM);
flags:givetoy(CMD_ADM);
flags:dararma(CMD_ADM);
flags:darjetpack(CMD_ADM);
flags:quitarjetpack(CMD_ADM);
flags:glob(CMD_ADM);
flags:fixveh(CMD_ADM);
flags:shopcar(CMD_ADM);
flags:disarm(CMD_ADM);
flags:dstat(CMD_ADM);
flags:fstat(CMD_ADM);
flags:joder(CMD_ADM);
flags:infoex(CMD_ADM);
flags:reloadfabricas(CMD_ADM);

//Permisos Sub Dueño
flags:baneados(CMD_SUBDUENO);
flags:breakserver(CMD_SUBDUENO);
flags:infocamello(CMD_SUBDUENO);
flags:recargarcamello(CMD_SUBDUENO);
flags:yo(CMD_SUBDUENO);
flags:menu(CMD_SUBDUENO);


